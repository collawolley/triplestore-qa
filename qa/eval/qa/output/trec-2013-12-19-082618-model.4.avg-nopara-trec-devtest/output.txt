What country did Marco Polo come from?	CHina	3.078635245845655	Derivation(What country did Marco Polo come from?,CHina,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false),ExecutionAction(ExecTuple((r0.arg1: CHina, r0.rel_exact: is a, r1.arg1_fbid_s: 04wwh, r0.id: nell-337952, r1.rel: came back from, r0.namespace: nell, r0.arg2_exact: country, r1.conf_f: 0.917, r1.arg2: China, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marco Polo, r1.rel_exact: came back from, r1.arg2_exact: China, r1.num_extrs_i: 6, r1.id: reverb-266770965, r0.arg1_exact: CHina, r1.arg1_exact: Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, "is a", country) (Marco Polo, come from, $x))),AnswerState(CHina))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, question prefix = 'what' and answer shape = AAaaa -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.078635245845655)
What country did Marco Polo come from?	  china	2.2364123023854843	Derivation(What country did Marco Polo come from?,  china,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false),ExecutionAction(ExecTuple((r0.arg1:   china, r0.rel_exact: is a, r1.arg1_fbid_s: 04wwh, r0.id: nell-337951, r1.rel: came back from, r0.namespace: nell, r0.arg2_exact: country, r1.conf_f: 0.917, r1.arg2: China, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marco Polo, r1.rel_exact: came back from, r1.arg2_exact: China, r1.num_extrs_i: 6, r1.id: reverb-266770965, r0.arg1_exact:   china, r1.arg1_exact: Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, "is a", country) (Marco Polo, come from, $x))),AnswerState(  china))),SparseVector(minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape =   aaaa -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.2364123023854843)
What country did Marco Polo come from?	Italy(	0.8575030446280114	Derivation(What country did Marco Polo come from?,Italy(,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false),RelSynRule(come from,be both from,false,139191.0,119.0,30.0,0.5868272483348846),QueryState($x: ($x, "is a", country) (Marco Polo, be both from, $x),true)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is a", country) (Marco Polo, be both from, $x),true),ExecutionAction(ExecTuple((r0.arg1: Italy(, r0.rel_exact: is a, r0.id: nell-801287, r1.rel: were both from, r0.namespace: nell, r0.arg2_exact: country, r1.conf_f: 0.889, r1.arg2: Italy, r1.arg2_fbid_s: 03rjj, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cimabue and Marco Polo, r1.rel_exact: were both from, r1.arg2_exact: Italy, r1.num_extrs_i: 6, r1.id: reverb-363601095, r0.arg1_exact: Italy(, r1.arg1_exact: Cimabue and Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, "is a", country) (Marco Polo, be both from, $x))),AnswerState(Italy())),SparseVector(question prefix = 'what' and answer shape = Aaaaa( -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5868272483348846, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.2727272727272727, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8575030446280114)
What country did Marco Polo come from?	China	0.44631925732107214	Derivation(What country did Marco Polo come from?,China,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d05w3, r0.arg1: China, r0.rel_exact: Type, r1.arg1_fbid_s: 04wwh, r0.id: fb-48076376, r1.rel: came back from, r0.namespace: freebase, r0.arg2_exact: Countries, r1.conf_f: 0.917, r1.arg2: China, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Marco Polo, r1.rel_exact: came back from, r1.arg2_exact: China, r1.num_extrs_i: 6, r1.id: reverb-266770965, r0.arg1_exact: China, r1.arg1_exact: Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, "type", country) (Marco Polo, come from, $x))),AnswerState(China))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.44631925732107214)
What country did Marco Polo come from?	Italy	-1.7367372605016773	Derivation(What country did Marco Polo come from?,Italy,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false),RelSynRule(come from,be both from,false,139191.0,119.0,30.0,0.5868272483348846),QueryState($x: ($x, "type", country) (Marco Polo, be both from, $x),true)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "type", country) (Marco Polo, be both from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03rjj, r0.arg1: Italy, r0.rel_exact: Type, r0.id: fb-290955366, r1.rel: were both from, r0.namespace: freebase, r0.arg2_exact: Countries, r1.conf_f: 0.889, r1.arg2: Italy, r1.arg2_fbid_s: 03rjj, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cimabue and Marco Polo, r1.rel_exact: were both from, r1.arg2_exact: Italy, r1.num_extrs_i: 6, r1.id: reverb-363601095, r0.arg1_exact: Italy, r1.arg1_exact: Cimabue and Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, "type", country) (Marco Polo, be both from, $x))),AnswerState(Italy))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5868272483348846, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.2727272727272727, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7367372605016773)
What country did Marco Polo come from?	Asia?	-2.6081787479001495	Derivation(What country did Marco Polo come from?,Asia?,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "type", country) (Marco Polo, come from, $x),false),RelSynRule(type,domain,true,4.087548E7,24939.0,23499.0,0.45045262575149536),QueryState($x: (country, domain, $x) (Marco Polo, come from, $x),true)), QaStep(What country did Marco Polo come from?,QueryState($x: (country, domain, $x) (Marco Polo, come from, $x),true),ExecutionAction(ExecTuple((r0.arg1: ALL country code level, r0.rel_exact: domains within, r1.arg1_fbid_s: 04wwh, r0.id: reverb-38714180, r1.rel: came back from, r0.namespace: reverb, r0.arg2_exact: Asia?, r0.arg2_fbid_s: 0j0k, r1.conf_f: 0.752, r1.arg2: Asia, r1.arg2_fbid_s: 0j0k, r0.arg2: Asia?, r0.rel: domains within, r1.namespace: reverb, r1.arg1: Marco Polo, r0.corpora_ss: List(cw), r1.rel_exact: came back from, r0.num_extrs_i: 14, r1.arg2_exact: Asia, r1.num_extrs_i: 3, r0.conf_f: 0.616, r1.id: reverb-28822230, r0.arg1_exact: ALL country code level, r1.arg1_exact: Marco Polo, r1.corpora_ss: List(cw)),$x: (country, domain, $x) (Marco Polo, come from, $x))),AnswerState(Asia?))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.45045262575149536, minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaa? -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.6081787479001495)
What country did Marco Polo come from?	the word	-2.686422332130147	Derivation(What country did Marco Polo come from?,the word,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is a", country) (Marco Polo, come from, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (country, building, $x) (Marco Polo, come from, $x),true)), QaStep(What country did Marco Polo come from?,QueryState($x: (country, building, $x) (Marco Polo, come from, $x),true),ExecutionAction(ExecTuple((r0.arg1: a country, r0.rel_exact: was built on, r0.id: reverb-28722395, r1.rel: came from, r0.namespace: reverb, r0.arg2_exact: the word, r1.conf_f: 0.922, r1.arg2: the word, r0.arg2: the word, r0.rel: was built on, r1.namespace: reverb, r1.arg1: China tha Marco Polo, r0.corpora_ss: List(cw), r1.rel_exact: came from, r0.num_extrs_i: 4, r1.arg2_exact: the word, r1.num_extrs_i: 2, r0.conf_f: 0.813, r1.id: reverb-134902146, r0.arg1_exact: a country, r1.arg1_exact: China tha Marco Polo, r1.corpora_ss: List(cw)),$x: (country, building, $x) (Marco Polo, come from, $x))),AnswerState(the word))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.686422332130147)
What country did Marco Polo come from?	Asia	-2.740235180127482	Derivation(What country did Marco Polo come from?,Asia,Vector(QaStep(What country did Marco Polo come from?,QuestionStateImpl(What country did Marco Polo come from?,Sentence(What country did Marco Polo come from?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", country) (Marco Polo, come from, $x),false)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, "is an example of", country) (Marco Polo, come from, $x),false),RelSynRule(be an example of,be a few example of,false,2809.0,113.0,12.0,0.6817792057991028),QueryState($x: ($x, be a few example of, country) (Marco Polo, come from, $x),true)), QaStep(What country did Marco Polo come from?,QueryState($x: ($x, be a few example of, country) (Marco Polo, come from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0j0k, r0.arg1: Asia, r0.rel_exact: are just a few examples of, r1.arg1_fbid_s: 04wwh, r0.id: reverb-186858482, r1.rel: came back from, r0.namespace: reverb, r0.arg2_exact: the many countries, r1.conf_f: 0.752, r1.arg2: Asia, r1.arg2_fbid_s: 0j0k, r0.arg2: the many countries, r0.rel: are just a few examples of, r1.namespace: reverb, r1.arg1: Marco Polo, r0.corpora_ss: List(cw), r1.rel_exact: came back from, r0.num_extrs_i: 2, r1.arg2_exact: Asia, r1.num_extrs_i: 3, r0.conf_f: 0.723, r1.id: reverb-28822230, r0.arg1_exact: Asia, r1.arg1_exact: Marco Polo, r1.corpora_ss: List(cw)),$x: ($x, be a few example of, country) (Marco Polo, come from, $x))),AnswerState(Asia))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6817792057991028, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.7777777777777778, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.3076923076923077, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.740235180127482)
Who is a German philosopher?	Eugen Herrigel	2.614899030192693	Derivation(Who is a German philosopher?,Eugen Herrigel,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Eugen Herrigel, r0.rel_exact: was, r0.id: reverb-207831339, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Eugen Herrigel),$x: ($x, is, a German philosopher))),AnswerState(Eugen Herrigel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.614899030192693)
Who is a German philosopher?	Ernst Cassirer	2.084930221386923	Derivation(Who is a German philosopher?,Ernst Cassirer,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02prnr, r0.arg1: Ernst Cassirer, r0.rel_exact: was, r0.id: reverb-266442725, r0.namespace: reverb, r0.arg2_exact: a German Philosopher, r0.arg2: a German Philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.955, r0.arg1_exact: Ernst Cassirer),$x: ($x, is, a German philosopher))),AnswerState(Ernst Cassirer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Arthur Schopenhauer	2.084930221386923	Derivation(Who is a German philosopher?,Arthur Schopenhauer,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0j3v, r0.arg1: Arthur Schopenhauer, r0.rel_exact: was, r0.id: reverb-213452275, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Arthur Schopenhauer),$x: ($x, is, a German philosopher))),AnswerState(Arthur Schopenhauer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Peter Sloterdijk	2.084930221386923	Derivation(Who is a German philosopher?,Peter Sloterdijk,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03tqkv, r0.arg1: Peter Sloterdijk, r0.rel_exact: is, r0.id: reverb-248997705, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.835, r0.arg1_exact: Peter Sloterdijk),$x: ($x, is, a German philosopher))),AnswerState(Peter Sloterdijk))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Wilhelm Dilthey	2.084930221386923	Derivation(Who is a German philosopher?,Wilhelm Dilthey,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wcp1, r0.arg1: Wilhelm Dilthey, r0.rel_exact: was, r0.id: reverb-18298762, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.632, r0.arg1_exact: Wilhelm Dilthey),$x: ($x, is, a German philosopher))),AnswerState(Wilhelm Dilthey))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Friedrich Nietzsche	2.084930221386923	Derivation(Who is a German philosopher?,Friedrich Nietzsche,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wh0, r0.arg1: Friedrich Nietzsche, r0.rel_exact: was, r0.id: reverb-106661318, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.922, r0.arg1_exact: Friedrich Nietzsche),$x: ($x, is, a German philosopher))),AnswerState(Friedrich Nietzsche))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Rudolph Steiner	2.084930221386923	Derivation(Who is a German philosopher?,Rudolph Steiner,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06hwd, r0.arg1: Rudolph Steiner, r0.rel_exact: was, r0.id: reverb-211025301, r0.namespace: reverb, r0.arg2_exact: a german philosopher, r0.arg2: a german philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.978, r0.arg1_exact: Rudolph Steiner),$x: ($x, is, a German philosopher))),AnswerState(Rudolph Steiner))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	Martin Heidegger	2.084930221386923	Derivation(Who is a German philosopher?,Martin Heidegger,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 099bk, r0.arg1: Martin Heidegger, r0.rel_exact: was, r0.id: reverb-149504037, r0.namespace: reverb, r0.arg2_exact: a German Philosopher, r0.arg2: a German Philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.955, r0.arg1_exact: Martin Heidegger),$x: ($x, is, a German philosopher))),AnswerState(Martin Heidegger))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.084930221386923)
Who is a German philosopher?	KARL L?WITH	1.7898981567692231	Derivation(Who is a German philosopher?,KARL L?WITH,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: KARL L?WITH, r0.rel_exact: was, r0.id: reverb-204693830, r0.namespace: reverb, r0.arg2_exact: a german philosopher, r0.arg2: a german philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.835, r0.arg1_exact: KARL L?WITH),$x: ($x, is, a German philosopher))),AnswerState(KARL L?WITH))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = AAAA AAAA -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7898981567692231)
Who is a German philosopher?	Marx Karl Marx Karl Heinrich Marx	1.6776341266768726	Derivation(Who is a German philosopher?,Marx Karl Marx Karl Heinrich Marx,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Marx Karl Marx Karl Heinrich Marx, r0.rel_exact: was, r0.id: reverb-353883854, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.917, r0.arg1_exact: Marx Karl Marx Karl Heinrich Marx),$x: ($x, is, a German philosopher))),AnswerState(Marx Karl Marx Karl Heinrich Marx))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaa Aaaa Aaaa Aaaaa Aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6776341266768726)
Who is a German philosopher?	the Public Sphere Jurgen Habermas	1.6776341266768726	Derivation(Who is a German philosopher?,the Public Sphere Jurgen Habermas,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: the Public Sphere Jurgen Habermas, r0.rel_exact: is, r0.id: reverb-118099845, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.556, r0.arg1_exact: the Public Sphere Jurgen Habermas),$x: ($x, is, a German philosopher))),AnswerState(the Public Sphere Jurgen Habermas))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaaa Aaaaa Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6776341266768726)
Who is a German philosopher?	Karl Marx Karl Heinrich Marx	1.6776341266768726	Derivation(Who is a German philosopher?,Karl Marx Karl Heinrich Marx,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Karl Marx Karl Heinrich Marx, r0.rel_exact: was, r0.id: reverb-65366349, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.927, r0.arg1_exact: Karl Marx Karl Heinrich Marx),$x: ($x, is, a German philosopher))),AnswerState(Karl Marx Karl Heinrich Marx))),SparseVector(question prefix = 'who' and answer shape = Aaaa Aaaa Aaaa Aaaaa Aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6776341266768726)
Who is a German philosopher?	Immanuel Kant	1.6494762158668868	Derivation(Who is a German philosopher?,Immanuel Kant,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03sbs, r0.arg1: Immanuel Kant, r0.rel_exact: was, r0.id: reverb-343813807, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.835, r0.arg1_exact: Immanuel Kant),$x: ($x, is, a German philosopher))),AnswerState(Immanuel Kant))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.6494762158668868)
Who is a German philosopher?	Wilhelm Leibniz	1.6438938080090455	Derivation(Who is a German philosopher?,Wilhelm Leibniz,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Wilhelm Leibniz, r0.rel_exact: was, r0.id: reverb-353277611, r0.namespace: reverb, r0.arg2_exact: a German philosopher and mathematician, r0.arg2: a German philosopher and mathematician, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.726, r0.arg1_exact: Wilhelm Leibniz),$x: ($x, is, a German philosopher))),AnswerState(Wilhelm Leibniz))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6438938080090455)
Who is a German philosopher?	Edith Stein	1.478051957522143	Derivation(Who is a German philosopher?,Edith Stein,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bxhd, r0.arg1: Edith Stein, r0.rel_exact: was, r0.id: reverb-56565160, r0.namespace: reverb, r0.arg2_exact: a German Jewish philosopher, r0.arg2: a German Jewish philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.589, r0.arg1_exact: Edith Stein),$x: ($x, is, a German philosopher))),AnswerState(Edith Stein))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.478051957522143)
Who is a German philosopher?	Professor Arnold Ehret	1.409784262348652	Derivation(Who is a German philosopher?,Professor Arnold Ehret,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Professor Arnold Ehret, r0.rel_exact: was, r0.id: reverb-310649719, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.978, r0.arg1_exact: Professor Arnold Ehret),$x: ($x, is, a German philosopher))),AnswerState(Professor Arnold Ehret))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.409784262348652)
Who is a German philosopher?	Karl Marx	1.1476653178711025	Derivation(Who is a German philosopher?,Karl Marx,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 048cl, r0.arg1: Karl Marx, r0.rel_exact: was, r0.id: reverb-390429925, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.978, r0.arg1_exact: Karl Marx),$x: ($x, is, a German philosopher))),AnswerState(Karl Marx))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1476653178711025)
Who is a German philosopher?	Georg Wilhelm Friedrich Hegel	1.1476653178711025	Derivation(Who is a German philosopher?,Georg Wilhelm Friedrich Hegel,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 039n1, r0.arg1: Georg Wilhelm Friedrich Hegel, r0.rel_exact: was, r0.id: reverb-314560308, r0.namespace: reverb, r0.arg2_exact: a German Philosopher, r0.arg2: a German Philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.955, r0.arg1_exact: Georg Wilhelm Friedrich Hegel),$x: ($x, is, a German philosopher))),AnswerState(Georg Wilhelm Friedrich Hegel))),SparseVector(question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1476653178711025)
Who is a German philosopher?	Friedrich Wilhelm Joseph Schelling	1.1476653178711025	Derivation(Who is a German philosopher?,Friedrich Wilhelm Joseph Schelling,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0182w0, r0.arg1: Friedrich Wilhelm Joseph Schelling, r0.rel_exact: was, r0.id: reverb-347805160, r0.namespace: reverb, r0.arg2_exact: a German Philosopher, r0.arg2: a German Philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.955, r0.arg1_exact: Friedrich Wilhelm Joseph Schelling),$x: ($x, is, a German philosopher))),AnswerState(Friedrich Wilhelm Joseph Schelling))),SparseVector(question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1476653178711025)
Who is a German philosopher?	Karl Heinrich Marx	1.1476653178711025	Derivation(Who is a German philosopher?,Karl Heinrich Marx,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 048cl, r0.arg1: Karl Heinrich Marx, r0.rel_exact: was, r0.id: reverb-26502164, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 23, r0.conf_f: 0.978, r0.arg1_exact: Karl Heinrich Marx),$x: ($x, is, a German philosopher))),AnswerState(Karl Heinrich Marx))),SparseVector(question prefix = 'who' and answer shape = Aaaa Aaaaa Aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1476653178711025)
Who is a German philosopher?	SSR Jodocus Trutvetter	1.0707558628120928	Derivation(Who is a German philosopher?,SSR Jodocus Trutvetter,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: SSR Jodocus Trutvetter, r0.rel_exact: was, r0.id: reverb-345743070, r0.namespace: reverb, r0.arg2_exact: a pre-eminent German philosopher, r0.arg2: a pre-eminent German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.632, r0.arg1_exact: SSR Jodocus Trutvetter),$x: ($x, is, a German philosopher))),AnswerState(SSR Jodocus Trutvetter))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, question prefix = 'who' and answer shape = AAA Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0707558628120928)
Who is a German philosopher?	Max Beckmann	0.9164851410288424	Derivation(Who is a German philosopher?,Max Beckmann,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019m90, r0.arg1: Max Beckmann, r0.rel_exact: was, r0.id: reverb-81197357, r0.namespace: reverb, r0.arg2_exact: a German artist , writer and philosopher, r0.arg2: a German artist , writer and philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.835, r0.arg1_exact: Max Beckmann),$x: ($x, is, a German philosopher))),AnswerState(Max Beckmann))),SparseVector(question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9164851410288424)
Who is a German philosopher?	Johann Friedrich Herbart	0.8798154535428819	Derivation(Who is a German philosopher?,Johann Friedrich Herbart,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01b5fd, r0.arg1: Johann Friedrich Herbart, r0.rel_exact: was, r0.id: reverb-240403813, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.978, r0.arg1_exact: Johann Friedrich Herbart),$x: ($x, is, a German philosopher))),AnswerState(Johann Friedrich Herbart))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8798154535428819)
Who is a German philosopher?	Friedrich Wilhelm Nietzsche	0.8798154535428819	Derivation(Who is a German philosopher?,Friedrich Wilhelm Nietzsche,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wh0, r0.arg1: Friedrich Wilhelm Nietzsche, r0.rel_exact: was, r0.id: reverb-129401613, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Friedrich Wilhelm Nietzsche),$x: ($x, is, a German philosopher))),AnswerState(Friedrich Wilhelm Nietzsche))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8798154535428819)
Who is a German philosopher?	Wed Jan 16 , 2008 Wilhelm Dilthey	0.7799877117890783	Derivation(Who is a German philosopher?,Wed Jan 16 , 2008 Wilhelm Dilthey,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Wed Jan 16 , 2008 Wilhelm Dilthey, r0.rel_exact: was, r0.id: reverb-73010590, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.632, r0.arg1_exact: Wed Jan 16 , 2008 Wilhelm Dilthey),$x: ($x, is, a German philosopher))),AnswerState(Wed Jan 16 , 2008 Wilhelm Dilthey))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaa Aaa 11 , 1111 Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'who' and isDate -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7799877117890783)
Who is a German philosopher?	Johann Adam Weishaupt	0.7066289044932257	Derivation(Who is a German philosopher?,Johann Adam Weishaupt,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Johann Adam Weishaupt, r0.rel_exact: was, r0.id: reverb-27306026, r0.namespace: reverb, r0.arg2_exact: a German philosopher and founder, r0.arg2: a German philosopher and founder, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.821, r0.arg1_exact: Johann Adam Weishaupt),$x: ($x, is, a German philosopher))),AnswerState(Johann Adam Weishaupt))),SparseVector(question prefix = 'who' and answer shape = Aaaaa Aaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7066289044932257)
Who is a German philosopher?	ethnicity Nietzsche	0.47045474749333693	Derivation(Who is a German philosopher?,ethnicity Nietzsche,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: ethnicity Nietzsche, r0.rel_exact: is considered, r0.id: reverb-42784915, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: is considered, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.716, r0.arg1_exact: ethnicity Nietzsche),$x: ($x, is, a German philosopher))),AnswerState(ethnicity Nietzsche))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.47045474749333693)
Who is a German philosopher?	Marx	0.429827681471471	Derivation(Who is a German philosopher?,Marx,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 048cl, r0.arg1: Marx, r0.rel_exact: was, r0.id: reverb-204574803, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.934, r0.arg1_exact: Marx),$x: ($x, is, a German philosopher))),AnswerState(Marx))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.429827681471471)
Who is a German philosopher?	Nietzsche	-0.03133991102407463	Derivation(Who is a German philosopher?,Nietzsche,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wh0, r0.arg1: Nietzsche, r0.rel_exact: was, r0.id: reverb-327196578, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.978, r0.arg1_exact: Nietzsche),$x: ($x, is, a German philosopher))),AnswerState(Nietzsche))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.03133991102407463)
Who is a German philosopher?	Arendt	-0.03133991102407463	Derivation(Who is a German philosopher?,Arendt,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0nk72, r0.arg1: Arendt, r0.rel_exact: was, r0.id: reverb-266012268, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.589, r0.arg1_exact: Arendt),$x: ($x, is, a German philosopher))),AnswerState(Arendt))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.03133991102407463)
Who is a German philosopher?	Philosophical counseling	-0.1004625261487273	Derivation(Who is a German philosopher?,Philosophical counseling,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Philosophical counseling, r0.rel_exact: was proposed by, r0.id: reverb-179055607, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was proposed by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.951, r0.arg1_exact: Philosophical counseling),$x: ($x, is, a German philosopher))),AnswerState(Philosophical counseling))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'who' and answer shape = Aaaaa aaaa -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1004625261487273)
Who is a German philosopher?	Strauss	-0.10824936608308433	Derivation(Who is a German philosopher?,Strauss,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Strauss, r0.rel_exact: was, r0.id: reverb-329627067, r0.namespace: reverb, r0.arg2_exact: a German political philosopher, r0.arg2: a German political philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.72, r0.arg1_exact: Strauss),$x: ($x, is, a German philosopher))),AnswerState(Strauss))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.10824936608308433)
Who is a German philosopher?	2008 Arthur Schopenhauer	-0.1910175103945686	Derivation(Who is a German philosopher?,2008 Arthur Schopenhauer,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: 2008 Arthur Schopenhauer, r0.rel_exact: was, r0.id: reverb-208068324, r0.namespace: reverb, r0.arg2_exact: a German philosopher most active, r0.arg2: a German philosopher most active, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.69, r0.arg1_exact: 2008 Arthur Schopenhauer),$x: ($x, is, a German philosopher))),AnswerState(2008 Arthur Schopenhauer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.5, question prefix = 'who' and answer shape = 1111 Aaaaa Aaaaa -> 1.0, question prefix = 'who' and isDate -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1910175103945686)
Who is a German philosopher?	Herbart	-0.4723763244019519	Derivation(Who is a German philosopher?,Herbart,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Herbart, r0.rel_exact: was, r0.id: reverb-362780644, r0.namespace: reverb, r0.arg2_exact: a major German Education Philosopher, r0.arg2: a major German Education Philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.88, r0.arg1_exact: Herbart),$x: ($x, is, a German philosopher))),AnswerState(Herbart))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4723763244019519)
Who is a German philosopher?	D?hring	-0.4723763244019519	Derivation(Who is a German philosopher?,D?hring,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: D?hring, r0.rel_exact: was, r0.id: reverb-263518822, r0.namespace: reverb, r0.arg2_exact: a prominent German socialist philosopher, r0.arg2: a prominent German socialist philosopher, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.939, r0.arg1_exact: D?hring),$x: ($x, is, a German philosopher))),AnswerState(D?hring))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4723763244019519)
Who is a German philosopher?	Hegel	-0.6382181748888545	Derivation(Who is a German philosopher?,Hegel,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 039n1, r0.arg1: Hegel, r0.rel_exact: is, r0.id: reverb-127739028, r0.namespace: reverb, r0.arg2_exact: a German philosopher ], r0.arg2: a German philosopher ], r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.545, r0.arg1_exact: Hegel),$x: ($x, is, a German philosopher))),AnswerState(Hegel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6382181748888545)
Who is a German philosopher?	Rosenzweig	-0.7151276299478642	Derivation(Who is a German philosopher?,Rosenzweig,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: Rosenzweig, r0.rel_exact: was, r0.id: reverb-60042586, r0.namespace: reverb, r0.arg2_exact: a German philosopher/theologian, r0.arg2: a German philosopher/theologian, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.821, r0.arg1_exact: Rosenzweig),$x: ($x, is, a German philosopher))),AnswerState(Rosenzweig))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7151276299478642)
Who is a German philosopher?	Bali	-0.7839288462580887	Derivation(Who is a German philosopher?,Bali,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01bkb, r0.arg1: Bali, r0.rel_exact: is, r0.id: reverb-114300205, r0.namespace: reverb, r0.arg2_exact: a German-educated philosopher, r0.arg2: a German-educated philosopher, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.52, r0.arg1_exact: Bali),$x: ($x, is, a German philosopher))),AnswerState(Bali))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7839288462580887)
Who is a German philosopher?	Leibniz	-1.0023451332077222	Derivation(Who is a German philosopher?,Leibniz,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0372p, r0.arg1: Leibniz, r0.rel_exact: was, r0.id: reverb-378790380, r0.namespace: reverb, r0.arg2_exact: a German philosopher and mathematician, r0.arg2: a German philosopher and mathematician, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.821, r0.arg1_exact: Leibniz),$x: ($x, is, a German philosopher))),AnswerState(Leibniz))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0023451332077222)
Who is a German philosopher?	Pope	-1.3809413873038339	Derivation(Who is a German philosopher?,Pope,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05rd8, r0.arg1: Pope, r0.rel_exact: was deeply influenced by, r0.id: reverb-299377605, r0.namespace: reverb, r0.arg2_exact: a German philosopher, r0.arg2: a German philosopher, r0.rel: was deeply influenced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.563, r0.arg1_exact: Pope),$x: ($x, is, a German philosopher))),AnswerState(Pope))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.3809413873038339)
Who is a German philosopher?	kindergarten	-1.57979641012487	Derivation(Who is a German philosopher?,kindergarten,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01ft5b, r0.arg1: kindergarten, r0.rel_exact: was created by, r0.id: reverb-217958939, r0.namespace: reverb, r0.arg2_exact: a philosopher German teacher, r0.arg2: a philosopher German teacher, r0.rel: was created by, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.505, r0.arg1_exact: kindergarten),$x: ($x, is, a German philosopher))),AnswerState(kindergarten))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-1.57979641012487)
Who is a German philosopher?	1260 - 1328	-2.0745284757676234	Derivation(Who is a German philosopher?,1260 - 1328,Vector(QaStep(Who is a German philosopher?,QuestionStateImpl(Who is a German philosopher?,Sentence(Who is a German philosopher?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a German philosopher),false)), QaStep(Who is a German philosopher?,QueryState($x: ($x, is, a German philosopher),false),ExecutionAction(ExecTuple((r0.arg1: 1260 - 1328, r0.rel_exact: was, r0.id: openie4-13345409, r0.namespace: openie4, r0.arg2_exact: a German philosopher , mystic , and theologian, r0.arg2_fbid_s: 07hpn, r0.arg2: a German philosopher , mystic , and theologian, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.61916476, r0.arg1_exact: 1260 - 1328),$x: ($x, is, a German philosopher))),AnswerState(1260 - 1328))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'who' and answer shape = 1111 - 1111 -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.5, answer from namespace 'openie4' -> 1.0, question prefix = 'who' and isDate -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.0745284757676234)
What gasses are in the troposphere?	OZone	1.7064595172360435	Derivation(What gasses are in the troposphere?,OZone,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: OZone, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 05phv, r0.prob_f: 0.9999995, r0.id: nell-1294876, r1.rel: is in, r0.namespace: nell, r0.arg2_exact: gas, r1.conf_f: 0.74, r1.arg2: the troposphere, r0.arg2: gas, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: ozone, r1.rel_exact: is in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r1.id: reverb-40294450, r0.arg1_exact: OZone, r1.arg1_exact: ozone, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(OZone))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.6, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, question prefix = 'what' and answer shape = AAaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.7064595172360435)
What gasses are in the troposphere?	METHANE	1.3784083877547584	Derivation(What gasses are in the troposphere?,METHANE,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: METHANE, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 04ydh, r0.prob_f: 0.9999695, r0.id: nell-1123970, r1.rel: is well-mixed in, r0.namespace: nell, r0.arg2_exact: gasses, r1.conf_f: 0.935, r1.arg2: the troposphere, r0.arg2: gasses, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: Methane, r1.rel_exact: is well-mixed in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r1.id: reverb-232576646, r0.arg1_exact: METHANE, r1.arg1_exact: Methane, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(METHANE))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.14285714285714285, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.3784083877547584)
What gasses are in the troposphere?	Sulfur	1.1774642368457595	Derivation(What gasses are in the troposphere?,Sulfur,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Sulfur, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 025sf9q, r0.prob_f: 0.9921875, r0.id: nell-1647674, r1.rel: is a problem in, r0.namespace: nell, r0.arg2_exact: gasses, r1.conf_f: 0.858, r1.arg2: the troposphere, r0.arg2: gasses, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: Sulfur, r1.rel_exact: is a problem in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r1.id: reverb-15115153, r0.arg1_exact: Sulfur, r1.arg1_exact: Sulfur, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(Sulfur))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.1774642368457595)
What gasses are in the troposphere?	ethanol	1.0080666661275721	Derivation(What gasses are in the troposphere?,ethanol,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: ethanol, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 02qvz, r0.prob_f: 0.9980469, r0.id: nell-554947, r1.rel: is ubiquitous in, r0.namespace: nell, r0.arg2_exact: gas, r1.conf_f: 0.574, r1.arg2: the troposphere, r0.arg2: gas, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: ethanol, r1.rel_exact: is ubiquitous in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 3, r1.id: reverb-192717342, r0.arg1_exact: ethanol, r1.arg1_exact: ethanol, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(ethanol))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0080666661275721)
What gasses are in the troposphere?	chlorine	1.0080666661275721	Derivation(What gasses are in the troposphere?,chlorine,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: chlorine, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 025tkqp, r0.prob_f: 0.9999695, r0.id: nell-340327, r1.rel: are also in, r0.namespace: nell, r0.arg2_exact: Gases, r1.conf_f: 0.725, r1.arg2: the troposphere, r0.arg2: Gases, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: chlorine, r1.rel_exact: are also in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r1.id: reverb-243595617, r0.arg1_exact: chlorine, r1.arg1_exact: chlorine, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(chlorine))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0080666661275721)
What gasses are in the troposphere?	compounds	1.0080666661275721	Derivation(What gasses are in the troposphere?,compounds,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: compounds, r0.rel_exact: is a chemical that is a kind of, r0.prob_f: 0.9921875, r0.id: nell-382492, r1.rel: are present in, r0.namespace: nell, r0.arg2_exact: gas, r1.conf_f: 0.569, r1.arg2: the troposphere, r0.arg2: gas, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: compounds, r1.rel_exact: are present in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r1.id: reverb-57360366, r0.arg1_exact: compounds, r1.arg1_exact: compounds, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(compounds))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0080666661275721)
What gasses are in the troposphere?	Chemicals	0.9104197787056396	Derivation(What gasses are in the troposphere?,Chemicals,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Chemicals, r0.rel_exact: is a chemical that is a kind of, r0.prob_f: 0.96875, r0.id: nell-326832, r1.rel: are extremely stable in, r0.namespace: nell, r0.arg2_exact: Gases, r1.conf_f: 0.546, r1.arg2: the Troposphere, r0.arg2: Gases, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: chemicals, r1.rel_exact: are extremely stable in, r1.arg2_exact: the Troposphere, r1.num_extrs_i: 3, r1.id: reverb-39333257, r0.arg1_exact: Chemicals, r1.arg1_exact: chemicals, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(Chemicals))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.7777777777777778, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9104197787056396)
What gasses are in the troposphere?	Fluorine	0.9063803869043916	Derivation(What gasses are in the troposphere?,Fluorine,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Fluorine, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 025rqc3, r0.prob_f: 0.9375, r0.id: nell-595185, r1.rel: are similarly decomposed in, r0.namespace: nell, r0.arg2_exact: Gases, r1.conf_f: 0.843, r1.arg2: the troposphere, r0.arg2: Gases, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: fluorine, r1.rel_exact: are similarly decomposed in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 3, r1.id: reverb-16589346, r0.arg1_exact: Fluorine, r1.arg1_exact: fluorine, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(Fluorine))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.7777777777777778, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9063803869043916)
What gasses are in the troposphere?	water	0.7733373423974399	Derivation(What gasses are in the troposphere?,water,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: water, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 0838f, r0.prob_f: 1.0, r0.id: nell-1835917, r1.rel: were evenly distributed in, r0.namespace: nell, r0.arg2_exact: Gases, r1.conf_f: 0.504, r1.arg2: the troposphere, r0.arg2: Gases, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: water, r1.rel_exact: were evenly distributed in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r1.id: reverb-328000347, r0.arg1_exact: water, r1.arg1_exact: water, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(water))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.7777777777777778, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7733373423974399)
What gasses are in the troposphere?	Water Vapor	0.5566333601556943	Derivation(What gasses are in the troposphere?,Water Vapor,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Water Vapor, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 0mb9x, r0.prob_f: 0.96875, r0.id: nell-1836312, r1.rel: is much more concentrated in, r0.namespace: nell, r0.arg2_exact: gasses, r1.conf_f: 0.901, r1.arg2: the lower troposphere, r0.arg2: gasses, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: Water vapor, r1.rel_exact: is much more concentrated in, r1.arg2_exact: the lower troposphere, r1.num_extrs_i: 2, r1.id: reverb-194466564, r0.arg1_exact: Water Vapor, r1.arg1_exact: Water vapor, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(Water Vapor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.7, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5566333601556943)
What gasses are in the troposphere?	CARBON DIOXIDE	0.23888120938294133	Derivation(What gasses are in the troposphere?,CARBON DIOXIDE,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be a chemical that be a kind of,false,1172321.0,1251.0,26.0,0.4422469139099121),QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: CARBON DIOXIDE, r0.rel_exact: is a chemical that is a kind of, r1.arg1_fbid_s: 01s7k, r0.prob_f: 1.0, r0.id: nell-290069, r1.rel: is transported in, r0.namespace: nell, r0.arg2_exact: Gases, r1.conf_f: 0.9, r1.arg2: the mid-troposphere, r0.arg2: Gases, r0.rel: is a chemical that is a kind of, r1.namespace: reverb, r1.arg1: Carbon dioxide, r1.rel_exact: is transported in, r1.arg2_exact: the mid-troposphere, r1.num_extrs_i: 2, r1.id: reverb-247218450, r0.arg1_exact: CARBON DIOXIDE, r1.arg1_exact: Carbon dioxide, r1.corpora_ss: List(cw)),$x: ($x, be a chemical that be a kind of, gasses) ($x, are in, the troposphere))),AnswerState(CARBON DIOXIDE))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4422469139099121, minimum join key similarity -> 0.14285714285714285, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.875, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = AAAA AAAA -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.23888120938294133)
What gasses are in the troposphere?	Water vapor	-0.34343290078742006	Derivation(What gasses are in the troposphere?,Water vapor,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0mb9x, r0.arg1: Water vapor, r0.rel_exact: Type, r0.id: fb-29680474, r1.rel: is found in, r0.namespace: freebase, r0.arg2_exact: Atmospheric Gas, r1.conf_f: 0.789, r1.arg2: the troposphere, r0.arg2: Atmospheric Gas, r0.rel: Type, r1.namespace: reverb, r1.arg1: the water vapor, r1.rel_exact: is found in, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r1.id: reverb-77407273, r0.arg1_exact: Water vapor, r1.arg1_exact: the water vapor, r1.corpora_ss: List(cw)),$x: ($x, "type", gasses) ($x, are in, the troposphere))),AnswerState(Water vapor))),SparseVector(minimum join key similarity -> 0.7692307692307693, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.34343290078742006)
What gasses are in the troposphere?	The atmosphere	-0.9340352934447091	Derivation(What gasses are in the troposphere?,The atmosphere,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false),RelSynRule(be a kind of,be layer of,false,44765.0,178.0,58.0,0.6302961707115173),QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: The atmosphere, r0.rel_exact: is a layer of, r0.id: reverb-86175371, r1.rel: is in, r0.namespace: reverb, r0.arg2_exact: gases, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.74, r1.arg2: the troposphere, r0.arg2: gases, r0.rel: is a layer of, r1.namespace: reverb, r1.arg1: the atmosphere, r0.corpora_ss: List(cw), r1.rel_exact: is in, r0.num_extrs_i: 7, r1.arg2_exact: the troposphere, r1.num_extrs_i: 10, r0.conf_f: 0.939, r1.id: reverb-108580210, r0.arg1_exact: The atmosphere, r1.arg1_exact: the atmosphere, r1.corpora_ss: List(cw)),$x: ($x, be layer of, gasses) ($x, are in, the troposphere))),AnswerState(The atmosphere))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6302961707115173, minimum join key similarity -> 0.9285714285714286, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9340352934447091)
What gasses are in the troposphere?	the atmosphere	-1.0501572299037436	Derivation(What gasses are in the troposphere?,the atmosphere,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0990h, r0.arg1: greenhouse gases, r0.rel_exact: build in, r0.id: reverb-161863404, r1.rel: is in, r0.namespace: reverb, r0.arg2_exact: the atmosphere, r1.conf_f: 0.74, r1.arg2: the troposphere, r0.arg2: the atmosphere, r0.rel: build in, r1.namespace: reverb, r1.arg1: the atmosphere, r0.corpora_ss: List(cw), r1.rel_exact: is in, r0.num_extrs_i: 8, r1.arg2_exact: the troposphere, r1.num_extrs_i: 10, r0.conf_f: 0.9, r1.id: reverb-108580210, r0.arg1_exact: greenhouse gases, r1.arg1_exact: the atmosphere, r1.corpora_ss: List(cw)),$x: (gasses, building, $x) ($x, are in, the troposphere))),AnswerState(the atmosphere))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.0501572299037436)
What gasses are in the troposphere?	air	-1.0832517906544012	Derivation(What gasses are in the troposphere?,air,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: air, r0.rel_exact: is the major component of, r0.id: reverb-123132414, r1.rel: are found high in, r0.namespace: reverb, r0.arg2_exact: the gases, r1.conf_f: 0.821, r1.arg2: the troposphere, r0.arg2: the gases, r0.rel: is the major component of, r1.namespace: reverb, r1.arg1: air, r0.corpora_ss: List(cw), r1.rel_exact: are found high in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.831, r1.id: reverb-66664335, r0.arg1_exact: air, r1.arg1_exact: air, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(air))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.0832517906544012)
What gasses are in the troposphere?	Carbon dioxide	-1.1259464218081368	Derivation(What gasses are in the troposphere?,Carbon dioxide,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01s7k, r0.arg1: Carbon dioxide, r0.rel_exact: Type, r1.arg1_fbid_s: 01s7k, r0.id: fb-197505737, r1.rel: is transported in, r0.namespace: freebase, r0.arg2_exact: Atmospheric Gas, r1.conf_f: 0.9, r1.arg2: the mid-troposphere, r0.arg2: Atmospheric Gas, r0.rel: Type, r1.namespace: reverb, r1.arg1: Carbon dioxide, r1.rel_exact: is transported in, r1.arg2_exact: the mid-troposphere, r1.num_extrs_i: 2, r1.id: reverb-247218450, r0.arg1_exact: Carbon dioxide, r1.arg1_exact: Carbon dioxide, r1.corpora_ss: List(cw)),$x: ($x, "type", gasses) ($x, are in, the troposphere))),AnswerState(Carbon dioxide))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1259464218081368)
What gasses are in the troposphere?	dust particles	-1.1522013461825158	Derivation(What gasses are in the troposphere?,dust particles,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,absorb from,false,1172321.0,202.0,4.0,0.4407353401184082),QueryState($x: ($x, absorb from, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, absorb from, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: dust particles, r0.rel_exact: are absorbed from, r0.id: reverb-15510491, r1.rel: are more commonly found in, r0.namespace: reverb, r0.arg2_exact: the gases, r1.conf_f: 0.957, r1.arg2: the troposphere, r0.arg2: the gases, r0.rel: are absorbed from, r1.namespace: reverb, r1.arg1: Dust particles, r0.corpora_ss: List(cw), r1.rel_exact: are more commonly found in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.854, r1.id: reverb-72263420, r0.arg1_exact: dust particles, r1.arg1_exact: Dust particles, r1.corpora_ss: List(cw)),$x: ($x, absorb from, gasses) ($x, are in, the troposphere))),AnswerState(dust particles))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4407353401184082, minimum join key similarity -> 0.9285714285714286, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.1522013461825158)
What gasses are in the troposphere?	Ozone	-1.1545783374906624	Derivation(What gasses are in the troposphere?,Ozone,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false),RelSynRule(be a kind of,be layer of,false,44765.0,178.0,58.0,0.6302961707115173),QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05phv, r0.arg1: Ozone, r0.rel_exact: is a layer of, r1.arg1_fbid_s: 05phv, r0.id: reverb-146902322, r1.rel: is in, r0.namespace: reverb, r0.arg2_exact: gas, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.74, r1.arg2: the troposphere, r0.arg2: gas, r0.rel: is a layer of, r1.namespace: reverb, r1.arg1: ozone, r0.corpora_ss: List(cw), r1.rel_exact: is in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.848, r1.id: reverb-40294450, r0.arg1_exact: Ozone, r1.arg1_exact: ozone, r1.corpora_ss: List(cw)),$x: ($x, be layer of, gasses) ($x, are in, the troposphere))),AnswerState(Ozone))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6302961707115173, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.1545783374906624)
What gasses are in the troposphere?	The air	-1.4829421962730294	Derivation(What gasses are in the troposphere?,The air,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: The air, r0.rel_exact: is actually a mixture of, r0.id: reverb-262417688, r1.rel: are found high in, r0.namespace: reverb, r0.arg2_exact: gasses, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.821, r1.arg2: the troposphere, r0.arg2: gasses, r0.rel: is actually a mixture of, r1.namespace: reverb, r1.arg1: air, r0.corpora_ss: List(cw), r1.rel_exact: are found high in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.804, r1.id: reverb-66664335, r0.arg1_exact: The air, r1.arg1_exact: air, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(The air))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.4829421962730294)
What gasses are in the troposphere?	CO2	-1.6202126894925826	Derivation(What gasses are in the troposphere?,CO2,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false),RelSynRule(be a kind of,be one kind of,false,44765.0,228.0,66.0,0.6265977323055267),QueryState($x: ($x, be one kind of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be one kind of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01s7k, r0.arg1: CO2, r0.rel_exact: is just one kind of, r1.arg1_fbid_s: 01s7k, r0.id: reverb-280273331, r1.rel: were made in, r0.namespace: reverb, r0.arg2_exact: gas, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.847, r1.arg2: the upper troposphere, r0.arg2: gas, r0.rel: is just one kind of, r1.namespace: reverb, r1.arg1: CO2, r0.corpora_ss: List(cw), r1.rel_exact: were made in, r0.num_extrs_i: 3, r1.arg2_exact: the upper troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.928, r1.id: reverb-122263554, r0.arg1_exact: CO2, r1.arg1_exact: CO2, r1.corpora_ss: List(cw)),$x: ($x, be one kind of, gasses) ($x, are in, the troposphere))),AnswerState(CO2))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6265977323055267, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.7142857142857143, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = AA1 -> 1.0, action type = ExecutionAction -> 1.0),-1.6202126894925826)
What gasses are in the troposphere?	E85 ethanol	-1.736321400285945	Derivation(What gasses are in the troposphere?,E85 ethanol,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: E85 ethanol, r0.rel_exact: is a small drop in, r1.arg1_fbid_s: 02qvz, r0.id: reverb-164936930, r1.rel: is ubiquitous in, r0.namespace: reverb, r0.arg2_exact: the gas mileage, r1.conf_f: 0.574, r1.arg2: the troposphere, r0.arg2: the gas mileage, r0.rel: is a small drop in, r1.namespace: reverb, r1.arg1: ethanol, r0.corpora_ss: List(cw), r1.rel_exact: is ubiquitous in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 3, r0.conf_f: 0.7, r1.id: reverb-192717342, r0.arg1_exact: E85 ethanol, r1.arg1_exact: ethanol, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(E85 ethanol))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7777777777777778, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = A11 aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.736321400285945)
What gasses are in the troposphere?	An atmosphere	-1.7894114783837471	Derivation(What gasses are in the troposphere?,An atmosphere,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false),RelSynRule(be a kind of,be layer of,false,44765.0,178.0,58.0,0.6302961707115173),QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be layer of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: An atmosphere, r0.rel_exact: is a layer of, r0.id: openie4-23195170, r1.rel: is in, r0.namespace: openie4, r0.arg2_exact: gases, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.74, r1.arg2: the troposphere, r0.arg2: gases, r0.rel: is a layer of, r1.namespace: reverb, r1.arg1: the atmosphere, r0.corpora_ss: List(cw), r1.rel_exact: is in, r0.num_extrs_i: 17, r1.arg2_exact: the troposphere, r1.num_extrs_i: 10, r0.conf_f: 0.8, r1.id: reverb-108580210, r0.arg1_exact: An atmosphere, r1.arg1_exact: the atmosphere, r1.corpora_ss: List(cw)),$x: ($x, be layer of, gasses) ($x, are in, the troposphere))),AnswerState(An atmosphere))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6302961707115173, minimum join key similarity -> 0.8148148148148148, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4444444444444444, question prefix = 'what' and answer shape = Aa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7894114783837471)
What gasses are in the troposphere?	SO2	-1.8570679796902443	Derivation(What gasses are in the troposphere?,SO2,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,absorb from,false,1172321.0,202.0,4.0,0.4407353401184082),QueryState($x: ($x, absorb from, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, absorb from, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0dfwj, r0.arg1: SO2, r0.rel_exact: is absorbed from, r1.arg1_fbid_s: 0dfwj, r0.id: reverb-226074909, r1.rel: was observed in, r0.namespace: reverb, r0.arg2_exact: the flue gas, r1.conf_f: 0.748, r1.arg2: the upper troposphere, r0.arg2: the flue gas, r0.rel: is absorbed from, r1.namespace: reverb, r1.arg1: SO2, r0.corpora_ss: List(cw), r1.rel_exact: was observed in, r0.num_extrs_i: 4, r1.arg2_exact: the upper troposphere, r1.num_extrs_i: 3, r0.conf_f: 0.905, r1.id: reverb-291065468, r0.arg1_exact: SO2, r1.arg1_exact: SO2, r1.corpora_ss: List(cw)),$x: ($x, absorb from, gasses) ($x, are in, the troposphere))),AnswerState(SO2))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4407353401184082, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = AA1 -> 1.0, action type = ExecutionAction -> 1.0),-1.8570679796902443)
What gasses are in the troposphere?	energy ?	-1.9544356889273087	Derivation(What gasses are in the troposphere?,energy ?,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a kind of", gasses) ($x, are in, the troposphere),false),RelSynRule(be a kind of,be level of,false,44765.0,257.0,79.0,0.6284746825695038),QueryState($x: ($x, be level of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be level of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02mm_, r0.arg1: energy ?, r0.rel_exact: are increasing the levels of, r1.arg1_fbid_s: 02mm_, r0.id: reverb-115303935, r1.rel: is conserved in, r0.namespace: reverb, r0.arg2_exact: ?greenhouse gases, r0.arg2_fbid_s: 0990h, r1.conf_f: 0.595, r1.arg2: the troposphere, r0.arg2: ?greenhouse gases, r0.rel: are increasing the levels of, r1.namespace: reverb, r1.arg1: energy, r0.corpora_ss: List(cw), r1.rel_exact: is conserved in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.711, r1.id: reverb-206209750, r0.arg1_exact: energy ?, r1.arg1_exact: energy, r1.corpora_ss: List(cw)),$x: ($x, be level of, gasses) ($x, are in, the troposphere))),AnswerState(energy ?))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6284746825695038, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa ? -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9544356889273087)
What gasses are in the troposphere?	energy	-1.9690238106977827	Derivation(What gasses are in the troposphere?,energy,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false),RelSynRule(be an example of,even become,false,2809.0,131.0,7.0,0.660316526889801),QueryState($x: ($x, even become, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, even become, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02mm_, r0.arg1: energy, r0.rel_exact: even become an exporter of, r1.arg1_fbid_s: 02mm_, r0.id: reverb-158472835, r1.rel: is conserved in, r0.namespace: reverb, r0.arg2_exact: gas, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.595, r1.arg2: the troposphere, r0.arg2: gas, r0.rel: even become an exporter of, r1.namespace: reverb, r1.arg1: energy, r0.corpora_ss: List(cw), r1.rel_exact: is conserved in, r0.num_extrs_i: 5, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.699, r1.id: reverb-206209750, r0.arg1_exact: energy, r1.arg1_exact: energy, r1.corpora_ss: List(cw)),$x: ($x, even become, gasses) ($x, are in, the troposphere))),AnswerState(energy))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.660316526889801, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9690238106977827)
What gasses are in the troposphere?	80 %	-1.9893191086379813	Derivation(What gasses are in the troposphere?,80 %,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: the emergency-throttle/gas, r0.rel_exact: will be set on, r0.id: reverb-277145279, r1.rel: is in, r0.namespace: reverb, r0.arg2_exact: 80 %, r1.conf_f: 0.706, r1.arg2: the troposphere, r0.arg2: 80 %, r0.rel: will be set on, r1.namespace: reverb, r1.arg1: 80 %, r0.corpora_ss: List(cw), r1.rel_exact: is in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.625, r1.id: reverb-47055236, r0.arg1_exact: the emergency-throttle/gas, r1.arg1_exact: 80 %, r1.corpora_ss: List(cw)),$x: (gasses, setting, $x) ($x, are in, the troposphere))),AnswerState(80 %))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, question prefix = 'what' and answer shape = 11 % -> 1.0, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9893191086379813)
What gasses are in the troposphere?	Carbon monoxide	-2.031812684189891	Derivation(What gasses are in the troposphere?,Carbon monoxide,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01v1v, r0.arg1: Carbon monoxide, r0.rel_exact: Type, r1.arg1_fbid_s: 01s7k, r0.id: fb-153047893, r1.rel: is transported in, r0.namespace: freebase, r0.arg2_exact: Atmospheric Gas, r1.conf_f: 0.9, r1.arg2: the mid-troposphere, r0.arg2: Atmospheric Gas, r0.rel: Type, r1.namespace: reverb, r1.arg1: Carbon dioxide, r1.rel_exact: is transported in, r1.arg2_exact: the mid-troposphere, r1.num_extrs_i: 2, r1.id: reverb-247218450, r0.arg1_exact: Carbon monoxide, r1.arg1_exact: Carbon dioxide, r1.corpora_ss: List(cw)),$x: ($x, "type", gasses) ($x, are in, the troposphere))),AnswerState(Carbon monoxide))),SparseVector(minimum join key similarity -> 0.8275862068965517, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.031812684189891)
What gasses are in the troposphere?	Air	-2.146146926160135	Derivation(What gasses are in the troposphere?,Air,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Air, r0.rel_exact: is a mixture of, r0.id: reverb-5555247, r1.rel: are found high in, r0.namespace: reverb, r0.arg2_exact: gases, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.821, r1.arg2: the troposphere, r0.arg2: gases, r0.rel: is a mixture of, r1.namespace: reverb, r1.arg1: air, r0.corpora_ss: List(cw), r1.rel_exact: are found high in, r0.num_extrs_i: 71, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.978, r1.id: reverb-66664335, r0.arg1_exact: Air, r1.arg1_exact: air, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(Air))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.146146926160135)
What gasses are in the troposphere?	the surface	-2.25733660908728	Derivation(What gasses are in the troposphere?,the surface,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 037xy, r0.arg1: gas, r0.rel_exact: build up under, r0.id: reverb-229622044, r1.rel: is unimportant in, r0.namespace: reverb, r0.arg2_exact: the surface, r1.conf_f: 0.812, r1.arg2: the free troposphere, r0.arg2: the surface, r0.rel: build up under, r1.namespace: reverb, r1.arg1: the surface, r0.corpora_ss: List(cw), r1.rel_exact: is unimportant in, r0.num_extrs_i: 6, r1.arg2_exact: the free troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.721, r1.id: reverb-295382314, r0.arg1_exact: gas, r1.arg1_exact: the surface, r1.corpora_ss: List(cw)),$x: (gasses, building, $x) ($x, are in, the troposphere))),AnswerState(the surface))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.25733660908728)
What gasses are in the troposphere?	methane	-2.3721862570746803	Derivation(What gasses are in the troposphere?,methane,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04ydh, r0.arg1: methane, r0.rel_exact: is a component of, r1.arg1_fbid_s: 04ydh, r0.id: reverb-73009224, r1.rel: is well-mixed in, r0.namespace: reverb, r0.arg2_exact: natural gas, r0.arg2_fbid_s: 05k4k, r1.conf_f: 0.935, r1.arg2: the troposphere, r0.arg2: natural gas, r0.rel: is a component of, r1.namespace: reverb, r1.arg1: Methane, r0.corpora_ss: List(cw), r1.rel_exact: is well-mixed in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.817, r1.id: reverb-232576646, r0.arg1_exact: methane, r1.arg1_exact: Methane, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(methane))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.75, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.3721862570746803)
What gasses are in the troposphere?	Methane	-2.3911795857690876	Derivation(What gasses are in the troposphere?,Methane,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04ydh, r0.arg1: Methane, r0.rel_exact: is the principal component of, r1.arg1_fbid_s: 04ydh, r0.id: reverb-318559898, r1.rel: is well-mixed in, r0.namespace: reverb, r0.arg2_exact: natural gas, r0.arg2_fbid_s: 05k4k, r1.conf_f: 0.935, r1.arg2: the troposphere, r0.arg2: natural gas, r0.rel: is the principal component of, r1.namespace: reverb, r1.arg1: Methane, r0.corpora_ss: List(cw), r1.rel_exact: is well-mixed in, r0.num_extrs_i: 36, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.935, r1.id: reverb-232576646, r0.arg1_exact: Methane, r1.arg1_exact: Methane, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(Methane))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.3911795857690876)
What gasses are in the troposphere?	the air	-2.4274325179785454	Derivation(What gasses are in the troposphere?,the air,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: The gas, r0.rel_exact: can build up in, r0.id: reverb-274840059, r1.rel: are found high in, r0.namespace: reverb, r0.arg2_exact: the air, r1.conf_f: 0.821, r1.arg2: the troposphere, r0.arg2: the air, r0.rel: can build up in, r1.namespace: reverb, r1.arg1: air, r0.corpora_ss: List(cw), r1.rel_exact: are found high in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.774, r1.id: reverb-66664335, r0.arg1_exact: The gas, r1.arg1_exact: air, r1.corpora_ss: List(cw)),$x: (gasses, building, $x) ($x, are in, the troposphere))),AnswerState(the air))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.6, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaa aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.4274325179785454)
What gasses are in the troposphere?	Smog	-2.436994815025087	Derivation(What gasses are in the troposphere?,Smog,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06q3j, r0.arg1: Smog, r0.rel_exact: is a combination of, r1.arg1_fbid_s: 06q3j, r0.id: reverb-338797831, r1.rel: is located in, r0.namespace: reverb, r0.arg2_exact: gases, r0.arg2_fbid_s: 037xy, r1.conf_f: 0.88, r1.arg2: the troposphere, r0.arg2: gases, r0.rel: is a combination of, r1.namespace: reverb, r1.arg1: Smog, r0.corpora_ss: List(cw), r1.rel_exact: is located in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 5, r0.conf_f: 0.96, r1.id: reverb-357993606, r0.arg1_exact: Smog, r1.arg1_exact: Smog, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(Smog))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.436994815025087)
What gasses are in the troposphere?	the water	-2.5128868660248966	Derivation(What gasses are in the troposphere?,the water,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, building, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Toxic gasses, r0.rel_exact: can build up in, r1.arg1_fbid_s: 0838f, r0.id: reverb-336640390, r1.rel: were evenly distributed in, r0.namespace: reverb, r0.arg2_exact: the water, r1.conf_f: 0.504, r1.arg2: the troposphere, r0.arg2: the water, r0.rel: can build up in, r1.namespace: reverb, r1.arg1: water, r0.corpora_ss: List(cw), r1.rel_exact: were evenly distributed in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.727, r1.id: reverb-328000347, r0.arg1_exact: Toxic gasses, r1.arg1_exact: water, r1.corpora_ss: List(cw)),$x: (gasses, building, $x) ($x, are in, the troposphere))),AnswerState(the water))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.7142857142857143, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.5128868660248966)
What gasses are in the troposphere?	Co2	-2.681171224873782	Derivation(What gasses are in the troposphere?,Co2,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01s7k, r0.arg1: Co2, r0.rel_exact: is a very small component of, r1.arg1_fbid_s: 01s7k, r0.id: reverb-363286601, r1.rel: were made in, r0.namespace: reverb, r0.arg2_exact: greenhouse gases, r0.arg2_fbid_s: 0990h, r1.conf_f: 0.847, r1.arg2: the upper troposphere, r0.arg2: greenhouse gases, r0.rel: is a very small component of, r1.namespace: reverb, r1.arg1: CO2, r0.corpora_ss: List(cw), r1.rel_exact: were made in, r0.num_extrs_i: 2, r1.arg2_exact: the upper troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.746, r1.id: reverb-122263554, r0.arg1_exact: Co2, r1.arg1_exact: CO2, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(Co2))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = Aa1 -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.681171224873782)
What gasses are in the troposphere?	The water	-2.7469359473635517	Derivation(What gasses are in the troposphere?,The water,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: The water, r0.rel_exact: is a large-scale byproduct of, r1.arg1_fbid_s: 0838f, r0.id: reverb-146978248, r1.rel: were evenly distributed in, r0.namespace: reverb, r0.arg2_exact: the gas extraction, r1.conf_f: 0.504, r1.arg2: the troposphere, r0.arg2: the gas extraction, r0.rel: is a large-scale byproduct of, r1.namespace: reverb, r1.arg1: water, r0.corpora_ss: List(cw), r1.rel_exact: were evenly distributed in, r0.num_extrs_i: 11, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.939, r1.id: reverb-328000347, r0.arg1_exact: The water, r1.arg1_exact: water, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(The water))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7142857142857143, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7469359473635517)
What gasses are in the troposphere?	the methane	-2.9621274034583087	Derivation(What gasses are in the troposphere?,the methane,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: methane gases, r0.rel_exact: have been set-up to capture, r1.arg1_fbid_s: 04ydh, r0.id: reverb-374498650, r1.rel: is well-mixed in, r0.namespace: reverb, r0.arg2_exact: the methane, r1.conf_f: 0.935, r1.arg2: the troposphere, r0.arg2: the methane, r0.rel: have been set-up to capture, r1.namespace: reverb, r1.arg1: Methane, r0.corpora_ss: List(cw), r1.rel_exact: is well-mixed in, r0.num_extrs_i: 34, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.759, r1.id: reverb-232576646, r0.arg1_exact: methane gases, r1.arg1_exact: Methane, r1.corpora_ss: List(cw)),$x: (gasses, setting, $x) ($x, are in, the troposphere))),AnswerState(the methane))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.6666666666666666, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.9621274034583087)
What gasses are in the troposphere?	carbon dioxide	-2.9890624389415428	Derivation(What gasses are in the troposphere?,carbon dioxide,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (gasses, would be as, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, would be as, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: This gas, r0.rel_exact: would later be identified as, r1.arg1_fbid_s: 01s7k, r0.id: reverb-360794795, r1.rel: is transported in, r0.namespace: reverb, r0.arg2_exact: carbon dioxide, r0.arg2_fbid_s: 01s7k, r1.conf_f: 0.9, r1.arg2: the mid-troposphere, r0.arg2: carbon dioxide, r0.rel: would later be identified as, r1.namespace: reverb, r1.arg1: Carbon dioxide, r0.corpora_ss: List(cw), r1.rel_exact: is transported in, r0.num_extrs_i: 3, r1.arg2_exact: the mid-troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.94, r1.id: reverb-247218450, r0.arg1_exact: This gas, r1.arg1_exact: Carbon dioxide, r1.corpora_ss: List(cw)),$x: (gasses, would be as, $x) ($x, are in, the troposphere))),AnswerState(carbon dioxide))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 0.9285714285714286, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.4, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.9890624389415428)
What gasses are in the troposphere?	Ethanol	-3.1899718538872563	Derivation(What gasses are in the troposphere?,Ethanol,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be an, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02qvz, r0.arg1: Ethanol, r0.rel_exact: is currently an additive in, r1.arg1_fbid_s: 02qvz, r0.id: reverb-56219876, r1.rel: is ubiquitous in, r0.namespace: reverb, r0.arg2_exact: some U.S. gas formulations, r1.conf_f: 0.574, r1.arg2: the troposphere, r0.arg2: some U.S. gas formulations, r0.rel: is currently an additive in, r1.namespace: reverb, r1.arg1: ethanol, r0.corpora_ss: List(cw), r1.rel_exact: is ubiquitous in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 3, r0.conf_f: 0.963, r1.id: reverb-192717342, r0.arg1_exact: Ethanol, r1.arg1_exact: ethanol, r1.corpora_ss: List(cw)),$x: ($x, be an, gasses) ($x, are in, the troposphere))),AnswerState(Ethanol))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.1899718538872563)
What gasses are in the troposphere?	Water	-3.228679288598064	Derivation(What gasses are in the troposphere?,Water,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0838f, r0.arg1: Water, r0.rel_exact: is an essential component of, r1.arg1_fbid_s: 0838f, r0.id: reverb-35585329, r1.rel: were evenly distributed in, r0.namespace: reverb, r0.arg2_exact: deep shale gas development, r1.conf_f: 0.504, r1.arg2: the troposphere, r0.arg2: deep shale gas development, r0.rel: is an essential component of, r1.namespace: reverb, r1.arg1: water, r0.corpora_ss: List(cw), r1.rel_exact: were evenly distributed in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.928, r1.id: reverb-328000347, r0.arg1_exact: Water, r1.arg1_exact: water, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(Water))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.228679288598064)
What gasses are in the troposphere?	the model	-3.229625730134275	Derivation(What gasses are in the troposphere?,the model,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, setting, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: the particle and gas density, r0.rel_exact: is set according to, r1.arg1_fbid_s: 01n2447, r0.id: reverb-187156995, r1.rel: were generally cooler in, r0.namespace: reverb, r0.arg2_exact: the model, r1.conf_f: 0.681, r1.arg2: the lower troposphere, r0.arg2: the model, r0.rel: is set according to, r1.namespace: reverb, r1.arg1: the models, r0.corpora_ss: List(cw), r1.rel_exact: were generally cooler in, r0.num_extrs_i: 3, r1.arg2_exact: the lower troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.838, r1.id: reverb-121224537, r0.arg1_exact: the particle and gas density, r1.arg1_exact: the models, r1.corpora_ss: List(cw)),$x: (gasses, setting, $x) ($x, are in, the troposphere))),AnswerState(the model))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.9473684210526315, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.229625730134275)
What gasses are in the troposphere?	the trend	-3.248268851753341	Derivation(What gasses are in the troposphere?,the trend,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,strength,true,4.087548E7,101.0,16.0,0.39473211765289307),QueryState($x: (gasses, strength, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, strength, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: Unleaded Gas right, r0.rel_exact: now is the strength of, r0.id: reverb-176673134, r1.rel: are also stronger in, r0.namespace: reverb, r0.arg2_exact: the trend, r1.conf_f: 0.84, r1.arg2: the upper troposphere, r0.arg2: the trend, r0.rel: now is the strength of, r1.namespace: reverb, r1.arg1: The trends, r0.corpora_ss: List(cw), r1.rel_exact: are also stronger in, r0.num_extrs_i: 2, r1.arg2_exact: the upper troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.698, r1.id: reverb-265506681, r0.arg1_exact: Unleaded Gas right, r1.arg1_exact: The trends, r1.corpora_ss: List(cw)),$x: (gasses, strength, $x) ($x, are in, the troposphere))),AnswerState(the trend))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.39473211765289307, minimum join key similarity -> 0.8421052631578947, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.248268851753341)
What gasses are in the troposphere?	Energy	-3.3730000222480765	Derivation(What gasses are in the troposphere?,Energy,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02mm_, r0.arg1: Energy, r0.rel_exact: is holding a Workshop on, r1.arg1_fbid_s: 02mm_, r0.id: reverb-298138415, r1.rel: is conserved in, r0.namespace: reverb, r0.arg2_exact: oil and gas resources, r1.conf_f: 0.595, r1.arg2: the troposphere, r0.arg2: oil and gas resources, r0.rel: is holding a Workshop on, r1.namespace: reverb, r1.arg1: energy, r0.corpora_ss: List(cw), r1.rel_exact: is conserved in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.911, r1.id: reverb-206209750, r0.arg1_exact: Energy, r1.arg1_exact: energy, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(Energy))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8333333333333334, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.3730000222480765)
What gasses are in the troposphere?	ethane	-3.438671260914556	Derivation(What gasses are in the troposphere?,ethane,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is a", gasses) ($x, are in, the troposphere),false),RelSynRule(be a,be component of,false,1172321.0,115.0,2.0,0.4366787075996399),QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be component of, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 015p0r, r0.arg1: ethane, r0.rel_exact: is a natural component of, r1.arg1_fbid_s: 04ydh, r0.id: reverb-156634841, r1.rel: is well-mixed in, r0.namespace: reverb, r0.arg2_exact: natural gas, r0.arg2_fbid_s: 05k4k, r1.conf_f: 0.935, r1.arg2: the troposphere, r0.arg2: natural gas, r0.rel: is a natural component of, r1.namespace: reverb, r1.arg1: Methane, r0.corpora_ss: List(cw), r1.rel_exact: is well-mixed in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 6, r0.conf_f: 0.681, r1.id: reverb-232576646, r0.arg1_exact: ethane, r1.arg1_exact: Methane, r1.corpora_ss: List(cw)),$x: ($x, be component of, gasses) ($x, are in, the troposphere))),AnswerState(ethane))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4366787075996399, minimum join key similarity -> 0.9230769230769231, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.75, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.438671260914556)
What gasses are in the troposphere?	carbon monoxide	-3.66427342661094	Derivation(What gasses are in the troposphere?,carbon monoxide,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "is an example of", gasses) ($x, are in, the troposphere),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (gasses, would be as, $x) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: (gasses, would be as, $x) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0990h, r0.arg1: Greenhouse gases, r0.rel_exact: would be defined as, r1.arg1_fbid_s: 01s7k, r0.id: reverb-130974007, r1.rel: is transported in, r0.namespace: reverb, r0.arg2_exact: carbon monoxide, r0.arg2_fbid_s: 01v1v, r1.conf_f: 0.9, r1.arg2: the mid-troposphere, r0.arg2: carbon monoxide, r0.rel: would be defined as, r1.namespace: reverb, r1.arg1: Carbon dioxide, r0.corpora_ss: List(cw), r1.rel_exact: is transported in, r0.num_extrs_i: 2, r1.arg2_exact: the mid-troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.982, r1.id: reverb-247218450, r0.arg1_exact: Greenhouse gases, r1.arg1_exact: Carbon dioxide, r1.corpora_ss: List(cw)),$x: (gasses, would be as, $x) ($x, are in, the troposphere))),AnswerState(carbon monoxide))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 0.7586206896551724, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.4, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.66427342661094)
What gasses are in the troposphere?	The United States	-3.8639243985494405	Derivation(What gasses are in the troposphere?,The United States,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: The United States, r0.rel_exact: is a large consumer of, r1.arg1_fbid_s: 09c7w0, r0.id: reverb-293258076, r1.rel: is located in, r0.namespace: reverb, r0.arg2_exact: natural gas, r0.arg2_fbid_s: 05k4k, r1.conf_f: 0.900808, r1.arg2: the troposphere, r1.arg2_fbid_s: 0bhj2, r0.arg2: natural gas, r0.rel: is a large consumer of, r1.namespace: openie4, r1.arg1: the United States, r0.corpora_ss: List(cw), r1.rel_exact: is located in, r0.num_extrs_i: 3, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.923, r1.id: openie4-31223829, r0.arg1_exact: The United States, r1.arg1_exact: the United States, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(The United States))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9411764705882353, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.75, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.8639243985494405)
What gasses are in the troposphere?	the water vapor	-3.892854057686848	Derivation(What gasses are in the troposphere?,the water vapor,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: the water vapor, r0.rel_exact: is a lot more efficient as, r0.id: reverb-17566350, r1.rel: is found in, r0.namespace: reverb, r0.arg2_exact: a greenhouse gas, r1.conf_f: 0.789, r1.arg2: the troposphere, r0.arg2: a greenhouse gas, r0.rel: is a lot more efficient as, r1.namespace: reverb, r1.arg1: the water vapor, r0.corpora_ss: List(cw), r1.rel_exact: is found in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.593, r1.id: reverb-77407273, r0.arg1_exact: the water vapor, r1.arg1_exact: the water vapor, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(the water vapor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.892854057686848)
What gasses are in the troposphere?	the United States	-4.461668641853428	Derivation(What gasses are in the troposphere?,the United States,Vector(QaStep(What gasses are in the troposphere?,QuestionStateImpl(What gasses are in the troposphere?,Sentence(What gasses are in the troposphere?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, "type", gasses) ($x, are in, the troposphere),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true)), QaStep(What gasses are in the troposphere?,QueryState($x: ($x, be a, gasses) ($x, are in, the troposphere),true),ExecutionAction(ExecTuple((r0.arg1: the United States, r0.rel_exact: is a victim of, r1.arg1_fbid_s: 09c7w0, r0.id: reverb-51158500, r1.rel: is located in, r0.namespace: reverb, r0.arg2_exact: natural gas development, r1.conf_f: 0.900808, r1.arg2: the troposphere, r1.arg2_fbid_s: 0bhj2, r0.arg2: natural gas development, r0.rel: is a victim of, r1.namespace: openie4, r1.arg1: the United States, r0.corpora_ss: List(cw), r1.rel_exact: is located in, r0.num_extrs_i: 2, r1.arg2_exact: the troposphere, r1.num_extrs_i: 2, r0.conf_f: 0.706, r1.id: openie4-31223829, r0.arg1_exact: the United States, r1.arg1_exact: the United States, r1.corpora_ss: List(cw)),$x: ($x, be a, gasses) ($x, are in, the troposphere))),AnswerState(the United States))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6, question prefix = 'what' and answer shape = aaa Aaaaa Aaaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.461668641853428)
What are cigarettes made of?	a 10 % legislated increase	1.9112211981120912	Derivation(What are cigarettes made of?,a 10 % legislated increase,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: made up of, r0.id: reverb-86351327, r0.namespace: reverb, r0.arg2_exact: a 10 % legislated increase, r0.arg2: a 10 % legislated increase, r0.rel: made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.681, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a 10 % legislated increase))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = a 11 % aaaa aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9112211981120912)
What are cigarettes made of?	bright-leaf?s milder	1.9112211981120912	Derivation(What are cigarettes made of?,bright-leaf?s milder,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: made use of, r0.id: reverb-79876844, r0.namespace: reverb, r0.arg2_exact: bright-leaf?s milder, r0.arg2: bright-leaf?s milder, r0.rel: made use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.549, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(bright-leaf?s milder))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa-aaaa?a aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9112211981120912)
What are cigarettes made of?	an electronic airflow sensor	1.9112211981120912	Derivation(What are cigarettes made of?,an electronic airflow sensor,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarette, r0.rel_exact: make use of, r0.id: reverb-140514206, r0.namespace: reverb, r0.arg2_exact: an electronic airflow sensor, r0.arg2: an electronic airflow sensor, r0.rel: make use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.712, r0.arg1_exact: cigarette),$x: (cigarettes, made of, $x))),AnswerState(an electronic airflow sensor))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aa aaaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9112211981120912)
What are cigarettes made of?	linen or flax	1.9112211981120912	Derivation(What are cigarettes made of?,linen or flax,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: is made of, r0.id: reverb-176146854, r0.namespace: reverb, r0.arg2_exact: linen or flax, r0.arg2: linen or flax, r0.rel: is made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.789, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(linen or flax))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa aa aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9112211981120912)
What are cigarettes made of?	nicotine patches	1.687741246092154	Derivation(What are cigarettes made of?,nicotine patches,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: make use of, r0.id: reverb-297042868, r0.namespace: reverb, r0.arg2_exact: nicotine patches, r0.arg2: nicotine patches, r0.rel: make use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.801, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(nicotine patches))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.687741246092154)
What are cigarettes made of?	various substances	1.687741246092154	Derivation(What are cigarettes made of?,various substances,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made of, r0.id: reverb-82677409, r0.namespace: reverb, r0.arg2_exact: various substances, r0.arg2: various substances, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.952, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(various substances))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.687741246092154)
What are cigarettes made of?	a multitude different types	1.5088280717175795	Derivation(What are cigarettes made of?,a multitude different types,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made up of, r0.id: reverb-386594065, r0.namespace: reverb, r0.arg2_exact: a multitude different types, r0.arg2: a multitude different types, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.866, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a multitude different types))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5088280717175795)
What are cigarettes made of?	a selection	1.5021795183440727	Derivation(What are cigarettes made of?,a selection,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made of, r0.id: reverb-49986190, r0.namespace: reverb, r0.arg2_exact: a selection, r0.arg2: a selection, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.789, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a selection))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.5021795183440727)
What are cigarettes made of?	such ingredients	1.2853481196976422	Derivation(What are cigarettes made of?,such ingredients,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: are made up of, r0.id: reverb-382313669, r0.namespace: reverb, r0.arg2_exact: such ingredients, r0.arg2: such ingredients, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.686, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(such ingredients))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2853481196976422)
What are cigarettes made of?	day	1.2673921958808723	Derivation(What are cigarettes made of?,day,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: they?ll make the most of, r0.id: reverb-364691975, r0.namespace: reverb, r0.arg2_exact: day, r0.arg2: day, r0.rel: they?ll make the most of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.622, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(day))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2673921958808723)
What are cigarettes made of?	an Electronic Cigarette	1.2673921958808723	Derivation(What are cigarettes made of?,an Electronic Cigarette,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: have making the use of, r0.id: reverb-253583964, r0.namespace: reverb, r0.arg2_exact: an Electronic Cigarette, r0.arg2: an Electronic Cigarette, r0.rel: have making the use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.711, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(an Electronic Cigarette))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = aa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.2673921958808723)
What are cigarettes made of?	a few leaves	1.195441515046464	Derivation(What are cigarettes made of?,a few leaves,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,can be make from,false,22716.0,674.0,17.0,0.5715362131595612),QueryState($x: (cigarettes, can be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, can be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: can be made from, r0.id: reverb-346407898, r0.namespace: reverb, r0.arg2_exact: a few leaves, r0.arg2: a few leaves, r0.rel: can be made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.584, r0.arg1_exact: cigarettes),$x: (cigarettes, can be make from, $x))),AnswerState(a few leaves))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5715362131595612, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'what' and answer shape = a aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.195441515046464)
What are cigarettes made of?	a mixture	1.0932092434035374	Derivation(What are cigarettes made of?,a mixture,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: A cigarette, r0.rel_exact: made of, r0.id: reverb-116423559, r0.namespace: reverb, r0.arg2_exact: a mixture, r0.arg2: a mixture, r0.rel: made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.712, r0.arg1_exact: A cigarette),$x: (cigarettes, made of, $x))),AnswerState(a mixture))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.0932092434035374)
What are cigarettes made of?	The dried leaves and berries	1.0896908680324686	Derivation(What are cigarettes made of?,The dried leaves and berries,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,make into,true,22716.0,1021.0,30.0,0.5763073265552521),QueryState($x: ($x, make into, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, make into, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: The dried leaves and berries, r0.rel_exact: made into, r0.id: reverb-255694965, r0.namespace: reverb, r0.arg2_exact: cigarettes, r0.arg2_fbid_s: 09k76, r0.arg2: cigarettes, r0.rel: made into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.92, r0.arg1_exact: The dried leaves and berries),$x: ($x, make into, cigarettes))),AnswerState(The dried leaves and berries))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5763073265552521, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0896908680324686)
What are cigarettes made of?	different blends	1.0527366342970592	Derivation(What are cigarettes made of?,different blends,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made from, r0.id: reverb-282228951, r0.namespace: reverb, r0.arg2_exact: different blends, r0.arg2: different blends, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.891, r0.arg1_exact: Cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(different blends))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0527366342970592)
What are cigarettes made of?	similar materials	1.0527366342970592	Derivation(What are cigarettes made of?,similar materials,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: are made from, r0.id: reverb-68682861, r0.namespace: reverb, r0.arg2_exact: similar materials, r0.arg2: similar materials, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.827, r0.arg1_exact: cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(similar materials))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0527366342970592)
What are cigarettes made of?	hair breakable	1.043912243860935	Derivation(What are cigarettes made of?,hair breakable,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: usually makes the head of, r0.id: reverb-206830000, r0.namespace: reverb, r0.arg2_exact: hair breakable, r0.arg2: hair breakable, r0.rel: usually makes the head of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.765, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(hair breakable))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.043912243860935)
What are cigarettes made of?	either	0.9958955815290367	Derivation(What are cigarettes made of?,either,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: is made up of, r0.id: reverb-352259972, r0.namespace: reverb, r0.arg2_exact: either, r0.arg2: either, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.708, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(either))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9958955815290367)
What are cigarettes made of?	smokes	0.9958955815290367	Derivation(What are cigarettes made of?,smokes,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: make a pack of, r0.id: reverb-67097044, r0.namespace: reverb, r0.arg2_exact: smokes, r0.arg2: smokes, r0.rel: make a pack of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.71, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(smokes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9958955815290367)
What are cigarettes made of?	greater	0.9958955815290367	Derivation(What are cigarettes made of?,greater,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarette, r0.rel_exact: is made up of, r0.id: reverb-118701807, r0.namespace: reverb, r0.arg2_exact: greater, r0.arg2: greater, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.79, r0.arg1_exact: Cigarette),$x: (cigarettes, made of, $x))),AnswerState(greater))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9958955815290367)
What are cigarettes made of?	tremor worse	0.88295499330313	Derivation(What are cigarettes made of?,tremor worse,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: may temporarily make this type of, r0.id: reverb-269186982, r0.namespace: reverb, r0.arg2_exact: tremor worse, r0.arg2: tremor worse, r0.rel: may temporarily make this type of, r0.corpora_ss: List(cw), r0.num_extrs_i: 47, r0.conf_f: 0.654, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(tremor worse))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.88295499330313)
What are cigarettes made of?	tobacco	0.8683198991177783	Derivation(What are cigarettes made of?,tobacco,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made of, r0.id: reverb-140177516, r0.namespace: reverb, r0.arg2_exact: tobacco, r0.arg2_fbid_s: 07ly_, r0.arg2: tobacco, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.952, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(tobacco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8683198991177783)
What are cigarettes made of?	Little White Slavers	0.8034488526399644	Derivation(What are cigarettes made of?,Little White Slavers,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be commonly use for,true,22716.0,246.0,6.0,0.5704875886440277),QueryState($x: ($x, be commonly use for, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be commonly use for, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: Little White Slavers, r0.rel_exact: were commonly used names for, r0.id: reverb-89342201, r0.namespace: reverb, r0.arg2_exact: cigarettes, r0.arg2_fbid_s: 09k76, r0.arg2: cigarettes, r0.rel: were commonly used names for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.911, r0.arg1_exact: Little White Slavers),$x: ($x, be commonly use for, cigarettes))),AnswerState(Little White Slavers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5704875886440277, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),0.8034488526399644)
What are cigarettes made of?	a lot more 8,500 products	0.697464670382532	Derivation(What are cigarettes made of?,a lot more 8,500 products,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0jpmt, r0.arg1: cigarette smoking, r0.rel_exact: is made of, r0.id: reverb-227603963, r0.namespace: reverb, r0.arg2_exact: a lot more 8,500 products, r0.arg2: a lot more 8,500 products, r0.rel: is made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: cigarette smoking),$x: (cigarettes, made of, $x))),AnswerState(a lot more 8,500 products))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = a aaa aaaa 1,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	cellulose acetate tow fibers	0.697464670382532	Derivation(What are cigarettes made of?,cellulose acetate tow fibers,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette filters, r0.rel_exact: are made of, r0.id: reverb-17522971, r0.namespace: reverb, r0.arg2_exact: cellulose acetate tow fibers, r0.arg2: cellulose acetate tow fibers, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.952, r0.arg1_exact: Cigarette filters),$x: (cigarettes, made of, $x))),AnswerState(cellulose acetate tow fibers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa aaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	self-extinguishing paper	0.697464670382532	Derivation(What are cigarettes made of?,self-extinguishing paper,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: The cigarette, r0.rel_exact: was made of, r0.id: reverb-247961989, r0.namespace: reverb, r0.arg2_exact: self-extinguishing paper, r0.arg2: self-extinguishing paper, r0.rel: was made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.527, r0.arg1_exact: The cigarette),$x: (cigarettes, made of, $x))),AnswerState(self-extinguishing paper))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaaa-aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	a battery operated bottom	0.697464670382532	Derivation(What are cigarettes made of?,a battery operated bottom,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarettes, r0.rel_exact: are made of, r0.id: reverb-303841022, r0.namespace: reverb, r0.arg2_exact: a battery operated bottom, r0.arg2: a battery operated bottom, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.828, r0.arg1_exact: Electronic Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a battery operated bottom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	a battery run base	0.697464670382532	Derivation(What are cigarettes made of?,a battery run base,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarettes, r0.rel_exact: are made of, r0.id: reverb-310139765, r0.namespace: reverb, r0.arg2_exact: a battery run base, r0.arg2: a battery run base, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.866, r0.arg1_exact: Electronic Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a battery run base))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, question prefix = 'what' and answer shape = a aaaa aaa aaaa -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	cellulose acetate tow	0.697464670382532	Derivation(What are cigarettes made of?,cellulose acetate tow,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette filters, r0.rel_exact: are made of, r0.id: reverb-221290592, r0.namespace: reverb, r0.arg2_exact: cellulose acetate tow, r0.arg2: cellulose acetate tow, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.984, r0.arg1_exact: Cigarette filters),$x: (cigarettes, made of, $x))),AnswerState(cellulose acetate tow))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'what' and answer shape = aaaa aaaa aaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	a battery driven base	0.697464670382532	Derivation(What are cigarettes made of?,a battery driven base,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarettes, r0.rel_exact: are made of, r0.id: reverb-136244810, r0.namespace: reverb, r0.arg2_exact: a battery driven base, r0.arg2: a battery driven base, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.828, r0.arg1_exact: Electronic Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a battery driven base))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What are cigarettes made of?	fine tobacco leaves	0.5784327528031556	Derivation(What are cigarettes made of?,fine tobacco leaves,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarette, r0.rel_exact: is made from, r0.id: reverb-342669055, r0.namespace: reverb, r0.arg2_exact: fine tobacco leaves, r0.arg2: fine tobacco leaves, r0.rel: is made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.636, r0.arg1_exact: Cigarette),$x: (cigarettes, be make from, $x))),AnswerState(fine tobacco leaves))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5784327528031556)
What are cigarettes made of?	cigarette smoking	0.5139434350551648	Derivation(What are cigarettes made of?,cigarette smoking,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarette, r0.rel_exact: often is made up of, r0.id: reverb-319749219, r0.namespace: reverb, r0.arg2_exact: cigarette smoking, r0.arg2_fbid_s: 0jpmt, r0.arg2: cigarette smoking, r0.rel: often is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.663, r0.arg1_exact: cigarette),$x: (cigarettes, made of, $x))),AnswerState(cigarette smoking))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5139434350551648)
What are cigarettes made of?	tobacco companies	0.4977655041306863	Derivation(What are cigarettes made of?,tobacco companies,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use to make,true,22716.0,1362.0,51.0,0.5838840901851654),QueryState($x: ($x, be use to make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use to make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: tobacco companies, r0.rel_exact: is now used to make, r0.id: reverb-236695806, r0.namespace: reverb, r0.arg2_exact: cigarettes, r0.arg2_fbid_s: 09k76, r0.arg2: cigarettes, r0.rel: is now used to make, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.672, r0.arg1_exact: tobacco companies),$x: ($x, be use to make, cigarettes))),AnswerState(tobacco companies))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5838840901851654, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4977655041306863)
What are cigarettes made of?	blond tobacco	0.4739847183625947	Derivation(What are cigarettes made of?,blond tobacco,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Gauloises cigarettes, r0.rel_exact: were made of, r0.id: reverb-321756773, r0.namespace: reverb, r0.arg2_exact: blond tobacco, r0.arg2: blond tobacco, r0.rel: were made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.684, r0.arg1_exact: Gauloises cigarettes),$x: (cigarettes, made of, $x))),AnswerState(blond tobacco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4739847183625947)
What are cigarettes made of?	different types	0.4739847183625947	Derivation(What are cigarettes made of?,different types,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: The cigarette, r0.rel_exact: is made of, r0.id: reverb-203494929, r0.namespace: reverb, r0.arg2_exact: different types, r0.arg2: different types, r0.rel: is made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.882, r0.arg1_exact: The cigarette),$x: (cigarettes, made of, $x))),AnswerState(different types))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4739847183625947)
What are cigarettes made of?	different components	0.4739847183625947	Derivation(What are cigarettes made of?,different components,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are made of, r0.id: reverb-188982200, r0.namespace: reverb, r0.arg2_exact: different components, r0.arg2: different components, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.878, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(different components))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4739847183625947)
What are cigarettes made of?	thousands	0.46592677272326655	Derivation(What are cigarettes made of?,thousands,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: are made up of, r0.id: reverb-343802010, r0.namespace: reverb, r0.arg2_exact: thousands, r0.arg2_fbid_s: 02xf9h, r0.arg2: thousands, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.766, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(thousands))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.46592677272326655)
What are cigarettes made of?	money	0.46592677272326655	Derivation(What are cigarettes made of?,money,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: make a lot of, r0.id: reverb-236266428, r0.namespace: reverb, r0.arg2_exact: money, r0.arg2_fbid_s: 04_x4, r0.arg2: money, r0.rel: make a lot of, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.792, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(money))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.46592677272326655)
What are cigarettes made of?	revenues	0.46592677272326655	Derivation(What are cigarettes made of?,revenues,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: make up two-thirds of, r0.id: reverb-256415950, r0.namespace: reverb, r0.arg2_exact: revenues, r0.arg2_fbid_s: 01kr9k, r0.arg2: revenues, r0.rel: make up two-thirds of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.717, r0.arg1_exact: Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(revenues))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.46592677272326655)
What are cigarettes made of?	tobacco and pasta	0.3311988290773952	Derivation(What are cigarettes made of?,tobacco and pasta,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: made of, r0.id: openie4-5744413, r0.namespace: openie4, r0.arg2_exact: tobacco and pasta, r0.arg2_fbid_s: 05z55, r0.arg2: tobacco and pasta, r0.rel: made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8942434, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(tobacco and pasta))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3311988290773952)
What are cigarettes made of?	3 distinct areas	0.29507154398801994	Derivation(What are cigarettes made of?,3 distinct areas,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: The cigarette, r0.rel_exact: is made up of, r0.id: reverb-130621892, r0.namespace: reverb, r0.arg2_exact: 3 distinct areas, r0.arg2: 3 distinct areas, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.919, r0.arg1_exact: The cigarette),$x: (cigarettes, made of, $x))),AnswerState(3 distinct areas))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 1 aaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	h2o vapour	0.29507154398801994	Derivation(What are cigarettes made of?,h2o vapour,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: the cigarette, r0.rel_exact: only makes use of, r0.id: reverb-282773761, r0.namespace: reverb, r0.arg2_exact: h2o vapour, r0.arg2: h2o vapour, r0.rel: only makes use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.72, r0.arg1_exact: the cigarette),$x: (cigarettes, made of, $x))),AnswerState(h2o vapour))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = a1a aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	a smoke free life	0.29507154398801994	Derivation(What are cigarettes made of?,a smoke free life,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: this cigarette, r0.rel_exact: make a start of, r0.id: reverb-41775687, r0.namespace: reverb, r0.arg2_exact: a smoke free life, r0.arg2: a smoke free life, r0.rel: make a start of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.731, r0.arg1_exact: this cigarette),$x: (cigarettes, made of, $x))),AnswerState(a smoke free life))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	steel or plastic	0.29507154398801994	Derivation(What are cigarettes made of?,steel or plastic,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: electronic cigarette, r0.rel_exact: is either made of, r0.id: reverb-305543279, r0.namespace: reverb, r0.arg2_exact: steel or plastic, r0.arg2: steel or plastic, r0.rel: is either made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: electronic cigarette),$x: (cigarettes, made of, $x))),AnswerState(steel or plastic))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa aa aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	4 parts	0.29507154398801994	Derivation(What are cigarettes made of?,4 parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Each cigarette, r0.rel_exact: is made up of, r0.id: reverb-267990990, r0.namespace: reverb, r0.arg2_exact: 4 parts, r0.arg2: 4 parts, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.812, r0.arg1_exact: Each cigarette),$x: (cigarettes, made of, $x))),AnswerState(4 parts))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = 1 aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	an herb or combination	0.29507154398801994	Derivation(What are cigarettes made of?,an herb or combination,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Herbal cigarettes, r0.rel_exact: are made primarily of, r0.id: reverb-329430355, r0.namespace: reverb, r0.arg2_exact: an herb or combination, r0.arg2: an herb or combination, r0.rel: are made primarily of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.857, r0.arg1_exact: Herbal cigarettes),$x: (cigarettes, made of, $x))),AnswerState(an herb or combination))),SparseVector(question prefix = 'what' and answer shape = aa aaaa aa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29507154398801994)
What are cigarettes made of?	a battery	0.2884229906145134	Derivation(What are cigarettes made of?,a battery,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarettes, r0.rel_exact: are made of, r0.id: reverb-246533359, r0.namespace: reverb, r0.arg2_exact: a battery, r0.arg2: a battery, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.547, r0.arg1_exact: Electronic Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a battery))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.2884229906145134)
What are cigarettes made of?	a cartridge	0.2884229906145134	Derivation(What are cigarettes made of?,a cartridge,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Each cigarette, r0.rel_exact: is made of, r0.id: reverb-338090430, r0.namespace: reverb, r0.arg2_exact: a cartridge, r0.arg2: a cartridge, r0.rel: is made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.827, r0.arg1_exact: Each cigarette),$x: (cigarettes, made of, $x))),AnswerState(a cartridge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.2884229906145134)
What are cigarettes made of?	reeds	0.18453218019398887	Derivation(What are cigarettes made of?,reeds,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: such cigarettes, r0.rel_exact: were made of, r0.id: reverb-259430008, r0.namespace: reverb, r0.arg2_exact: reeds, r0.arg2: reeds, r0.rel: were made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.752, r0.arg1_exact: such cigarettes),$x: (cigarettes, made of, $x))),AnswerState(reeds))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.18453218019398887)
What are cigarettes made of?	atomizer	0.18453218019398887	Derivation(What are cigarettes made of?,atomizer,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: these cigarettes, r0.rel_exact: make use of, r0.id: reverb-225972752, r0.namespace: reverb, r0.arg2_exact: atomizer, r0.arg2: atomizer, r0.rel: make use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.795, r0.arg1_exact: these cigarettes),$x: (cigarettes, made of, $x))),AnswerState(atomizer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.18453218019398887)
What are cigarettes made of?	components	0.18453218019398887	Derivation(What are cigarettes made of?,components,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are made of, r0.id: reverb-108268523, r0.namespace: reverb, r0.arg2_exact: components, r0.arg2: components, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.794, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(components))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.18453218019398887)
What are cigarettes made of?	4,000 chemicals	0.08166673873557484	Derivation(What are cigarettes made of?,4,000 chemicals,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: cigarette smoke, r0.rel_exact: is made up of over, r0.id: reverb-34001523, r0.namespace: reverb, r0.arg2_exact: 4,000 chemicals, r0.arg2: 4,000 chemicals, r0.rel: is made up of over, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.863, r0.arg1_exact: cigarette smoke),$x: (cigarettes, made of, $x))),AnswerState(4,000 chemicals))),SparseVector(question prefix = 'what' and answer shape = 1,111 aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.08166673873557484)
What are cigarettes made of?	fresh tobacco	0.07159159196808262	Derivation(What are cigarettes made of?,fresh tobacco,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Dunhill Cigarettes, r0.rel_exact: are made up of, r0.id: reverb-75664212, r0.namespace: reverb, r0.arg2_exact: fresh tobacco, r0.arg2: fresh tobacco, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.869, r0.arg1_exact: Dunhill Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(fresh tobacco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.07159159196808262)
What are cigarettes made of?	modeling clay	0.07159159196808262	Derivation(What are cigarettes made of?,modeling clay,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: ?The cigarette, r0.rel_exact: was made out of, r0.id: reverb-66497739, r0.namespace: reverb, r0.arg2_exact: modeling clay, r0.arg2: modeling clay, r0.rel: was made out of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.965, r0.arg1_exact: ?The cigarette),$x: (cigarettes, made of, $x))),AnswerState(modeling clay))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.07159159196808262)
What are cigarettes made of?	thin fibers	0.07159159196808262	Derivation(What are cigarettes made of?,thin fibers,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: cigarette filters, r0.rel_exact: are made of very, r0.id: reverb-61411216, r0.namespace: reverb, r0.arg2_exact: thin fibers, r0.arg2: thin fibers, r0.rel: are made of very, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.763, r0.arg1_exact: cigarette filters),$x: (cigarettes, made of, $x))),AnswerState(thin fibers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.07159159196808262)
What are cigarettes made of?	three parts	0.07159159196808262	Derivation(What are cigarettes made of?,three parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are made up of, r0.id: reverb-252430746, r0.namespace: reverb, r0.arg2_exact: three parts, r0.arg2: three parts, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.944, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(three parts))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.07159159196808262)
What are cigarettes made of?	Traditional English blend	0.06246005858743686	Derivation(What are cigarettes made of?,Traditional English blend,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: Rich cigarettes, r0.rel_exact: are made from, r0.id: reverb-171856555, r0.namespace: reverb, r0.arg2_exact: Traditional English blend, r0.arg2: Traditional English blend, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.936, r0.arg1_exact: Rich cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(Traditional English blend))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = Aaaaa Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06246005858743686)
What are cigarettes made of?	non-biodegradable materials	0.06246005858743686	Derivation(What are cigarettes made of?,non-biodegradable materials,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: Cigarette filters, r0.rel_exact: are made from, r0.id: reverb-124940271, r0.namespace: reverb, r0.arg2_exact: non-biodegradable materials, r0.arg2: non-biodegradable materials, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: Cigarette filters),$x: (cigarettes, be make from, $x))),AnswerState(non-biodegradable materials))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaa-aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06246005858743686)
What are cigarettes made of?	gum	0.05363566815131271	Derivation(What are cigarettes made of?,gum,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: " cigarettes, r0.rel_exact: 're fake ones made of, r0.id: reverb-76219160, r0.namespace: reverb, r0.arg2_exact: gum, r0.arg2: gum, r0.rel: 're fake ones made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.765, r0.arg1_exact: " cigarettes),$x: (cigarettes, made of, $x))),AnswerState(gum))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.05363566815131271)
What are cigarettes made of?	the highest quality tobacco	0.006259516364546913	Derivation(What are cigarettes made of?,the highest quality tobacco,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Esse cigarette, r0.rel_exact: is made up of, r0.id: reverb-59937860, r0.namespace: reverb, r0.arg2_exact: the highest quality tobacco, r0.arg2: the highest quality tobacco, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.884, r0.arg1_exact: Esse cigarette),$x: (cigarettes, made of, $x))),AnswerState(the highest quality tobacco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.006259516364546913)
What are cigarettes made of?	three main parts	-3.191631313089749E-4	Derivation(What are cigarettes made of?,three main parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: E cigarettes, r0.rel_exact: are made of, r0.id: reverb-118117390, r0.namespace: reverb, r0.arg2_exact: three main parts, r0.arg2: three main parts, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 22, r0.conf_f: 0.983, r0.arg1_exact: E cigarettes),$x: (cigarettes, made of, $x))),AnswerState(three main parts))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.191631313089749E-4)
What are cigarettes made of?	five major parts	-3.191631313089749E-4	Derivation(What are cigarettes made of?,five major parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Electric cigarettes, r0.rel_exact: are made of, r0.id: reverb-151020403, r0.namespace: reverb, r0.arg2_exact: five major parts, r0.arg2: five major parts, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.901, r0.arg1_exact: Electric cigarettes),$x: (cigarettes, made of, $x))),AnswerState(five major parts))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.191631313089749E-4)
What are cigarettes made of?	the Cannabis sativa plant	-0.009639319905522026	Derivation(What are cigarettes made of?,the Cannabis sativa plant,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use to make,true,22716.0,1362.0,51.0,0.5838840901851654),QueryState($x: ($x, be use to make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use to make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: the Cannabis sativa plant, r0.rel_exact: are used to make, r0.id: reverb-366145592, r0.namespace: reverb, r0.arg2_exact: Marijuana cigarette, r0.arg2: Marijuana cigarette, r0.rel: are used to make, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.801, r0.arg1_exact: the Cannabis sativa plant),$x: ($x, be use to make, cigarettes))),AnswerState(the Cannabis sativa plant))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5838840901851654, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'what' and answer shape = aaa Aaaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.009639319905522026)
What are cigarettes made of?	Atomizer	-0.048463375482336146	Derivation(What are cigarettes made of?,Atomizer,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarette, r0.rel_exact: is made up of, r0.id: reverb-85621634, r0.namespace: reverb, r0.arg2_exact: Atomizer, r0.arg2: Atomizer, r0.rel: is made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.992, r0.arg1_exact: Electronic Cigarette),$x: (cigarettes, made of, $x))),AnswerState(Atomizer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.048463375482336146)
What are cigarettes made of?	sales	-0.051435818355391905	Derivation(What are cigarettes made of?,sales,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: make up a only small percentage of, r0.id: reverb-48198660, r0.namespace: reverb, r0.arg2_exact: sales, r0.arg2_fbid_s: 014dgf, r0.arg2: sales, r0.rel: make up a only small percentage of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.717, r0.arg1_exact: cigarettes),$x: (cigarettes, made of, $x))),AnswerState(sales))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.051435818355391905)
What are cigarettes made of?	synthetic fibers	-0.055984090443175316	Derivation(What are cigarettes made of?,synthetic fibers,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette butts, r0.rel_exact: are made of, r0.id: reverb-94881691, r0.namespace: reverb, r0.arg2_exact: synthetic fibers, r0.arg2_fbid_s: 01nszy, r0.arg2: synthetic fibers, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.754, r0.arg1_exact: Cigarette butts),$x: (cigarettes, made of, $x))),AnswerState(synthetic fibers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.055984090443175316)
What are cigarettes made of?	cellulose acetate	-0.055984090443175316	Derivation(What are cigarettes made of?,cellulose acetate,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette butts, r0.rel_exact: are made of, r0.id: reverb-329826796, r0.namespace: reverb, r0.arg2_exact: cellulose acetate, r0.arg2_fbid_s: 02h4wj, r0.arg2: cellulose acetate, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.915, r0.arg1_exact: Cigarette butts),$x: (cigarettes, made of, $x))),AnswerState(cellulose acetate))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.055984090443175316)
What are cigarettes made of?	cellulose-acetate	-0.11991868849369414	Derivation(What are cigarettes made of?,cellulose-acetate,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette filters, r0.rel_exact: are made of, r0.id: reverb-67484278, r0.namespace: reverb, r0.arg2_exact: cellulose-acetate, r0.arg2_fbid_s: 02h4wj, r0.arg2: cellulose-acetate, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.952, r0.arg1_exact: Cigarette filters),$x: (cigarettes, made of, $x))),AnswerState(cellulose-acetate))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = aaaa-aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.11991868849369414)
What are cigarettes made of?	each pound	-0.16101989343250045	Derivation(What are cigarettes made of?,each pound,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: 523 cigarettes, r0.rel_exact: were made from, r0.id: reverb-281268394, r0.namespace: reverb, r0.arg2_exact: each pound, r0.arg2: each pound, r0.rel: were made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.863, r0.arg1_exact: 523 cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(each pound))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.16101989343250045)
What are cigarettes made of?	cellouse acetate	-0.16101989343250045	Derivation(What are cigarettes made of?,cellouse acetate,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: cigarette butts, r0.rel_exact: are made from, r0.id: reverb-319967182, r0.namespace: reverb, r0.arg2_exact: cellouse acetate, r0.arg2: cellouse acetate, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.815, r0.arg1_exact: cigarette butts),$x: (cigarettes, be make from, $x))),AnswerState(cellouse acetate))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.16101989343250045)
What are cigarettes made of?	public statement	-0.1698442838686246	Derivation(What are cigarettes made of?,public statement,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: a cigarette, r0.rel_exact: was making a kind of, r0.id: reverb-138493811, r0.namespace: reverb, r0.arg2_exact: public statement, r0.arg2: public statement, r0.rel: was making a kind of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.776, r0.arg1_exact: a cigarette),$x: (cigarettes, made of, $x))),AnswerState(public statement))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1698442838686246)
What are cigarettes made of?	litter items	-0.1698442838686246	Derivation(What are cigarettes made of?,litter items,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette butts, r0.rel_exact: make up the majority of, r0.id: reverb-295505516, r0.namespace: reverb, r0.arg2_exact: litter items, r0.arg2: litter items, r0.rel: make up the majority of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.814, r0.arg1_exact: Cigarette butts),$x: (cigarettes, made of, $x))),AnswerState(litter items))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1698442838686246)
What are cigarettes made of?	a battery compartment	-0.20265173216519028	Derivation(What are cigarettes made of?,a battery compartment,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are made up of, r0.id: reverb-43223855, r0.namespace: reverb, r0.arg2_exact: a battery compartment, r0.arg2: a battery compartment, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.984, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(a battery compartment))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.20265173216519028)
What are cigarettes made of?	female plants	-0.21254216761725786	Derivation(What are cigarettes made of?,female plants,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use for make,true,22716.0,136.0,13.0,0.6131709218025208),QueryState($x: ($x, be use for make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use for make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: female plants, r0.rel_exact: are used for making, r0.id: reverb-97497328, r0.namespace: reverb, r0.arg2_exact: Cannabis cigarettes, r0.arg2: Cannabis cigarettes, r0.rel: are used for making, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.881, r0.arg1_exact: female plants),$x: ($x, be use for make, cigarettes))),AnswerState(female plants))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6131709218025208, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.21254216761725786)
What are cigarettes made of?	cigarette makers	-0.23311927192545934	Derivation(What are cigarettes made of?,cigarette makers,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use to make,true,22716.0,1362.0,51.0,0.5838840901851654),QueryState($x: ($x, be use to make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use to make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: cigarette makers, r0.rel_exact: is used to make, r0.id: reverb-221039632, r0.namespace: reverb, r0.arg2_exact: the cigarettes, r0.arg2: the cigarettes, r0.rel: is used to make, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.737, r0.arg1_exact: cigarette makers),$x: ($x, be use to make, cigarettes))),AnswerState(cigarette makers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5838840901851654, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.23311927192545934)
What are cigarettes made of?	the dried plant material	-0.2539269746034076	Derivation(What are cigarettes made of?,the dried plant material,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: a cigarette, r0.rel_exact: made of, r0.id: openie4-7003668, r0.namespace: openie4, r0.arg2_exact: the dried plant material, r0.arg2: the dried plant material, r0.rel: made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: a cigarette),$x: (cigarettes, made of, $x))),AnswerState(the dried plant material))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2539269746034076)
What are cigarettes made of?	the shredded leaves	-0.2790245367891302	Derivation(What are cigarettes made of?,the shredded leaves,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: Cigarettes, r0.rel_exact: are made from, r0.id: reverb-270851689, r0.namespace: reverb, r0.arg2_exact: the shredded leaves, r0.arg2: the shredded leaves, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.827, r0.arg1_exact: Cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(the shredded leaves))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.2790245367891302)
What are cigarettes made of?	metallic wrap	-0.3260264571610745	Derivation(What are cigarettes made of?,metallic wrap,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,make from,false,22716.0,21472.0,1246.0,0.5975738763809204),QueryState($x: (cigarettes, make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, make from, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: cigarettes, r0.rel_exact: made the transition from, r0.id: reverb-96557895, r0.namespace: reverb, r0.arg2_exact: metallic wrap, r0.arg2: metallic wrap, r0.rel: made the transition from, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.573, r0.arg1_exact: cigarettes),$x: (cigarettes, make from, $x))),AnswerState(metallic wrap))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5975738763809204, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3260264571610745)
What are cigarettes made of?	snakes and snails	-0.3338382747151466	Derivation(What are cigarettes made of?,snakes and snails,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: 's cigarette, r0.rel_exact: might have been made of, r0.id: reverb-300878082, r0.namespace: reverb, r0.arg2_exact: snakes and snails, r0.arg2: snakes and snails, r0.rel: might have been made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.593, r0.arg1_exact: 's cigarette),$x: (cigarettes, made of, $x))),AnswerState(snakes and snails))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3338382747151466)
What are cigarettes made of?	excellent ce	-0.3421254506557494	Derivation(What are cigarettes made of?,excellent ce,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: our cigarette ashtray, r0.rel_exact: is made from, r0.id: reverb-340844315, r0.namespace: reverb, r0.arg2_exact: excellent ce, r0.arg2: excellent ce, r0.rel: is made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.934, r0.arg1_exact: our cigarette ashtray),$x: (cigarettes, be make from, $x))),AnswerState(excellent ce))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaaa aa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3421254506557494)
What are cigarettes made of?	heavy-duty metal	-0.3421254506557494	Derivation(What are cigarettes made of?,heavy-duty metal,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: TubeCut cigarette machines, r0.rel_exact: are made from, r0.id: reverb-147510401, r0.namespace: reverb, r0.arg2_exact: heavy-duty metal, r0.arg2: heavy-duty metal, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.882, r0.arg1_exact: TubeCut cigarette machines),$x: (cigarettes, be make from, $x))),AnswerState(heavy-duty metal))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaaa-aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3421254506557494)
What are cigarettes made of?	a plastic-like material	-0.3421254506557494	Derivation(What are cigarettes made of?,a plastic-like material,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: most cigarette filters, r0.rel_exact: are made from, r0.id: reverb-355912605, r0.namespace: reverb, r0.arg2_exact: a plastic-like material, r0.arg2: a plastic-like material, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.925, r0.arg1_exact: most cigarette filters),$x: (cigarettes, be make from, $x))),AnswerState(a plastic-like material))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = a aaaa-aaaa aaaa -> 1.0),-0.3421254506557494)
What are cigarettes made of?	100 %	-0.3421254506557494	Derivation(What are cigarettes made of?,100 %,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make from,false,22716.0,20339.0,489.0,0.5700388252735138),QueryState($x: (cigarettes, be make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, be make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: Most Canadian cigarettes, r0.rel_exact: are made from, r0.id: reverb-64338695, r0.namespace: reverb, r0.arg2_exact: 100 %, r0.arg2: 100 %, r0.rel: are made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.84, r0.arg1_exact: Most Canadian cigarettes),$x: (cigarettes, be make from, $x))),AnswerState(100 %))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5700388252735138, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = 111 % -> 1.0),-0.3421254506557494)
What are cigarettes made of?	the ability	-0.3426440460386485	Derivation(What are cigarettes made of?,the ability,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: cigarette industry, r0.rel_exact: is making use of, r0.id: reverb-243008915, r0.namespace: reverb, r0.arg2_exact: the ability, r0.arg2: the ability, r0.rel: is making use of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.523, r0.arg1_exact: cigarette industry),$x: (cigarettes, made of, $x))),AnswerState(the ability))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3426440460386485)
What are cigarettes made of?	two components	-0.3426440460386485	Derivation(What are cigarettes made of?,two components,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are ordinarily made of, r0.id: reverb-39352829, r0.namespace: reverb, r0.arg2_exact: two components, r0.arg2: two components, r0.rel: are ordinarily made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.908, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(two components))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3426440460386485)
What are cigarettes made of?	the litter	-0.3426440460386485	Derivation(What are cigarettes made of?,the litter,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette butts, r0.rel_exact: make up half of, r0.id: reverb-265716310, r0.namespace: reverb, r0.arg2_exact: the litter, r0.arg2: the litter, r0.rel: make up half of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.814, r0.arg1_exact: Cigarette butts),$x: (cigarettes, made of, $x))),AnswerState(the litter))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3426440460386485)
What are cigarettes made of?	two elements	-0.3426440460386485	Derivation(What are cigarettes made of?,two elements,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic cigarettes, r0.rel_exact: are typically made of, r0.id: reverb-319487601, r0.namespace: reverb, r0.arg2_exact: two elements, r0.arg2: two elements, r0.rel: are typically made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.908, r0.arg1_exact: Electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(two elements))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3426440460386485)
What are cigarettes made of?	Lego pieces	-0.34357414967296185	Derivation(What are cigarettes made of?,Lego pieces,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,make from,false,22716.0,21472.0,1246.0,0.5975738763809204),QueryState($x: (cigarettes, make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: a huge cigarette stub, r0.rel_exact: made from, r0.id: reverb-96928146, r0.namespace: reverb, r0.arg2_exact: Lego pieces, r0.arg2: Lego pieces, r0.rel: made from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.88, r0.arg1_exact: a huge cigarette stub),$x: (cigarettes, make from, $x))),AnswerState(Lego pieces))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5975738763809204, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, question prefix = 'what' and answer shape = Aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.34357414967296185)
What are cigarettes made of?	cotton	-0.34543662861178104	Derivation(What are cigarettes made of?,cotton,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: cigarette filters, r0.rel_exact: are made of, r0.id: reverb-284670367, r0.namespace: reverb, r0.arg2_exact: cotton, r0.arg2_fbid_s: 095zt, r0.arg2: cotton, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.599, r0.arg1_exact: cigarette filters),$x: (cigarettes, made of, $x))),AnswerState(cotton))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.34543662861178104)
What are cigarettes made of?	silver	-0.34543662861178104	Derivation(What are cigarettes made of?,silver,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: cigarette cases, r0.rel_exact: are made of, r0.id: reverb-85478810, r0.namespace: reverb, r0.arg2_exact: silver, r0.arg2_fbid_s: 025sf8x, r0.arg2: silver, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.791, r0.arg1_exact: cigarette cases),$x: (cigarettes, made of, $x))),AnswerState(silver))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.34543662861178104)
What are cigarettes made of?	plastic	-0.34543662861178104	Derivation(What are cigarettes made of?,plastic,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Cigarette butts, r0.rel_exact: are made of, r0.id: reverb-278388061, r0.namespace: reverb, r0.arg2_exact: plastic, r0.arg2_fbid_s: 05z87, r0.arg2: plastic, r0.rel: are made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.852, r0.arg1_exact: Cigarette butts),$x: (cigarettes, made of, $x))),AnswerState(plastic))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.34543662861178104)
What are cigarettes made of?	the batch	-0.3528109747832242	Derivation(What are cigarettes made of?,the batch,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,make into,true,22716.0,1021.0,30.0,0.5763073265552521),QueryState($x: ($x, make into, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, make into, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: the batch, r0.rel_exact: made up into, r0.id: reverb-201983792, r0.namespace: reverb, r0.arg2_exact: cigarettes, r0.arg2_fbid_s: 09k76, r0.arg2: cigarettes, r0.rel: made up into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.748, r0.arg1_exact: the batch),$x: ($x, make into, cigarettes))),AnswerState(the batch))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5763073265552521, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3528109747832242)
What are cigarettes made of?	The leaves	-0.3717195510101732	Derivation(What are cigarettes made of?,The leaves,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be make into,true,22716.0,1348.0,47.0,0.5816545486450195),QueryState($x: ($x, be make into, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be make into, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: The leaves, r0.rel_exact: may be made up into, r0.id: reverb-201188243, r0.namespace: reverb, r0.arg2_exact: cigarettes, r0.arg2_fbid_s: 09k76, r0.arg2: cigarettes, r0.rel: may be made up into, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.871, r0.arg1_exact: The leaves),$x: ($x, be make into, cigarettes))),AnswerState(The leaves))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5816545486450195, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3717195510101732)
What are cigarettes made of?	sharks and stingrays	-0.3971132627719811	Derivation(What are cigarettes made of?,sharks and stingrays,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use to make,true,22716.0,1362.0,51.0,0.5838840901851654),QueryState($x: ($x, be use to make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use to make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: sharks and stingrays, r0.rel_exact: were used to make, r0.id: reverb-175082507, r0.namespace: reverb, r0.arg2_exact: cigarette holders, r0.arg2: cigarette holders, r0.rel: were used to make, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.811, r0.arg1_exact: sharks and stingrays),$x: ($x, be use to make, cigarettes))),AnswerState(sharks and stingrays))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5838840901851654, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3971132627719811)
What are cigarettes made of?	three separate parts	-0.40271228952582094	Derivation(What are cigarettes made of?,three separate parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Each cigarette, r0.rel_exact: is essential made of, r0.id: reverb-103592447, r0.namespace: reverb, r0.arg2_exact: three separate parts, r0.arg2: three separate parts, r0.rel: is essential made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.919, r0.arg1_exact: Each cigarette),$x: (cigarettes, made of, $x))),AnswerState(three separate parts))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.40271228952582094)
What are cigarettes made of?	three essential parts	-0.40271228952582094	Derivation(What are cigarettes made of?,three essential parts,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: electronic cigarettes, r0.rel_exact: are made up of, r0.id: reverb-336737403, r0.namespace: reverb, r0.arg2_exact: three essential parts, r0.arg2: three essential parts, r0.rel: are made up of, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.864, r0.arg1_exact: electronic cigarettes),$x: (cigarettes, made of, $x))),AnswerState(three essential parts))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.40271228952582094)
What are cigarettes made of?	stainless steel	-0.45837721683768734	Derivation(What are cigarettes made of?,stainless steel,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vlckk, r0.arg1: Electronic Cigarettes, r0.rel_exact: are usually made of, r0.id: reverb-2758373, r0.namespace: reverb, r0.arg2_exact: stainless steel, r0.arg2_fbid_s: 06qqv, r0.arg2: stainless steel, r0.rel: are usually made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.878, r0.arg1_exact: Electronic Cigarettes),$x: (cigarettes, made of, $x))),AnswerState(stainless steel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.45837721683768734)
What are cigarettes made of?	tobacco or any substitute for tobacco	-0.49508375578570474	Derivation(What are cigarettes made of?,tobacco or any substitute for tobacco,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09k76, r0.arg1: all cigarettes, r0.rel_exact: made of, r0.id: openie4-8776377, r0.namespace: openie4, r0.arg2_exact: tobacco or any substitute for tobacco, r0.arg2_fbid_s: 07ly_, r0.arg2: tobacco or any substitute for tobacco, r0.rel: made of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: all cigarettes),$x: (cigarettes, made of, $x))),AnswerState(tobacco or any substitute for tobacco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aa aaa aaaa aaa aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.49508375578570474)
What are cigarettes made of?	a blood protein	-0.507362596058732	Derivation(What are cigarettes made of?,a blood protein,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,be use to make,true,22716.0,1362.0,51.0,0.5838840901851654),QueryState($x: ($x, be use to make, cigarettes),true)), QaStep(What are cigarettes made of?,QueryState($x: ($x, be use to make, cigarettes),true),ExecutionAction(ExecTuple((r0.arg1: a blood protein, r0.rel_exact: was being used to make, r0.id: reverb-217351162, r0.namespace: reverb, r0.arg2_exact: cigarette filters, r0.arg2: cigarette filters, r0.rel: was being used to make, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.833, r0.arg1_exact: a blood protein),$x: ($x, be use to make, cigarettes))),AnswerState(a blood protein))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5838840901851654, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.507362596058732)
What are cigarettes made of?	a pound	-0.5181653334551792	Derivation(What are cigarettes made of?,a pound,Vector(QaStep(What are cigarettes made of?,QuestionStateImpl(What are cigarettes made of?,Sentence(What are cigarettes made of?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (cigarettes, made of, $x),false)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, made of, $x),false),RelSynRule(make of,make from,false,22716.0,21472.0,1246.0,0.5975738763809204),QueryState($x: (cigarettes, make from, $x),true)), QaStep(What are cigarettes made of?,QueryState($x: (cigarettes, make from, $x),true),ExecutionAction(ExecTuple((r0.arg1: many cigarettes, r0.rel_exact: make from, r0.id: reverb-64069011, r0.namespace: reverb, r0.arg2_exact: a pound, r0.arg2: a pound, r0.rel: make from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.595, r0.arg1_exact: many cigarettes),$x: (cigarettes, make from, $x))),AnswerState(a pound))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5975738763809204, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.5181653334551792)
What company did Harley-Davidson buy out?	the merger	-3.812881908521311	Derivation(What company did Harley-Davidson buy out?,the merger,Vector(QaStep(What company did Harley-Davidson buy out?,QuestionStateImpl(What company did Harley-Davidson buy out?,Sentence(What company did Harley-Davidson buy out?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, company) (Harley-Davidson, buy out, $x),true)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, be a, company) (Harley-Davidson, buy out, $x),true),ExecutionAction(ExecTuple((r0.arg1: the merger, r0.rel_exact: is a win-win for, r1.arg1_fbid_s: 03ny2, r0.id: reverb-64898947, r1.rel: bought out, r0.namespace: reverb, r0.arg2_exact: both companies, r1.conf_f: 0.91977596, r1.arg2: the merger, r1.arg2_fbid_s: 056y8, r0.arg2: both companies, r0.rel: is a win-win for, r1.namespace: openie4, r1.arg1: Harley-Davidson, r0.corpora_ss: List(cw), r1.rel_exact: bought out, r0.num_extrs_i: 3, r1.arg2_exact: the merger, r1.num_extrs_i: 2, r0.conf_f: 0.726, r1.id: openie4-52461932, r0.arg1_exact: the merger, r1.arg1_exact: Harley-Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, company) (Harley-Davidson, buy out, $x))),AnswerState(the merger))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.812881908521311)
What company did Harley-Davidson buy out?	The merger	-4.124542780022225	Derivation(What company did Harley-Davidson buy out?,The merger,Vector(QaStep(What company did Harley-Davidson buy out?,QuestionStateImpl(What company did Harley-Davidson buy out?,Sentence(What company did Harley-Davidson buy out?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, company) (Harley-Davidson, buy out, $x),true)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, be a, company) (Harley-Davidson, buy out, $x),true),ExecutionAction(ExecTuple((r0.arg1: The merger, r0.rel_exact: was a good thing for, r1.arg1_fbid_s: 03ny2, r0.id: reverb-82983132, r1.rel: bought out, r0.namespace: reverb, r0.arg2_exact: the company, r1.conf_f: 0.91977596, r1.arg2: the merger, r1.arg2_fbid_s: 056y8, r0.arg2: the company, r0.rel: was a good thing for, r1.namespace: openie4, r1.arg1: Harley-Davidson, r0.corpora_ss: List(cw), r1.rel_exact: bought out, r0.num_extrs_i: 2, r1.arg2_exact: the merger, r1.num_extrs_i: 2, r0.conf_f: 0.976, r1.id: openie4-52461932, r0.arg1_exact: The merger, r1.arg1_exact: Harley-Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, company) (Harley-Davidson, buy out, $x))),AnswerState(The merger))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.124542780022225)
What company did Harley-Davidson buy out?	ArtPeople	-4.770200157894342	Derivation(What company did Harley-Davidson buy out?,ArtPeople,Vector(QaStep(What company did Harley-Davidson buy out?,QuestionStateImpl(What company did Harley-Davidson buy out?,Sentence(What company did Harley-Davidson buy out?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, "type", company) (Harley-Davidson, buy out, $x),false),RelSynRule(buy out,bid for,false,625.0,260.0,3.0,0.6593805849552155),QueryState($x: ($x, "type", company) (Harley-Davidson, bid for, $x),true)), QaStep(What company did Harley-Davidson buy out?,QueryState($x: ($x, "type", company) (Harley-Davidson, bid for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d55498, r0.arg1: ArtPeople, r0.rel_exact: Type, r1.arg1_fbid_s: 03ny2, r0.id: fb-1566508, r1.rel: provides a bad-boy outlet for, r0.namespace: freebase, r0.arg2_exact: Production company, r1.conf_f: 0.85, r1.arg2: people, r0.arg2: Production company, r0.rel: Type, r1.namespace: reverb, r1.arg1: Harley Davidson, r1.rel_exact: provides a bad-boy outlet for, r1.arg2_exact: people, r1.num_extrs_i: 8, r1.id: reverb-234083417, r0.arg1_exact: ArtPeople, r1.arg1_exact: Harley Davidson, r1.corpora_ss: List(cw)),$x: ($x, "type", company) (Harley-Davidson, bid for, $x))),AnswerState(ArtPeople))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6593805849552155, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.2, question prefix = 'what' and answer shape = AaaAaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.770200157894342)
When was penicillin first used?	1943	3.6489481796078502	Derivation(When was penicillin first used?,1943,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be first introduce in,false,381.0,522.0,2.0,0.6403962671756744),QueryState($x: (penicillin, be first introduce in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be first introduce in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was first introduced in, r0.id: reverb-226431522, r0.namespace: reverb, r0.arg2_exact: 1943, r0.arg2: 1943, r0.rel: was first introduced in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.916, r0.arg1_exact: penicillin),$x: (penicillin, be first introduce in, $x))),AnswerState(1943))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6403962671756744, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.6489481796078502)
When was penicillin first used?	1928	3.5003453243156986	Derivation(When was penicillin first used?,1928,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be invent in,false,381.0,1841.0,14.0,0.6618185639381409),QueryState($x: (penicillin, be invent in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be invent in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: was invented in, r0.id: reverb-121454005, r0.namespace: reverb, r0.arg2_exact: 1928, r0.arg2: 1928, r0.rel: was invented in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.942, r0.arg1_exact: Penicillin),$x: (penicillin, be invent in, $x))),AnswerState(1928))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6618185639381409, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.5003453243156986)
When was penicillin first used?	1929	3.437116182010931	Derivation(When was penicillin first used?,1929,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-269605443, r0.namespace: reverb, r0.arg2_exact: 1929, r0.arg2: 1929, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.842, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(1929))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.437116182010931)
When was penicillin first used?	1911	2.8335264924191628	Derivation(When was penicillin first used?,1911,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: had been discovered in, r0.id: reverb-54411166, r0.namespace: reverb, r0.arg2_exact: 1911, r0.arg2: 1911, r0.rel: had been discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.842, r0.arg1_exact: Penicillin),$x: (penicillin, be discover in, $x))),AnswerState(1911))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.8335264924191628)
When was penicillin first used?	the 1940 's	2.72021019731331	Derivation(When was penicillin first used?,the 1940 's,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-377186102, r0.namespace: reverb, r0.arg2_exact: the 1940 's, r0.arg2: the 1940 's, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.75, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(the 1940 's))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaa 1111 'a -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.72021019731331)
When was penicillin first used?	1959	2.269054317868489	Derivation(When was penicillin first used?,1959,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,first appear in,false,381.0,2338.0,8.0,0.6368622183799744),QueryState($x: (penicillin, first appear in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, first appear in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Semisynthetic penicillins, r0.rel_exact: first appeared in, r0.id: reverb-262486620, r0.namespace: reverb, r0.arg2_exact: 1959, r0.arg2: 1959, r0.rel: first appeared in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.864, r0.arg1_exact: Semisynthetic penicillins),$x: (penicillin, first appear in, $x))),AnswerState(1959))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6368622183799744, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.269054317868489)
When was penicillin first used?	the 1940s	1.2438230037875773	Derivation(When was penicillin first used?,the 1940s,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be first introduce in,false,381.0,522.0,2.0,0.6403962671756744),QueryState($x: (penicillin, be first introduce in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be first introduce in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was first introduced in, r0.id: reverb-371893014, r0.namespace: reverb, r0.arg2_exact: the 1940s, r0.arg2: the 1940s, r0.rel: was first introduced in, r0.corpora_ss: List(cw), r0.num_extrs_i: 34, r0.conf_f: 0.916, r0.arg1_exact: penicillin),$x: (penicillin, be first introduce in, $x))),AnswerState(the 1940s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6403962671756744, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aaa 1111a -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2438230037875773)
When was penicillin first used?	1928 almost	1.101868160340564	Derivation(When was penicillin first used?,1928 almost,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1: a Dish Penicillin, r0.rel_exact: was discovered in, r0.id: reverb-109139290, r0.namespace: reverb, r0.arg2_exact: 1928 almost, r0.arg2: 1928 almost, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.748, r0.arg1_exact: a Dish Penicillin),$x: (penicillin, be discover in, $x))),AnswerState(1928 almost))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'when' and answer shape = 1111 aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.101868160340564)
When was penicillin first used?	the treatment	1.0970991776724048	Derivation(When was penicillin first used?,the treatment,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: is used in, r0.id: reverb-289903887, r0.namespace: reverb, r0.arg2_exact: the treatment, r0.arg2: the treatment, r0.rel: is used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.892, r0.arg1_exact: Penicillin),$x: (penicillin, be be use in, $x))),AnswerState(the treatment))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0970991776724048)
When was penicillin first used?	a sick patient	1.0970991776724048	Derivation(When was penicillin first used?,a sick patient,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: was used in, r0.id: reverb-144621995, r0.namespace: reverb, r0.arg2_exact: a sick patient, r0.arg2: a sick patient, r0.rel: was used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.942, r0.arg1_exact: Penicillin),$x: (penicillin, be be use in, $x))),AnswerState(a sick patient))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = a aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0970991776724048)
When was penicillin first used?	animals	1.0970991776724048	Derivation(When was penicillin first used?,animals,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillins, r0.rel_exact: are used in, r0.id: reverb-345448804, r0.namespace: reverb, r0.arg2_exact: animals, r0.arg2: animals, r0.rel: are used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 19, r0.conf_f: 0.777, r0.arg1_exact: penicillins),$x: (penicillin, be be use in, $x))),AnswerState(animals))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0970991776724048)
When was penicillin first used?	the 1960s	1.0952201484954256	Derivation(When was penicillin first used?,the 1960s,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be invent in,false,381.0,1841.0,14.0,0.6618185639381409),QueryState($x: (penicillin, be invent in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be invent in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was invented in, r0.id: reverb-178664814, r0.namespace: reverb, r0.arg2_exact: the 1960s, r0.arg2: the 1960s, r0.rel: was invented in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.86, r0.arg1_exact: penicillin),$x: (penicillin, be invent in, $x))),AnswerState(the 1960s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6618185639381409, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aaa 1111a -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0952201484954256)
When was penicillin first used?	the circulatory system	1.0696502167688071	Derivation(When was penicillin first used?,the circulatory system,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce into,false,381.0,2107.0,5.0,0.6254255771636963),QueryState($x: (penicillin, be introduce into, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce into, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: is introduced into, r0.id: reverb-328044113, r0.namespace: reverb, r0.arg2_exact: the circulatory system, r0.arg2: the circulatory system, r0.rel: is introduced into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.779, r0.arg1_exact: penicillin),$x: (penicillin, be introduce into, $x))),AnswerState(the circulatory system))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6254255771636963, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),1.0696502167688071)
When was penicillin first used?	clinical use	1.0696502167688071	Derivation(When was penicillin first used?,clinical use,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce into,false,381.0,2107.0,5.0,0.6254255771636963),QueryState($x: (penicillin, be introduce into, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce into, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was introduced into, r0.id: reverb-73718975, r0.namespace: reverb, r0.arg2_exact: clinical use, r0.arg2: clinical use, r0.rel: was introduced into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.822, r0.arg1_exact: penicillin),$x: (penicillin, be introduce into, $x))),AnswerState(clinical use))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6254255771636963, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0696502167688071)
When was penicillin first used?	the mid-1940s	1.0679236465712632	Derivation(When was penicillin first used?,the mid-1940s,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce in,false,381.0,7294.0,16.0,0.6229681968688965),QueryState($x: (penicillin, be introduce in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was introduced in, r0.id: reverb-155611936, r0.namespace: reverb, r0.arg2_exact: the mid-1940s, r0.arg2: the mid-1940s, r0.rel: was introduced in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.916, r0.arg1_exact: penicillin),$x: (penicillin, be introduce in, $x))),AnswerState(the mid-1940s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6229681968688965, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = aaa aaa-1111a -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0679236465712632)
When was penicillin first used?	the early 20th century	1.0319910061906579	Derivation(When was penicillin first used?,the early 20th century,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-298184864, r0.namespace: reverb, r0.arg2_exact: the early 20th century, r0.arg2: the early 20th century, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.75, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(the early 20th century))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = aaa aaaa 11aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0319910061906579)
When was penicillin first used?	the 20th century	1.0319910061906579	Derivation(When was penicillin first used?,the 20th century,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-88914907, r0.namespace: reverb, r0.arg2_exact: the 20th century, r0.arg2: the 20th century, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.842, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(the 20th century))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaa 11aa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0319910061906579)
When was penicillin first used?	the late 1920s	1.0319910061906579	Derivation(When was penicillin first used?,the late 1920s,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-76599836, r0.namespace: reverb, r0.arg2_exact: the late 1920s, r0.arg2: the late 1920s, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.86, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(the late 1920s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aaa aaaa 1111a -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0319910061906579)
When was penicillin first used?	the product	1.0319910061906579	Derivation(When was penicillin first used?,the product,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was discovered in, r0.id: reverb-42694393, r0.namespace: reverb, r0.arg2_exact: the product, r0.arg2: the product, r0.rel: was discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.709, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(the product))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0319910061906579)
When was penicillin first used?	the '49	0.9454669522470969	Derivation(When was penicillin first used?,the '49,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,only appear in,false,381.0,110.0,4.0,0.7107191979885101),QueryState($x: (penicillin, only appear in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, only appear in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: appeared only in, r0.id: reverb-365647805, r0.namespace: reverb, r0.arg2_exact: the '49, r0.arg2: the '49, r0.rel: appeared only in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.623, r0.arg1_exact: penicillin),$x: (penicillin, only appear in, $x))),AnswerState(the '49))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.7107191979885101, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'when' and answer shape = aaa '11 -> 1.0, action type = ExecutionAction -> 1.0),0.9454669522470969)
When was penicillin first used?	the 1940's	0.5508810044961456	Derivation(When was penicillin first used?,the 1940's,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,have be around since,false,381.0,2012.0,6.0,0.6325648725032806),QueryState($x: (penicillin, have be around since, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, have be around since, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: has only been around since, r0.id: reverb-63078986, r0.namespace: reverb, r0.arg2_exact: the 1940's, r0.arg2: the 1940's, r0.rel: has only been around since, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.747, r0.arg1_exact: penicillin),$x: (penicillin, have be around since, $x))),AnswerState(the 1940's))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6325648725032806, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa 1111'a -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5508810044961456)
When was penicillin first used?	patients	0.5335091139203905	Derivation(When was penicillin first used?,patients,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be often use in,false,381.0,866.0,10.0,0.6748718917369843),QueryState($x: (penicillin, be often use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be often use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: are often used in, r0.id: reverb-225119643, r0.namespace: reverb, r0.arg2_exact: patients, r0.arg2_fbid_s: 028hfb, r0.arg2: patients, r0.rel: are often used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.849, r0.arg1_exact: penicillin),$x: (penicillin, be often use in, $x))),AnswerState(patients))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6748718917369843, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5335091139203905)
When was penicillin first used?	cases	0.49350948808063677	Derivation(When was penicillin first used?,cases,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: may be used in, r0.id: reverb-231048462, r0.namespace: reverb, r0.arg2_exact: cases, r0.arg2: cases, r0.rel: may be used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.856, r0.arg1_exact: Penicillin),$x: (penicillin, be be use in, $x))),AnswerState(cases))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.49350948808063677)
When was penicillin first used?	1946-47	0.4643339569794951	Derivation(When was penicillin first used?,1946-47,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce in,false,381.0,7294.0,16.0,0.6229681968688965),QueryState($x: (penicillin, be introduce in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was introduced widely in, r0.id: reverb-243120502, r0.namespace: reverb, r0.arg2_exact: 1946-47, r0.arg2: 1946-47, r0.rel: was introduced widely in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.837, r0.arg1_exact: penicillin),$x: (penicillin, be introduce in, $x))),AnswerState(1946-47))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6229681968688965, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = 1111-11 -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4643339569794951)
When was penicillin first used?	a 1940s	0.4643339569794951	Derivation(When was penicillin first used?,a 1940s,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce in,false,381.0,7294.0,16.0,0.6229681968688965),QueryState($x: (penicillin, be introduce in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was initial introduced in, r0.id: reverb-4827670, r0.namespace: reverb, r0.arg2_exact: a 1940s, r0.arg2: a 1940s, r0.rel: was initial introduced in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.916, r0.arg1_exact: penicillin),$x: (penicillin, be introduce in, $x))),AnswerState(a 1940s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6229681968688965, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'when' and answer shape = a 1111a -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4643339569794951)
When was penicillin first used?	healthy , good milking cows	0.4295216105582016	Derivation(When was penicillin first used?,healthy , good milking cows,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be load with,true,381.0,4451.0,2.0,0.5734207332134247),QueryState($x: ($x, be load with, penicillin),true)), QaStep(When was penicillin first used?,QueryState($x: ($x, be load with, penicillin),true),ExecutionAction(ExecTuple((r0.arg1: healthy , good milking cows, r0.rel_exact: were loaded up with, r0.id: reverb-144406734, r0.namespace: reverb, r0.arg2_exact: penicillin, r0.arg2_fbid_s: 05t37, r0.arg2: penicillin, r0.rel: were loaded up with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.889, r0.arg1_exact: healthy , good milking cows),$x: ($x, be load with, penicillin))),AnswerState(healthy , good milking cows))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5734207332134247, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaaa , aaaa aaaa aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4295216105582016)
When was penicillin first used?	pregnant women	-0.1116607820353317	Derivation(When was penicillin first used?,pregnant women,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,have be use in,false,381.0,3297.0,17.0,0.6496764421463013),QueryState($x: (penicillin, have be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, have be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: has been used in, r0.id: reverb-358850081, r0.namespace: reverb, r0.arg2_exact: pregnant women, r0.arg2_fbid_s: 05vqh7, r0.arg2: pregnant women, r0.rel: has been used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.828, r0.arg1_exact: Penicillin),$x: (penicillin, have be use in, $x))),AnswerState(pregnant women))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6496764421463013, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1116607820353317)
When was penicillin first used?	atopic individuals	-0.1771650508916527	Derivation(When was penicillin first used?,atopic individuals,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be common in,false,381.0,3455.0,4.0,0.6029974222183228),QueryState($x: (penicillin, be common in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be common in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: are more common in, r0.id: reverb-283154724, r0.namespace: reverb, r0.arg2_exact: atopic individuals, r0.arg2: atopic individuals, r0.rel: are more common in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.725, r0.arg1_exact: penicillin),$x: (penicillin, be common in, $x))),AnswerState(atopic individuals))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6029974222183228, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1771650508916527)
When was penicillin first used?	bread mould	-0.199066104705655	Derivation(When was penicillin first used?,bread mould,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be discover in,false,381.0,4684.0,2.0,0.5718262493610382),QueryState($x: (penicillin, be discover in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be discover in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: was accidentally discovered in, r0.id: reverb-1182263, r0.namespace: reverb, r0.arg2_exact: bread mould, r0.arg2: bread mould, r0.rel: was accidentally discovered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.526, r0.arg1_exact: penicillin),$x: (penicillin, be discover in, $x))),AnswerState(bread mould))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5718262493610382, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.199066104705655)
When was penicillin first used?	Scotland	-0.334928234294831	Derivation(When was penicillin first used?,Scotland,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,originate in,false,381.0,8034.0,25.0,0.6338949501514435),QueryState($x: (penicillin, originate in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, originate in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: originated in, r0.id: reverb-278106003, r0.namespace: reverb, r0.arg2_exact: Scotland, r0.arg2_fbid_s: 06q1r, r0.arg2: Scotland, r0.rel: originated in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.705, r0.arg1_exact: penicillin),$x: (penicillin, originate in, $x))),AnswerState(Scotland))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6338949501514435, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.334928234294831)
When was penicillin first used?	livestock	-0.49260315145445555	Derivation(When was penicillin first used?,livestock,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be sometimes use in,false,381.0,117.0,2.0,0.6871304214000702),QueryState($x: (penicillin, be sometimes use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be sometimes use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: is sometimes used to treat infections in, r0.id: reverb-39583767, r0.namespace: reverb, r0.arg2_exact: livestock, r0.arg2_fbid_s: 0ch8v, r0.arg2: livestock, r0.rel: is sometimes used to treat infections in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.84, r0.arg1_exact: penicillin),$x: (penicillin, be sometimes use in, $x))),AnswerState(livestock))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6871304214000702, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5714285714285714, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.49260315145445555)
When was penicillin first used?	children	-0.5012160682369262	Derivation(When was penicillin first used?,children,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be often use in,false,381.0,866.0,10.0,0.6748718917369843),QueryState($x: (penicillin, be often use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be often use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: Penicillin, r0.rel_exact: is the most often used antibiotic in, r0.id: reverb-206931376, r0.namespace: reverb, r0.arg2_exact: children, r0.arg2_fbid_s: 0ytgt, r0.arg2: children, r0.rel: is the most often used antibiotic in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.841, r0.arg1_exact: Penicillin),$x: (penicillin, be often use in, $x))),AnswerState(children))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6748718917369843, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5714285714285714, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5012160682369262)
When was penicillin first used?	non diabetics	-0.5212428593003406	Derivation(When was penicillin first used?,non diabetics,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1: a typical penicillin, r0.rel_exact: is used in, r0.id: reverb-972177, r0.namespace: reverb, r0.arg2_exact: non diabetics, r0.arg2: non diabetics, r0.rel: is used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.705, r0.arg1_exact: a typical penicillin),$x: (penicillin, be be use in, $x))),AnswerState(non diabetics))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5212428593003406)
When was penicillin first used?	less than 10 %	-0.5629555679306775	Derivation(When was penicillin first used?,less than 10 %,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,know in,false,381.0,2128.0,2.0,0.5964815616607666),QueryState($x: (penicillin, know in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, know in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: is known to occur in, r0.id: reverb-50867811, r0.namespace: reverb, r0.arg2_exact: less than 10 %, r0.arg2: less than 10 %, r0.rel: is known to occur in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.702, r0.arg1_exact: penicillin),$x: (penicillin, know in, $x))),AnswerState(less than 10 %))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5964815616607666, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, question prefix = 'when' and answer shape = aaaa aaaa 11 % -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5629555679306775)
When was penicillin first used?	rabbits	-0.6231409375523236	Derivation(When was penicillin first used?,rabbits,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,to appear in,false,381.0,2282.0,3.0,0.6069689095020294),QueryState($x: (penicillin, to appear in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, to appear in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: appeared to be ineffective in, r0.id: reverb-387275567, r0.namespace: reverb, r0.arg2_exact: rabbits, r0.arg2_fbid_s: 06mf6, r0.arg2: rabbits, r0.rel: appeared to be ineffective in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.881, r0.arg1_exact: penicillin),$x: (penicillin, to appear in, $x))),AnswerState(rabbits))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6069689095020294, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6231409375523236)
When was penicillin first used?	garlic and ramps	-0.6996859387023211	Derivation(When was penicillin first used?,garlic and ramps,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be refer to as,true,381.0,3586.0,2.0,0.5801736116409302),QueryState($x: ($x, be refer to as, penicillin),true)), QaStep(When was penicillin first used?,QueryState($x: ($x, be refer to as, penicillin),true),ExecutionAction(ExecTuple((r0.arg1: garlic and ramps, r0.rel_exact: are often referred to as, r0.id: reverb-56741098, r0.namespace: reverb, r0.arg2_exact: ?plant penicillin, r0.arg2: ?plant penicillin, r0.rel: are often referred to as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.696, r0.arg1_exact: garlic and ramps),$x: ($x, be refer to as, penicillin))),AnswerState(garlic and ramps))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5801736116409302, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = aaaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6996859387023211)
When was penicillin first used?	humans	-0.7058556644387353	Derivation(When was penicillin first used?,humans,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be very common in,false,381.0,556.0,2.0,0.6384243667125702),QueryState($x: (penicillin, be very common in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be very common in, $x),true),ExecutionAction(ExecTuple((r0.arg1: penicillin allergy, r0.rel_exact: is very common in, r0.id: reverb-149027141, r0.namespace: reverb, r0.arg2_exact: humans, r0.arg2_fbid_s: 0dgw9r, r0.arg2: humans, r0.rel: is very common in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.855, r0.arg1_exact: penicillin allergy),$x: (penicillin, be very common in, $x))),AnswerState(humans))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6384243667125702, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7058556644387353)
When was penicillin first used?	the form	-0.7202470396489222	Derivation(When was penicillin first used?,the form,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be be use in,false,381.0,845.0,7.0,0.6644929349422455),QueryState($x: (penicillin, be be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Such penicillins, r0.rel_exact: may be used in, r0.id: reverb-288899077, r0.namespace: reverb, r0.arg2_exact: the form, r0.arg2: the form, r0.rel: may be used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.853, r0.arg1_exact: Such penicillins),$x: (penicillin, be be use in, $x))),AnswerState(the form))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6644929349422455, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7202470396489222)
When was penicillin first used?	the newspaper	-0.7412334329386525	Derivation(When was penicillin first used?,the newspaper,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,appear in,false,381.0,40837.0,26.0,0.5843110382556915),QueryState($x: (penicillin, appear in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, appear in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the word penicillin, r0.rel_exact: appeared in, r0.id: reverb-234975462, r0.namespace: reverb, r0.arg2_exact: the newspaper, r0.arg2: the newspaper, r0.rel: appeared in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.656, r0.arg1_exact: the word penicillin),$x: (penicillin, appear in, $x))),AnswerState(the newspaper))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5843110382556915, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7412334329386525)
When was penicillin first used?	high dosages	-0.8059228160353558	Derivation(When was penicillin first used?,high dosages,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,must be use in,false,381.0,625.0,2.0,0.6347686350345612),QueryState($x: (penicillin, must be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, must be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Procaine Penicillin, r0.rel_exact: must be used in, r0.id: reverb-38201795, r0.namespace: reverb, r0.arg2_exact: high dosages, r0.arg2: high dosages, r0.rel: must be used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.758, r0.arg1_exact: Procaine Penicillin),$x: (penicillin, must be use in, $x))),AnswerState(high dosages))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6347686350345612, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8059228160353558)
When was penicillin first used?	Africa	-1.169591358805407	Derivation(When was penicillin first used?,Africa,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,emerge in,false,381.0,2506.0,2.0,0.591372013092041),QueryState($x: (penicillin, emerge in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, emerge in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05t37, r0.arg1: penicillin, r0.rel_exact: have emerged in, r0.id: reverb-258749856, r0.namespace: reverb, r0.arg2_exact: Africa, r0.arg2_fbid_s: 0dg3n1, r0.arg2: Africa, r0.rel: have emerged in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.875, r0.arg1_exact: penicillin),$x: (penicillin, emerge in, $x))),AnswerState(Africa))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.591372013092041, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.169591358805407)
When was penicillin first used?	the elderly	-1.3817376073841352	Derivation(When was penicillin first used?,the elderly,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,have be use in,false,381.0,3297.0,17.0,0.6496764421463013),QueryState($x: (penicillin, have be use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, have be use in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Older adults ???Penicillins, r0.rel_exact: have been used in, r0.id: reverb-187888755, r0.namespace: reverb, r0.arg2_exact: the elderly, r0.arg2: the elderly, r0.rel: have been used in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.896, r0.arg1_exact: Older adults ???Penicillins),$x: (penicillin, have be use in, $x))),AnswerState(the elderly))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6496764421463013, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.3817376073841352)
When was penicillin first used?	overestimation	-1.5318472196096877	Derivation(When was penicillin first used?,overestimation,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,pass into,false,381.0,2471.0,3.0,0.6044823229312897),QueryState($x: (penicillin, pass into, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, pass into, $x),true),ExecutionAction(ExecTuple((r0.arg1: the first penicillin, r0.rel_exact: unnoticeably passed into, r0.id: reverb-44272781, r0.namespace: reverb, r0.arg2_exact: overestimation, r0.arg2: overestimation, r0.rel: unnoticeably passed into, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.816, r0.arg1_exact: the first penicillin),$x: (penicillin, pass into, $x))),AnswerState(overestimation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6044823229312897, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.5318472196096877)
When was penicillin first used?	modern medicine	-1.7061280503142537	Derivation(When was penicillin first used?,modern medicine,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be introduce into,false,381.0,2107.0,5.0,0.6254255771636963),QueryState($x: (penicillin, be introduce into, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be introduce into, $x),true),ExecutionAction(ExecTuple((r0.arg1: the time penicillin, r0.rel_exact: was being introduced into, r0.id: reverb-264976066, r0.namespace: reverb, r0.arg2_exact: modern medicine, r0.arg2_fbid_s: 04sh3, r0.arg2: modern medicine, r0.rel: was being introduced into, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.897, r0.arg1_exact: the time penicillin),$x: (penicillin, be introduce into, $x))),AnswerState(modern medicine))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6254255771636963, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7061280503142537)
When was penicillin first used?	women	-1.7827101359197102	Derivation(When was penicillin first used?,women,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,be develop in,false,381.0,5723.0,4.0,0.5872264504432678),QueryState($x: (penicillin, be develop in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, be develop in, $x),true),ExecutionAction(ExecTuple((r0.arg1: men Penicillin allergy, r0.rel_exact: is more likely to develop in, r0.id: reverb-8748535, r0.namespace: reverb, r0.arg2_exact: women, r0.arg2: women, r0.rel: is more likely to develop in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.626, r0.arg1_exact: men Penicillin allergy),$x: (penicillin, be develop in, $x))),AnswerState(women))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5872264504432678, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7827101359197102)
When was penicillin first used?	20 minutes	-2.069148196271472	Derivation(When was penicillin first used?,20 minutes,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,read in,false,381.0,3813.0,3.0,0.5909262895584106),QueryState($x: (penicillin, read in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, read in, $x),true),ExecutionAction(ExecTuple((r0.arg1: aqueous penicillin, r0.rel_exact: can be read in, r0.id: reverb-271825700, r0.namespace: reverb, r0.arg2_exact: 20 minutes, r0.arg2_fbid_s: 07vz1m, r0.arg2: 20 minutes, r0.rel: can be read in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.817, r0.arg1_exact: aqueous penicillin),$x: (penicillin, read in, $x))),AnswerState(20 minutes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5909262895584106, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, question prefix = 'when' and answer shape = 11 aaaa -> 1.0, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.069148196271472)
When was penicillin first used?	alexander fleming penicillin work furthered by ernst boris chain	-2.168749203869434	Derivation(When was penicillin first used?,alexander fleming penicillin work furthered by ernst boris chain,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,use in,false,381.0,74532.0,29.0,0.5689222812652588),QueryState($x: (penicillin, use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0c0mx2z, r0.arg1: penicillin work furthered by, r0.rel_exact: Used in Connections, r0.id: fb-269908427, r0.namespace: freebase, r0.arg2_exact: alexander fleming penicillin work furthered by ernst boris chain, r0.arg2_fbid_s: 0c1b46l, r0.arg2: alexander fleming penicillin work furthered by ernst boris chain, r0.rel: Used in Connections, r0.arg1_exact: penicillin work furthered by),$x: (penicillin, use in, $x))),AnswerState(alexander fleming penicillin work furthered by ernst boris chain))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5689222812652588, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.25, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa aaaa aaaa aaaa aa aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.168749203869434)
When was penicillin first used?	alexander fleming penicillin work furthered by howard walter florey	-2.168749203869434	Derivation(When was penicillin first used?,alexander fleming penicillin work furthered by howard walter florey,Vector(QaStep(When was penicillin first used?,QuestionStateImpl(When was penicillin first used?,Sentence(When was penicillin first used?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (penicillin, was first used in, $x),false)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, was first used in, $x),false),RelSynRule(be first use in,use in,false,381.0,74532.0,29.0,0.5689222812652588),QueryState($x: (penicillin, use in, $x),true)), QaStep(When was penicillin first used?,QueryState($x: (penicillin, use in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0c0mx2z, r0.arg1: penicillin work furthered by, r0.rel_exact: Used in Connections, r0.id: fb-284646698, r0.namespace: freebase, r0.arg2_exact: alexander fleming penicillin work furthered by howard walter florey, r0.arg2_fbid_s: 0c1b469, r0.arg2: alexander fleming penicillin work furthered by howard walter florey, r0.rel: Used in Connections, r0.arg1_exact: penicillin work furthered by),$x: (penicillin, use in, $x))),AnswerState(alexander fleming penicillin work furthered by howard walter florey))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5689222812652588, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.25, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa aaaa aaaa aaaa aa aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.168749203869434)
When was the first flush toilet invented?	1596	5.375705966780565	Derivation(When was the first flush toilet invented?,1596,Vector(QaStep(When was the first flush toilet invented?,QuestionStateImpl(When was the first flush toilet invented?,Sentence(When was the first flush toilet invented?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the first flush toilet, was invented in, $x),false)), QaStep(When was the first flush toilet invented?,QueryState($x: (the first flush toilet, was invented in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The first flushing toilet, r0.rel_exact: was invented in, r0.id: reverb-331996266, r0.namespace: reverb, r0.arg2_exact: 1596, r0.arg2: 1596, r0.rel: was invented in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.925, r0.arg1_exact: The first flushing toilet),$x: (the first flush toilet, was invented in, $x))),AnswerState(1596))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.375705966780565)
When was the first flush toilet invented?	the late 1500s	2.970580790960293	Derivation(When was the first flush toilet invented?,the late 1500s,Vector(QaStep(When was the first flush toilet invented?,QuestionStateImpl(When was the first flush toilet invented?,Sentence(When was the first flush toilet invented?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the first flush toilet, was invented in, $x),false)), QaStep(When was the first flush toilet invented?,QueryState($x: (the first flush toilet, was invented in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the first flush toilet, r0.rel_exact: was invented in, r0.id: reverb-151332576, r0.namespace: reverb, r0.arg2_exact: the late 1500s, r0.arg2: the late 1500s, r0.rel: was invented in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.759, r0.arg1_exact: the first flush toilet),$x: (the first flush toilet, was invented in, $x))),AnswerState(the late 1500s))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'when' and answer shape = aaa aaaa 1111a -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.970580790960293)
What does EKG stand for?	empathy	1.6731061519068022	Derivation(What does EKG stand for?,empathy,Vector(QaStep(What does EKG stand for?,QuestionStateImpl(What does EKG stand for?,Sentence(What does EKG stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (EKG, stand for, $x),false)), QaStep(What does EKG stand for?,QueryState($x: (EKG, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0k6pp, r0.arg1: EKG, r0.rel_exact: stands for, r0.id: reverb-211647932, r0.namespace: reverb, r0.arg2_exact: empathy, r0.arg2_fbid_s: 01s169, r0.arg2: empathy, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 17, r0.conf_f: 0.981, r0.arg1_exact: EKG),$x: (EKG, stand for, $x))),AnswerState(empathy))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6731061519068022)
What does EKG stand for?	the Greek word	1.3536288402335372	Derivation(What does EKG stand for?,the Greek word,Vector(QaStep(What does EKG stand for?,QuestionStateImpl(What does EKG stand for?,Sentence(What does EKG stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (EKG, stand for, $x),false)), QaStep(What does EKG stand for?,QueryState($x: (EKG, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: an EKG ? K, r0.rel_exact: stands for, r0.id: reverb-82894181, r0.namespace: reverb, r0.arg2_exact: the Greek word, r0.arg2: the Greek word, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.51, r0.arg1_exact: an EKG ? K),$x: (EKG, stand for, $x))),AnswerState(the Greek word))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, question prefix = 'what' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3536288402335372)
What does EKG stand for?	electrocardiogram	0.05476411493405686	Derivation(What does EKG stand for?,electrocardiogram,Vector(QaStep(What does EKG stand for?,QuestionStateImpl(What does EKG stand for?,Sentence(What does EKG stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (EKG, stand for, $x),false)), QaStep(What does EKG stand for?,QueryState($x: (EKG, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: The letters EKG, r0.rel_exact: stand for, r0.id: reverb-49206774, r0.namespace: reverb, r0.arg2_exact: electrocardiogram, r0.arg2_fbid_s: 0k6pp, r0.arg2: electrocardiogram, r0.rel: stand for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.923, r0.arg1_exact: The letters EKG),$x: (EKG, stand for, $x))),AnswerState(electrocardiogram))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.05476411493405686)
What is the lowest point on earth?	394 meters	3.216632764524462	Derivation(What is the lowest point on earth?,394 meters,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: 394 meters, r0.rel_exact: is the lowest point on, r0.id: reverb-266479238, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: 394 meters),$x: ($x, is the lowest point on, earth))),AnswerState(394 meters))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.216632764524462)
What is the lowest point on earth?	407 meters	3.216632764524462	Derivation(What is the lowest point on earth?,407 meters,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: 407 meters, r0.rel_exact: is the lowest point on, r0.id: reverb-373983401, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.952, r0.arg1_exact: 407 meters),$x: ($x, is the lowest point on, earth))),AnswerState(407 meters))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.216632764524462)
What is the lowest point on earth?	the Jordan river valley	3.0501349597287852	Derivation(What is the lowest point on earth?,the Jordan river valley,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the Jordan river valley, r0.rel_exact: is the lowest point on, r0.id: reverb-190453472, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 60, r0.conf_f: 0.916, r0.arg1_exact: the Jordan river valley),$x: ($x, is the lowest point on, earth))),AnswerState(the Jordan river valley))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, question prefix = 'what' and answer shape = aaa Aaaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
What is the lowest point on earth?	Minus417	3.0501349597287852	Derivation(What is the lowest point on earth?,Minus417,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: Minus417, r0.rel_exact: is the lowest point on, r0.id: reverb-319389830, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.976, r0.arg1_exact: Minus417),$x: ($x, is the lowest point on, earth))),AnswerState(Minus417))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa111 -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
What is the lowest point on earth?	The Jordan Valley depression	3.0501349597287852	Derivation(What is the lowest point on earth?,The Jordan Valley depression,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: The Jordan Valley depression, r0.rel_exact: is the lowest point on, r0.id: reverb-203550405, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.984, r0.arg1_exact: The Jordan Valley depression),$x: ($x, is the lowest point on, earth))),AnswerState(The Jordan Valley depression))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
What is the lowest point on earth?	The sea	3.0501349597287852	Derivation(What is the lowest point on earth?,The sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: The sea, r0.rel_exact: is the lowest point on, r0.id: reverb-200832105, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.961, r0.arg1_exact: The sea),$x: ($x, is the lowest point on, earth))),AnswerState(The sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
What is the lowest point on earth?	the Jordan Rift Valley	3.0501349597287852	Derivation(What is the lowest point on earth?,the Jordan Rift Valley,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the Jordan Rift Valley, r0.rel_exact: is the lowest point on, r0.id: reverb-317197903, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.939, r0.arg1_exact: the Jordan Rift Valley),$x: ($x, is the lowest point on, earth))),AnswerState(the Jordan Rift Valley))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa Aaaa Aaaaa -> 1.0),3.0501349597287852)
What is the lowest point on earth?	The Dead Sea Dead Sea	3.0501349597287852	Derivation(What is the lowest point on earth?,The Dead Sea Dead Sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: The Dead Sea Dead Sea, r0.rel_exact: is the lowest point on, r0.id: reverb-46598759, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.953, r0.arg1_exact: The Dead Sea Dead Sea),$x: ($x, is the lowest point on, earth))),AnswerState(The Dead Sea Dead Sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa Aaaa Aaa Aaaa Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
What is the lowest point on earth?	Jericho	2.7066000402584294	Derivation(What is the lowest point on earth?,Jericho,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: Jericho, r0.rel_exact: is the lowest point on, r0.id: reverb-8851821, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.957, r0.arg1_exact: Jericho),$x: ($x, is the lowest point on, earth))),AnswerState(Jericho))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.7066000402584294)
What is the lowest point on earth?	a lake	2.641093279960767	Derivation(What is the lowest point on earth?,a lake,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: a lake, r0.rel_exact: are the lowest point on, r0.id: reverb-368323895, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: are the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.968, r0.arg1_exact: a lake),$x: ($x, is the lowest point on, earth))),AnswerState(a lake))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),2.641093279960767)
What is the lowest point on earth?	The Dead Sea	2.520166150923015	Derivation(What is the lowest point on earth?,The Dead Sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02cnp, r0.arg1: The Dead Sea, r0.rel_exact: is the lowest point on, r0.id: reverb-58136863, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 120, r0.conf_f: 0.991, r0.arg1_exact: The Dead Sea),$x: ($x, is the lowest point on, earth))),AnswerState(The Dead Sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaa Aaa -> 1.0),2.520166150923015)
What is the lowest point on earth?	the site	2.412419369702117	Derivation(What is the lowest point on earth?,the site,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the site, r0.rel_exact: is the lowest point on, r0.id: reverb-55886438, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.925, r0.arg1_exact: the site),$x: ($x, is the lowest point on, earth))),AnswerState(the site))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.412419369702117)
What is the lowest point on earth?	the northwest	2.412419369702117	Derivation(What is the lowest point on earth?,the northwest,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the northwest, r0.rel_exact: is the lowest point on, r0.id: reverb-251716917, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.929, r0.arg1_exact: the northwest),$x: ($x, is the lowest point on, earth))),AnswerState(the northwest))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.412419369702117)
What is the lowest point on earth?	the east	2.412419369702117	Derivation(What is the lowest point on earth?,the east,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the east, r0.rel_exact: is the lowest point on, r0.id: reverb-375342125, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.917, r0.arg1_exact: the east),$x: ($x, is the lowest point on, earth))),AnswerState(the east))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.412419369702117)
What is the lowest point on earth?	The ocean	2.3597810485384842	Derivation(What is the lowest point on earth?,The ocean,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: The ocean, r0.rel_exact: is the lowest point on, r0.id: reverb-306984895, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.978, r0.arg1_exact: The ocean),$x: ($x, is the lowest point on, earth))),AnswerState(The ocean))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3597810485384842)
What is the lowest point on earth?	Dead sea	2.1177730245285034	Derivation(What is the lowest point on earth?,Dead sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02cnp, r0.arg1: Dead sea, r0.rel_exact: is also the lowest point on, r0.id: reverb-26536689, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is also the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.985, r0.arg1_exact: Dead sea),$x: ($x, is the lowest point on, earth))),AnswerState(Dead sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8333333333333334, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1177730245285034)
What is the lowest point on earth?	sea level	1.8824505608963469	Derivation(What is the lowest point on earth?,sea level,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0gx2d, r0.arg1: sea level, r0.rel_exact: is the lowest point on, r0.id: reverb-24559649, r0.namespace: reverb, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 21, r0.conf_f: 0.941, r0.arg1_exact: sea level),$x: ($x, is the lowest point on, earth))),AnswerState(sea level))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8824505608963469)
What is the lowest point on earth?	The Salt Sea	1.8363784319992258	Derivation(What is the lowest point on earth?,The Salt Sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: The Salt Sea, r0.rel_exact: is the lowest point on, r0.id: reverb-7322972, r0.namespace: reverb, r0.arg2_exact: the earth, r0.arg2_fbid_s: 02j71, r0.arg2: the earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.966, r0.arg1_exact: The Salt Sea),$x: ($x, is the lowest point on, earth))),AnswerState(The Salt Sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaa Aaa -> 1.0),1.8363784319992258)
What is the lowest point on earth?	the deepest points	1.4948938366226587	Derivation(What is the lowest point on earth?,the deepest points,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the deepest points, r0.rel_exact: are the lowest points on, r0.id: reverb-142987384, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: are the lowest points on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.94, r0.arg1_exact: the deepest points),$x: ($x, is the lowest point on, earth))),AnswerState(the deepest points))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4948938366226587)
What is the lowest point on earth?	a large salt lake	1.433985305604714	Derivation(What is the lowest point on earth?,a large salt lake,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: a large salt lake, r0.rel_exact: is also the lowest point on, r0.id: reverb-234384560, r0.namespace: reverb, r0.arg2_exact: the Earth, r0.arg2_fbid_s: 02j71, r0.arg2: the Earth, r0.rel: is also the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.672, r0.arg1_exact: a large salt lake),$x: ($x, is the lowest point on, earth))),AnswerState(a large salt lake))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8333333333333334, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.433985305604714)
What is the lowest point on earth?	part	1.3234459418106828	Derivation(What is the lowest point on earth?,part,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: part, r0.rel_exact: is the lowest point on, r0.id: reverb-272485967, r0.namespace: reverb, r0.arg2_exact: the Earth, r0.arg2_fbid_s: 02j71, r0.arg2: the Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.925, r0.arg1_exact: part),$x: ($x, is the lowest point on, earth))),AnswerState(part))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3234459418106828)
What is the lowest point on earth?	the same face	1.0925007102281465	Derivation(What is the lowest point on earth?,the same face,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1: the same face, r0.rel_exact: now is the lowest point on, r0.id: reverb-53699251, r0.namespace: reverb, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: now is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.817, r0.arg1_exact: the same face),$x: ($x, is the lowest point on, earth))),AnswerState(the same face))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8333333333333334, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0925007102281465)
What is the lowest point on earth?	the Dead Sea	1.0528002807715244	Derivation(What is the lowest point on earth?,the Dead Sea,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02cnp, r0.arg1: the Dead Sea, r0.rel_exact: is the lowest point on, r0.id: openie4-56447502, r0.namespace: openie4, r0.arg2_exact: earth, r0.arg2_fbid_s: 02j71, r0.arg2: earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 42, r0.conf_f: 0.8, r0.arg1_exact: the Dead Sea),$x: ($x, is the lowest point on, earth))),AnswerState(the Dead Sea))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaa Aaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0528002807715244)
What is the lowest point on earth?	whose shore	0.8293203287515876	Derivation(What is the lowest point on earth?,whose shore,Vector(QaStep(What is the lowest point on earth?,QuestionStateImpl(What is the lowest point on earth?,Sentence(What is the lowest point on earth?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the lowest point on, earth),false)), QaStep(What is the lowest point on earth?,QueryState($x: ($x, is the lowest point on, earth),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02fm9k, r0.arg1: whose shore, r0.rel_exact: is the lowest point on, r0.id: openie4-15245144, r0.namespace: openie4, r0.arg2_exact: Earth, r0.arg2_fbid_s: 02j71, r0.arg2: Earth, r0.rel: is the lowest point on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8, r0.arg1_exact: whose shore),$x: ($x, is the lowest point on, earth))),AnswerState(whose shore))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8293203287515876)
What year did Padre Pio die?	September 1968	5.450181116151849	Derivation(What year did Padre Pio die?,September 1968,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: September 1968, r0.rel_exact: is a, r1.arg1_fbid_s: 01vfj7, r0.id: nell-1547004, r1.rel: died, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.962, r1.arg2: September 23 , 1968, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Padre Pio, r1.rel_exact: died, r1.arg2_exact: September 23 , 1968, r1.num_extrs_i: 5, r1.id: reverb-307797414, r0.arg1_exact: September 1968, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Padre Pio, die, $x))),AnswerState(September 1968))),SparseVector(minimum join key similarity -> 0.8484848484848485, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = Aaaaa 1111 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.450181116151849)
What year did Padre Pio die?	1968	3.212834636786818	Derivation(What year did Padre Pio die?,1968,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5htql, r0.arg1: 1968, r0.rel_exact: Type, r1.arg1_fbid_s: 01vfj7, r0.id: fb-270108461, r1.rel: died in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.877, r1.arg2: 1968, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Padre Pio, r1.rel_exact: died in, r1.arg2_exact: 1968, r1.num_extrs_i: 20, r1.id: reverb-17372430, r0.arg1_exact: 1968, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Padre Pio, die, $x))),AnswerState(1968))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.375, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.212834636786818)
What year did Padre Pio die?	september_23	2.0274636656728218	Derivation(What year did Padre Pio die?,september_23,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: september_23, r0.rel_exact: is a, r1.arg1_fbid_s: 01vfj7, r0.id: nell-1547073, r1.rel: died, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.9382554, r1.arg2: September 23, r1.arg2_fbid_s: 06vkl, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: Padre Pio, r1.rel_exact: died, r1.arg2_exact: September 23, r1.num_extrs_i: 3, r1.id: openie4-12035559, r0.arg1_exact: september_23, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Padre Pio, die, $x))),AnswerState(september_23))),SparseVector(minimum join key similarity -> 0.8333333333333334, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaaa_11 -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.0274636656728218)
What year did Padre Pio die?	September 23	-0.029258511927913844	Derivation(What year did Padre Pio die?,September 23,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06wm5, r0.arg1: September 23, r0.rel_exact: Type, r1.arg1_fbid_s: 01vfj7, r0.id: fb-130745104, r1.rel: died, r0.namespace: freebase, r0.arg2_exact: Day Of Year, r1.conf_f: 0.9382554, r1.arg2: September 23, r1.arg2_fbid_s: 06vkl, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: openie4, r1.arg1: Padre Pio, r1.rel_exact: died, r1.arg2_exact: September 23, r1.num_extrs_i: 3, r1.id: openie4-12035559, r0.arg1_exact: September 23, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Padre Pio, die, $x))),AnswerState(September 23))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, question prefix = 'what year' and answer shape = Aaaaa 11 -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.375, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.029258511927913844)
What year did Padre Pio die?	one week	-1.0143069968088652	Derivation(What year did Padre Pio die?,one week,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Padre Pio, die, $x),true)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, be a, year) (Padre Pio, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: one week, r0.rel_exact: is a week of, r1.arg1_fbid_s: 01vfj7, r0.id: reverb-64254230, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.748, r1.arg2: one week, r0.arg2: years, r0.rel: is a week of, r1.namespace: reverb, r1.arg1: Padre Pio, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: one week, r1.num_extrs_i: 2, r0.conf_f: 0.638, r1.id: reverb-332573907, r0.arg1_exact: one week, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Padre Pio, die, $x))),AnswerState(one week))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.0143069968088652)
What year did Padre Pio die?	10 days	-1.767074224393196	Derivation(What year did Padre Pio die?,10 days,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Padre Pio, die, $x),true)), QaStep(What year did Padre Pio die?,QueryState($x: (year, setting, $x) (Padre Pio, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: next year, r0.rel_exact: have set within, r1.arg1_fbid_s: 01vfj7, r0.id: reverb-294941994, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: 10 days, r1.conf_f: 0.748, r1.arg2: 10 days, r0.arg2: 10 days, r0.rel: have set within, r1.namespace: reverb, r1.arg1: Padre Pio, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: 10 days, r1.num_extrs_i: 2, r0.conf_f: 0.827, r1.id: reverb-50621202, r0.arg1_exact: next year, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Padre Pio, die, $x))),AnswerState(10 days))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.767074224393196)
What year did Padre Pio die?	The process	-2.1908556367325898	Derivation(What year did Padre Pio die?,The process,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "type", year) (Padre Pio, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Padre Pio, die, $x),true)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, be a, year) (Padre Pio, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The process, r0.rel_exact: is a minimum of, r1.arg1_fbid_s: 01vfj7, r0.id: reverb-275118128, r1.rel: had just died in, r0.namespace: reverb, r0.arg2_exact: two years, r1.conf_f: 0.851, r1.arg2: the process, r0.arg2: two years, r0.rel: is a minimum of, r1.namespace: reverb, r1.arg1: Padre Pio, r0.corpora_ss: List(cw), r1.rel_exact: had just died in, r0.num_extrs_i: 3, r1.arg2_exact: the process, r1.num_extrs_i: 2, r0.conf_f: 0.848, r1.id: reverb-147175946, r0.arg1_exact: The process, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Padre Pio, die, $x))),AnswerState(The process))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.75, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.1908556367325898)
What year did Padre Pio die?	the process	-2.2801811139225574	Derivation(What year did Padre Pio die?,the process,Vector(QaStep(What year did Padre Pio die?,QuestionStateImpl(What year did Padre Pio die?,Sentence(What year did Padre Pio die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false)), QaStep(What year did Padre Pio die?,QueryState($x: ($x, "is a", year) (Padre Pio, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Padre Pio, die, $x),true)), QaStep(What year did Padre Pio die?,QueryState($x: (year, building, $x) (Padre Pio, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: five years, r0.rel_exact: is built into, r1.arg1_fbid_s: 01vfj7, r0.id: reverb-185012721, r1.rel: had just died in, r0.namespace: reverb, r0.arg2_exact: the process, r1.conf_f: 0.851, r1.arg2: the process, r0.arg2: the process, r0.rel: is built into, r1.namespace: reverb, r1.arg1: Padre Pio, r0.corpora_ss: List(cw), r1.rel_exact: had just died in, r0.num_extrs_i: 2, r1.arg2_exact: the process, r1.num_extrs_i: 2, r0.conf_f: 0.878, r1.id: reverb-147175946, r0.arg1_exact: five years, r1.arg1_exact: Padre Pio, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Padre Pio, die, $x))),AnswerState(the process))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.75, steps -> 0.75, query similarity with question -> 0.375, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.2801811139225574)
Who were victims of the disaster?	close associates	3.320712102391111	Derivation(Who were victims of the disaster?,close associates,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: close associates, r0.rel_exact: were victims of, r0.id: reverb-186398557, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.561, r0.arg1_exact: close associates),$x: ($x, were victims of, the disaster))),AnswerState(close associates))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.320712102391111)
Who were victims of the disaster?	the BGPMUS	2.9887646009645197	Derivation(Who were victims of the disaster?,the BGPMUS,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: the BGPMUS, r0.rel_exact: are victims of, r0.id: reverb-288225565, r0.namespace: reverb, r0.arg2_exact: the Disaster, r0.arg2: the Disaster, r0.rel: are victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.567, r0.arg1_exact: the BGPMUS),$x: ($x, were victims of, the disaster))),AnswerState(the BGPMUS))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = aaa AAAA -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.9887646009645197)
Who were victims of the disaster?	the GPNPBSM	2.9887646009645197	Derivation(Who were victims of the disaster?,the GPNPBSM,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: the GPNPBSM, r0.rel_exact: are victims of, r0.id: reverb-338779863, r0.namespace: reverb, r0.arg2_exact: the Disaster, r0.arg2: the Disaster, r0.rel: are victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.567, r0.arg1_exact: the GPNPBSM),$x: ($x, were victims of, the disaster))),AnswerState(the GPNPBSM))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = aaa AAAA -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.9887646009645197)
Who were victims of the disaster?	BGPSSS	2.7404794223785336	Derivation(Who were victims of the disaster?,BGPSSS,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: BGPSSS, r0.rel_exact: are victims of, r0.id: reverb-256110104, r0.namespace: reverb, r0.arg2_exact: the Disaster, r0.arg2: the Disaster, r0.rel: are victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.567, r0.arg1_exact: BGPSSS),$x: ($x, were victims of, the disaster))),AnswerState(BGPSSS))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = AAAA -> 1.0),2.7404794223785336)
Who were victims of the disaster?	Mr. Montgomery Dickson	2.3851749113727516	Derivation(Who were victims of the disaster?,Mr. Montgomery Dickson,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: Mr. Montgomery Dickson, r0.rel_exact: were the victims of, r0.id: reverb-265262144, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were the victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.627, r0.arg1_exact: Mr. Montgomery Dickson),$x: ($x, were victims of, the disaster))),AnswerState(Mr. Montgomery Dickson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'who' and answer shape = Aa. Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3851749113727516)
Who were victims of the disaster?	INTERM?N-OXFAM	2.3851749113727516	Derivation(Who were victims of the disaster?,INTERM?N-OXFAM,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: INTERM?N-OXFAM, r0.rel_exact: is helping victims of, r0.id: reverb-223292829, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: is helping victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.515, r0.arg1_exact: INTERM?N-OXFAM),$x: ($x, were victims of, the disaster))),AnswerState(INTERM?N-OXFAM))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = AAAA-AAAA -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3851749113727516)
Who were victims of the disaster?	loved ones	2.354968599044282	Derivation(Who were victims of the disaster?,loved ones,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: loved ones, r0.rel_exact: may have been victims of, r0.id: reverb-186722143, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: may have been victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.561, r0.arg1_exact: loved ones),$x: ($x, were victims of, the disaster))),AnswerState(loved ones))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.354968599044282)
Who were victims of the disaster?	New Orleans	2.3273885242061425	Derivation(Who were victims of the disaster?,New Orleans,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: New Orleans, r0.rel_exact: was a victim of, r0.id: reverb-180716580, r0.namespace: reverb, r0.arg2_exact: the Hurricane Katrina disaster, r0.arg2: the Hurricane Katrina disaster, r0.rel: was a victim of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.903, r0.arg1_exact: New Orleans),$x: ($x, were victims of, the disaster))),AnswerState(New Orleans))),SparseVector(question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3273885242061425)
Who were victims of the disaster?	Dorothy Gibson	2.08861561867193	Derivation(Who were victims of the disaster?,Dorothy Gibson,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Dorothy Gibson, r0.rel_exact: was a survivor of, r0.id: reverb-203646616, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.627, r0.arg1_exact: Dorothy Gibson),$x: ($x, be a survivor of, the disaster))),AnswerState(Dorothy Gibson))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.08861561867193)
Who were victims of the disaster?	?Our solidarity	2.0230210976176908	Derivation(Who were victims of the disaster?,?Our solidarity,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: ?Our solidarity, r0.rel_exact: is currently the victims of, r0.id: reverb-35737392, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: is currently the victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.814, r0.arg1_exact: ?Our solidarity),$x: ($x, were victims of, the disaster))),AnswerState(?Our solidarity))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = ?Aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.0230210976176908)
Who were victims of the disaster?	communication systems	1.9079513943129698	Derivation(Who were victims of the disaster?,communication systems,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: communication systems, r0.rel_exact: may be victims of, r0.id: reverb-93969294, r0.namespace: reverb, r0.arg2_exact: the original disaster, r0.arg2: the original disaster, r0.rel: may be victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.654, r0.arg1_exact: communication systems),$x: ($x, were victims of, the disaster))),AnswerState(communication systems))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9079513943129698)
Who were victims of the disaster?	the team	1.800342201081494	Derivation(Who were victims of the disaster?,the team,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: the team, r0.rel_exact: is a victim of, r0.id: reverb-50415640, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: is a victim of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.744, r0.arg1_exact: the team),$x: ($x, were victims of, the disaster))),AnswerState(the team))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.800342201081494)
Who were victims of the disaster?	Big Easy residents	1.7750080732349598	Derivation(Who were victims of the disaster?,Big Easy residents,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: Big Easy residents, r0.rel_exact: were victims of, r0.id: reverb-199505799, r0.namespace: reverb, r0.arg2_exact: the worst natural disaster, r0.arg2: the worst natural disaster, r0.rel: were victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.616, r0.arg1_exact: Big Easy residents),$x: ($x, were victims of, the disaster))),AnswerState(Big Easy residents))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7750080732349598)
Who were victims of the disaster?	Cuba	1.7409581557591174	Derivation(Who were victims of the disaster?,Cuba,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d04z6, r0.arg1: Cuba, r0.rel_exact: were victims of, r0.id: reverb-206263239, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.83, r0.arg1_exact: Cuba),$x: ($x, were victims of, the disaster))),AnswerState(Cuba))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7409581557591174)
Who were victims of the disaster?	a million people	1.6289263943301568	Derivation(Who were victims of the disaster?,a million people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: a million people, r0.rel_exact: have been affected by, r0.id: reverb-34862517, r0.namespace: reverb, r0.arg2_exact: the natural disaster, r0.arg2: the natural disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.862, r0.arg1_exact: a million people),$x: ($x, have be affect by, the disaster))),AnswerState(a million people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.6289263943301568)
Who were victims of the disaster?	Even the people	1.5760038928863784	Derivation(Who were victims of the disaster?,Even the people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: Even the people, r0.rel_exact: have been victims of, r0.id: reverb-51292939, r0.namespace: reverb, r0.arg2_exact: the natural disasters, r0.arg2_fbid_s: 06l0yx, r0.arg2: the natural disasters, r0.rel: have been victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.543, r0.arg1_exact: Even the people),$x: ($x, were victims of, the disaster))),AnswerState(Even the people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.5714285714285714, question prefix = 'who' and answer shape = Aaaa aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5760038928863784)
Who were victims of the disaster?	the Deaf	1.5391233942533695	Derivation(Who were victims of the disaster?,the Deaf,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Deaf, r0.rel_exact: has been affected by, r0.id: reverb-356106695, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.664, r0.arg1_exact: the Deaf),$x: ($x, have be affect by, the disaster))),AnswerState(the Deaf))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5391233942533695)
Who were victims of the disaster?	the runaway	1.4381883873264327	Derivation(Who were victims of the disaster?,the runaway,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: the runaway, r0.rel_exact: was really the victim of, r0.id: reverb-197198589, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was really the victim of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8, r0.arg1_exact: the runaway),$x: ($x, were victims of, the disaster))),AnswerState(the runaway))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4381883873264327)
Who were victims of the disaster?	legal residents	1.34795402353119	Derivation(Who were victims of the disaster?,legal residents,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: legal residents, r0.rel_exact: were displaced by, r0.id: reverb-204106487, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.914, r0.arg1_exact: legal residents),$x: ($x, be displace by, the disaster))),AnswerState(legal residents))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.34795402353119)
Who were victims of the disaster?	thirteen million	1.3158064812812835	Derivation(Who were victims of the disaster?,thirteen million,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: thirteen million, r0.rel_exact: have been affected by, r0.id: reverb-149331309, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.803, r0.arg1_exact: thirteen million),$x: ($x, have be affect by, the disaster))),AnswerState(thirteen million))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.3158064812812835)
Who were victims of the disaster?	scam people	1.3158064812812835	Derivation(Who were victims of the disaster?,scam people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: scam people, r0.rel_exact: have been affected by, r0.id: reverb-160866819, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.741, r0.arg1_exact: scam people),$x: ($x, have be affect by, the disaster))),AnswerState(scam people))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.3158064812812835)
Who were victims of the disaster?	defaulted borrowers	1.3158064812812835	Derivation(Who were victims of the disaster?,defaulted borrowers,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: defaulted borrowers, r0.rel_exact: have been affected by, r0.id: reverb-321673101, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.651, r0.arg1_exact: defaulted borrowers),$x: ($x, have be affect by, the disaster))),AnswerState(defaulted borrowers))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.3158064812812835)
Who were victims of the disaster?	Farah Edwards	1.279444600185558	Derivation(Who were victims of the disaster?,Farah Edwards,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Farah Edwards, r0.rel_exact: is a survivor of, r0.id: reverb-377079616, r0.namespace: reverb, r0.arg2_exact: the Bhopal disaster, r0.arg2: the Bhopal disaster, r0.rel: is a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: Farah Edwards),$x: ($x, be a survivor of, the disaster))),AnswerState(Farah Edwards))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.279444600185558)
Who were victims of the disaster?	Sanjay Verma	1.279444600185558	Derivation(Who were victims of the disaster?,Sanjay Verma,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Sanjay Verma, r0.rel_exact: is a survivor of, r0.id: reverb-361356396, r0.namespace: reverb, r0.arg2_exact: the Bhopal disaster, r0.arg2: the Bhopal disaster, r0.rel: is a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.955, r0.arg1_exact: Sanjay Verma),$x: ($x, be a survivor of, the disaster))),AnswerState(Sanjay Verma))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.279444600185558)
Who were victims of the disaster?	24	1.2420592480669517	Derivation(Who were victims of the disaster?,24,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be survivor of,false,2716.0,257.0,106.0,0.725232720375061),QueryState($x: ($x, be survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 24, r0.rel_exact: are survivors of, r0.id: reverb-181363464, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are survivors of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.597, r0.arg1_exact: 24),$x: ($x, be survivor of, the disaster))),AnswerState(24))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.725232720375061, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = 11 -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2420592480669517)
Who were victims of the disaster?	Bagong Silang	1.116337630581488	Derivation(Who were victims of the disaster?,Bagong Silang,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Bagong Silang, r0.rel_exact: has been affected the most by, r0.id: reverb-299715439, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected the most by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.812, r0.arg1_exact: Bagong Silang),$x: ($x, have be affect by, the disaster))),AnswerState(Bagong Silang))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.116337630581488)
Who were victims of the disaster?	732 families	1.0160065221045986	Derivation(Who were victims of the disaster?,732 families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 732 families, r0.rel_exact: were displaced by, r0.id: reverb-285434506, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.971, r0.arg1_exact: 732 families),$x: ($x, be displace by, the disaster))),AnswerState(732 families))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = 111 aaaa -> 1.0),1.0160065221045986)
Who were victims of the disaster?	000 children	1.0160065221045986	Derivation(Who were victims of the disaster?,000 children,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 000 children, r0.rel_exact: were displaced by, r0.id: reverb-380404527, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.927, r0.arg1_exact: 000 children),$x: ($x, be displace by, the disaster))),AnswerState(000 children))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = 111 aaaa -> 1.0),1.0160065221045986)
Who were victims of the disaster?	the United States and	1.0160065221045986	Derivation(Who were victims of the disaster?,the United States and,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the United States and, r0.rel_exact: were displaced by, r0.id: reverb-255458040, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.73, r0.arg1_exact: the United States and),$x: ($x, be displace by, the disaster))),AnswerState(the United States and))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, question prefix = 'who' and answer shape = aaa Aaaaa Aaaaa aaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0160065221045986)
Who were victims of the disaster?	whom	1.0103877722598837	Derivation(Who were victims of the disaster?,whom,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: whom, r0.rel_exact: are victims of, r0.id: openie4-15243694, r0.namespace: openie4, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8, r0.arg1_exact: whom),$x: ($x, were victims of, the disaster))),AnswerState(whom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0103877722598837)
Who were victims of the disaster?	Dhaka?s moddholok	1.0084227505467216	Derivation(Who were victims of the disaster?,Dhaka?s moddholok,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be witness to,false,2716.0,140.0,4.0,0.6418042778968811),QueryState($x: ($x, be witness to, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be witness to, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Dhaka?s moddholok, r0.rel_exact: were witnesses to, r0.id: reverb-135214381, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were witnesses to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.897, r0.arg1_exact: Dhaka?s moddholok),$x: ($x, be witness to, the disaster))),AnswerState(Dhaka?s moddholok))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6418042778968811, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = Aaaaa?a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.0084227505467216)
Who were victims of the disaster?	20 million people	1.0078855183034343	Derivation(Who were victims of the disaster?,20 million people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be displace by,false,2716.0,135.0,12.0,0.677272379398346),QueryState($x: ($x, have be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 20 million people, r0.rel_exact: had been displaced by, r0.id: reverb-19603816, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: had been displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.764, r0.arg1_exact: 20 million people),$x: ($x, have be displace by, the disaster))),AnswerState(20 million people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.677272379398346, question prefix = 'who' and answer shape = 11 aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0078855183034343)
Who were victims of the disaster?	to people	1.000054202444653	Derivation(Who were victims of the disaster?,to people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be impact by,false,2716.0,225.0,14.0,0.6661262810230255),QueryState($x: ($x, have be impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: to people, r0.rel_exact: had been impacted by, r0.id: reverb-52071573, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: had been impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.839, r0.arg1_exact: to people),$x: ($x, have be impact by, the disaster))),AnswerState(to people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6661262810230255, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.000054202444653)
Who were victims of the disaster?	New York City artists	1.000054202444653	Derivation(Who were victims of the disaster?,New York City artists,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be impact by,false,2716.0,225.0,14.0,0.6661262810230255),QueryState($x: ($x, have be impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: New York City artists, r0.rel_exact: has been impacted by, r0.id: reverb-255722337, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.652, r0.arg1_exact: New York City artists),$x: ($x, have be impact by, the disaster))),AnswerState(New York City artists))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6661262810230255, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaa Aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.000054202444653)
Who were victims of the disaster?	the Japanese groups	0.9842573289310246	Derivation(Who were victims of the disaster?,the Japanese groups,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Japanese groups, r0.rel_exact: were directly affected by, r0.id: reverb-95467423, r0.namespace: reverb, r0.arg2_exact: the disasters, r0.arg2: the disasters, r0.rel: were directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.737, r0.arg1_exact: the Japanese groups),$x: ($x, be directly affect by, the disaster))),AnswerState(the Japanese groups))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9842573289310246)
Who were victims of the disaster?	200,000 people	0.9842573289310246	Derivation(Who were victims of the disaster?,200,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 200,000 people, r0.rel_exact: were directly affected by, r0.id: reverb-155450953, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 22, r0.conf_f: 0.866, r0.arg1_exact: 200,000 people),$x: ($x, be directly affect by, the disaster))),AnswerState(200,000 people))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = 111,111 aaaa -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9842573289310246)
Who were victims of the disaster?	the Japanese	0.9838589798546922	Derivation(Who were victims of the disaster?,the Japanese,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Japanese, r0.rel_exact: have been affected by, r0.id: reverb-61683720, r0.namespace: reverb, r0.arg2_exact: the disasters, r0.arg2: the disasters, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 24, r0.conf_f: 0.87, r0.arg1_exact: the Japanese),$x: ($x, have be affect by, the disaster))),AnswerState(the Japanese))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'who' and answer shape = aaa Aaaaa -> 1.0, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	Twenty-two provinces	0.9838589798546922	Derivation(Who were victims of the disaster?,Twenty-two provinces,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Twenty-two provinces, r0.rel_exact: have been affected by, r0.id: reverb-60854086, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.962, r0.arg1_exact: Twenty-two provinces),$x: ($x, have be affect by, the disaster))),AnswerState(Twenty-two provinces))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa-aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	the very last minute	0.9838589798546922	Derivation(Who were victims of the disaster?,the very last minute,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the very last minute, r0.rel_exact: has been affected by, r0.id: reverb-94566371, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: the very last minute),$x: ($x, have be affect by, the disaster))),AnswerState(the very last minute))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaa aaaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	SLA members	0.9838589798546922	Derivation(Who were victims of the disaster?,SLA members,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: SLA members, r0.rel_exact: have been affected by, r0.id: reverb-34060950, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.87, r0.arg1_exact: SLA members),$x: ($x, have be affect by, the disaster))),AnswerState(SLA members))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = AAA aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	more than 200,000 people	0.9838589798546922	Derivation(Who were victims of the disaster?,more than 200,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: more than 200,000 people, r0.rel_exact: have been affected by, r0.id: reverb-303963626, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.889, r0.arg1_exact: more than 200,000 people),$x: ($x, have be affect by, the disaster))),AnswerState(more than 200,000 people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aaaa aaaa 111,111 aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	the many families	0.9838589798546922	Derivation(Who were victims of the disaster?,the many families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the many families, r0.rel_exact: have been affected by, r0.id: reverb-292300735, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.651, r0.arg1_exact: the many families),$x: ($x, have be affect by, the disaster))),AnswerState(the many families))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	Four million people	0.9838589798546922	Derivation(Who were victims of the disaster?,Four million people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Four million people, r0.rel_exact: have been affected by, r0.id: reverb-150749468, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: Four million people),$x: ($x, have be affect by, the disaster))),AnswerState(Four million people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	14 million people	0.9838589798546922	Derivation(Who were victims of the disaster?,14 million people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 14 million people, r0.rel_exact: have been affected by, r0.id: reverb-356532427, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.803, r0.arg1_exact: 14 million people),$x: ($x, have be affect by, the disaster))),AnswerState(14 million people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, question prefix = 'who' and answer shape = 11 aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	depositors or borrowers	0.9838589798546922	Derivation(Who were victims of the disaster?,depositors or borrowers,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: depositors or borrowers, r0.rel_exact: have been affected by, r0.id: reverb-376522330, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.651, r0.arg1_exact: depositors or borrowers),$x: ($x, have be affect by, the disaster))),AnswerState(depositors or borrowers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaaa aa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	1.5 million people	0.9838589798546922	Derivation(Who were victims of the disaster?,1.5 million people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 1.5 million people, r0.rel_exact: have been affected by, r0.id: reverb-292414483, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.533, r0.arg1_exact: 1.5 million people),$x: ($x, have be affect by, the disaster))),AnswerState(1.5 million people))),SparseVector(question prefix = 'who' and answer shape = 1.1 aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	950,000 people	0.9838589798546922	Derivation(Who were victims of the disaster?,950,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 950,000 people, r0.rel_exact: have been affected by, r0.id: reverb-41205017, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.82, r0.arg1_exact: 950,000 people),$x: ($x, have be affect by, the disaster))),AnswerState(950,000 people))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = 111,111 aaaa -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9838589798546922)
Who were victims of the disaster?	?Will We	0.9286670780972803	Derivation(Who were victims of the disaster?,?Will We,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: ?Will We, r0.rel_exact: Be the Victims of, r0.id: reverb-234272477, r0.namespace: reverb, r0.arg2_exact: the Next Oil Spill Disaster, r0.arg2: the Next Oil Spill Disaster, r0.rel: Be the Victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.555, r0.arg1_exact: ?Will We),$x: ($x, were victims of, the disaster))),AnswerState(?Will We))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = ?Aaaa Aa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9286670780972803)
Who were victims of the disaster?	a special guest	0.921383159195587	Derivation(Who were victims of the disaster?,a special guest,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be survivor of,false,2716.0,257.0,106.0,0.725232720375061),QueryState($x: ($x, be survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: a special guest, r0.rel_exact: is an actual survivor of, r0.id: reverb-244461781, r0.namespace: reverb, r0.arg2_exact: the Titanic disaster, r0.arg2: the Titanic disaster, r0.rel: is an actual survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.704, r0.arg1_exact: a special guest),$x: ($x, be survivor of, the disaster))),AnswerState(a special guest))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.725232720375061, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.921383159195587)
Who were victims of the disaster?	Chernobyl and Manhattan	0.8883053378658485	Derivation(Who were victims of the disaster?,Chernobyl and Manhattan,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,visit upon,true,2716.0,101.0,4.0,0.6520080864429474),QueryState($x: (the disaster, visit upon, $x),true)), QaStep(Who were victims of the disaster?,QueryState($x: (the disaster, visit upon, $x),true),ExecutionAction(ExecTuple((r0.arg1: the disasters, r0.rel_exact: visited upon, r0.id: reverb-95027448, r0.namespace: reverb, r0.arg2_exact: Chernobyl and Manhattan, r0.arg2: Chernobyl and Manhattan, r0.rel: visited upon, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.895, r0.arg1_exact: the disasters),$x: (the disaster, visit upon, $x))),AnswerState(Chernobyl and Manhattan))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6520080864429474, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaaaa aaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8883053378658485)
Who were victims of the disaster?	Families	0.844015868722513	Derivation(Who were victims of the disaster?,Families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: Families, r0.rel_exact: are the immediate victims of, r0.id: reverb-273257264, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are the immediate victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.688, r0.arg1_exact: Families),$x: ($x, were victims of, the disaster))),AnswerState(Families))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.844015868722513)
Who were victims of the disaster?	local fishermen	0.8333330786842015	Derivation(Who were victims of the disaster?,local fishermen,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: local fishermen, r0.rel_exact: were most directly affected by, r0.id: reverb-74167715, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were most directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.561, r0.arg1_exact: local fishermen),$x: ($x, be directly affect by, the disaster))),AnswerState(local fishermen))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8333330786842015)
Who were victims of the disaster?	British families	0.8153348326071406	Derivation(Who were victims of the disaster?,British families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: British families, r0.rel_exact: have been affected by, r0.id: reverb-388781929, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.782, r0.arg1_exact: British families),$x: ($x, have be affect by, the disaster))),AnswerState(British families))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'who' and answer shape = Aaaaa aaaa -> 1.0, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8153348326071406)
Who were victims of the disaster?	young people	0.8020328950654751	Derivation(Who were victims of the disaster?,young people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be impact by,false,2716.0,225.0,14.0,0.6661262810230255),QueryState($x: ($x, have be impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 021dfr, r0.arg1: young people, r0.rel_exact: have been impacted by, r0.id: reverb-128609440, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.683, r0.arg1_exact: young people),$x: ($x, have be impact by, the disaster))),AnswerState(young people))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6661262810230255, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8020328950654751)
Who were victims of the disaster?	hydrogen peroxide	0.7858376724755143	Derivation(Who were victims of the disaster?,hydrogen peroxide,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03q_p, r0.arg1: hydrogen peroxide, r0.rel_exact: has been affected by, r0.id: reverb-73647581, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.673, r0.arg1_exact: hydrogen peroxide),$x: ($x, have be affect by, the disaster))),AnswerState(hydrogen peroxide))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7858376724755143)
Who were victims of the disaster?	a practitioner	0.6684789634826958	Derivation(Who were victims of the disaster?,a practitioner,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: a practitioner, r0.rel_exact: is also a survivor of, r0.id: reverb-356099447, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: is also a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.782, r0.arg1_exact: a practitioner),$x: ($x, be a survivor of, the disaster))),AnswerState(a practitioner))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6684789634826958)
Who were victims of the disaster?	More people	0.601072309372809	Derivation(Who were victims of the disaster?,More people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: More people, r0.rel_exact: have been directly affected by, r0.id: reverb-336498980, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.891, r0.arg1_exact: More people),$x: ($x, be directly affect by, the disaster))),AnswerState(More people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, question prefix = 'who' and answer shape = Aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.601072309372809)
Who were victims of the disaster?	San Diego	0.5261948010985189	Derivation(Who were victims of the disaster?,San Diego,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be scene of,false,2716.0,116.0,4.0,0.6476809084415436),QueryState($x: ($x, be scene of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be scene of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: San Diego, r0.rel_exact: was the scene of, r0.id: reverb-190997887, r0.namespace: reverb, r0.arg2_exact: the worst air disaster, r0.arg2: the worst air disaster, r0.rel: was the scene of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.905, r0.arg1_exact: San Diego),$x: ($x, be scene of, the disaster))),AnswerState(San Diego))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.6476809084415436, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5261948010985189)
Who were victims of the disaster?	close friends	0.506635462794911	Derivation(Who were victims of the disaster?,close friends,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: close friends, r0.rel_exact: have been affected by, r0.id: reverb-200689426, r0.namespace: reverb, r0.arg2_exact: the Tsunami disaster, r0.arg2: the Tsunami disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.733, r0.arg1_exact: close friends),$x: ($x, have be affect by, the disaster))),AnswerState(close friends))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.506635462794911)
Who were victims of the disaster?	families	0.5049955635514536	Derivation(Who were victims of the disaster?,families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: families, r0.rel_exact: were displaced by, r0.id: reverb-48530099, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: families),$x: ($x, be displace by, the disaster))),AnswerState(families))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.5049955635514536)
Who were victims of the disaster?	500 and 1,000 people	0.5009872281812777	Derivation(Who were victims of the disaster?,500 and 1,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 500 and 1,000 people, r0.rel_exact: could have been affected by, r0.id: reverb-213354412, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: could have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.753, r0.arg1_exact: 500 and 1,000 people),$x: ($x, have be affect by, the disaster))),AnswerState(500 and 1,000 people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = 111 aaa 1,111 aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5009872281812777)
Who were victims of the disaster?	lives	0.47324637037788	Derivation(Who were victims of the disaster?,lives,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: lives, r0.rel_exact: was directly affected by, r0.id: reverb-273781039, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.898, r0.arg1_exact: lives),$x: ($x, be directly affect by, the disaster))),AnswerState(lives))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.47324637037788)
Who were victims of the disaster?	members	0.47284802130154757	Derivation(Who were victims of the disaster?,members,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: members, r0.rel_exact: have been affected by, r0.id: reverb-317295194, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.676, r0.arg1_exact: members),$x: ($x, have be affect by, the disaster))),AnswerState(members))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.47284802130154757)
Who were victims of the disaster?	Roane County	0.4708193988786742	Derivation(Who were victims of the disaster?,Roane County,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be devastate by,false,2716.0,228.0,9.0,0.6519051194190979),QueryState($x: ($x, have be devastate by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be devastate by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Roane County, r0.rel_exact: had been devastated by, r0.id: reverb-160105507, r0.namespace: reverb, r0.arg2_exact: the TVA coal ash disaster, r0.arg2: the TVA coal ash disaster, r0.rel: had been devastated by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.829, r0.arg1_exact: Roane County),$x: ($x, have be devastate by, the disaster))),AnswerState(Roane County))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6519051194190979, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4708193988786742)
Who were victims of the disaster?	More than 154,000 people	0.41241683251283057	Derivation(Who were victims of the disaster?,More than 154,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: More than 154,000 people, r0.rel_exact: are still displaced by, r0.id: reverb-354404021, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are still displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.891, r0.arg1_exact: More than 154,000 people),$x: ($x, be displace by, the disaster))),AnswerState(More than 154,000 people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'who' and answer shape = Aaaa aaaa 111,111 aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.41241683251283057)
Who were victims of the disaster?	More than 188,000 people	0.41241683251283057	Derivation(Who were victims of the disaster?,More than 188,000 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: More than 188,000 people, r0.rel_exact: are still displaced by, r0.id: reverb-338809633, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are still displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.891, r0.arg1_exact: More than 188,000 people),$x: ($x, be displace by, the disaster))),AnswerState(More than 188,000 people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'who' and answer shape = Aaaa aaaa 111,111 aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.41241683251283057)
Who were victims of the disaster?	needy families	0.40836462803670903	Derivation(Who were victims of the disaster?,needy families,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,impact by,false,2716.0,977.0,28.0,0.6419000625610352),QueryState($x: ($x, impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: needy families, r0.rel_exact: were impacted by, r0.id: reverb-227870364, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.746, r0.arg1_exact: needy families),$x: ($x, impact by, the disaster))),AnswerState(needy families))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6419000625610352, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.40836462803670903)
Who were victims of the disaster?	the Tsunami area	0.4048330609549535	Derivation(Who were victims of the disaster?,the Tsunami area,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be witness to,false,2716.0,140.0,4.0,0.6418042778968811),QueryState($x: ($x, be witness to, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be witness to, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Tsunami area, r0.rel_exact: was to bear witness to, r0.id: reverb-195928822, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was to bear witness to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.787, r0.arg1_exact: the Tsunami area),$x: ($x, be witness to, the disaster))),AnswerState(the Tsunami area))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6418042778968811, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4048330609549535)
Who were victims of the disaster?	the congregation	0.3994246186397672	Derivation(Who were victims of the disaster?,the congregation,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the congregation, r0.rel_exact: was directly affected by, r0.id: reverb-320744701, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.896, r0.arg1_exact: the congregation),$x: ($x, be directly affect by, the disaster))),AnswerState(the congregation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3994246186397672)
Who were victims of the disaster?	the items	0.3990262695634348	Derivation(Who were victims of the disaster?,the items,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the items, r0.rel_exact: has been affected by, r0.id: reverb-196791754, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.682, r0.arg1_exact: the items),$x: ($x, have be affect by, the disaster))),AnswerState(the items))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3990262695634348)
Who were victims of the disaster?	the floods	0.3990262695634348	Derivation(Who were victims of the disaster?,the floods,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the floods, r0.rel_exact: have been affected by, r0.id: reverb-55774499, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.803, r0.arg1_exact: the floods),$x: ($x, have be affect by, the disaster))),AnswerState(the floods))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3990262695634348)
Who were victims of the disaster?	ten districts	0.3990262695634348	Derivation(Who were victims of the disaster?,ten districts,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: ten districts, r0.rel_exact: have been affected by, r0.id: reverb-348272673, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.813, r0.arg1_exact: ten districts),$x: ($x, have be affect by, the disaster))),AnswerState(ten districts))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3990262695634348)
Who were victims of the disaster?	wildlife	0.3692722018143746	Derivation(Who were victims of the disaster?,wildlife,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have survive,false,2716.0,1601.0,44.0,0.6405903398990631),QueryState($x: ($x, have survive, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have survive, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: wildlife, r0.rel_exact: had survived, r0.id: reverb-108111003, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: had survived, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.537, r0.arg1_exact: wildlife),$x: ($x, have survive, the disaster))),AnswerState(wildlife))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6405903398990631, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.3692722018143746)
Who were victims of the disaster?	Mr Macdonald	0.3421796966697377	Derivation(Who were victims of the disaster?,Mr Macdonald,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Mr Macdonald, r0.rel_exact: was a survivor of, r0.id: reverb-30521249, r0.namespace: reverb, r0.arg2_exact: the Iolaire disaster, r0.arg2: the Iolaire disaster, r0.rel: was a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.941, r0.arg1_exact: Mr Macdonald),$x: ($x, be a survivor of, the disaster))),AnswerState(Mr Macdonald))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3421796966697377)
Who were victims of the disaster?	Tulsa	0.314047059916743	Derivation(Who were victims of the disaster?,Tulsa,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 013kcv, r0.arg1: Tulsa, r0.rel_exact: claimed to be victims of, r0.id: reverb-48188807, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: claimed to be victims of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.751, r0.arg1_exact: Tulsa),$x: ($x, were victims of, the disaster))),AnswerState(Tulsa))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.314047059916743)
Who were victims of the disaster?	the priest	0.2954504500762618	Derivation(Who were victims of the disaster?,the priest,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have survive,false,2716.0,1601.0,44.0,0.6405903398990631),QueryState($x: ($x, have survive, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have survive, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the priest, r0.rel_exact: had survived, r0.id: reverb-62533205, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: had survived, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.644, r0.arg1_exact: the priest),$x: ($x, have survive, the disaster))),AnswerState(the priest))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6405903398990631, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.2954504500762618)
Who were victims of the disaster?	1,300 people	0.1987144998170618	Derivation(Who were victims of the disaster?,1,300 people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be displace by,false,2716.0,135.0,12.0,0.677272379398346),QueryState($x: ($x, have be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 1,300 people, r0.rel_exact: have been displaced by, r0.id: reverb-320094193, r0.namespace: reverb, r0.arg2_exact: the deadliest disaster, r0.arg2: the deadliest disaster, r0.rel: have been displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.805, r0.arg1_exact: 1,300 people),$x: ($x, have be displace by, the disaster))),AnswerState(1,300 people))),SparseVector(question prefix = 'who' and answer shape = 1,111 aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.677272379398346, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.1987144998170618)
Who were victims of the disaster?	Van	0.1790727270656678	Derivation(Who were victims of the disaster?,Van,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Van, r0.rel_exact: have been the worst affected by, r0.id: reverb-18650706, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been the worst affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.79, r0.arg1_exact: Van),$x: ($x, have be affect by, the disaster))),AnswerState(Van))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.1790727270656678)
Who were victims of the disaster?	women and children	0.17468796136831966	Derivation(Who were victims of the disaster?,women and children,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: women and children, r0.rel_exact: have been affected by, r0.id: reverb-185578741, r0.namespace: reverb, r0.arg2_exact: the natural disaster, r0.arg2: the natural disaster, r0.rel: have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.651, r0.arg1_exact: women and children),$x: ($x, have be affect by, the disaster))),AnswerState(women and children))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = aaaa aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.17468796136831966)
Who were victims of the disaster?	the Gulf Stream Current	0.17468796136831966	Derivation(Who were victims of the disaster?,the Gulf Stream Current,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Gulf Stream Current, r0.rel_exact: has been affected by, r0.id: reverb-86407413, r0.namespace: reverb, r0.arg2_exact: the B.P. disaster, r0.arg2: the B.P. disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.887, r0.arg1_exact: the Gulf Stream Current),$x: ($x, have be affect by, the disaster))),AnswerState(the Gulf Stream Current))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.17468796136831966)
Who were victims of the disaster?	Poor people	0.08347399409976974	Derivation(Who were victims of the disaster?,Poor people,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be more vulnerable to,false,2716.0,263.0,14.0,0.6612496078014374),QueryState($x: ($x, be more vulnerable to, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be more vulnerable to, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0h948, r0.arg1: Poor people, r0.rel_exact: were made more vulnerable to, r0.id: reverb-167250140, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were made more vulnerable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.924, r0.arg1_exact: Poor people),$x: ($x, be more vulnerable to, the disaster))),AnswerState(Poor people))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6612496078014374, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, question prefix = 'who' and answer shape = Aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.08347399409976974)
Who were victims of the disaster?	the individuals and businesses	0.07641712661011768	Derivation(Who were victims of the disaster?,the individuals and businesses,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,impact by,false,2716.0,977.0,28.0,0.6419000625610352),QueryState($x: ($x, impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the individuals and businesses, r0.rel_exact: were impacted by, r0.id: reverb-124960717, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.866, r0.arg1_exact: the individuals and businesses),$x: ($x, impact by, the disaster))),AnswerState(the individuals and businesses))),SparseVector(question prefix = 'who' and answer shape = aaa aaaa aaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6419000625610352, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.07641712661011768)
Who were victims of the disaster?	as many as 50 %	0.07549690757849481	Derivation(Who were victims of the disaster?,as many as 50 %,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have survive,false,2716.0,1601.0,44.0,0.6405903398990631),QueryState($x: ($x, have survive, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have survive, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: as many as 50 %, r0.rel_exact: would have survived, r0.id: reverb-75379445, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: would have survived, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.613, r0.arg1_exact: as many as 50 %),$x: ($x, have survive, the disaster))),AnswerState(as many as 50 %))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6405903398990631, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aa aaaa aa 11 % -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.07549690757849481)
Who were victims of the disaster?	Iwate Prefecture	0.07474294637963341	Derivation(Who were victims of the disaster?,Iwate Prefecture,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,impact by,false,2716.0,977.0,28.0,0.6419000625610352),QueryState($x: ($x, impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0191qk, r0.arg1: Iwate Prefecture, r0.rel_exact: impacted by, r0.id: reverb-165109302, r0.namespace: reverb, r0.arg2_exact: the March 11 disaster, r0.arg2: the March 11 disaster, r0.rel: impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.824, r0.arg1_exact: Iwate Prefecture),$x: ($x, impact by, the disaster))),AnswerState(Iwate Prefecture))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6419000625610352, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.07474294637963341)
Who were victims of the disaster?	Earth?s populations	0.07111214188114667	Derivation(Who were victims of the disaster?,Earth?s populations,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have survive,false,2716.0,1601.0,44.0,0.6405903398990631),QueryState($x: ($x, have survive, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have survive, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Earth?s populations, r0.rel_exact: have survived, r0.id: reverb-369122132, r0.namespace: reverb, r0.arg2_exact: the Nuclear Disaster, r0.arg2: the Nuclear Disaster, r0.rel: have survived, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.807, r0.arg1_exact: Earth?s populations),$x: ($x, have survive, the disaster))),AnswerState(Earth?s populations))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6405903398990631, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = Aaaaa?a aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.07111214188114667)
Who were victims of the disaster?	Twelve-year-old Emily	0.05923639502780187	Derivation(Who were victims of the disaster?,Twelve-year-old Emily,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have live through,false,2716.0,210.0,6.0,0.6418042778968811),QueryState($x: ($x, have live through, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have live through, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: Twelve-year-old Emily, r0.rel_exact: has lived through, r0.id: reverb-100101151, r0.namespace: reverb, r0.arg2_exact: the Titanic disaster, r0.arg2: the Titanic disaster, r0.rel: has lived through, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.945, r0.arg1_exact: Twelve-year-old Emily),$x: ($x, have live through, the disaster))),AnswerState(Twelve-year-old Emily))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6418042778968811, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa-aaaa-aaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.05923639502780187)
Who were victims of the disaster?	12 provinces	0.05493475617484922	Derivation(Who were victims of the disaster?,12 provinces,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be directly affect by,false,2716.0,132.0,4.0,0.6436430215835571),QueryState($x: ($x, be directly affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be directly affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 12 provinces, r0.rel_exact: were directly affected by, r0.id: reverb-332511802, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were directly affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.878, r0.arg1_exact: 12 provinces),$x: ($x, be directly affect by, the disaster))),AnswerState(12 provinces))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6436430215835571, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.05493475617484922)
Who were victims of the disaster?	the Gulf Coast	0.04267924719989269	Derivation(Who were victims of the disaster?,the Gulf Coast,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be witness to,false,2716.0,140.0,4.0,0.6418042778968811),QueryState($x: ($x, be witness to, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be witness to, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: the Gulf Coast, r0.rel_exact: has been bearing witness to, r0.id: reverb-258269627, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been bearing witness to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.841, r0.arg1_exact: the Gulf Coast),$x: ($x, be witness to, the disaster))),AnswerState(the Gulf Coast))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6418042778968811, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = aaa Aaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),0.04267924719989269)
Who were victims of the disaster?	Nakata	0.034844850236139924	Derivation(Who were victims of the disaster?,Nakata,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),ExecutionAction(ExecTuple((r0.arg1: Nakata, r0.rel_exact: is a lovable victim of, r0.id: reverb-277056576, r0.namespace: reverb, r0.arg2_exact: the school disaster, r0.arg2: the school disaster, r0.rel: is a lovable victim of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.635, r0.arg1_exact: Nakata),$x: ($x, were victims of, the disaster))),AnswerState(Nakata))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.034844850236139924)
Who were victims of the disaster?	ASASHIMO	0.02803056613413757	Derivation(Who were victims of the disaster?,ASASHIMO,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be survivor of,false,2716.0,257.0,106.0,0.725232720375061),QueryState($x: ($x, be survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: ASASHIMO, r0.rel_exact: was the sole survivor of, r0.id: reverb-303206890, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: was the sole survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.945, r0.arg1_exact: ASASHIMO),$x: ($x, be survivor of, the disaster))),AnswerState(ASASHIMO))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.725232720375061, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = AAAA -> 1.0),0.02803056613413757)
Who were victims of the disaster?	facilities	-0.010023730371866879	Derivation(Who were victims of the disaster?,facilities,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: facilities, r0.rel_exact: may have been affected by, r0.id: reverb-133726309, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: may have been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.74, r0.arg1_exact: facilities),$x: ($x, have be affect by, the disaster))),AnswerState(facilities))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.010023730371866879)
Who were victims of the disaster?	birds	-0.024973245254316545	Derivation(Who were victims of the disaster?,birds,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 015p6, r0.arg1: birds, r0.rel_exact: were displaced by, r0.id: reverb-287598367, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.623, r0.arg1_exact: birds),$x: ($x, be displace by, the disaster))),AnswerState(birds))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.024973245254316545)
Who were victims of the disaster?	children	-0.024973245254316545	Derivation(Who were victims of the disaster?,children,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be displace by,false,2716.0,223.0,9.0,0.6525980532169342),QueryState($x: ($x, be displace by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be displace by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0ytgt, r0.arg1: children, r0.rel_exact: were displaced by, r0.id: reverb-160060300, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: were displaced by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.839, r0.arg1_exact: children),$x: ($x, be displace by, the disaster))),AnswerState(children))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6525980532169342, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.024973245254316545)
Who were victims of the disaster?	11 SW-A/CR 175	-0.02618564987266314	Derivation(Who were victims of the disaster?,11 SW-A/CR 175,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be scene of,false,2716.0,116.0,4.0,0.6476809084415436),QueryState($x: ($x, be scene of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be scene of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: 11 SW-A/CR 175, r0.rel_exact: was scene of, r0.id: reverb-341353432, r0.namespace: reverb, r0.arg2_exact: the major Landslide Disaster, r0.arg2: the major Landslide Disaster, r0.rel: was scene of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.925, r0.arg1_exact: 11 SW-A/CR 175),$x: ($x, be scene of, the disaster))),AnswerState(11 SW-A/CR 175))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476809084415436, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = 11 AA-A/AA 111 -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.02618564987266314)
Who were victims of the disaster?	employees	-0.04092556491426169	Derivation(Who were victims of the disaster?,employees,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be impact by,false,2716.0,225.0,14.0,0.6661262810230255),QueryState($x: ($x, have be impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01tqrk, r0.arg1: employees, r0.rel_exact: have been impacted by, r0.id: reverb-146393351, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.683, r0.arg1_exact: employees),$x: ($x, have be impact by, the disaster))),AnswerState(employees))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6661262810230255, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.04092556491426169)
Who were victims of the disaster?	poor	-0.050917438720589736	Derivation(Who were victims of the disaster?,poor,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be devastate by,false,2716.0,228.0,9.0,0.6519051194190979),QueryState($x: ($x, have be devastate by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be devastate by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0h948, r0.arg1: poor, r0.rel_exact: have been devastated by, r0.id: reverb-289386378, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: have been devastated by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.683, r0.arg1_exact: poor),$x: ($x, have be devastate by, the disaster))),AnswerState(poor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6519051194190979, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.050917438720589736)
Who were victims of the disaster?	percent	-0.05712078750422256	Derivation(Who were victims of the disaster?,percent,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0h6zk, r0.arg1: percent, r0.rel_exact: has been affected by, r0.id: reverb-243648067, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.844, r0.arg1_exact: percent),$x: ($x, have be affect by, the disaster))),AnswerState(percent))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.05712078750422256)
Who were victims of the disaster?	particular	-0.05712078750422256	Derivation(Who were victims of the disaster?,particular,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,have be affect by,false,2716.0,1613.0,48.0,0.6430760622024536),QueryState($x: ($x, have be affect by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, have be affect by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05s00, r0.arg1: particular, r0.rel_exact: has been affected by, r0.id: reverb-308869750, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: has been affected by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.833, r0.arg1_exact: particular),$x: ($x, have be affect by, the disaster))),AnswerState(particular))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6430760622024536, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.05712078750422256)
Who were victims of the disaster?	a resident	-0.06240581257344946	Derivation(Who were victims of the disaster?,a resident,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,be a survivor of,false,2716.0,103.0,6.0,0.6640661060810089),QueryState($x: ($x, be a survivor of, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, be a survivor of, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: a resident, r0.rel_exact: is a survivor of, r0.id: reverb-136604303, r0.namespace: reverb, r0.arg2_exact: the Bhopal Gas Disaster, r0.arg2: the Bhopal Gas Disaster, r0.rel: is a survivor of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.815, r0.arg1_exact: a resident),$x: ($x, be a survivor of, the disaster))),AnswerState(a resident))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6640661060810089, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.06240581257344946)
Who were victims of the disaster?	local center operations	-0.06441367379515084	Derivation(Who were victims of the disaster?,local center operations,Vector(QaStep(Who were victims of the disaster?,QuestionStateImpl(Who were victims of the disaster?,Sentence(Who were victims of the disaster?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, were victims of, the disaster),false)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, were victims of, the disaster),false),RelSynRule(be victim of,impact by,false,2716.0,977.0,28.0,0.6419000625610352),QueryState($x: ($x, impact by, the disaster),true)), QaStep(Who were victims of the disaster?,QueryState($x: ($x, impact by, the disaster),true),ExecutionAction(ExecTuple((r0.arg1: local center operations, r0.rel_exact: are impacted by, r0.id: reverb-185798543, r0.namespace: reverb, r0.arg2_exact: the disaster, r0.arg2: the disaster, r0.rel: are impacted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.825, r0.arg1_exact: local center operations),$x: ($x, impact by, the disaster))),AnswerState(local center operations))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6419000625610352, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa aaaa aaaa -> 1.0),-0.06441367379515084)
What year was his first book written?	1893	5.412514468776017	Derivation(What year was his first book written?,1893,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1893, r0.rel_exact: is a, r0.id: nell-3158, r1.rel: was written in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.756, r1.arg2: 1893, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: his first book Dodo, r1.rel_exact: was written in, r1.arg2_exact: 1893, r1.num_extrs_i: 11, r1.id: reverb-1058793, r0.arg1_exact: 1893, r1.arg1_exact: his first book Dodo, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (his first book, written, $x))),AnswerState(1893))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.412514468776017)
What year was his first book written?	1939	2.8899956791607986	Derivation(What year was his first book written?,1939,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5ht31, r0.arg1: 1939, r0.rel_exact: Type, r0.id: fb-210229844, r1.rel: was written in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.949, r1.arg2: 1939, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: His first book, r1.rel_exact: was written in, r1.arg2_exact: 1939, r1.num_extrs_i: 2, r1.id: reverb-192362609, r0.arg1_exact: 1939, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (his first book, written, $x))),AnswerState(1939))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.8899956791607986)
What year was his first book written?	c.1893	2.6506160348769017	Derivation(What year was his first book written?,c.1893,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1893, r0.rel_exact: is a, r0.id: nell-272208, r1.rel: was written in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.756, r1.arg2: 1893, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: his first book Dodo, r1.rel_exact: was written in, r1.arg2_exact: 1893, r1.num_extrs_i: 11, r1.id: reverb-1058793, r0.arg1_exact: c.1893, r1.arg1_exact: his first book Dodo, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (his first book, written, $x))),AnswerState(c.1893))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was his first book written?	a series	-0.7568924263462127	Derivation(What year was his first book written?,a series,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is an example of", year) (his first book, written, $x),false),RelSynRule(be an example of,can be summarize as,true,2809.0,142.0,5.0,0.6472820937633514),QueryState($x: (year, can be summarize as, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, can be summarize as, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: the past fourteen years, r0.rel_exact: can be summarized as, r0.id: reverb-102556713, r1.rel: was written as, r0.namespace: reverb, r0.arg2_exact: a series, r1.conf_f: 0.862, r1.arg2: a series, r0.arg2: a series, r0.rel: can be summarized as, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: was written as, r0.num_extrs_i: 2, r1.arg2_exact: a series, r1.num_extrs_i: 4, r0.conf_f: 0.755, r1.id: reverb-286491858, r0.arg1_exact: the past fourteen years, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: (year, can be summarize as, $x) (his first book, written, $x))),AnswerState(a series))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6472820937633514, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5714285714285714, steps -> 0.75, query similarity with question -> 0.45454545454545453, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7568924263462127)
What year was his first book written?	the subject	-1.3220776675966306	Derivation(What year was his first book written?,the subject,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, setting, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: years, r0.rel_exact: was set around, r0.id: reverb-362088441, r1.rel: was written on, r0.namespace: reverb, r0.arg2_exact: the subject, r1.conf_f: 0.933, r1.arg2: the subject, r0.arg2: the subject, r0.rel: was set around, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: was written on, r0.num_extrs_i: 2, r1.arg2_exact: the subject, r1.num_extrs_i: 2, r0.conf_f: 0.519, r1.id: reverb-55739715, r0.arg1_exact: years, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (his first book, written, $x))),AnswerState(the subject))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.3220776675966306)
What year was his first book written?	an adult	-1.435741362877161	Derivation(What year was his first book written?,an adult,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is an example of", year) (his first book, written, $x),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (year, would be as, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, would be as, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: two years, r0.rel_exact: would likely be charged as, r0.id: reverb-119756070, r1.rel: 's been written for, r0.namespace: reverb, r0.arg2_exact: an adult, r1.conf_f: 0.501, r1.arg2: adults, r1.arg2_fbid_s: 016c68, r0.arg2: an adult, r0.rel: would likely be charged as, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: 's been written for, r0.num_extrs_i: 4, r1.arg2_exact: adults, r1.num_extrs_i: 2, r0.conf_f: 0.769, r1.id: reverb-108994506, r0.arg1_exact: two years, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: (year, would be as, $x) (his first book, written, $x))),AnswerState(an adult))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 0.7142857142857143, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.435741362877161)
What year was his first book written?	the subjects	-1.495667896598114	Derivation(What year was his first book written?,the subjects,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be an, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: the subjects, r0.rel_exact: were an average of, r0.id: reverb-377146302, r1.rel: was written on, r0.namespace: reverb, r0.arg2_exact: 25 years, r1.conf_f: 0.933, r1.arg2: the subject, r0.arg2: 25 years, r0.rel: were an average of, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: was written on, r0.num_extrs_i: 7, r1.arg2_exact: the subject, r1.num_extrs_i: 2, r0.conf_f: 0.817, r1.id: reverb-55739715, r0.arg1_exact: the subjects, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (his first book, written, $x))),AnswerState(the subjects))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.9565217391304348, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.495667896598114)
What year was his first book written?	The subjects	-1.5209580017885393	Derivation(What year was his first book written?,The subjects,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be an, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The subjects, r0.rel_exact: were an average of, r0.id: reverb-230180689, r1.rel: was written on, r0.namespace: reverb, r0.arg2_exact: 38 years, r1.conf_f: 0.933, r1.arg2: the subject, r0.arg2: 38 years, r0.rel: were an average of, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: was written on, r0.num_extrs_i: 2, r1.arg2_exact: the subject, r1.num_extrs_i: 2, r0.conf_f: 0.777, r1.id: reverb-55739715, r0.arg1_exact: The subjects, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (his first book, written, $x))),AnswerState(The subjects))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.8695652173913043, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.5209580017885393)
What year was his first book written?	the bar	-1.6983426799835146	Derivation(What year was his first book written?,the bar,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, setting, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: Last year, r0.rel_exact: set, r0.id: reverb-72925923, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: the bar, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: the bar, r0.rel: set, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 5, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.846, r1.id: reverb-295846495, r0.arg1_exact: Last year, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (his first book, written, $x))),AnswerState(the bar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = aaa aaa -> 1.0, action type = ExecutionAction -> 1.0),-1.6983426799835146)
What year was his first book written?	the style	-1.8033245771391568	Derivation(What year was his first book written?,the style,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, building, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: 13 years, r0.rel_exact: build on, r0.id: reverb-336681766, r1.rel: is written in, r0.namespace: reverb, r0.arg2_exact: the style, r1.conf_f: 0.792, r1.arg2: the style, r0.arg2: the style, r0.rel: build on, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: is written in, r0.num_extrs_i: 2, r1.arg2_exact: the style, r1.num_extrs_i: 2, r0.conf_f: 0.879, r1.id: reverb-305428096, r0.arg1_exact: 13 years, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: (year, building, $x) (his first book, written, $x))),AnswerState(the style))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8033245771391568)
What year was his first book written?	The subject	-1.8112573442251394	Derivation(What year was his first book written?,The subject,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be an, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The subject, r0.rel_exact: had already been an affair of, r0.id: reverb-212120944, r1.rel: was written on, r0.namespace: reverb, r0.arg2_exact: 20 years, r1.conf_f: 0.933, r1.arg2: the subject, r0.arg2: 20 years, r0.rel: had already been an affair of, r1.namespace: reverb, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: was written on, r0.num_extrs_i: 11, r1.arg2_exact: the subject, r1.num_extrs_i: 2, r0.conf_f: 0.9, r1.id: reverb-55739715, r0.arg1_exact: The subject, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (his first book, written, $x))),AnswerState(The subject))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.8, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8112573442251394)
What year was his first book written?	The bar	-1.942538828204536	Derivation(What year was his first book written?,The bar,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The bar, r0.rel_exact: was a favorite of, r0.id: reverb-178059416, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: theirs year round, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: theirs year round, r0.rel: was a favorite of, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 3, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.955, r1.id: reverb-295846495, r0.arg1_exact: The bar, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(The bar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = Aaa aaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.942538828204536)
What year was his first book written?	The Bar	-1.9735445764585777	Derivation(What year was his first book written?,The Bar,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The Bar, r0.rel_exact: has been a referral profession for, r0.id: reverb-291242913, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: many years, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: many years, r0.rel: has been a referral profession for, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 8, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.935, r1.id: reverb-295846495, r0.arg1_exact: The Bar, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(The Bar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.36363636363636365, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = Aaa Aaa -> 1.0, action type = ExecutionAction -> 1.0),-1.9735445764585777)
What year was his first book written?	Chris	-2.2127336774672806	Derivation(What year was his first book written?,Chris,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: Chris, r0.rel_exact: is a REALTOR with, r0.id: reverb-141139577, r1.rel: were co-written with, r0.namespace: reverb, r0.arg2_exact: 14+ years, r1.conf_f: 0.957, r1.arg2: Chris, r0.arg2: 14+ years, r0.rel: is a REALTOR with, r1.namespace: reverb, r1.arg1: His first four books, r0.corpora_ss: List(cw), r1.rel_exact: were co-written with, r0.num_extrs_i: 2, r1.arg2_exact: Chris, r1.num_extrs_i: 2, r0.conf_f: 0.773, r1.id: reverb-277408014, r0.arg1_exact: Chris, r1.arg1_exact: His first four books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(Chris))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.2127336774672806)
What year was his first book written?	Bar	-2.2367794857357475	Derivation(What year was his first book written?,Bar,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: Bar, r0.rel_exact: is a family run business now in, r0.id: reverb-201389223, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: its 23rd year, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: its 23rd year, r0.rel: is a family run business now in, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 2, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.823, r1.id: reverb-295846495, r0.arg1_exact: Bar, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(Bar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5714285714285714, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = Aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.2367794857357475)
What year was his first book written?	An adult	-2.2432482489315477	Derivation(What year was his first book written?,An adult,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,children,false,1172321.0,165.0,5.0,0.4540311098098755),QueryState($x: ($x, children, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, children, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: An adult, r0.rel_exact: must accompany children under, r0.id: reverb-269891390, r1.rel: 's been written for, r0.namespace: reverb, r0.arg2_exact: 8 years, r1.conf_f: 0.501, r1.arg2: adults, r1.arg2_fbid_s: 016c68, r0.arg2: 8 years, r0.rel: must accompany children under, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: 's been written for, r0.num_extrs_i: 9, r1.arg2_exact: adults, r1.num_extrs_i: 2, r0.conf_f: 0.819, r1.id: reverb-108994506, r0.arg1_exact: An adult, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, children, year) (his first book, written, $x))),AnswerState(An adult))),SparseVector(question prefix = 'what year' and answer shape = Aa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4540311098098755, minimum join key similarity -> 0.7142857142857143, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.2432482489315477)
What year was his first book written?	Not bar	-2.24433367300042	Derivation(What year was his first book written?,Not bar,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: Not bar, r0.rel_exact: will be having a party for, r0.id: reverb-354466690, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: New Years Eve, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: New Years Eve, r0.rel: will be having a party for, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 3, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.865, r1.id: reverb-295846495, r0.arg1_exact: Not bar, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(Not bar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = Aaa aaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.24433367300042)
What year was his first book written?	bars	-2.438820183133669	Derivation(What year was his first book written?,bars,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: bars, r0.rel_exact: was a favorite during, r0.id: reverb-228830213, r1.rel: were written in, r0.namespace: reverb, r0.arg2_exact: last year, r1.conf_f: 0.983, r1.arg2: bars, r0.arg2: last year, r0.rel: was a favorite during, r1.namespace: reverb, r1.arg1: His first books, r0.corpora_ss: List(cw), r1.rel_exact: were written in, r0.num_extrs_i: 2, r1.arg2_exact: bars, r1.num_extrs_i: 2, r0.conf_f: 0.656, r1.id: reverb-295846495, r0.arg1_exact: bars, r1.arg1_exact: His first books, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(bars))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.438820183133669)
What year was his first book written?	Stone	-2.513815086343605	Derivation(What year was his first book written?,Stone,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: Stone, r0.rel_exact: is a product of, r0.id: reverb-170278370, r1.rel: Written in, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.66391516, r1.arg2: Stone, r0.arg2: years, r0.rel: is a product of, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: Written in, r0.num_extrs_i: 3, r1.arg2_exact: Stone, r1.num_extrs_i: 3, r0.conf_f: 0.52, r1.id: openie4-55399288, r0.arg1_exact: Stone, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(Stone))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.513815086343605)
What year was his first book written?	the general public	-2.513815086343605	Derivation(What year was his first book written?,the general public,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: the general public, r0.rel_exact: have been a draw for, r0.id: reverb-139875490, r1.rel: written for, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.66010565, r1.arg2: the general public, r1.arg2_fbid_s: 01ss7q, r0.arg2: years, r0.rel: have been a draw for, r1.namespace: openie4, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: written for, r0.num_extrs_i: 2, r1.arg2_exact: the general public, r1.num_extrs_i: 2, r0.conf_f: 0.785, r1.id: openie4-55400664, r0.arg1_exact: the general public, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(the general public))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = aaa aaaa aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.513815086343605)
What year was his first book written?	Adults	-2.7385936994409024	Derivation(What year was his first book written?,Adults,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,children,false,1172321.0,165.0,5.0,0.4540311098098755),QueryState($x: ($x, children, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, children, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 016c68, r0.arg1: Adults, r0.rel_exact: should accompany children under, r0.id: reverb-301631448, r1.rel: 's been written for, r0.namespace: reverb, r0.arg2_exact: 12 years, r1.conf_f: 0.501, r1.arg2: adults, r1.arg2_fbid_s: 016c68, r0.arg2: 12 years, r0.rel: should accompany children under, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: 's been written for, r0.num_extrs_i: 6, r1.arg2_exact: adults, r1.num_extrs_i: 2, r0.conf_f: 0.913, r1.id: reverb-108994506, r0.arg1_exact: Adults, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, children, year) (his first book, written, $x))),AnswerState(Adults))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4540311098098755, minimum join key similarity -> 0.8333333333333334, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7385936994409024)
What year was his first book written?	The stone	-2.7656336896312013	Derivation(What year was his first book written?,The stone,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The stone, r0.rel_exact: has been a mystery for, r0.id: openie4-15899970, r1.rel: Written in, r0.namespace: openie4, r0.arg2_exact: years, r1.conf_f: 0.66391516, r1.arg2: Stone, r0.arg2: years, r0.rel: has been a mystery for, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: Written in, r0.num_extrs_i: 2, r1.arg2_exact: Stone, r1.num_extrs_i: 3, r0.conf_f: 0.9030402, r1.id: openie4-55399288, r0.arg1_exact: The stone, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(The stone))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5714285714285714, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7656336896312013)
What year was his first book written?	adults	-2.920064276019981	Derivation(What year was his first book written?,adults,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,so be sure to,false,4.087548E7,104.0,32.0,0.4154782295227051),QueryState($x: ($x, so be sure to, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, so be sure to, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 016c68, r0.arg1: adults, r0.rel_exact: so be sure to check out, r0.id: reverb-284257718, r1.rel: 's been written for, r0.namespace: reverb, r0.arg2_exact: this year, r1.conf_f: 0.501, r1.arg2: adults, r1.arg2_fbid_s: 016c68, r0.arg2: this year, r0.rel: so be sure to check out, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: 's been written for, r0.num_extrs_i: 3, r1.arg2_exact: adults, r1.num_extrs_i: 2, r0.conf_f: 0.537, r1.id: reverb-108994506, r0.arg1_exact: adults, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, so be sure to, year) (his first book, written, $x))),AnswerState(adults))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4154782295227051, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5555555555555556, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.45454545454545453, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.920064276019981)
What year was his first book written?	English	-2.9993176974354285	Derivation(What year was his first book written?,English,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: English, r0.rel_exact: was a challenge during, r0.id: reverb-376499347, r1.rel: written in, r0.namespace: reverb, r0.arg2_exact: my first year, r1.conf_f: 0.70032406, r1.arg2: English, r0.arg2: my first year, r0.rel: was a challenge during, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: written in, r0.num_extrs_i: 2, r1.arg2_exact: English, r1.num_extrs_i: 6, r0.conf_f: 0.745, r1.id: openie4-55399000, r0.arg1_exact: English, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(English))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.9993176974354285)
What year was his first book written?	the English	-3.5600705706761726	Derivation(What year was his first book written?,the English,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: the English, r0.rel_exact: was a major cause of, r0.id: reverb-77463559, r1.rel: written in, r0.namespace: reverb, r0.arg2_exact: the Hundred Years, r1.conf_f: 0.70032406, r1.arg2: English, r0.arg2: the Hundred Years, r0.rel: was a major cause of, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: written in, r0.num_extrs_i: 2, r1.arg2_exact: English, r1.num_extrs_i: 6, r0.conf_f: 0.611, r1.id: openie4-55399000, r0.arg1_exact: the English, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(the English))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7777777777777778, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.5600705706761726)
What year was his first book written?	stone	-3.6036026269105603	Derivation(What year was his first book written?,stone,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, setting, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: years, r0.rel_exact: is set in, r0.id: reverb-138484087, r1.rel: Written in, r0.namespace: reverb, r0.arg2_exact: stone, r1.conf_f: 0.66391516, r1.arg2: Stone, r0.arg2: stone, r0.rel: is set in, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: Written in, r0.num_extrs_i: 3, r1.arg2_exact: Stone, r1.num_extrs_i: 3, r0.conf_f: 0.873, r1.id: openie4-55399288, r0.arg1_exact: years, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (his first book, written, $x))),AnswerState(stone))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.6036026269105603)
What year was his first book written?	Arabic	-3.7017407032674177	Derivation(What year was his first book written?,Arabic,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0jzc, r0.arg1: Arabic, r0.rel_exact: has been a dream for, r0.id: reverb-206010605, r1.rel: written in, r0.namespace: reverb, r0.arg2_exact: 15 years, r1.conf_f: 0.66391516, r1.arg2: Arabic, r1.arg2_fbid_s: 0jzc, r0.arg2: 15 years, r0.rel: has been a dream for, r1.namespace: openie4, r1.arg1: His first book, r0.corpora_ss: List(cw), r1.rel_exact: written in, r0.num_extrs_i: 9, r1.arg2_exact: Arabic, r1.num_extrs_i: 2, r0.conf_f: 0.764, r1.id: openie4-55401048, r0.arg1_exact: Arabic, r1.arg1_exact: His first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(Arabic))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.7017407032674177)
What year was his first book written?	adult	-3.7357742137734755	Derivation(What year was his first book written?,adult,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,children,false,1172321.0,165.0,5.0,0.4540311098098755),QueryState($x: ($x, children, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, children, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 016c68, r0.arg1: adult, r0.rel_exact: should always accompany children under, r0.id: reverb-37153156, r1.rel: 's been written for, r0.namespace: reverb, r0.arg2_exact: 12 years, r1.conf_f: 0.501, r1.arg2: adults, r1.arg2_fbid_s: 016c68, r0.arg2: 12 years, r0.rel: should always accompany children under, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: 's been written for, r0.num_extrs_i: 3, r1.arg2_exact: adults, r1.num_extrs_i: 2, r0.conf_f: 0.705, r1.id: reverb-108994506, r0.arg1_exact: adult, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, children, year) (his first book, written, $x))),AnswerState(adult))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4540311098098755, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2222222222222222, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.7357742137734755)
What year was his first book written?	The French	-3.752808600041244	Derivation(What year was his first book written?,The French,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: The French, r0.rel_exact: were down to a 2-child family over, r0.id: openie4-11292983, r1.rel: written in, r0.namespace: openie4, r0.arg2_exact: 120 years ago, r1.conf_f: 0.70032406, r1.arg2: French, r0.arg2: 120 years ago, r0.rel: were down to a 2-child family over, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: written in, r0.num_extrs_i: 4, r1.arg2_exact: French, r1.num_extrs_i: 3, r0.conf_f: 0.9266232, r1.id: openie4-55400216, r0.arg1_exact: The French, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(The French))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = Aaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.752808600041244)
What year was his first book written?	praise	-3.7743227849020284	Derivation(What year was his first book written?,praise,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "is a", year) (his first book, written, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, setting, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: the fiftieth year, r0.rel_exact: was to be set aside to, r0.id: reverb-353513214, r1.rel: was written in, r0.namespace: reverb, r0.arg2_exact: praise, r0.arg2_fbid_s: 066969, r1.conf_f: 0.778, r1.arg2: praise, r1.arg2_fbid_s: 066969, r0.arg2: praise, r0.rel: was to be set aside to, r1.namespace: reverb, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: was written in, r0.num_extrs_i: 2, r1.arg2_exact: praise, r1.num_extrs_i: 3, r0.conf_f: 0.584, r1.id: reverb-153466943, r0.arg1_exact: the fiftieth year, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (his first book, written, $x))),AnswerState(praise))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.7743227849020284)
What year was his first book written?	English ?	-4.369160117012674	Derivation(What year was his first book written?,English ?,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: ($x, be a, year) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: English ?, r0.rel_exact: will be a hot subject at, r0.id: reverb-205501950, r1.rel: written in, r0.namespace: reverb, r0.arg2_exact: this year?s cigar festival, r1.conf_f: 0.70032406, r1.arg2: English, r0.arg2: this year?s cigar festival, r0.rel: will be a hot subject at, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: written in, r0.num_extrs_i: 2, r1.arg2_exact: English, r1.num_extrs_i: 6, r0.conf_f: 0.668, r1.id: openie4-55399000, r0.arg1_exact: English ?, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (his first book, written, $x))),AnswerState(English ?))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = Aaaaa ? -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.375, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.369160117012674)
What year was his first book written?	stones	-4.709115335324972	Derivation(What year was his first book written?,stones,Vector(QaStep(What year was his first book written?,QuestionStateImpl(What year was his first book written?,Sentence(What year was his first book written?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (his first book, written, $x),false)), QaStep(What year was his first book written?,QueryState($x: ($x, "type", year) (his first book, written, $x),false),RelSynRule(type,kind,true,4.087548E7,3487.0,2954.0,0.44712740182876587),QueryState($x: (year, kind, $x) (his first book, written, $x),true)), QaStep(What year was his first book written?,QueryState($x: (year, kind, $x) (his first book, written, $x),true),ExecutionAction(ExecTuple((r0.arg1: years man, r0.rel_exact: has been using various kinds of, r0.id: reverb-84971381, r1.rel: Written in, r0.namespace: reverb, r0.arg2_exact: stones, r1.conf_f: 0.66391516, r1.arg2: Stone, r0.arg2: stones, r0.rel: has been using various kinds of, r1.namespace: openie4, r1.arg1: his first book, r0.corpora_ss: List(cw), r1.rel_exact: Written in, r0.num_extrs_i: 2, r1.arg2_exact: Stone, r1.num_extrs_i: 3, r0.conf_f: 0.852, r1.id: openie4-55399288, r0.arg1_exact: years man, r1.arg1_exact: his first book, r1.corpora_ss: List(cw)),$x: (year, kind, $x) (his first book, written, $x))),AnswerState(stones))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44712740182876587, minimum join key similarity -> 0.7272727272727273, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.8, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.709115335324972)
What is strep throat?	The most common exception	2.3652864673132648	Derivation(What is strep throat?,The most common exception,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: The most common exception, r0.rel_exact: is, r0.id: reverb-217192545, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.918, r0.arg1_exact: The most common exception),$x: ($x, is, strep throat))),AnswerState(The most common exception))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3652864673132648)
What is strep throat?	Brief Version	1.6545410294951937	Derivation(What is strep throat?,Brief Version,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Brief Version, r0.rel_exact: is, r0.id: reverb-119388267, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.726, r0.arg1_exact: Brief Version),$x: ($x, is, strep throat))),AnswerState(Brief Version))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6545410294951937)
What is strep throat?	Robert W. Benjamin	1.5630761236502433	Derivation(What is strep throat?,Robert W. Benjamin,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Robert W. Benjamin, r0.rel_exact: is, r0.id: reverb-41587097, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.842, r0.arg1_exact: Robert W. Benjamin),$x: ($x, is, strep throat))),AnswerState(Robert W. Benjamin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa A. Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	Only 5 to 10 percent	1.5630761236502433	Derivation(What is strep throat?,Only 5 to 10 percent,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Only 5 to 10 percent, r0.rel_exact: are, r0.id: reverb-380040779, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.907, r0.arg1_exact: Only 5 to 10 percent),$x: ($x, is, strep throat))),AnswerState(Only 5 to 10 percent))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = Aaaa 1 aa 11 aaaa -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	text/html;charset=utf-8	1.5630761236502433	Derivation(What is strep throat?,text/html;charset=utf-8,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: text/html;charset=utf-8, r0.rel_exact: Is, r0.id: reverb-190107810, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.792, r0.arg1_exact: text/html;charset=utf-8),$x: ($x, is, strep throat))),AnswerState(text/html;charset=utf-8))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa/aaaa;aaaa=aaa-1 -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	Craig has--current diagnosis	1.5630761236502433	Derivation(What is strep throat?,Craig has--current diagnosis,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Craig has--current diagnosis, r0.rel_exact: is, r0.id: reverb-355956256, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.579, r0.arg1_exact: Craig has--current diagnosis),$x: ($x, is, strep throat))),AnswerState(Craig has--current diagnosis))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaa--aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	text/html;charset=UTF-8	1.5630761236502433	Derivation(What is strep throat?,text/html;charset=UTF-8,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: text/html;charset=UTF-8, r0.rel_exact: is, r0.id: reverb-290605613, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: text/html;charset=UTF-8),$x: ($x, is, strep throat))),AnswerState(text/html;charset=UTF-8))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = aaaa/aaaa;aaaa=AAA-1 -> 1.0),1.5630761236502433)
What is strep throat?	Sore Throat Not all sore throats	1.5630761236502433	Derivation(What is strep throat?,Sore Throat Not all sore throats,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Sore Throat Not all sore throats, r0.rel_exact: are, r0.id: reverb-287216136, r0.namespace: reverb, r0.arg2_exact: strep throats, r0.arg2: strep throats, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.627, r0.arg1_exact: Sore Throat Not all sore throats),$x: ($x, is, strep throat))),AnswerState(Sore Throat Not all sore throats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa Aaa aaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	The thyroid diagnosis Vocal cord facts	1.5630761236502433	Derivation(What is strep throat?,The thyroid diagnosis Vocal cord facts,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: The thyroid diagnosis Vocal cord facts, r0.rel_exact: is, r0.id: reverb-237984967, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.552, r0.arg1_exact: The thyroid diagnosis Vocal cord facts),$x: ($x, is, strep throat))),AnswerState(The thyroid diagnosis Vocal cord facts))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa Aaaaa aaaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	physician?s offices	1.5630761236502433	Derivation(What is strep throat?,physician?s offices,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: physician?s offices, r0.rel_exact: are, r0.id: reverb-366375112, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.629, r0.arg1_exact: physician?s offices),$x: ($x, is, strep throat))),AnswerState(physician?s offices))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa?a aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	Not all sore throats	1.5630761236502433	Derivation(What is strep throat?,Not all sore throats,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Not all sore throats, r0.rel_exact: are, r0.id: reverb-41871055, r0.namespace: reverb, r0.arg2_exact: strep throats, r0.arg2: strep throats, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.89, r0.arg1_exact: Not all sore throats),$x: ($x, is, strep throat))),AnswerState(Not all sore throats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is strep throat?	little virus	1.3395961716303064	Derivation(What is strep throat?,little virus,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: little virus, r0.rel_exact: was, r0.id: reverb-4320142, r0.namespace: reverb, r0.arg2_exact: STREP THROAT, r0.arg2_fbid_s: 0mztl, r0.arg2: STREP THROAT, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.667, r0.arg1_exact: little virus),$x: ($x, is, strep throat))),AnswerState(little virus))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3395961716303064)
What is strep throat?	private search	1.3395961716303064	Derivation(What is strep throat?,private search,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: private search, r0.rel_exact: is, r0.id: reverb-138643850, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.742, r0.arg1_exact: private search),$x: ($x, is, strep throat))),AnswerState(private search))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3395961716303064)
What is strep throat?	streptococcal infection	1.3395961716303064	Derivation(What is strep throat?,streptococcal infection,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: streptococcal infection, r0.rel_exact: is, r0.id: reverb-62286414, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.765, r0.arg1_exact: streptococcal infection),$x: ($x, is, strep throat))),AnswerState(streptococcal infection))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3395961716303064)
What is strep throat?	Sore Throat	1.2881457063867374	Derivation(What is strep throat?,Sore Throat,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Sore Throat, r0.rel_exact: is, r0.id: reverb-195010580, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.683, r0.arg1_exact: Sore Throat),$x: ($x, is, strep throat))),AnswerState(Sore Throat))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2881457063867374)
What is strep throat?	a peek	1.1540344438822248	Derivation(What is strep throat?,a peek,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: a peek, r0.rel_exact: is, r0.id: reverb-90369375, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.532, r0.arg1_exact: a peek),$x: ($x, is, strep throat))),AnswerState(a peek))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.1540344438822248)
What is strep throat?	contagious	1.0501436334617	Derivation(What is strep throat?,contagious,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: contagious, r0.rel_exact: is, r0.id: reverb-18785751, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.655, r0.arg1_exact: contagious),$x: ($x, is, strep throat))),AnswerState(contagious))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0501436334617)
What is strep throat?	serious	1.0501436334617	Derivation(What is strep throat?,serious,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: serious, r0.rel_exact: is, r0.id: reverb-167751616, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: serious),$x: ($x, is, strep throat))),AnswerState(serious))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0501436334617)
What is strep throat?	Culprit competence	1.0401400233113554	Derivation(What is strep throat?,Culprit competence,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Culprit competence, r0.rel_exact: be, r0.id: reverb-224991439, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: be, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.548, r0.arg1_exact: Culprit competence),$x: ($x, is, strep throat))),AnswerState(Culprit competence))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0401400233113554)
What is strep throat?	the blog	0.9253605336235748	Derivation(What is strep throat?,the blog,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the blog, r0.rel_exact: is, r0.id: reverb-289838582, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.555, r0.arg1_exact: the blog),$x: ($x, is, strep throat))),AnswerState(the blog))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is strep throat?	the topic	0.9253605336235748	Derivation(What is strep throat?,the topic,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the topic, r0.rel_exact: is, r0.id: reverb-80503496, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.644, r0.arg1_exact: the topic),$x: ($x, is, strep throat))),AnswerState(the topic))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is strep throat?	the webpage	0.9253605336235748	Derivation(What is strep throat?,the webpage,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the webpage, r0.rel_exact: is, r0.id: reverb-37306760, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.553, r0.arg1_exact: the webpage),$x: ($x, is, strep throat))),AnswerState(the webpage))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is strep throat?	the diagnosis	0.9253605336235748	Derivation(What is strep throat?,the diagnosis,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the diagnosis, r0.rel_exact: was, r0.id: reverb-25061677, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.742, r0.arg1_exact: the diagnosis),$x: ($x, is, strep throat))),AnswerState(the diagnosis))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is strep throat?	The fear	0.8727222124599423	Derivation(What is strep throat?,The fear,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: The fear, r0.rel_exact: was, r0.id: reverb-102007885, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.96, r0.arg1_exact: The fear),$x: ($x, is, strep throat))),AnswerState(The fear))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8727222124599423)
What is strep throat?	One exception	0.8727222124599423	Derivation(What is strep throat?,One exception,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: One exception, r0.rel_exact: is, r0.id: reverb-339135890, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.918, r0.arg1_exact: One exception),$x: ($x, is, strep throat))),AnswerState(One exception))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8727222124599423)
What is strep throat?	Read	0.7208629850321155	Derivation(What is strep throat?,Read,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Read, r0.rel_exact: is, r0.id: reverb-151068818, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.819, r0.arg1_exact: Read),$x: ($x, is, strep throat))),AnswerState(Read))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7208629850321155)
What is strep throat?	antibiotics	0.5201748246559299	Derivation(What is strep throat?,antibiotics,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0tbr, r0.arg1: antibiotics, r0.rel_exact: is, r0.id: reverb-120002491, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.677, r0.arg1_exact: antibiotics),$x: ($x, is, strep throat))),AnswerState(antibiotics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5201748246559299)
What is strep throat?	Scarlet fever	0.5101712145055852	Derivation(What is strep throat?,Scarlet fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0mzt3, r0.arg1: Scarlet fever, r0.rel_exact: is, r0.id: reverb-343601114, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.661, r0.arg1_exact: Scarlet fever),$x: ($x, is, strep throat))),AnswerState(Scarlet fever))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5101712145055852)
What is strep throat?	2/11/12 Johnson	0.35589674446670716	Derivation(What is strep throat?,2/11/12 Johnson,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: 2/11/12 Johnson, r0.rel_exact: is battling, r0.id: reverb-146528305, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is battling, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.669, r0.arg1_exact: 2/11/12 Johnson),$x: ($x, is, strep throat))),AnswerState(2/11/12 Johnson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = 1/11/11 Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.35589674446670716)
What is strep throat?	Scarlet Fever Scarlet fever	0.35589674446670716	Derivation(What is strep throat?,Scarlet Fever Scarlet fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Scarlet Fever Scarlet fever, r0.rel_exact: is simply, r0.id: reverb-288215804, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is simply, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.781, r0.arg1_exact: Scarlet Fever Scarlet fever),$x: ($x, is, strep throat))),AnswerState(Scarlet Fever Scarlet fever))),SparseVector(question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.35589674446670716)
What is strep throat?	a severe sore throat	0.35589674446670716	Derivation(What is strep throat?,a severe sore throat,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: a severe sore throat, r0.rel_exact: could be, r0.id: reverb-368211929, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: could be, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.619, r0.arg1_exact: a severe sore throat),$x: ($x, is, strep throat))),AnswerState(a severe sore throat))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.35589674446670716)
What is strep throat?	Scarlet AMOXICILLIN	0.35589674446670716	Derivation(What is strep throat?,Scarlet AMOXICILLIN,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Scarlet AMOXICILLIN, r0.rel_exact: is just, r0.id: reverb-18721139, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is just, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.781, r0.arg1_exact: Scarlet AMOXICILLIN),$x: ($x, is, strep throat))),AnswerState(Scarlet AMOXICILLIN))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa AAAA -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.35589674446670716)
What is strep throat?	Bren	0.19089417622634586	Derivation(What is strep throat?,Bren,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0803h4k, r0.arg1: Bren, r0.rel_exact: was, r0.id: reverb-67436511, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.726, r0.arg1_exact: Bren),$x: ($x, is, strep throat))),AnswerState(Bren))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.19089417622634586)
What is strep throat?	Home   Search results for	0.0957102534987524	Derivation(What is strep throat?,Home   Search results for,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Home   Search results for, r0.rel_exact: is, r0.id: openie4-53996783, r0.namespace: openie4, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.933143, r0.arg1_exact: Home   Search results for),$x: ($x, is, strep throat))),AnswerState(Home   Search results for))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, question prefix = 'what' and answer shape = Aaaa   Aaaaa aaaa aaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0957102534987524)
What is strep throat?	Hovering	0.012361824996350856	Derivation(What is strep throat?,Hovering,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Hovering, r0.rel_exact: nearby is, r0.id: reverb-51616421, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: nearby is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.971, r0.arg1_exact: Hovering),$x: ($x, is, strep throat))),AnswerState(Hovering))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.012361824996350856)
What is strep throat?	Examples	0.012361824996350856	Derivation(What is strep throat?,Examples,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Examples, r0.rel_exact: might be, r0.id: reverb-245781984, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: might be, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.96, r0.arg1_exact: Examples),$x: ($x, is, strep throat))),AnswerState(Examples))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.012361824996350856)
What is strep throat?	Culprit	0.012361824996350856	Derivation(What is strep throat?,Culprit,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Culprit, r0.rel_exact: may be, r0.id: reverb-192712878, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: may be, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.957, r0.arg1_exact: Culprit),$x: ($x, is, strep throat))),AnswerState(Culprit))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.012361824996350856)
What is strep throat?	the most common	0.007835000544116566	Derivation(What is strep throat?,the most common,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the most common, r0.rel_exact: is, r0.id: reverb-41076785, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: the most common),$x: ($x, is, strep throat))),AnswerState(the most common))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is strep throat?	the bacterial infections	0.007835000544116566	Derivation(What is strep throat?,the bacterial infections,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the bacterial infections, r0.rel_exact: are, r0.id: reverb-359786780, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.883, r0.arg1_exact: the bacterial infections),$x: ($x, is, strep throat))),AnswerState(the bacterial infections))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is strep throat?	one notable exception	0.007835000544116566	Derivation(What is strep throat?,one notable exception,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: one notable exception, r0.rel_exact: is, r0.id: reverb-335427584, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: one notable exception),$x: ($x, is, strep throat))),AnswerState(one notable exception))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is strep throat?	the preceding infection	0.007835000544116566	Derivation(What is strep throat?,the preceding infection,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the preceding infection, r0.rel_exact: was, r0.id: reverb-315184282, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.816, r0.arg1_exact: the preceding infection),$x: ($x, is, strep throat))),AnswerState(the preceding infection))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is strep throat?	CARISOPRODOL	-0.06737465316622981	Derivation(What is strep throat?,CARISOPRODOL,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0344cr, r0.arg1: CARISOPRODOL, r0.rel_exact: is about, r0.id: reverb-69491404, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is about, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.673, r0.arg1_exact: CARISOPRODOL),$x: ($x, is, strep throat))),AnswerState(CARISOPRODOL))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.06737465316622981)
What is strep throat?	AMOXICILLIN	-0.06737465316622981	Derivation(What is strep throat?,AMOXICILLIN,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 011z0, r0.arg1: AMOXICILLIN, r0.rel_exact: is just, r0.id: reverb-348134268, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is just, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.781, r0.arg1_exact: AMOXICILLIN),$x: ($x, is, strep throat))),AnswerState(AMOXICILLIN))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.06737465316622981)
What is strep throat?	Scarlet Fever	-0.08260715849411326	Derivation(What is strep throat?,Scarlet Fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0mzt3, r0.arg1: Scarlet Fever, r0.rel_exact: is basically, r0.id: reverb-304832885, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is basically, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.781, r0.arg1_exact: Scarlet Fever),$x: ($x, is, strep throat))),AnswerState(Scarlet Fever))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.08260715849411326)
What is strep throat?	a bacterial infection	-0.14182653168650328	Derivation(What is strep throat?,a bacterial infection,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: a bacterial infection, r0.rel_exact: is called, r0.id: reverb-56644181, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is called, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.744, r0.arg1_exact: a bacterial infection),$x: ($x, is, strep throat))),AnswerState(a bacterial infection))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.14182653168650328)
What is strep throat?	Group A streptococcus	-0.24769294512506135	Derivation(What is strep throat?,Group A streptococcus,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Group A streptococcus, r0.rel_exact: is also responsible for, r0.id: reverb-175297380, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is also responsible for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.917, r0.arg1_exact: Group A streptococcus),$x: ($x, is, strep throat))),AnswerState(Group A streptococcus))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa A aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.24769294512506135)
What is strep throat?	800 A.D. Scotty	-0.24769294512506135	Derivation(What is strep throat?,800 A.D. Scotty,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: 800 A.D. Scotty, r0.rel_exact: is coming down with, r0.id: reverb-128025598, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is coming down with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.766, r0.arg1_exact: 800 A.D. Scotty),$x: ($x, is, strep throat))),AnswerState(800 A.D. Scotty))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = 111 A.A. Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.24769294512506135)
What is strep throat?	the illness	-0.2818188455599615	Derivation(What is strep throat?,the illness,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the illness, r0.rel_exact: is called, r0.id: reverb-91383607, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is called, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: the illness),$x: ($x, is, strep throat))),AnswerState(the illness))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2818188455599615)
What is strep throat?	the doctor	-0.2818188455599615	Derivation(What is strep throat?,the doctor,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the doctor, r0.rel_exact: are for, r0.id: reverb-168448505, r0.namespace: reverb, r0.arg2_exact: Strep Throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep Throat, r0.rel: are for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.95, r0.arg1_exact: the doctor),$x: ($x, is, strep throat))),AnswerState(the doctor))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2818188455599615)
What is strep throat?	Poor Melissa	-0.32142679919131134	Derivation(What is strep throat?,Poor Melissa,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Poor Melissa, r0.rel_exact: is sick with, r0.id: reverb-159492367, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is sick with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.866, r0.arg1_exact: Poor Melissa),$x: ($x, is, strep throat))),AnswerState(Poor Melissa))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.32142679919131134)
What is strep throat?	Hillis	-0.39003130139816133	Derivation(What is strep throat?,Hillis,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Hillis, r0.rel_exact: is out with, r0.id: reverb-161396365, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is out with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.821, r0.arg1_exact: Hillis),$x: ($x, is, strep throat))),AnswerState(Hillis))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.39003130139816133)
What is strep throat?	scarlet fever	-0.3975520163590003	Derivation(What is strep throat?,scarlet fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0mzt3, r0.arg1: scarlet fever, r0.rel_exact: was just, r0.id: reverb-110170845, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was just, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.552, r0.arg1_exact: scarlet fever),$x: ($x, is, strep throat))),AnswerState(scarlet fever))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3975520163590003)
What is strep throat?	a sibling	-0.455538061695824	Derivation(What is strep throat?,a sibling,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: a sibling, r0.rel_exact: was being treated for, r0.id: reverb-215753420, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was being treated for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.836, r0.arg1_exact: a sibling),$x: ($x, is, strep throat))),AnswerState(a sibling))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.455538061695824)
What is strep throat?	hubby	-0.5594288721163483	Derivation(What is strep throat?,hubby,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: hubby, r0.rel_exact: is positive of, r0.id: reverb-165308034, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is positive of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.587, r0.arg1_exact: hubby),$x: ($x, is, strep throat))),AnswerState(hubby))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5594288721163483)
What is strep throat?	episodes	-0.5594288721163483	Derivation(What is strep throat?,episodes,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: episodes, r0.rel_exact: were as enjoyable as, r0.id: reverb-314057510, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: were as enjoyable as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.78, r0.arg1_exact: episodes),$x: ($x, is, strep throat))),AnswerState(episodes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5594288721163483)
What is strep throat?	? Headache	-0.5764651907335752	Derivation(What is strep throat?,? Headache,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0j5fv, r0.arg1: ? Headache, r0.rel_exact: is common with, r0.id: reverb-223104386, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is common with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.804, r0.arg1_exact: ? Headache),$x: ($x, is, strep throat))),AnswerState(? Headache))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = ? Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5764651907335752)
What is strep throat?	a child	-0.6567346248930799	Derivation(What is strep throat?,a child,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: a child, r0.rel_exact: has been diagnosed with, r0.id: reverb-362410280, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: has been diagnosed with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.815, r0.arg1_exact: a child),$x: ($x, is, strep throat))),AnswerState(a child))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.6567346248930799)
What is strep throat?	children	-0.687004554527606	Derivation(What is strep throat?,children,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0ytgt, r0.arg1: children, r0.rel_exact: are treating, r0.id: reverb-318321352, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are treating, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.623, r0.arg1_exact: children),$x: ($x, is, strep throat))),AnswerState(children))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.687004554527606)
What is strep throat?	rheumatic fever	-0.7999451427535125	Derivation(What is strep throat?,rheumatic fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0259gp, r0.arg1: rheumatic fever, r0.rel_exact: is to treat, r0.id: reverb-101382885, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is to treat, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.574, r0.arg1_exact: rheumatic fever),$x: ($x, is, strep throat))),AnswerState(rheumatic fever))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7999451427535125)
What is strep throat?	Kit	-0.8584308402305689	Derivation(What is strep throat?,Kit,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Kit, r0.rel_exact: is down with, r0.id: reverb-29696633, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is down with, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.942, r0.arg1_exact: Kit),$x: ($x, is, strep throat))),AnswerState(Kit))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8584308402305689)
What is strep throat?	the pharynx	-0.8854085351517298	Derivation(What is strep throat?,the pharynx,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the pharynx, r0.rel_exact: is mostly affected with, r0.id: reverb-298263210, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is mostly affected with, r0.corpora_ss: List(cw), r0.num_extrs_i: 194, r0.conf_f: 0.75, r0.arg1_exact: the pharynx),$x: ($x, is, strep throat))),AnswerState(the pharynx))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8854085351517298)
What is strep throat?	the throat	-0.8854085351517298	Derivation(What is strep throat?,the throat,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the throat, r0.rel_exact: normally are either from, r0.id: reverb-287935913, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: normally are either from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.766, r0.arg1_exact: the throat),$x: ($x, is, strep throat))),AnswerState(the throat))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8854085351517298)
What is strep throat?	strep throat introduction	-0.9454767786389022	Derivation(What is strep throat?,strep throat introduction,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: strep throat introduction, r0.rel_exact: are the symptoms of, r0.id: reverb-113642062, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are the symptoms of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.75, r0.arg1_exact: strep throat introduction),$x: ($x, is, strep throat))),AnswerState(strep throat introduction))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9454767786389022)
What is strep throat?	amoxicillin	-1.0893976809221182	Derivation(What is strep throat?,amoxicillin,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 011z0, r0.arg1: amoxicillin, r0.rel_exact: is good for, r0.id: reverb-127590809, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is good for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.637, r0.arg1_exact: amoxicillin),$x: ($x, is, strep throat))),AnswerState(amoxicillin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0893976809221182)
What is strep throat?	students	-1.0893976809221182	Derivation(What is strep throat?,students,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 014cnc, r0.arg1: students, r0.rel_exact: are being diagnosed with, r0.id: reverb-226771470, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are being diagnosed with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: students),$x: ($x, is, strep throat))),AnswerState(students))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0893976809221182)
What is strep throat?	antibiotic	-1.0893976809221182	Derivation(What is strep throat?,antibiotic,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0tbr, r0.arg1: antibiotic, r0.rel_exact: is used for, r0.id: reverb-236610433, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is used for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.792, r0.arg1_exact: antibiotic),$x: ($x, is, strep throat))),AnswerState(antibiotic))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0893976809221182)
What is strep throat?	Gabe	-1.0899060837431889	Derivation(What is strep throat?,Gabe,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: Gabe, r0.rel_exact: was just getting over, r0.id: reverb-3457272, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was just getting over, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.9, r0.arg1_exact: Gabe),$x: ($x, is, strep throat))),AnswerState(Gabe))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0899060837431889)
What is strep throat?	Amoxicillin	-1.1211966734011873	Derivation(What is strep throat?,Amoxicillin,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 011z0, r0.arg1: Amoxicillin, r0.rel_exact: is used to treat, r0.id: reverb-3436411, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is used to treat, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.98, r0.arg1_exact: Amoxicillin),$x: ($x, is, strep throat))),AnswerState(Amoxicillin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1211966734011873)
What is strep throat?	Antibiotics	-1.1211966734011873	Derivation(What is strep throat?,Antibiotics,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0tbr, r0.arg1: Antibiotics, r0.rel_exact: are required to combat, r0.id: reverb-162640114, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are required to combat, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.926, r0.arg1_exact: Antibiotics),$x: ($x, is, strep throat))),AnswerState(Antibiotics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1211966734011873)
What is strep throat?	the boy	-1.1723974638083443	Derivation(What is strep throat?,the boy,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the boy, r0.rel_exact: was diagnosed with, r0.id: reverb-217259266, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was diagnosed with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.565, r0.arg1_exact: the boy),$x: ($x, is, strep throat))),AnswerState(the boy))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaa aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1723974638083443)
What is strep throat?	the strep infection	-1.1993443786394196	Derivation(What is strep throat?,the strep infection,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1: the strep infection, r0.rel_exact: is spread, r0.id: reverb-173966651, r0.namespace: reverb, r0.arg2_exact: Strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: Strep throat, r0.rel: is spread, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.788, r0.arg1_exact: the strep infection),$x: ($x, is, strep throat))),AnswerState(the strep infection))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1993443786394196)
What is strep throat?	Rheumatic fever	-1.3005978542697194	Derivation(What is strep throat?,Rheumatic fever,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0259gp, r0.arg1: Rheumatic fever, r0.rel_exact: is a complication of, r0.id: reverb-241027997, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: is a complication of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.848, r0.arg1_exact: Rheumatic fever),$x: ($x, is, strep throat))),AnswerState(Rheumatic fever))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.3005978542697194)
What is strep throat?	GAS	-1.3908516129020547	Derivation(What is strep throat?,GAS,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 037xy, r0.arg1: GAS, r0.rel_exact: are the cause of, r0.id: reverb-236934970, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: are the cause of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.925, r0.arg1_exact: GAS),$x: ($x, is, strep throat))),AnswerState(GAS))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAA -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.3908516129020547)
What is strep throat?	Noah	-1.418678329351703	Derivation(What is strep throat?,Noah,Vector(QaStep(What is strep throat?,QuestionStateImpl(What is strep throat?,Sentence(What is strep throat?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, strep throat),false)), QaStep(What is strep throat?,QueryState($x: ($x, is, strep throat),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fzm, r0.arg1: Noah, r0.rel_exact: was diagnosed with, r0.id: reverb-259839581, r0.namespace: reverb, r0.arg2_exact: strep throat, r0.arg2_fbid_s: 0mztl, r0.arg2: strep throat, r0.rel: was diagnosed with, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.922, r0.arg1_exact: Noah),$x: ($x, is, strep throat))),AnswerState(Noah))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.418678329351703)
What pope followed Pius XII?	the pope	-5.245990869797547	Derivation(What pope followed Pius XII?,the pope,Vector(QaStep(What pope followed Pius XII?,QuestionStateImpl(What pope followed Pius XII?,Sentence(What pope followed Pius XII?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", pope) ($x, followed, Pius XII),false)), QaStep(What pope followed Pius XII?,QueryState($x: ($x, "type", pope) ($x, followed, Pius XII),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, pope) ($x, followed, Pius XII),true)), QaStep(What pope followed Pius XII?,QueryState($x: ($x, be an, pope) ($x, followed, Pius XII),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05rd8, r0.arg1: the pope, r0.rel_exact: is an ancestor of, r0.id: openie4-58862182, r1.rel: followed, r0.namespace: openie4, r0.arg2_exact: the future Pope St . Gregory, r1.conf_f: 0.806, r1.arg2: Pius XII, r1.arg2_fbid_s: 05yhb, r0.arg2: the future Pope St . Gregory, r0.rel: is an ancestor of, r1.namespace: reverb, r1.arg1: The Popes, r0.corpora_ss: List(cw), r1.rel_exact: followed, r0.num_extrs_i: 2, r1.arg2_exact: Pius XII, r1.num_extrs_i: 7, r0.conf_f: 0.8, r1.id: reverb-12756472, r0.arg1_exact: the pope, r1.arg1_exact: The Popes, r1.corpora_ss: List(cw)),$x: ($x, be an, pope) ($x, followed, Pius XII))),AnswerState(the pope))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.7058823529411765, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.375, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.245990869797547)
When was Prince Charles born?	1948	5.23023548674675	Derivation(When was Prince Charles born?,1948,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born in, r0.id: reverb-76113863, r0.namespace: reverb, r0.arg2_exact: 1948, r0.arg2: 1948, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.972, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born in, $x))),AnswerState(1948))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.23023548674675)
When was Prince Charles born?	November 14 , 1948	4.513329502049129	Derivation(When was Prince Charles born?,November 14 , 1948,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born on, r0.id: reverb-13485922, r0.namespace: reverb, r0.arg2_exact: November 14 , 1948, r0.arg2: November 14 , 1948, r0.rel: was born on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.944, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born on, $x))),AnswerState(November 14 , 1948))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = Aaaaa 11 , 1111 -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.513329502049129)
When was Prince Charles born?	1981	4.50384251601824	Derivation(When was Prince Charles born?,1981,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),RelSynRule(be bear in,marry in,false,62700.0,2468.0,208.0,0.5775080621242523),QueryState($x: (Prince Charles, marry in, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, marry in, $x),true),ExecutionAction(ExecTuple((r0.arg1: prince charles, r0.rel_exact: got married in, r0.prob_f: 1.0, r0.id: nell-1392538, r0.namespace: nell, r0.arg2_exact: 1981, r0.arg2: 1981, r0.rel: got married in, r0.arg1_exact: prince charles),$x: (Prince Charles, marry in, $x))),AnswerState(1981))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5775080621242523, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),4.50384251601824)
When was Prince Charles born?	1918	4.421064468260377	Derivation(When was Prince Charles born?,1918,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Charles J. Prince, r0.rel_exact: was born in, r0.id: reverb-371406988, r0.namespace: reverb, r0.arg2_exact: 1918, r0.arg2: 1918, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.969, r0.arg1_exact: Charles J. Prince),$x: (Prince Charles, was born in, $x))),AnswerState(1918))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.421064468260377)
When was Prince Charles born?	2005	3.44110825788366	Derivation(When was Prince Charles born?,2005,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),RelSynRule(be bear in,marry in,false,62700.0,2468.0,208.0,0.5775080621242523),QueryState($x: (Prince Charles, marry in, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, marry in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: married in, r0.id: reverb-363458636, r0.namespace: reverb, r0.arg2_exact: 2005, r0.arg2: 2005, r0.rel: married in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.73, r0.arg1_exact: Prince Charles),$x: (Prince Charles, marry in, $x))),AnswerState(2005))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5775080621242523, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.44110825788366)
When was Prince Charles born?	November	3.266454708545738	Derivation(When was Prince Charles born?,November,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born in, r0.id: reverb-369003129, r0.namespace: reverb, r0.arg2_exact: November, r0.arg2_fbid_s: 05cw8, r0.arg2: November, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.953, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born in, $x))),AnswerState(November))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.266454708545738)
When was Prince Charles born?	a royal setting	2.825110310926477	Derivation(When was Prince Charles born?,a royal setting,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born in, r0.id: reverb-148376848, r0.namespace: reverb, r0.arg2_exact: a royal setting, r0.arg2: a royal setting, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.919, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born in, $x))),AnswerState(a royal setting))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = a aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.825110310926477)
When was Prince Charles born?	July 29 , 1981	1.9229352870738028	Derivation(When was Prince Charles born?,July 29 , 1981,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,marry on,false,11629.0,109.0,2.0,0.5825169384479523),QueryState($x: (Prince Charles, marry on, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, marry on, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: were married on, r0.id: reverb-26619601, r0.namespace: reverb, r0.arg2_exact: July 29 , 1981, r0.arg2: July 29 , 1981, r0.rel: were married on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.985, r0.arg1_exact: Prince Charles),$x: (Prince Charles, marry on, $x))),AnswerState(July 29 , 1981))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5825169384479523, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = Aaaa 11 , 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9229352870738028)
When was Prince Charles born?	London	1.5782355174230867	Derivation(When was Prince Charles born?,London,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born in, r0.id: reverb-251682167, r0.namespace: reverb, r0.arg2_exact: London, r0.arg2_fbid_s: 04jpl, r0.arg2: London, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.953, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born in, $x))),AnswerState(London))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5782355174230867)
When was Prince Charles born?	Perth	1.5782355174230867	Derivation(When was Prince Charles born?,Perth,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born in, r0.id: reverb-345764954, r0.namespace: reverb, r0.arg2_exact: Perth, r0.arg2_fbid_s: 062qg, r0.arg2: Perth, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.924, r0.arg1_exact: Prince Charles),$x: (Prince Charles, was born in, $x))),AnswerState(Perth))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5782355174230867)
When was Prince Charles born?	six days	1.2815728151346852	Derivation(When was Prince Charles born?,six days,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (Prince Charles, be bear, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born, r0.id: reverb-292497813, r0.namespace: reverb, r0.arg2_exact: six days, r0.arg2: six days, r0.rel: was born, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.796, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be bear, $x))),AnswerState(six days))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2815728151346852)
When was Prince Charles born?	a car accident	1.2204019877625836	Derivation(When was Prince Charles born?,a car accident,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Prince Charles, born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (Prince Charles, be be kill in, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was killed in, r0.id: reverb-70707402, r0.namespace: reverb, r0.arg2_exact: a car accident, r0.arg2: a car accident, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.723, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be be kill in, $x))),AnswerState(a car accident))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = a aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2204019877625836)
When was Prince Charles born?	the small island	1.0685286873913133	Derivation(When was Prince Charles born?,the small island,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Prince Charles, born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, born on, $x),false),RelSynRule(bear on,landing on,false,1733.0,195.0,2.0,0.6238293349742889),QueryState($x: (Prince Charles, landing on, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, landing on, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: landed on, r0.id: reverb-374149374, r0.namespace: reverb, r0.arg2_exact: the small island, r0.arg2: the small island, r0.rel: landed on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.944, r0.arg1_exact: Prince Charles),$x: (Prince Charles, landing on, $x))),AnswerState(the small island))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6238293349742889, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),1.0685286873913133)
When was Prince Charles born?	November 14	0.9724573273000758	Derivation(When was Prince Charles born?,November 14,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (Prince Charles, be bear, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: is born, r0.id: openie4-35851669, r0.namespace: openie4, r0.arg2_exact: November 14, r0.arg2_fbid_s: 05cw8, r0.arg2: November 14, r0.rel: is born, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9382554, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be bear, $x))),AnswerState(November 14))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = Aaaaa 11 -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9724573273000758)
When was Prince Charles born?	the European Parliament	0.6082690045316799	Derivation(When was Prince Charles born?,the European Parliament,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be to come to,false,11629.0,110.0,3.0,0.5949023365974426),QueryState($x: (Prince Charles, be to come to, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: be allowed to come to, r0.id: reverb-200397525, r0.namespace: reverb, r0.arg2_exact: the European Parliament, r0.arg2: the European Parliament, r0.rel: be allowed to come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.828, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be to come to, $x))),AnswerState(the European Parliament))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949023365974426, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaa Aaaaa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6082690045316799)
When was Prince Charles born?	the Sun	0.47678656234566086	Derivation(When was Prince Charles born?,the Sun,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (Prince Charles, be bear, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born with, r0.id: reverb-300932432, r0.namespace: reverb, r0.arg2_exact: the Sun, r0.arg2: the Sun, r0.rel: was born with, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.955, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be bear, $x))),AnswerState(the Sun))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa Aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.47678656234566086)
When was Prince Charles born?	the reigning family	0.47678656234566086	Derivation(When was Prince Charles born?,the reigning family,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (Prince Charles, be bear, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born into, r0.id: reverb-287537596, r0.namespace: reverb, r0.arg2_exact: the reigning family, r0.arg2: the reigning family, r0.rel: was born into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.857, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be bear, $x))),AnswerState(the reigning family))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),0.47678656234566086)
When was Prince Charles born?	Forfar	-0.035016099379942656	Derivation(When was Prince Charles born?,Forfar,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be to come to,false,11629.0,110.0,3.0,0.5949023365974426),QueryState($x: (Prince Charles, be to come to, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: is coming to, r0.id: reverb-243812852, r0.namespace: reverb, r0.arg2_exact: Forfar, r0.arg2_fbid_s: 01n0bj, r0.arg2: Forfar, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.88, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be to come to, $x))),AnswerState(Forfar))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949023365974426, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.035016099379942656)
When was Prince Charles born?	the day	-0.1857930550168052	Derivation(When was Prince Charles born?,the day,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (Prince Charles, be bear, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: was born, r0.id: openie4-37899221, r0.namespace: openie4, r0.arg2_exact: the day, r0.arg2: the day, r0.rel: was born, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.94949794, r0.arg1_exact: Prince Charles),$x: (Prince Charles, be bear, $x))),AnswerState(the day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = aaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1857930550168052)
When was Prince Charles born?	Sandringham	-0.4642890561894846	Derivation(When was Prince Charles born?,Sandringham,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Prince Charles, born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, born in, $x),false),RelSynRule(bear in,to travel to,false,16053.0,1188.0,68.0,0.6079947054386139),QueryState($x: (Prince Charles, to travel to, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, to travel to, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: is travelling to, r0.id: reverb-36885821, r0.namespace: reverb, r0.arg2_exact: Sandringham, r0.arg2: Sandringham, r0.rel: is travelling to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.68, r0.arg1_exact: Prince Charles),$x: (Prince Charles, to travel to, $x))),AnswerState(Sandringham))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6079947054386139, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4642890561894846)
When was Prince Charles born?	Great Britain	-0.9426616219500237	Derivation(When was Prince Charles born?,Great Britain,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),RelSynRule(be bear in,raise in,false,62700.0,9233.0,776.0,0.5774217545986176),QueryState($x: (Prince Charles, raise in, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, raise in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0xnc3, r0.arg1: Prince Charles, r0.rel_exact: has raised a ruckus in, r0.id: reverb-371351188, r0.namespace: reverb, r0.arg2_exact: Great Britain, r0.arg2_fbid_s: 034cm, r0.arg2: Great Britain, r0.rel: has raised a ruckus in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.874, r0.arg1_exact: Prince Charles),$x: (Prince Charles, raise in, $x))),AnswerState(Great Britain))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5774217545986176, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = Aaaaa Aaaaa -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9426616219500237)
When was Prince Charles born?	Barra	-0.9875171245984498	Derivation(When was Prince Charles born?,Barra,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Prince Charles, born on, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, born on, $x),false),RelSynRule(bear on,landing on,false,1733.0,195.0,2.0,0.6238293349742889),QueryState($x: (Prince Charles, landing on, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, landing on, $x),true),ExecutionAction(ExecTuple((r0.arg1: Prince Charles Edward, r0.rel_exact: landed on, r0.id: reverb-31993908, r0.namespace: reverb, r0.arg2_exact: Barra, r0.arg2_fbid_s: 0124pm, r0.arg2: Barra, r0.rel: landed on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.947, r0.arg1_exact: Prince Charles Edward),$x: (Prince Charles, landing on, $x))),AnswerState(Barra))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6238293349742889, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9875171245984498)
When was Prince Charles born?	Ghana	-1.2520165211673426	Derivation(When was Prince Charles born?,Ghana,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),RelSynRule(be bear in,be originally from,false,62700.0,946.0,120.0,0.5902853906154633),QueryState($x: (Prince Charles, be originally from, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, be originally from, $x),true),ExecutionAction(ExecTuple((r0.arg1: Rev. Prince Charles Oteng-Boateng, r0.rel_exact: is originally from, r0.id: reverb-59163459, r0.namespace: reverb, r0.arg2_exact: Ghana, r0.arg2_fbid_s: 035dk, r0.arg2: Ghana, r0.rel: is originally from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.527, r0.arg1_exact: Rev. Prince Charles Oteng-Boateng),$x: (Prince Charles, be originally from, $x))),AnswerState(Ghana))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5902853906154633, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.2520165211673426)
When was Prince Charles born?	England	-1.6666674383560642	Derivation(When was Prince Charles born?,England,Vector(QaStep(When was Prince Charles born?,QuestionStateImpl(When was Prince Charles born?,Sentence(When was Prince Charles born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (Prince Charles, was born in, $x),false)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, was born in, $x),false),RelSynRule(be bear in,become king of,false,62700.0,457.0,35.0,0.5745171308517456),QueryState($x: (Prince Charles, become king of, $x),true)), QaStep(When was Prince Charles born?,QueryState($x: (Prince Charles, become king of, $x),true),ExecutionAction(ExecTuple((r0.arg1: Will Prince Charles, r0.rel_exact: Ever Become King Of, r0.id: reverb-151075166, r0.namespace: reverb, r0.arg2_exact: England, r0.arg2_fbid_s: 02jx1, r0.arg2: England, r0.rel: Ever Become King Of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: Will Prince Charles),$x: (Prince Charles, become king of, $x))),AnswerState(England))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5745171308517456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.6666674383560642)
What is the most expensive car in the world?	Kansas City Star	3.0770463073332337	Derivation(What is the most expensive car in the world?,Kansas City Star,Vector(QaStep(What is the most expensive car in the world?,QuestionStateImpl(What is the most expensive car in the world?,Sentence(What is the most expensive car in the world?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the most expensive car in, the world),false)), QaStep(What is the most expensive car in the world?,QueryState($x: ($x, is the most expensive car in, the world),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01c9qf, r0.arg1: Kansas City Star, r0.rel_exact: is the most expensive car in, r0.id: reverb-19222901, r0.namespace: reverb, r0.arg2_exact: the world, r0.arg2: the world, r0.rel: is the most expensive car in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.816, r0.arg1_exact: Kansas City Star),$x: ($x, is the most expensive car in, the world))),AnswerState(Kansas City Star))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaa Aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.6666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0770463073332337)
What are xerophytes?	the common wild plants	1.102427091486826	Derivation(What are xerophytes?,the common wild plants,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: the common wild plants, r0.rel_exact: are, r0.id: reverb-23239673, r0.namespace: reverb, r0.arg2_exact: xerophytes, r0.arg2: xerophytes, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.565, r0.arg1_exact: the common wild plants),$x: ($x, are, xerophytes))),AnswerState(the common wild plants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.102427091486826)
What are xerophytes?	The predominating vegetation	0.2690762896840797	Derivation(What are xerophytes?,The predominating vegetation,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: The predominating vegetation, r0.rel_exact: is, r0.id: reverb-234154531, r0.namespace: reverb, r0.arg2_exact: xerophytes, r0.arg2: xerophytes, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.7, r0.arg1_exact: The predominating vegetation),$x: ($x, are, xerophytes))),AnswerState(The predominating vegetation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What are xerophytes?	Martini & Granadine	0.17748259138073919	Derivation(What are xerophytes?,Martini & Granadine,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: Martini & Granadine, r0.rel_exact: is, r0.id: reverb-168155500, r0.namespace: reverb, r0.arg2_exact: ideal Xerophytes, r0.arg2: ideal Xerophytes, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.661, r0.arg1_exact: Martini & Granadine),$x: ($x, are, xerophytes))),AnswerState(Martini & Granadine))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = Aaaaa & Aaaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.17748259138073919)
What are xerophytes?	Botany Pakpak-lawin	-0.22710291786244707	Derivation(What are xerophytes?,Botany Pakpak-lawin,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: Botany Pakpak-lawin, r0.rel_exact: is, r0.id: reverb-163367995, r0.namespace: reverb, r0.arg2_exact: a large xerophyte, r0.arg2: a large xerophyte, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.911, r0.arg1_exact: Botany Pakpak-lawin),$x: ($x, are, xerophytes))),AnswerState(Botany Pakpak-lawin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa-aaaa -> 1.0),-0.22710291786244707)
What are xerophytes?	onmogelijk	-0.7400354080509901	Derivation(What are xerophytes?,onmogelijk,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: onmogelijk, r0.rel_exact: is, r0.id: reverb-21963490, r0.namespace: reverb, r0.arg2_exact: voor mij Xerophytes, r0.arg2: voor mij Xerophytes, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.661, r0.arg1_exact: onmogelijk),$x: ($x, are, xerophytes))),AnswerState(onmogelijk))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7400354080509901)
What are xerophytes?	The ancestral cacti	-0.94468023804548	Derivation(What are xerophytes?,The ancestral cacti,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: The ancestral cacti, r0.rel_exact: were, r0.id: reverb-247487076, r0.namespace: reverb, r0.arg2_exact: terrestrial xerophytes, r0.arg2: terrestrial xerophytes, r0.rel: were, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.939, r0.arg1_exact: The ancestral cacti),$x: ($x, are, xerophytes))),AnswerState(The ancestral cacti))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),-0.94468023804548)
What are xerophytes?	the vegetation	-1.0572455396916742	Derivation(What are xerophytes?,the vegetation,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: the vegetation, r0.rel_exact: is predominately composed of, r0.id: reverb-79411281, r0.namespace: reverb, r0.arg2_exact: xerophytes, r0.arg2: xerophytes, r0.rel: is predominately composed of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.76, r0.arg1_exact: the vegetation),$x: ($x, are, xerophytes))),AnswerState(the vegetation))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0572455396916742)
What are xerophytes?	metabolism	-1.2612346854620626	Derivation(What are xerophytes?,metabolism,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 053p5, r0.arg1: metabolism, r0.rel_exact: is common in, r0.id: reverb-311078721, r0.namespace: reverb, r0.arg2_exact: xerophytes, r0.arg2: xerophytes, r0.rel: is common in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.752, r0.arg1_exact: metabolism),$x: ($x, are, xerophytes))),AnswerState(metabolism))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2612346854620626)
What are xerophytes?	Tom	-1.352182345886123	Derivation(What are xerophytes?,Tom,Vector(QaStep(What are xerophytes?,QuestionStateImpl(What are xerophytes?,Sentence(What are xerophytes?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, xerophytes),false)), QaStep(What are xerophytes?,QueryState($x: ($x, are, xerophytes),false),ExecutionAction(ExecTuple((r0.arg1: Tom, r0.rel_exact: was keen to search for, r0.id: reverb-33810077, r0.namespace: reverb, r0.arg2_exact: xerophytes, r0.arg2: xerophytes, r0.rel: was keen to search for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.792, r0.arg1_exact: Tom),$x: ($x, are, xerophytes))),AnswerState(Tom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.352182345886123)
What year was the Fulbright Program established?	c.1946	3.1361186459687254	Derivation(What year was the Fulbright Program established?,c.1946,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1946, r0.rel_exact: is a, r0.id: nell-272244, r1.rel: Was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.757, r1.arg2: 1946, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: THE FULBRIGHT PROGRAM, r1.rel_exact: Was established in, r1.arg2_exact: 1946, r1.num_extrs_i: 6, r1.id: reverb-369883124, r0.arg1_exact: c.1946, r1.arg1_exact: THE FULBRIGHT PROGRAM, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(c.1946))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.1361186459687254)
What year was the Fulbright Program established?	1990?s	2.6506160348769017	Derivation(What year was the Fulbright Program established?,1990?s,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1990?s, r0.rel_exact: is a, r0.id: nell-9104, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.51, r1.arg2: 1990, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Canada-U.S. Fulbright Program, r1.rel_exact: was established in, r1.arg2_exact: 1990, r1.num_extrs_i: 3, r1.id: reverb-380371377, r0.arg1_exact: 1990?s, r1.arg1_exact: the Canada-U.S. Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(1990?s))),SparseVector(question prefix = 'what year' and answer shape = 1111?a -> 1.0, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was the Fulbright Program established?	c.1949	2.6506160348769017	Derivation(What year was the Fulbright Program established?,c.1949,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1949, r0.rel_exact: is a, r0.id: nell-272246, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.92, r1.arg2: 1949, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Australian Fulbright Program, r1.rel_exact: was established in, r1.arg2_exact: 1949, r1.num_extrs_i: 8, r1.id: reverb-178180995, r0.arg1_exact: c.1949, r1.arg1_exact: The Australian Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(c.1949))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was the Fulbright Program established?	c.1990	2.6506160348769017	Derivation(What year was the Fulbright Program established?,c.1990,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1990, r0.rel_exact: is a, r0.id: nell-272267, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.51, r1.arg2: 1990, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Canada-U.S. Fulbright Program, r1.rel_exact: was established in, r1.arg2_exact: 1990, r1.num_extrs_i: 3, r1.id: reverb-380371377, r0.arg1_exact: c.1990, r1.arg1_exact: the Canada-U.S. Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(c.1990))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was the Fulbright Program established?	1950's	2.6506160348769017	Derivation(What year was the Fulbright Program established?,1950's,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1950's, r0.rel_exact: is a, r0.id: nell-5404, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.92, r1.arg2: 1950, r1.arg2_fbid_s: 04lhnjz, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The India Fulbright program, r1.rel_exact: was established in, r1.arg2_exact: 1950, r1.num_extrs_i: 3, r1.id: reverb-9448494, r0.arg1_exact: 1950's, r1.arg1_exact: The India Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(1950's))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = 1111'a -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was the Fulbright Program established?	c.1950	2.6506160348769017	Derivation(What year was the Fulbright Program established?,c.1950,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1950, r0.rel_exact: is a, r0.id: nell-272249, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.92, r1.arg2: 1950, r1.arg2_fbid_s: 04lhnjz, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The India Fulbright program, r1.rel_exact: was established in, r1.arg2_exact: 1950, r1.num_extrs_i: 3, r1.id: reverb-9448494, r0.arg1_exact: c.1950, r1.arg1_exact: The India Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(c.1950))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.8, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6506160348769017)
What year was the Fulbright Program established?	1949	2.404493068068975	Derivation(What year was the Fulbright Program established?,1949,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09gqsm8, r0.arg1: 1949, r0.rel_exact: Type, r0.id: fb-30591086, r1.rel: was established in, r0.namespace: freebase, r0.arg2_exact: Year, r0.arg2_fbid_s: 0fpy7_9, r1.conf_f: 0.92, r1.arg2: 1949, r0.arg2: Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Australian Fulbright Program, r1.rel_exact: was established in, r1.arg2_exact: 1949, r1.num_extrs_i: 8, r1.id: reverb-178180995, r0.arg1_exact: 1949, r1.arg1_exact: The Australian Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (the Fulbright Program, established, $x))),AnswerState(1949))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.404493068068975)
What year was the Fulbright Program established?	1990	2.404493068068975	Derivation(What year was the Fulbright Program established?,1990,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5mgfh, r0.arg1: 1990, r0.rel_exact: Type, r0.id: fb-284851950, r1.rel: was established in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.51, r1.arg2: 1990, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Canada-U.S. Fulbright Program, r1.rel_exact: was established in, r1.arg2_exact: 1990, r1.num_extrs_i: 3, r1.id: reverb-380371377, r0.arg1_exact: 1990, r1.arg1_exact: the Canada-U.S. Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (the Fulbright Program, established, $x))),AnswerState(1990))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.404493068068975)
What year was the Fulbright Program established?	1950	2.404493068068975	Derivation(What year was the Fulbright Program established?,1950,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04lhnjz, r0.arg1: 1950, r0.rel_exact: Type, r0.id: fb-224976073, r1.rel: was established in, r0.namespace: freebase, r0.arg2_exact: years, r0.arg2_fbid_s: 0g5h44z, r1.conf_f: 0.92, r1.arg2: 1950, r1.arg2_fbid_s: 04lhnjz, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: The India Fulbright program, r1.rel_exact: was established in, r1.arg2_exact: 1950, r1.num_extrs_i: 3, r1.id: reverb-9448494, r0.arg1_exact: 1950, r1.arg1_exact: The India Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (the Fulbright Program, established, $x))),AnswerState(1950))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.404493068068975)
What year was the Fulbright Program established?	congress	2.205783322240017	Derivation(What year was the Fulbright Program established?,congress,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: congress, r0.rel_exact: is a, r0.id: nell-385668, r1.rel: was established by, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.96, r1.arg2: Congress, r1.arg2_fbid_s: 07t31, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Fulbright program, r1.rel_exact: was established by, r1.arg2_exact: Congress, r1.num_extrs_i: 10, r1.id: reverb-223778224, r0.arg1_exact: congress, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the Fulbright Program, established, $x))),AnswerState(congress))),SparseVector(minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.205783322240017)
What year was the Fulbright Program established?	1987	2.080824660674425	Derivation(What year was the Fulbright Program established?,1987,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5ht3p, r0.arg1: 1987, r0.rel_exact: Type, r0.id: fb-45341402, r1.rel: was established in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.969, r1.arg2: 1987, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Fulbright Roving Scholars Program, r1.rel_exact: was established in, r1.arg2_exact: 1987, r1.num_extrs_i: 5, r1.id: reverb-166148437, r0.arg1_exact: 1987, r1.arg1_exact: The Fulbright Roving Scholars Program, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (the Fulbright Program, established, $x))),AnswerState(1987))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.080824660674425)
What year was the Fulbright Program established?	1946	1.627345101750512	Derivation(What year was the Fulbright Program established?,1946,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: Year, r0.rel_exact: built, r0.id: reverb-111452027, r1.rel: Was established in, r0.namespace: reverb, r0.arg2_exact: 1946, r1.conf_f: 0.757, r1.arg2: 1946, r0.arg2: 1946, r0.rel: built, r1.namespace: reverb, r1.arg1: THE FULBRIGHT PROGRAM, r0.corpora_ss: List(cw), r1.rel_exact: Was established in, r0.num_extrs_i: 5, r1.arg2_exact: 1946, r1.num_extrs_i: 6, r0.conf_f: 0.939, r1.id: reverb-369883124, r0.arg1_exact: Year, r1.arg1_exact: THE FULBRIGHT PROGRAM, r1.corpora_ss: List(cw)),$x: (year, building, $x) (the Fulbright Program, established, $x))),AnswerState(1946))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.627345101750512)
What year was the Fulbright Program established?	the 1950 's	-0.0745914036784332	Derivation(What year was the Fulbright Program established?,the 1950 's,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, setting, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: 25 years, r0.rel_exact: were set in, r0.id: reverb-293228946, r1.rel: was established in, r0.namespace: reverb, r0.arg2_exact: the 1950 's, r1.conf_f: 0.92, r1.arg2: 1950, r1.arg2_fbid_s: 04lhnjz, r0.arg2: the 1950 's, r0.rel: were set in, r1.namespace: reverb, r1.arg1: The India Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established in, r0.num_extrs_i: 4, r1.arg2_exact: 1950, r1.num_extrs_i: 3, r0.conf_f: 0.759, r1.id: reverb-9448494, r0.arg1_exact: 25 years, r1.arg1_exact: The India Fulbright program, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (the Fulbright Program, established, $x))),AnswerState(the 1950 's))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.5333333333333333, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, question prefix = 'what year' and answer shape = aaa 1111 'a -> 1.0, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.0745914036784332)
What year was the Fulbright Program established?	the 1950	-0.5084408377906904	Derivation(What year was the Fulbright Program established?,the 1950,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, setting, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: full MNH year, r0.rel_exact: sets from, r0.id: reverb-314848802, r1.rel: was established in, r0.namespace: reverb, r0.arg2_exact: the 1950, r1.conf_f: 0.92, r1.arg2: 1950, r1.arg2_fbid_s: 04lhnjz, r0.arg2: the 1950, r0.rel: sets from, r1.namespace: reverb, r1.arg1: The India Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established in, r0.num_extrs_i: 45, r1.arg2_exact: 1950, r1.num_extrs_i: 3, r0.conf_f: 0.572, r1.id: reverb-9448494, r0.arg1_exact: full MNH year, r1.arg1_exact: The India Fulbright program, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (the Fulbright Program, established, $x))),AnswerState(the 1950))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5714285714285714, question prefix = 'what year' and answer shape = aaa 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5084408377906904)
What year was the Fulbright Program established?	the end	-0.9332381023756289	Derivation(What year was the Fulbright Program established?,the end,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,publish before,true,4.087548E7,240.0,23.0,0.3790254592895508),QueryState($x: (year, publish before, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, publish before, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: year, r0.rel_exact: are published before, r0.id: reverb-318646306, r1.rel: was established at, r0.namespace: reverb, r0.arg2_exact: the end, r1.conf_f: 0.923, r1.arg2: the end, r0.arg2: the end, r0.rel: are published before, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established at, r0.num_extrs_i: 2, r1.arg2_exact: the end, r1.num_extrs_i: 2, r0.conf_f: 0.805, r1.id: reverb-376184679, r0.arg1_exact: year, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: (year, publish before, $x) (the Fulbright Program, established, $x))),AnswerState(the end))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3790254592895508, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = aaa aaa -> 1.0, action type = ExecutionAction -> 1.0),-0.9332381023756289)
What year was the Fulbright Program established?	The grant	-1.098114935816358	Derivation(What year was the Fulbright Program established?,The grant,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: The grant, r0.rel_exact: is a culmination of, r0.id: reverb-247922970, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.765, r1.arg2: grants, r1.arg2_fbid_s: 06bpsl, r0.arg2: years, r0.rel: is a culmination of, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 5, r1.arg2_exact: grants, r1.num_extrs_i: 4, r0.conf_f: 0.814, r1.id: reverb-323425131, r0.arg1_exact: The grant, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(The grant))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.098114935816358)
What year was the Fulbright Program established?	new legislation	-1.2183677618725977	Derivation(What year was the Fulbright Program established?,new legislation,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: new legislation, r0.rel_exact: is a hopeful response to, r0.id: reverb-104404124, r1.rel: was established under, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.691, r1.arg2: legislation, r1.arg2_fbid_s: 0dnxd, r0.arg2: years, r0.rel: is a hopeful response to, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established under, r0.num_extrs_i: 2, r1.arg2_exact: legislation, r1.num_extrs_i: 3, r0.conf_f: 0.752, r1.id: reverb-274904156, r0.arg1_exact: new legislation, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(new legislation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8461538461538461, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.2183677618725977)
What year was the Fulbright Program established?	the United States	-1.4830228440029019	Derivation(What year was the Fulbright Program established?,the United States,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: the United States, r0.rel_exact: is an examination of, r0.id: reverb-305515216, r1.rel: was established in, r0.namespace: reverb, r0.arg2_exact: the formative years, r1.conf_f: 0.954, r1.arg2: the United States, r0.arg2: the formative years, r0.rel: is an examination of, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established in, r0.num_extrs_i: 2, r1.arg2_exact: the United States, r1.num_extrs_i: 5, r0.conf_f: 0.7, r1.id: reverb-238114232, r0.arg1_exact: the United States, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (the Fulbright Program, established, $x))),AnswerState(the United States))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.4830228440029019)
What year was the Fulbright Program established?	Legislation	-1.730032193844738	Derivation(What year was the Fulbright Program established?,Legislation,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0dnxd, r0.arg1: Legislation, r0.rel_exact: was passed a couple of, r0.id: reverb-71643893, r1.rel: was established under, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.691, r1.arg2: legislation, r1.arg2_fbid_s: 0dnxd, r0.arg2: years, r0.rel: was passed a couple of, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established under, r0.num_extrs_i: 3, r1.arg2_exact: legislation, r1.num_extrs_i: 3, r0.conf_f: 0.919, r1.id: reverb-274904156, r0.arg1_exact: Legislation, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(Legislation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.730032193844738)
What year was the Fulbright Program established?	the USSR	-1.8207821228840908	Derivation(What year was the Fulbright Program established?,the USSR,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: the USSR, r0.rel_exact: was a stagnant adversary for, r0.id: reverb-327447528, r1.rel: was finally established in, r0.namespace: reverb, r0.arg2_exact: fifty years, r1.conf_f: 0.747, r1.arg2: the USSR.?, r0.arg2: fifty years, r0.rel: was a stagnant adversary for, r1.namespace: reverb, r1.arg1: the Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was finally established in, r0.num_extrs_i: 2, r1.arg2_exact: the USSR.?, r1.num_extrs_i: 2, r0.conf_f: 0.807, r1.id: reverb-63043137, r0.arg1_exact: the USSR, r1.arg1_exact: the Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(the USSR))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa AAAA -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8207821228840908)
What year was the Fulbright Program established?	The congress	-1.8638689687640744	Derivation(What year was the Fulbright Program established?,The congress,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: The congress, r0.rel_exact: will be a world leader in, r0.id: reverb-228230123, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: the coming years, r1.conf_f: 0.852, r1.arg2: the US Congress, r0.arg2: the coming years, r0.rel: will be a world leader in, r1.namespace: reverb, r1.arg1: the Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 2, r1.arg2_exact: the US Congress, r1.num_extrs_i: 4, r0.conf_f: 0.61, r1.id: reverb-49544162, r0.arg1_exact: The congress, r1.arg1_exact: the Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(The congress))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7407407407407407, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.8, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8638689687640744)
What year was the Fulbright Program established?	a grant	-2.031397876086936	Derivation(What year was the Fulbright Program established?,a grant,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: three years, r0.rel_exact: was initially build with, r0.id: reverb-6495564, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: a grant, r1.conf_f: 0.765, r1.arg2: grants, r1.arg2_fbid_s: 06bpsl, r0.arg2: a grant, r0.rel: was initially build with, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 6, r1.arg2_exact: grants, r1.num_extrs_i: 4, r0.conf_f: 0.695, r1.id: reverb-323425131, r0.arg1_exact: three years, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: (year, building, $x) (the Fulbright Program, established, $x))),AnswerState(a grant))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.7692307692307693, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.031397876086936)
What year was the Fulbright Program established?	Congress	-2.1198913371660204	Derivation(What year was the Fulbright Program established?,Congress,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,indium,false,1172321.0,106.0,3.0,0.45189613103866577),QueryState($x: ($x, indium, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, indium, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07t31, r0.arg1: Congress, r0.rel_exact: has ruled India for, r0.id: reverb-294044008, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.96, r1.arg2: Congress, r1.arg2_fbid_s: 07t31, r0.arg2: years, r0.rel: has ruled India for, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 5, r1.arg2_exact: Congress, r1.num_extrs_i: 10, r0.conf_f: 0.742, r1.id: reverb-223778224, r0.arg1_exact: Congress, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, indium, year) (the Fulbright Program, established, $x))),AnswerState(Congress))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.45189613103866577, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.1198913371660204)
What year was the Fulbright Program established?	no such grant	-2.51145577022224	Derivation(What year was the Fulbright Program established?,no such grant,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,pan,false,1172321.0,672.0,15.0,0.44447797536849976),QueryState($x: ($x, pan, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, pan, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: no such grant, r0.rel_exact: has panned out in, r0.id: reverb-245385663, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: over two years, r1.conf_f: 0.765, r1.arg2: grants, r1.arg2_fbid_s: 06bpsl, r0.arg2: over two years, r0.rel: has panned out in, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 2, r1.arg2_exact: grants, r1.num_extrs_i: 4, r0.conf_f: 0.839, r1.id: reverb-323425131, r0.arg1_exact: no such grant, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, pan, year) (the Fulbright Program, established, $x))),AnswerState(no such grant))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44447797536849976, minimum join key similarity -> 0.631578947368421, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.51145577022224)
What year was the Fulbright Program established?	The legislation	-2.5594599248330105	Derivation(What year was the Fulbright Program established?,The legislation,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: The legislation, r0.rel_exact: was an outgrowth of, r0.id: reverb-252024773, r1.rel: was established under, r0.namespace: reverb, r0.arg2_exact: a two-year pilot project, r1.conf_f: 0.691, r1.arg2: legislation, r1.arg2_fbid_s: 0dnxd, r0.arg2: a two-year pilot project, r0.rel: was an outgrowth of, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established under, r0.num_extrs_i: 2, r1.arg2_exact: legislation, r1.num_extrs_i: 3, r0.conf_f: 0.873, r1.id: reverb-274904156, r0.arg1_exact: The legislation, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (the Fulbright Program, established, $x))),AnswerState(The legislation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.8461538461538461, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.375, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.5594599248330105)
What year was the Fulbright Program established?	legislation	-2.7814319259681817	Derivation(What year was the Fulbright Program established?,legislation,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be an, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0dnxd, r0.arg1: legislation, r0.rel_exact: are an additional $ 2,000 per, r0.id: reverb-303302143, r1.rel: was established under, r0.namespace: reverb, r0.arg2_exact: year, r1.conf_f: 0.691, r1.arg2: legislation, r1.arg2_fbid_s: 0dnxd, r0.arg2: year, r0.rel: are an additional $ 2,000 per, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established under, r0.num_extrs_i: 2, r1.arg2_exact: legislation, r1.num_extrs_i: 3, r0.conf_f: 0.735, r1.id: reverb-274904156, r0.arg1_exact: legislation, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (the Fulbright Program, established, $x))),AnswerState(legislation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7814319259681817)
What year was the Fulbright Program established?	U.S. Congress	-2.8062773214058403	Derivation(What year was the Fulbright Program established?,U.S. Congress,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "type", year) (the Fulbright Program, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, be a, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07t31, r0.arg1: U.S. Congress, r0.rel_exact: is a practicing attorney with, r0.id: reverb-112166594, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: more than 27 years, r1.conf_f: 0.852, r1.arg2: the US Congress, r0.arg2: more than 27 years, r0.rel: is a practicing attorney with, r1.namespace: reverb, r1.arg1: the Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 6, r1.arg2_exact: the US Congress, r1.num_extrs_i: 4, r0.conf_f: 0.747, r1.id: reverb-49544162, r0.arg1_exact: U.S. Congress, r1.arg1_exact: the Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the Fulbright Program, established, $x))),AnswerState(U.S. Congress))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7857142857142857, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, question prefix = 'what year' and answer shape = A.A. Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.5714285714285714, steps -> 0.75, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.8062773214058403)
What year was the Fulbright Program established?	the legislation	-2.8797616579692655	Derivation(What year was the Fulbright Program established?,the legislation,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is a", year) (the Fulbright Program, established, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: (year, building, $x) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: A five-year review mechanism, r0.rel_exact: is built into, r0.id: reverb-335552131, r1.rel: was established under, r0.namespace: reverb, r0.arg2_exact: the legislation, r1.conf_f: 0.691, r1.arg2: legislation, r1.arg2_fbid_s: 0dnxd, r0.arg2: the legislation, r0.rel: is built into, r1.namespace: reverb, r1.arg1: The Fulbright program, r0.corpora_ss: List(cw), r1.rel_exact: was established under, r0.num_extrs_i: 2, r1.arg2_exact: legislation, r1.num_extrs_i: 3, r0.conf_f: 0.96, r1.id: reverb-274904156, r0.arg1_exact: A five-year review mechanism, r1.arg1_exact: The Fulbright program, r1.corpora_ss: List(cw)),$x: (year, building, $x) (the Fulbright Program, established, $x))),AnswerState(the legislation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.8461538461538461, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.375, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.8797616579692655)
What year was the Fulbright Program established?	The United States	-4.027620023582651	Derivation(What year was the Fulbright Program established?,The United States,Vector(QaStep(What year was the Fulbright Program established?,QuestionStateImpl(What year was the Fulbright Program established?,Sentence(What year was the Fulbright Program established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (the Fulbright Program, established, $x),false)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, "is an example of", year) (the Fulbright Program, established, $x),false),RelSynRule(be an example of,officially become,false,2809.0,285.0,10.0,0.6471722424030304),QueryState($x: ($x, officially become, year) (the Fulbright Program, established, $x),true)), QaStep(What year was the Fulbright Program established?,QueryState($x: ($x, officially become, year) (the Fulbright Program, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09c7w0, r0.arg1: The United States, r0.rel_exact: officially became a Republic, r0.id: openie4-50820203, r1.rel: was established in, r0.namespace: openie4, r0.arg2_exact: 231 years ago, r1.conf_f: 0.954, r1.arg2: the United States, r0.arg2: 231 years ago, r0.rel: officially became a Republic, r1.namespace: reverb, r1.arg1: The Fulbright Program, r0.corpora_ss: List(cw), r1.rel_exact: was established in, r0.num_extrs_i: 2, r1.arg2_exact: the United States, r1.num_extrs_i: 5, r0.conf_f: 0.9205931, r1.id: reverb-238114232, r0.arg1_exact: The United States, r1.arg1_exact: The Fulbright Program, r1.corpora_ss: List(cw)),$x: ($x, officially become, year) (the Fulbright Program, established, $x))),AnswerState(The United States))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6471722424030304, minimum join key similarity -> 0.9411764705882353, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what year' and answer shape = Aaa Aaaaa Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.027620023582651)
Where do hyenas live?	social groups	2.5250774458567324	Derivation(Where do hyenas live?,social groups,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03m8_, r0.arg1: hyenas, r0.rel_exact: live in, r0.id: reverb-153371697, r0.namespace: reverb, r0.arg2_exact: social groups, r0.arg2: social groups, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.605, r0.arg1_exact: hyenas),$x: (hyenas, live in, $x))),AnswerState(social groups))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.5250774458567324)
Where do hyenas live?	Africa	2.1398167473164893	Derivation(Where do hyenas live?,Africa,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Striped hyenas, r0.rel_exact: live in, r0.id: reverb-164681503, r0.namespace: reverb, r0.arg2_exact: Africa, r0.arg2_fbid_s: 0dg3n1, r0.arg2: Africa, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.982, r0.arg1_exact: Striped hyenas),$x: (hyenas, live in, $x))),AnswerState(Africa))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.1398167473164893)
Where do hyenas live?	matriarchal society	1.7202911930677083	Derivation(Where do hyenas live?,matriarchal society,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03m8_, r0.arg1: Hyenas, r0.rel_exact: typically live in, r0.id: reverb-213349144, r0.namespace: reverb, r0.arg2_exact: matriarchal society, r0.arg2: matriarchal society, r0.rel: typically live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.697, r0.arg1_exact: Hyenas),$x: (hyenas, live in, $x))),AnswerState(matriarchal society))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7202911930677083)
Where do hyenas live?	the savannas and deserts	1.3113209181271734	Derivation(Where do hyenas live?,the savannas and deserts,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted Hyenas, r0.rel_exact: live in, r0.id: reverb-289167708, r0.namespace: reverb, r0.arg2_exact: the savannas and deserts, r0.arg2: the savannas and deserts, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.901, r0.arg1_exact: Spotted Hyenas),$x: (hyenas, live in, $x))),AnswerState(the savannas and deserts))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.16666666666666666, question prefix = 'where' and answer shape = aaa aaaa aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3113209181271734)
Where do hyenas live?	constant battle	0.9067354088839872	Derivation(Where do hyenas live?,constant battle,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the Spotted Hyena, r0.rel_exact: live in, r0.id: reverb-81333380, r0.namespace: reverb, r0.arg2_exact: constant battle, r0.arg2: constant battle, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.634, r0.arg1_exact: the Spotted Hyena),$x: (hyenas, live in, $x))),AnswerState(constant battle))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9067354088839872)
Where do hyenas live?	the Elephant Graveyard	0.9067354088839872	Derivation(Where do hyenas live?,the Elephant Graveyard,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: an abandoned Hyena, r0.rel_exact: lived in, r0.id: reverb-267940309, r0.namespace: reverb, r0.arg2_exact: the Elephant Graveyard, r0.arg2: the Elephant Graveyard, r0.rel: lived in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.74, r0.arg1_exact: an abandoned Hyena),$x: (hyenas, live in, $x))),AnswerState(the Elephant Graveyard))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9067354088839872)
Where do hyenas live?	the tropical savanna	0.9067354088839872	Derivation(Where do hyenas live?,the tropical savanna,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The striped hyena, r0.rel_exact: live in, r0.id: reverb-265144205, r0.namespace: reverb, r0.arg2_exact: the tropical savanna, r0.arg2: the tropical savanna, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.969, r0.arg1_exact: The striped hyena),$x: (hyenas, live in, $x))),AnswerState(the tropical savanna))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'where' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9067354088839872)
Where do hyenas live?	Europe 1.8 million years	0.9067354088839872	Derivation(Where do hyenas live?,Europe 1.8 million years,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The brown hyena, r0.rel_exact: lived in, r0.id: reverb-228061489, r0.namespace: reverb, r0.arg2_exact: Europe 1.8 million years, r0.arg2: Europe 1.8 million years, r0.rel: lived in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.901, r0.arg1_exact: The brown hyena),$x: (hyenas, live in, $x))),AnswerState(Europe 1.8 million years))),SparseVector(question prefix = 'where' and answer shape = Aaaaa 1.1 aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9067354088839872)
Where do hyenas live?	clans	0.6917725362897236	Derivation(Where do hyenas live?,clans,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live in, r0.id: reverb-340212778, r0.namespace: reverb, r0.arg2_exact: clans, r0.arg2: clans, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(clans))),SparseVector(question prefix = 'where' and answer shape = aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6917725362897236)
Where do hyenas live?	groups	0.6917725362897236	Derivation(Where do hyenas live?,groups,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live in, r0.id: reverb-85192189, r0.namespace: reverb, r0.arg2_exact: groups, r0.arg2: groups, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.781, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(groups))),SparseVector(question prefix = 'where' and answer shape = aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6917725362897236)
Where do hyenas live?	smaller groups	0.5065346653381493	Derivation(Where do hyenas live?,smaller groups,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Striped hyenas, r0.rel_exact: live in even, r0.id: reverb-168771620, r0.namespace: reverb, r0.arg2_exact: smaller groups, r0.arg2: smaller groups, r0.rel: live in even, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.771, r0.arg1_exact: Striped hyenas),$x: (hyenas, live in, $x))),AnswerState(smaller groups))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5065346653381493)
Where do hyenas live?	complex societies	0.5065346653381493	Derivation(Where do hyenas live?,complex societies,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live in very, r0.id: reverb-29549979, r0.namespace: reverb, r0.arg2_exact: complex societies, r0.arg2: complex societies, r0.rel: live in very, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.72, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(complex societies))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5065346653381493)
Where do hyenas live?	dry savannah	0.13076681827740244	Derivation(Where do hyenas live?,dry savannah,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqwy, r0.arg1: Brown Hyena, r0.rel_exact: live in, r0.id: reverb-318247326, r0.namespace: reverb, r0.arg2_exact: dry savannah, r0.arg2: dry savannah, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.748, r0.arg1_exact: Brown Hyena),$x: (hyenas, live in, $x))),AnswerState(dry savannah))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.13076681827740244)
Where do hyenas live?	large matriarchal communities	-0.15604495202431728	Derivation(Where do hyenas live?,large matriarchal communities,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live in, r0.id: openie4-25055226, r0.namespace: openie4, r0.arg2_exact: large matriarchal communities, r0.arg2: large matriarchal communities, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(large matriarchal communities))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.15604495202431728)
Where do hyenas live?	small groups	-0.15604495202431728	Derivation(Where do hyenas live?,small groups,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Striped hyenas, r0.rel_exact: live in, r0.id: openie4-59506820, r0.namespace: openie4, r0.arg2_exact: small groups, r0.arg2: small groups, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: Striped hyenas),$x: (hyenas, live in, $x))),AnswerState(small groups))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.15604495202431728)
Where do hyenas live?	very complex societies	-0.15604495202431728	Derivation(Where do hyenas live?,very complex societies,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live in, r0.id: openie4-23963193, r0.namespace: openie4, r0.arg2_exact: very complex societies, r0.arg2: very complex societies, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(very complex societies))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.15604495202431728)
Where do hyenas live?	packs	-0.5219839914398359	Derivation(Where do hyenas live?,packs,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03m8_, r0.arg1: --Hyenas, r0.rel_exact: live in, r0.id: reverb-277980584, r0.namespace: reverb, r0.arg2_exact: packs, r0.arg2: packs, r0.rel: live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: --Hyenas),$x: (hyenas, live in, $x))),AnswerState(packs))),SparseVector(question prefix = 'where' and answer shape = aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5219839914398359)
Where do hyenas live?	the user	-0.8919254975533568	Derivation(Where do hyenas live?,the user,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),RelSynRule(live in,only be to,false,117758.0,143.0,56.0,0.6058162450790405),QueryState($x: (hyenas, only be to, $x),true)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, only be to, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03m8_, r0.arg1: Hyena, r0.rel_exact: is licensed only to, r0.id: reverb-228498374, r0.namespace: reverb, r0.arg2_exact: the user, r0.arg2: the user, r0.rel: is licensed only to, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.912, r0.arg1_exact: Hyena),$x: (hyenas, only be to, $x))),AnswerState(the user))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6058162450790405, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8919254975533568)
Where do hyenas live?	South Africa	-0.9180350140792477	Derivation(Where do hyenas live?,South Africa,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),RelSynRule(live in,only be in,false,117758.0,140.0,36.0,0.5926715433597565),QueryState($x: (hyenas, only be in, $x),true)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, only be in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Brown hyenas, r0.rel_exact: are only found in, r0.id: reverb-201555170, r0.namespace: reverb, r0.arg2_exact: South Africa, r0.arg2_fbid_s: 0hzlz, r0.arg2: South Africa, r0.rel: are only found in, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.976, r0.arg1_exact: Brown hyenas),$x: (hyenas, only be in, $x))),AnswerState(South Africa))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926715433597565, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9180350140792477)
Where do hyenas live?	large groups	-0.9608312048133418	Derivation(Where do hyenas live?,large groups,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02tqz3, r0.arg1: Spotted hyenas, r0.rel_exact: live together in, r0.id: openie4-26176772, r0.namespace: openie4, r0.arg2_exact: large groups, r0.arg2: large groups, r0.rel: live together in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9030402, r0.arg1_exact: Spotted hyenas),$x: (hyenas, live in, $x))),AnswerState(large groups))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'where' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9608312048133418)
Where do hyenas live?	the park	-1.0786049437548084	Derivation(Where do hyenas live?,the park,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Leopard and hyenas, r0.rel_exact: also live in, r0.id: reverb-310826221, r0.namespace: reverb, r0.arg2_exact: the park, r0.arg2: the park, r0.rel: also live in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.901, r0.arg1_exact: Leopard and hyenas),$x: (hyenas, live in, $x))),AnswerState(the park))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0786049437548084)
Where do hyenas live?	the Enterprise	-2.148119999769856	Derivation(Where do hyenas live?,the Enterprise,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),RelSynRule(live in,only be in,false,117758.0,140.0,36.0,0.5926715433597565),QueryState($x: (hyenas, only be in, $x),true)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, only be in, $x),true),ExecutionAction(ExecTuple((r0.arg1: Hyena?s WMI features, r0.rel_exact: are only available in, r0.id: reverb-297677800, r0.namespace: reverb, r0.arg2_exact: the Enterprise, r0.arg2: the Enterprise, r0.rel: are only available in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.645, r0.arg1_exact: Hyena?s WMI features),$x: (hyenas, only be in, $x))),AnswerState(the Enterprise))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926715433597565, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.148119999769856)
Where do hyenas live?	one pudendum	-2.4678358390379773	Derivation(Where do hyenas live?,one pudendum,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),RelSynRule(live in,only be to,false,117758.0,143.0,56.0,0.6058162450790405),QueryState($x: (hyenas, only be to, $x),true)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, only be to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the hyena, r0.rel_exact: has been seen to have only, r0.id: reverb-349092259, r0.namespace: reverb, r0.arg2_exact: one pudendum, r0.arg2: one pudendum, r0.rel: has been seen to have only, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.811, r0.arg1_exact: the hyena),$x: (hyenas, only be to, $x))),AnswerState(one pudendum))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6058162450790405, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.4678358390379773)
Where do hyenas live?	myth and imagination	-2.5102738135249174	Derivation(Where do hyenas live?,myth and imagination,Vector(QaStep(Where do hyenas live?,QuestionStateImpl(Where do hyenas live?,Sentence(Where do hyenas live?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (hyenas, live in, $x),false)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, live in, $x),false),RelSynRule(live in,only be in,false,117758.0,140.0,36.0,0.5926715433597565),QueryState($x: (hyenas, only be in, $x),true)), QaStep(Where do hyenas live?,QueryState($x: (hyenas, only be in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the Moon-Hyena, r0.rel_exact: can only be found in, r0.id: reverb-123542086, r0.namespace: reverb, r0.arg2_exact: myth and imagination, r0.arg2: myth and imagination, r0.rel: can only be found in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.589, r0.arg1_exact: the Moon-Hyena),$x: (hyenas, only be in, $x))),AnswerState(myth and imagination))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926715433597565, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'where' and answer shape = aaaa aaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.5102738135249174)
What does NASDAQ stand for?	National Association	2.807472356746066	Derivation(What does NASDAQ stand for?,National Association,Vector(QaStep(What does NASDAQ stand for?,QuestionStateImpl(What does NASDAQ stand for?,Sentence(What does NASDAQ stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASDAQ, stand for, $x),false)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: NASDAQ NASDAQ, r0.rel_exact: stands for, r0.id: reverb-358812678, r0.namespace: reverb, r0.arg2_exact: National Association, r0.arg2: National Association, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.905, r0.arg1_exact: NASDAQ NASDAQ),$x: (NASDAQ, stand for, $x))),AnswerState(National Association))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.807472356746066)
What does NASDAQ stand for?	?National Association	2.716007450901116	Derivation(What does NASDAQ stand for?,?National Association,Vector(QaStep(What does NASDAQ stand for?,QuestionStateImpl(What does NASDAQ stand for?,Sentence(What does NASDAQ stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASDAQ, stand for, $x),false)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05dq_, r0.arg1: NASDAQ, r0.rel_exact: stands for, r0.id: reverb-246190717, r0.namespace: reverb, r0.arg2_exact: ?National Association, r0.arg2: ?National Association, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.905, r0.arg1_exact: NASDAQ),$x: (NASDAQ, stand for, $x))),AnswerState(?National Association))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = ?Aaaaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.716007450901116)
What does NASDAQ stand for?	the National Association	-0.004118670258638435	Derivation(What does NASDAQ stand for?,the National Association,Vector(QaStep(What does NASDAQ stand for?,QuestionStateImpl(What does NASDAQ stand for?,Sentence(What does NASDAQ stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASDAQ, stand for, $x),false)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, stand for, $x),false),RelSynRule(stand for,be the acronym for,false,15674.0,180.0,106.0,0.6815851032733917),QueryState($x: (NASDAQ, be the acronym for, $x),true)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, be the acronym for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05dq_, r0.arg1: NASDAQ, r0.rel_exact: Is the acronym for, r0.id: reverb-28630706, r0.namespace: reverb, r0.arg2_exact: the National Association, r0.arg2: the National Association, r0.rel: Is the acronym for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.959, r0.arg1_exact: NASDAQ),$x: (NASDAQ, be the acronym for, $x))),AnswerState(the National Association))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6815851032733917, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.004118670258638435)
What does NASDAQ stand for?	trading	-0.9591590770989997	Derivation(What does NASDAQ stand for?,trading,Vector(QaStep(What does NASDAQ stand for?,QuestionStateImpl(What does NASDAQ stand for?,Sentence(What does NASDAQ stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASDAQ, stand for, $x),false)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASDAQ, consider for, $x),true)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05dq_, r0.arg1: NASDAQ, r0.rel_exact: will consider for, r0.id: reverb-64066412, r0.namespace: reverb, r0.arg2_exact: trading, r0.arg2_fbid_s: 07br0, r0.arg2: trading, r0.rel: will consider for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.838, r0.arg1_exact: NASDAQ),$x: (NASDAQ, consider for, $x))),AnswerState(trading))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9591590770989997)
What does NASDAQ stand for?	the work	-1.9366859129034082	Derivation(What does NASDAQ stand for?,the work,Vector(QaStep(What does NASDAQ stand for?,QuestionStateImpl(What does NASDAQ stand for?,Sentence(What does NASDAQ stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASDAQ, stand for, $x),false)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, stand for, $x),false),RelSynRule(stand for,be symbolic of,false,15674.0,489.0,38.0,0.6182957887649536),QueryState($x: (NASDAQ, be symbolic of, $x),true)), QaStep(What does NASDAQ stand for?,QueryState($x: (NASDAQ, be symbolic of, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NASDAQ, r0.rel_exact: is the symbolic culmination of, r0.id: reverb-854371, r0.namespace: reverb, r0.arg2_exact: the work, r0.arg2: the work, r0.rel: is the symbolic culmination of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.567, r0.arg1_exact: the NASDAQ),$x: (NASDAQ, be symbolic of, $x))),AnswerState(the work))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6182957887649536, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9366859129034082)
When was John D. Rockefeller born?	1839	5.312062631765771	Derivation(When was John D. Rockefeller born?,1839,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born in, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019g80, r0.arg1: John D. Rockefeller, r0.rel_exact: was born in, r0.id: reverb-333312803, r0.namespace: reverb, r0.arg2_exact: 1839, r0.arg2: 1839, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.926, r0.arg1_exact: John D. Rockefeller),$x: (John D. Rockefeller, was born in, $x))),AnswerState(1839))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.312062631765771)
When was John D. Rockefeller born?	July 8 , 1839	4.59515664706815	Derivation(When was John D. Rockefeller born?,July 8 , 1839,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born on, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born on, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019g80, r0.arg1: John D. Rockefeller, r0.rel_exact: was born on, r0.id: reverb-254410986, r0.namespace: reverb, r0.arg2_exact: July 8 , 1839, r0.arg2: July 8 , 1839, r0.rel: was born on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.999, r0.arg1_exact: John D. Rockefeller),$x: (John D. Rockefeller, was born on, $x))),AnswerState(July 8 , 1839))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'when' and answer shape = Aaaa 1 , 1111 -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.59515664706815)
When was John D. Rockefeller born?	central New York	2.376968647139728	Derivation(When was John D. Rockefeller born?,central New York,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born in, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019g80, r0.arg1: John D. Rockefeller, r0.rel_exact: was born in, r0.id: reverb-137250159, r0.namespace: reverb, r0.arg2_exact: central New York, r0.arg2_fbid_s: 03ynms, r0.arg2: central New York, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.984, r0.arg1_exact: John D. Rockefeller),$x: (John D. Rockefeller, was born in, $x))),AnswerState(central New York))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa Aaa Aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.376968647139728)
When was John D. Rockefeller born?	Richford	2.1900314712478774	Derivation(When was John D. Rockefeller born?,Richford,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born in, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019g80, r0.arg1: John D. Rockefeller, r0.rel_exact: was born in, r0.id: reverb-355944149, r0.namespace: reverb, r0.arg2_exact: Richford, r0.arg2: Richford, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.984, r0.arg1_exact: John D. Rockefeller),$x: (John D. Rockefeller, was born in, $x))),AnswerState(Richford))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1900314712478774)
When was John D. Rockefeller born?	a farm	1.2980475353839651	Derivation(When was John D. Rockefeller born?,a farm,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born on, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born on, $x),false),RelSynRule(be bear on,be raise on,false,11629.0,992.0,33.0,0.6011102199554443),QueryState($x: (John D. Rockefeller, be raise on, $x),true)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, be raise on, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019g80, r0.arg1: John D. Rockefeller, r0.rel_exact: was raised on, r0.id: reverb-92914505, r0.namespace: reverb, r0.arg2_exact: a farm, r0.arg2: a farm, r0.rel: was raised on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.778, r0.arg1_exact: John D. Rockefeller),$x: (John D. Rockefeller, be raise on, $x))),AnswerState(a farm))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6011102199554443, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2980475353839651)
When was John D. Rockefeller born?	the nation	0.7079132612614298	Derivation(When was John D. Rockefeller born?,the nation,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born in, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born in, $x),false),RelSynRule(be bear in,be the birthplace of,true,62700.0,828.0,174.0,0.6060601770877838),QueryState($x: ($x, be the birthplace of, John D. Rockefeller),true)), QaStep(When was John D. Rockefeller born?,QueryState($x: ($x, be the birthplace of, John D. Rockefeller),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01ljlg, r0.arg1: the nation, r0.rel_exact: was the birthplace of, r0.id: reverb-273462086, r0.namespace: reverb, r0.arg2_exact: John D. Rockefeller, r0.arg2_fbid_s: 019g80, r0.arg2: John D. Rockefeller, r0.rel: was the birthplace of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.851, r0.arg1_exact: the nation),$x: ($x, be the birthplace of, John D. Rockefeller))),AnswerState(the nation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6060601770877838, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7079132612614298)
When was John D. Rockefeller born?	William	-1.9020176138682676	Derivation(When was John D. Rockefeller born?,William,Vector(QaStep(When was John D. Rockefeller born?,QuestionStateImpl(When was John D. Rockefeller born?,Sentence(When was John D. Rockefeller born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (John D. Rockefeller, was born on, $x),false)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (John D. Rockefeller, be bear, $x),true)), QaStep(When was John D. Rockefeller born?,QueryState($x: (John D. Rockefeller, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1: Jul 8 Industrialist John D. Rockefeller, r0.rel_exact: is born to, r0.id: reverb-190249423, r0.namespace: reverb, r0.arg2_exact: William, r0.arg2_fbid_s: 01w9wwg, r0.arg2: William, r0.rel: is born to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.949, r0.arg1_exact: Jul 8 Industrialist John D. Rockefeller),$x: (John D. Rockefeller, be bear, $x))),AnswerState(William))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9020176138682676)
What is the effect of acid rain?	The principal destructive element	3.8523453033918074	Derivation(What is the effect of acid rain?,The principal destructive element,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),ExecutionAction(ExecTuple((r0.arg1: The principal destructive element, r0.rel_exact: was the effect of, r0.id: reverb-77299198, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: was the effect of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.873, r0.arg1_exact: The principal destructive element),$x: ($x, is the effect of, acid rain))),AnswerState(The principal destructive element))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.8523453033918074)
What is the effect of acid rain?	private	2.537202469540242	Derivation(What is the effect of acid rain?,private,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),ExecutionAction(ExecTuple((r0.arg1: private, r0.rel_exact: is the effect of, r0.id: reverb-21265300, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: is the effect of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.746, r0.arg1_exact: private),$x: ($x, is the effect of, acid rain))),AnswerState(private))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.537202469540242)
What is the effect of acid rain?	Scientists	1.693759479779245	Derivation(What is the effect of acid rain?,Scientists,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06q2q, r0.arg1: Scientists, r0.rel_exact: are measuring the effects of, r0.id: reverb-159076379, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: are measuring the effects of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.814, r0.arg1_exact: Scientists),$x: ($x, is the effect of, acid rain))),AnswerState(Scientists))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.693759479779245)
What is the effect of acid rain?	Researchers	1.371844978663635	Derivation(What is the effect of acid rain?,Researchers,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06cs1, r0.arg1: Researchers, r0.rel_exact: are considering the possible effects of, r0.id: reverb-155676060, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: are considering the possible effects of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.681, r0.arg1_exact: Researchers),$x: ($x, is the effect of, acid rain))),AnswerState(Researchers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.371844978663635)
What is the effect of acid rain?	An example	1.2915707268666536	Derivation(What is the effect of acid rain?,An example,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,be the impact of,false,398.0,130.0,2.0,0.6824737787246704),QueryState($x: ($x, be the impact of, acid rain),true)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, be the impact of, acid rain),true),ExecutionAction(ExecTuple((r0.arg1: An example, r0.rel_exact: is the impact of, r0.id: reverb-215675678, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: is the impact of, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.834, r0.arg1_exact: An example),$x: ($x, be the impact of, acid rain))),AnswerState(An example))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6824737787246704, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, question prefix = 'what' and answer shape = Aa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2915707268666536)
What is the effect of acid rain?	big-city pollution	0.8620980911562501	Derivation(What is the effect of acid rain?,big-city pollution,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,have something to do with,true,398.0,191.0,2.0,0.6704506874084473),QueryState($x: (acid rain, have something to do with, $x),true)), QaStep(What is the effect of acid rain?,QueryState($x: (acid rain, have something to do with, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 014xb, r0.arg1: acid rain, r0.rel_exact: has something to do with, r0.id: reverb-76524020, r0.namespace: reverb, r0.arg2_exact: big-city pollution, r0.arg2: big-city pollution, r0.rel: has something to do with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.57, r0.arg1_exact: acid rain),$x: (acid rain, have something to do with, $x))),AnswerState(big-city pollution))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6704506874084473, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaa-aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.07692307692307693, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8620980911562501)
What is the effect of acid rain?	specific concern	0.6015769859346918	Derivation(What is the effect of acid rain?,specific concern,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,be the consequence of,false,398.0,216.0,7.0,0.7057556211948395),QueryState($x: ($x, be the consequence of, acid rain),true)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, be the consequence of, acid rain),true),ExecutionAction(ExecTuple((r0.arg1: specific concern, r0.rel_exact: are the natural consequences of, r0.id: reverb-122117382, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: are the natural consequences of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.771, r0.arg1_exact: specific concern),$x: ($x, be the consequence of, acid rain))),AnswerState(specific concern))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.7057556211948395, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6015769859346918)
What is the effect of acid rain?	greater concern	0.5852190231733023	Derivation(What is the effect of acid rain?,greater concern,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,be the impact of,false,398.0,130.0,2.0,0.6824737787246704),QueryState($x: ($x, be the impact of, acid rain),true)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, be the impact of, acid rain),true),ExecutionAction(ExecTuple((r0.arg1: greater concern, r0.rel_exact: is the possible impact of, r0.id: reverb-146148044, r0.namespace: reverb, r0.arg2_exact: acid rain, r0.arg2_fbid_s: 014xb, r0.arg2: acid rain, r0.rel: is the possible impact of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.738, r0.arg1_exact: greater concern),$x: ($x, be the impact of, acid rain))),AnswerState(greater concern))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6824737787246704, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5852190231733023)
What is the effect of acid rain?	The ocean	-1.33856442675688	Derivation(What is the effect of acid rain?,The ocean,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,be the will of,false,398.0,331.0,5.0,0.6819021105766296),QueryState($x: ($x, be the will of, acid rain),true)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, be the will of, acid rain),true),ExecutionAction(ExecTuple((r0.arg1: The ocean, r0.rel_exact: will be the source of, r0.id: reverb-279788643, r0.namespace: reverb, r0.arg2_exact: the most horrible acid rains, r0.arg2: the most horrible acid rains, r0.rel: will be the source of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.821, r0.arg1_exact: The ocean),$x: ($x, be the will of, acid rain))),AnswerState(The ocean))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6819021105766296, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.33856442675688)
What is the effect of acid rain?	the environment	-1.5887607333467768	Derivation(What is the effect of acid rain?,the environment,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,can effect,true,398.0,200.0,2.0,0.669011801481247),QueryState($x: (acid rain, can effect, $x),true)), QaStep(What is the effect of acid rain?,QueryState($x: (acid rain, can effect, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 014xb, r0.arg1: Acid rain, r0.rel_exact: can have adverse effects on, r0.id: reverb-347329449, r0.namespace: reverb, r0.arg2_exact: the environment, r0.arg2_fbid_s: 046632s, r0.arg2: the environment, r0.rel: can have adverse effects on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.934, r0.arg1_exact: Acid rain),$x: (acid rain, can effect, $x))),AnswerState(the environment))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.669011801481247, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.5887607333467768)
What is the effect of acid rain?	the creatures	-1.7497179839045818	Derivation(What is the effect of acid rain?,the creatures,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,can effect,true,398.0,200.0,2.0,0.669011801481247),QueryState($x: (acid rain, can effect, $x),true)), QaStep(What is the effect of acid rain?,QueryState($x: (acid rain, can effect, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 014xb, r0.arg1: Acid rain, r0.rel_exact: can have very devastating effects in, r0.id: reverb-95993520, r0.namespace: reverb, r0.arg2_exact: the creatures, r0.arg2_fbid_s: 021876, r0.arg2: the creatures, r0.rel: can have very devastating effects in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.813, r0.arg1_exact: Acid rain),$x: (acid rain, can effect, $x))),AnswerState(the creatures))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.669011801481247, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7497179839045818)
What is the effect of acid rain?	buildings	-1.9041370937470592	Derivation(What is the effect of acid rain?,buildings,Vector(QaStep(What is the effect of acid rain?,QuestionStateImpl(What is the effect of acid rain?,Sentence(What is the effect of acid rain?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the effect of, acid rain),false)), QaStep(What is the effect of acid rain?,QueryState($x: ($x, is the effect of, acid rain),false),RelSynRule(be the effect of,can effect,true,398.0,200.0,2.0,0.669011801481247),QueryState($x: (acid rain, can effect, $x),true)), QaStep(What is the effect of acid rain?,QueryState($x: (acid rain, can effect, $x),true),ExecutionAction(ExecTuple((r0.arg1: BUILDINGS Acid rain, r0.rel_exact: can have a severe effect on, r0.id: reverb-351617035, r0.namespace: reverb, r0.arg2_exact: buildings, r0.arg2: buildings, r0.rel: can have a severe effect on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.868, r0.arg1_exact: BUILDINGS Acid rain),$x: (acid rain, can effect, $x))),AnswerState(buildings))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.669011801481247, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9041370937470592)
When was the NFL established?	1920	3.773727653471278	Derivation(When was the NFL established?,1920,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The NFL The National Football League, r0.rel_exact: was established in, r0.id: reverb-204822707, r0.namespace: reverb, r0.arg2_exact: 1920, r0.arg2: 1920, r0.rel: was established in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.973, r0.arg1_exact: The NFL The National Football League),$x: (the NFL, was established in, $x))),AnswerState(1920))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.773727653471278)
When was the NFL established?	1999	3.6577839323275754	Derivation(When was the NFL established?,1999,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,be institute in,false,8312.0,360.0,45.0,0.6529719531536102),QueryState($x: (the NFL, be institute in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be institute in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: was instituted in, r0.id: reverb-383017746, r0.namespace: reverb, r0.arg2_exact: 1999, r0.arg2: 1999, r0.rel: was instituted in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.858, r0.arg1_exact: the NFL),$x: (the NFL, be institute in, $x))),AnswerState(1999))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6529719531536102, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.6577839323275754)
When was the NFL established?	1970	3.64123378875129	Derivation(When was the NFL established?,1970,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,be rename in,false,8312.0,289.0,17.0,0.6294165849685669),QueryState($x: (the NFL, be rename in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be rename in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the the NFL, r0.rel_exact: was renamed in, r0.id: reverb-252958461, r0.namespace: reverb, r0.arg2_exact: 1970, r0.arg2: 1970, r0.rel: was renamed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: the the NFL),$x: (the NFL, be rename in, $x))),AnswerState(1970))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6294165849685669, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.64123378875129)
When was the NFL established?	1921	3.6383742353839494	Derivation(When was the NFL established?,1921,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be form in,false,23214.0,9624.0,1388.0,0.6253466606140137),QueryState($x: (the NFL, be form in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be form in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: was formed in, r0.id: reverb-256227479, r0.namespace: reverb, r0.arg2_exact: 1921, r0.arg2: 1921, r0.rel: was formed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.926, r0.arg1_exact: The NFL),$x: (the NFL, be form in, $x))),AnswerState(1921))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6253466606140137, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.6383742353839494)
When was the NFL established?	1933	3.2882250423794543	Derivation(When was the NFL established?,1933,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the NFL?s playoff system, r0.rel_exact: was established in, r0.id: reverb-289652773, r0.namespace: reverb, r0.arg2_exact: 1933, r0.arg2: 1933, r0.rel: was established in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.898, r0.arg1_exact: the NFL?s playoff system),$x: (the NFL, was established in, $x))),AnswerState(1933))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.2, steps -> 0.5, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.2882250423794543)
When was the NFL established?	1922	3.042445960241934	Derivation(When was the NFL established?,1922,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be charter in,false,23214.0,225.0,46.0,0.6362509429454803),QueryState($x: (the NFL, be charter in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be charter in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: was formally chartered in, r0.id: reverb-258007815, r0.namespace: reverb, r0.arg2_exact: 1922, r0.arg2: 1922, r0.rel: was formally chartered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.814, r0.arg1_exact: The NFL),$x: (the NFL, be charter in, $x))),AnswerState(1922))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6362509429454803, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.042445960241934)
When was the NFL established?	1990	2.662570773346675	Derivation(When was the NFL established?,1990,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,expand in,false,8312.0,998.0,45.0,0.6211079359054565),QueryState($x: (the NFL, expand in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, expand in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL playoffs, r0.rel_exact: expanded in, r0.id: reverb-161064763, r0.namespace: reverb, r0.arg2_exact: 1990, r0.arg2: 1990, r0.rel: expanded in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.782, r0.arg1_exact: the NFL playoffs),$x: (the NFL, expand in, $x))),AnswerState(1990))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6211079359054565, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.662570773346675)
When was the NFL established?	2010	2.6456452897956115	Derivation(When was the NFL established?,2010,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the NFL Alumni Association, r0.rel_exact: established the program in, r0.id: reverb-230223562, r0.namespace: reverb, r0.arg2_exact: 2010, r0.arg2: 2010, r0.rel: established the program in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.873, r0.arg1_exact: the NFL Alumni Association),$x: (the NFL, established in, $x))),AnswerState(2010))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6456452897956115)
When was the NFL established?	1967	2.612481394027887	Derivation(When was the NFL established?,1967,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,start back in,false,23214.0,398.0,33.0,0.6080482602119446),QueryState($x: (the NFL, start back in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, start back in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL draft, r0.rel_exact: started back in, r0.id: reverb-356585781, r0.namespace: reverb, r0.arg2_exact: 1967, r0.arg2: 1967, r0.rel: started back in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.793, r0.arg1_exact: the NFL draft),$x: (the NFL, start back in, $x))),AnswerState(1967))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6080482602119446, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.612481394027887)
When was the NFL established?	1950	2.094186575110712	Derivation(When was the NFL established?,1950,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,begin play in,false,23214.0,163.0,23.0,0.6246635317802429),QueryState($x: (the NFL, begin play in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, begin play in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL and, r0.rel_exact: began play in, r0.id: reverb-168695067, r0.namespace: reverb, r0.arg2_exact: 1950, r0.arg2_fbid_s: 04lhnjz, r0.arg2: 1950, r0.rel: began play in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.732, r0.arg1_exact: the NFL and),$x: (the NFL, begin play in, $x))),AnswerState(1950))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6246635317802429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.094186575110712)
When was the NFL established?	Thursday night	1.963660215232852	Derivation(When was the NFL established?,Thursday night,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established on, $x),false),RelSynRule(be establish on,be start on,false,1103.0,610.0,6.0,0.6366409957408905),QueryState($x: (the NFL, be start on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be start on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is starting their season on, r0.id: reverb-331938265, r0.namespace: reverb, r0.arg2_exact: Thursday night, r0.arg2: Thursday night, r0.rel: is starting their season on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.966, r0.arg1_exact: the NFL),$x: (the NFL, be start on, $x))),AnswerState(Thursday night))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6366409957408905, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'when' and answer shape = Aaaaa aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.963660215232852)
When was the NFL established?	September 20	1.8035540202479448	Derivation(When was the NFL established?,September 20,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is coming up on, r0.id: reverb-73712903, r0.namespace: reverb, r0.arg2_exact: September 20, r0.arg2_fbid_s: 06zzr, r0.arg2: September 20, r0.rel: is coming up on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.888, r0.arg1_exact: the NFL),$x: (the NFL, be come on, $x))),AnswerState(September 20))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = Aaaaa 11 -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8035540202479448)
When was the NFL established?	August 2010	1.6925814308401113	Derivation(When was the NFL established?,August 2010,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be launch in,false,23214.0,7693.0,557.0,0.6038121283054352),QueryState($x: (the NFL, be launch in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be launch in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The PINK NFL line, r0.rel_exact: was launched in, r0.id: reverb-189709918, r0.namespace: reverb, r0.arg2_exact: August 2010, r0.arg2: August 2010, r0.rel: was launched in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.981, r0.arg1_exact: The PINK NFL line),$x: (the NFL, be launch in, $x))),AnswerState(August 2010))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6038121283054352, question prefix = 'when' and answer shape = Aaaaa 1111 -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.6925814308401113)
When was the NFL established?	1936	1.410398856186922	Derivation(When was the NFL established?,1936,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,begin play in,false,23214.0,163.0,23.0,0.6246635317802429),QueryState($x: (the NFL, begin play in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, begin play in, $x),true),ExecutionAction(ExecTuple((r0.arg1: three NFL Championships .The Rams, r0.rel_exact: began playing in, r0.id: reverb-321271668, r0.namespace: reverb, r0.arg2_exact: 1936, r0.arg2: 1936, r0.rel: began playing in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.818, r0.arg1_exact: three NFL Championships .The Rams),$x: (the NFL, begin play in, $x))),AnswerState(1936))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6246635317802429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.410398856186922)
When was the NFL established?	late August	1.2997735446893977	Derivation(When was the NFL established?,late August,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,start up in,false,8312.0,189.0,8.0,0.6191324591636658),QueryState($x: (the NFL, start up in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, start up in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL season, r0.rel_exact: starts up again in, r0.id: reverb-151069586, r0.namespace: reverb, r0.arg2_exact: late August, r0.arg2: late August, r0.rel: starts up again in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.833, r0.arg1_exact: the NFL season),$x: (the NFL, start up in, $x))),AnswerState(late August))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6191324591636658, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, question prefix = 'when' and answer shape = aaaa Aaaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2997735446893977)
When was the NFL established?	the Linsanity	1.2931194646050113	Derivation(When was the NFL established?,the Linsanity,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is catching on to, r0.id: reverb-314810026, r0.namespace: reverb, r0.arg2_exact: the Linsanity, r0.arg2: the Linsanity, r0.rel: is catching on to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.95, r0.arg1_exact: The NFL),$x: (the NFL, be to be on, $x))),AnswerState(the Linsanity))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2931194646050113)
When was the NFL established?	the marketing capital	1.2833345459463894	Derivation(When was the NFL established?,the marketing capital,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: was coming to, r0.id: reverb-268567580, r0.namespace: reverb, r0.arg2_exact: the marketing capital, r0.arg2: the marketing capital, r0.rel: was coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.825, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(the marketing capital))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),1.2833345459463894)
When was the NFL established?	an end	1.2833345459463894	Derivation(When was the NFL established?,an end,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is coming to, r0.id: reverb-273209226, r0.namespace: reverb, r0.arg2_exact: an end, r0.arg2: an end, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.792, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(an end))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aa aaa -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2833345459463894)
When was the NFL established?	a close	1.2833345459463894	Derivation(When was the NFL established?,a close,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: was coming to, r0.id: reverb-269972710, r0.namespace: reverb, r0.arg2_exact: a close, r0.arg2: a close, r0.rel: was coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.87, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(a close))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2833345459463894)
When was the NFL established?	a prove-it basis	1.2438943230135022	Derivation(When was the NFL established?,a prove-it basis,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be there on,false,299.0,663.0,2.0,0.6404977738857269),QueryState($x: (the NFL, be there on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be there on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is there on, r0.id: reverb-365489128, r0.namespace: reverb, r0.arg2_exact: a prove-it basis, r0.arg2: a prove-it basis, r0.rel: is there on, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.863, r0.arg1_exact: the NFL),$x: (the NFL, be there on, $x))),AnswerState(a prove-it basis))),SparseVector(question prefix = 'when' and answer shape = a aaaa-aa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6404977738857269, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2438943230135022)
When was the NFL established?	the gridiron	1.2386205531246715	Derivation(When was the NFL established?,the gridiron,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be go from,false,299.0,843.0,2.0,0.632991760969162),QueryState($x: (the NFL, be go from, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be go from, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is going from, r0.id: reverb-70529923, r0.namespace: reverb, r0.arg2_exact: the gridiron, r0.arg2: the gridiron, r0.rel: is going from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.521, r0.arg1_exact: The NFL),$x: (the NFL, be go from, $x))),AnswerState(the gridiron))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.632991760969162, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2386205531246715)
When was the NFL established?	the sidelines	1.2338692185519937	Derivation(When was the NFL established?,the sidelines,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be see on,false,299.0,1570.0,3.0,0.62622931599617),QueryState($x: (the NFL, be see on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be see on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: are seen on, r0.id: reverb-194756008, r0.namespace: reverb, r0.arg2_exact: the sidelines, r0.arg2: the sidelines, r0.rel: are seen on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.7, r0.arg1_exact: the NFL),$x: (the NFL, be see on, $x))),AnswerState(the sidelines))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.62622931599617, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.2338692185519937)
When was the NFL established?	http://en.wikipedia.org/wiki/The%20NFL%20Today	1.0946080644148708	Derivation(When was the NFL established?,http://en.wikipedia.org/wiki/The%20NFL%20Today,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established on, $x),false),RelSynRule(be establish on,be found on,false,1103.0,3670.0,40.0,0.6398482322692871),QueryState($x: (the NFL, be found on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be found on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the nfl today, r0.rel_exact: can be found on Wikipedia at, r0.prob_f: 0.95, r0.id: nell-1706997, r0.namespace: nell, r0.arg2_exact: http://en.wikipedia.org/wiki/The%20NFL%20Today, r0.arg2: http://en.wikipedia.org/wiki/The%20NFL%20Today, r0.rel: can be found on Wikipedia at, r0.arg1_exact: the nfl today),$x: (the NFL, be found on, $x))),AnswerState(http://en.wikipedia.org/wiki/The%20NFL%20Today))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6398482322692871, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'when' and answer shape = aaaa://aa.aaaa.aaa/aaaa/Aaa%11AAA%11Aaaaa -> 1.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0946080644148708)
When was the NFL established?	the forefront	1.0630867767660113	Derivation(When was the NFL established?,the forefront,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have to come to,false,299.0,337.0,3.0,0.6743151843547821),QueryState($x: (the NFL, have to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has come to, r0.id: reverb-340774205, r0.namespace: reverb, r0.arg2_exact: the forefront, r0.arg2: the forefront, r0.rel: has come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.826, r0.arg1_exact: the NFL),$x: (the NFL, have to come to, $x))),AnswerState(the forefront))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6743151843547821, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0630867767660113)
When was the NFL established?	April 26-28 2012	0.9411105263449766	Derivation(When was the NFL established?,April 26-28 2012,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL Draft, r0.rel_exact: is set to take place on, r0.id: reverb-7958662, r0.namespace: reverb, r0.arg2_exact: April 26-28 2012, r0.arg2: April 26-28 2012, r0.rel: is set to take place on, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.97, r0.arg1_exact: The NFL Draft),$x: (the NFL, be to be on, $x))),AnswerState(April 26-28 2012))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'when' and answer shape = Aaaaa 11-11 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9411105263449766)
When was the NFL established?	a Thursday	0.7779608929384976	Derivation(When was the NFL established?,a Thursday,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The 2012 NFL season, r0.rel_exact: was set to begin on, r0.id: reverb-233637097, r0.namespace: reverb, r0.arg2_exact: a Thursday, r0.arg2: a Thursday, r0.rel: was set to begin on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.975, r0.arg1_exact: The 2012 NFL season),$x: (the NFL, be to be on, $x))),AnswerState(a Thursday))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, question prefix = 'when' and answer shape = a Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7779608929384976)
When was the NFL established?	Tuesday evening	0.7779608929384976	Derivation(When was the NFL established?,Tuesday evening,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The 2012 NFL schedule, r0.rel_exact: is set to be released on, r0.id: reverb-323433403, r0.namespace: reverb, r0.arg2_exact: Tuesday evening, r0.arg2: Tuesday evening, r0.rel: is set to be released on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.97, r0.arg1_exact: The 2012 NFL schedule),$x: (the NFL, be to be on, $x))),AnswerState(Tuesday evening))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'when' and answer shape = Aaaaa aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7779608929384976)
When was the NFL established?	January 23 , 2011	0.758738707347824	Derivation(When was the NFL established?,January 23 , 2011,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be live on,false,299.0,1254.0,5.0,0.6492156386375427),QueryState($x: (the NFL, be live on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be live on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Playoffs 2011, r0.rel_exact: will be held live on, r0.id: reverb-377853223, r0.namespace: reverb, r0.arg2_exact: January 23 , 2011, r0.arg2: January 23 , 2011, r0.rel: will be held live on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.889, r0.arg1_exact: the NFL Playoffs 2011),$x: (the NFL, be live on, $x))),AnswerState(January 23 , 2011))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6492156386375427, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'when' and answer shape = Aaaaa 11 , 1111 -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.758738707347824)
When was the NFL established?	ads	0.720718102759172	Derivation(When was the NFL established?,ads,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be go to be on,false,299.0,381.0,3.0,0.6704802811145782),QueryState($x: (the NFL, be go to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be go to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: are going to click on, r0.id: reverb-12651088, r0.namespace: reverb, r0.arg2_exact: ads, r0.arg2: ads, r0.rel: are going to click on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.842, r0.arg1_exact: the NFL),$x: (the NFL, be go to be on, $x))),AnswerState(ads))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6704802811145782, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.720718102759172)
When was the NFL established?	display	0.720718102759172	Derivation(When was the NFL established?,display,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be go to be on,false,299.0,381.0,3.0,0.6704802811145782),QueryState($x: (the NFL, be go to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be go to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is ready to go on, r0.id: reverb-35063546, r0.namespace: reverb, r0.arg2_exact: display, r0.arg2: display, r0.rel: is ready to go on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.859, r0.arg1_exact: the NFL),$x: (the NFL, be go to be on, $x))),AnswerState(display))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6704802811145782, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.720718102759172)
When was the NFL established?	an understanding	0.6797448563546213	Derivation(When was the NFL established?,an understanding,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: will be to come to, r0.id: reverb-326073218, r0.namespace: reverb, r0.arg2_exact: an understanding, r0.arg2: an understanding, r0.rel: will be to come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.56, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(an understanding))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = aa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6797448563546213)
When was the NFL established?	a point	0.6797448563546213	Derivation(When was the NFL established?,a point,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is coming up to, r0.id: reverb-324999291, r0.namespace: reverb, r0.arg2_exact: a point, r0.arg2: a point, r0.rel: is coming up to, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.864, r0.arg1_exact: The NFL),$x: (the NFL, be to come to, $x))),AnswerState(a point))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6797448563546213)
When was the NFL established?	draft day	0.6785787681653925	Derivation(When was the NFL established?,draft day,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be reveal on,false,299.0,116.0,2.0,0.6949723064899445),QueryState($x: (the NFL, be reveal on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be reveal on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is routinely revealed on, r0.id: reverb-365529207, r0.namespace: reverb, r0.arg2_exact: draft day, r0.arg2: draft day, r0.rel: is routinely revealed on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.88, r0.arg1_exact: the NFL),$x: (the NFL, be reveal on, $x))),AnswerState(draft day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6949723064899445, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6785787681653925)
When was the NFL established?	China Youth Media	0.6464298577097924	Derivation(When was the NFL established?,China Youth Media,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be live on,false,299.0,1254.0,5.0,0.6492156386375427),QueryState($x: (the NFL, be live on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be live on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is streamed live on, r0.id: reverb-70496668, r0.namespace: reverb, r0.arg2_exact: China Youth Media, r0.arg2: China Youth Media, r0.rel: is streamed live on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.915, r0.arg1_exact: The NFL),$x: (the NFL, be live on, $x))),AnswerState(China Youth Media))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6492156386375427, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6464298577097924)
When was the NFL established?	major national networks	0.6302795289602257	Derivation(When was the NFL established?,major national networks,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be see on,false,299.0,1570.0,3.0,0.62622931599617),QueryState($x: (the NFL, be see on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be see on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: can be seen on, r0.id: reverb-130920514, r0.namespace: reverb, r0.arg2_exact: major national networks, r0.arg2: major national networks, r0.rel: can be seen on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.916, r0.arg1_exact: the NFL),$x: (the NFL, be see on, $x))),AnswerState(major national networks))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'when' and answer shape = aaaa aaaa aaaa -> 1.0, relSynRule pmi -> 0.62622931599617, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6302795289602257)
When was the NFL established?	talent	0.6155386029639631	Derivation(When was the NFL established?,talent,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be close in,false,23214.0,1728.0,131.0,0.6052489578723907),QueryState($x: (the NFL, be close in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be close in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is so close in, r0.id: reverb-321801006, r0.namespace: reverb, r0.arg2_exact: talent, r0.arg2: talent, r0.rel: is so close in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.781, r0.arg1_exact: The NFL),$x: (the NFL, be close in, $x))),AnswerState(talent))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6052489578723907, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.6155386029639631)
When was the NFL established?	the web.	0.5660832577301669	Derivation(When was the NFL established?,the web.,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,found on,false,299.0,968.0,6.0,0.663002610206604),QueryState($x: (the NFL, found on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, found on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: found on, r0.id: reverb-155593258, r0.namespace: reverb, r0.arg2_exact: the web., r0.arg2_fbid_s: 0828v, r0.arg2: the web., r0.rel: found on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.906, r0.arg1_exact: the NFL),$x: (the NFL, found on, $x))),AnswerState(the web.))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.663002610206604, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa aaa. -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5660832577301669)
When was the NFL established?	the edge	0.5386033922048101	Derivation(When was the NFL established?,the edge,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,will live on,false,299.0,175.0,2.0,0.6821224391460419),QueryState($x: (the NFL, will live on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, will live on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: will live on, r0.id: reverb-292610775, r0.namespace: reverb, r0.arg2_exact: the edge, r0.arg2_fbid_s: 01vswx5, r0.arg2: the edge, r0.rel: will live on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.828, r0.arg1_exact: the NFL),$x: (the NFL, will live on, $x))),AnswerState(the edge))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6821224391460419, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5386033922048101)
When was the NFL established?	Canton	0.5163430748660556	Derivation(When was the NFL established?,Canton,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be form in,false,23214.0,9624.0,1388.0,0.6253466606140137),QueryState($x: (the NFL, be form in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be form in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: was formed in, r0.id: reverb-341158556, r0.namespace: reverb, r0.arg2_exact: Canton, r0.arg2: Canton, r0.rel: was formed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.984, r0.arg1_exact: The NFL),$x: (the NFL, be form in, $x))),AnswerState(Canton))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6253466606140137, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5163430748660556)
When was the NFL established?	1966	0.48375255029551134	Derivation(When was the NFL established?,1966,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,be agree in,false,8312.0,124.0,5.0,0.6176156401634216),QueryState($x: (the NFL, be agree in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be agree in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the 1970 AFL-NFL Merger, r0.rel_exact: had actually been agreed to in, r0.id: reverb-176258945, r0.namespace: reverb, r0.arg2_exact: 1966, r0.arg2: 1966, r0.rel: had actually been agreed to in, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.558, r0.arg1_exact: the 1970 AFL-NFL Merger),$x: (the NFL, be agree in, $x))),AnswerState(1966))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6176156401634216, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.2, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.48375255029551134)
When was the NFL established?	Thursday	0.46564041748406293	Derivation(When was the NFL established?,Thursday,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL Draft, r0.rel_exact: is scheduled to begin on, r0.id: reverb-158175328, r0.namespace: reverb, r0.arg2_exact: Thursday, r0.arg2: Thursday, r0.rel: is scheduled to begin on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.99, r0.arg1_exact: The NFL Draft),$x: (the NFL, be to be on, $x))),AnswerState(Thursday))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.46564041748406293)
When was the NFL established?	the equivalent	0.4594970871742432	Derivation(When was the NFL established?,the equivalent,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have to come to,false,299.0,337.0,3.0,0.6743151843547821),QueryState($x: (the NFL, have to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has come to issuing, r0.id: reverb-302799691, r0.namespace: reverb, r0.arg2_exact: the equivalent, r0.arg2: the equivalent, r0.rel: has come to issuing, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.672, r0.arg1_exact: the NFL),$x: (the NFL, have to come to, $x))),AnswerState(the equivalent))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6743151843547821, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4594970871742432)
When was the NFL established?	the process	0.4163764697185637	Derivation(When was the NFL established?,the process,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,shut down in,false,8312.0,144.0,5.0,0.6129427850246429),QueryState($x: (the NFL, shut down in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, shut down in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: were shut down in, r0.id: reverb-45877974, r0.namespace: reverb, r0.arg2_exact: the process, r0.arg2: the process, r0.rel: were shut down in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.85, r0.arg1_exact: the NFL),$x: (the NFL, shut down in, $x))),AnswerState(the process))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6129427850246429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.4163764697185637)
When was the NFL established?	April 15	0.3470461869724737	Derivation(When was the NFL established?,April 15,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the 2008 NFL regular-season schedule, r0.rel_exact: is coming out on, r0.id: reverb-188088625, r0.namespace: reverb, r0.arg2_exact: April 15, r0.arg2_fbid_s: 0lnk, r0.arg2: April 15, r0.rel: is coming out on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.973, r0.arg1_exact: the 2008 NFL regular-season schedule),$x: (the NFL, be come on, $x))),AnswerState(April 15))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.4, question prefix = 'when' and answer shape = Aaaaa 11 -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3470461869724737)
When was the NFL established?	the campus	0.3175910425995605	Derivation(When was the NFL established?,the campus,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: was supposed to come from, r0.id: reverb-144119256, r0.namespace: reverb, r0.arg2_exact: the campus, r0.arg2: the campus, r0.rel: was supposed to come from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.792, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(the campus))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3175910425995605)
When was the NFL established?	churches	0.283149824176002	Derivation(When was the NFL established?,churches,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is actually coming down on, r0.id: reverb-19121357, r0.namespace: reverb, r0.arg2_exact: churches, r0.arg2: churches, r0.rel: is actually coming down on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.672, r0.arg1_exact: the NFL),$x: (the NFL, be come on, $x))),AnswerState(churches))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.283149824176002)
When was the NFL established?	the New Orleans Saints	0.283149824176002	Derivation(When was the NFL established?,the New Orleans Saints,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is coming down hard on, r0.id: reverb-205793892, r0.namespace: reverb, r0.arg2_exact: the New Orleans Saints, r0.arg2: the New Orleans Saints, r0.rel: is coming down hard on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.889, r0.arg1_exact: the NFL),$x: (the NFL, be come on, $x))),AnswerState(the New Orleans Saints))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa Aaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.283149824176002)
When was the NFL established?	eligibility	0.2768553725841114	Derivation(When was the NFL established?,eligibility,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,rule on,false,299.0,933.0,3.0,0.6424926221370697),QueryState($x: (the NFL, rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has rules on, r0.id: reverb-40661682, r0.namespace: reverb, r0.arg2_exact: eligibility, r0.arg2: eligibility, r0.rel: has rules on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.886, r0.arg1_exact: the NFL),$x: (the NFL, rule on, $x))),AnswerState(eligibility))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6424926221370697, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.2768553725841114)
When was the NFL established?	defensive coordinator Gregg Williams	0.2768553725841114	Derivation(When was the NFL established?,defensive coordinator Gregg Williams,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,rule on,false,299.0,933.0,3.0,0.6424926221370697),QueryState($x: (the NFL, rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: might rule on, r0.id: reverb-15921167, r0.namespace: reverb, r0.arg2_exact: defensive coordinator Gregg Williams, r0.arg2: defensive coordinator Gregg Williams, r0.rel: might rule on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.766, r0.arg1_exact: the NFL),$x: (the NFL, rule on, $x))),AnswerState(defensive coordinator Gregg Williams))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6424926221370697, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaaa aaaa Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.2768553725841114)
When was the NFL established?	a disparate relationship	0.2625751069470006	Derivation(When was the NFL established?,a disparate relationship,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be found in,false,23214.0,32270.0,3718.0,0.6183292865753174),QueryState($x: (the NFL, be found in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be found in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: were found to be involved in, r0.id: reverb-133845889, r0.namespace: reverb, r0.arg2_exact: a disparate relationship, r0.arg2: a disparate relationship, r0.rel: were found to be involved in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.679, r0.arg1_exact: the NFL),$x: (the NFL, be found in, $x))),AnswerState(a disparate relationship))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6183292865753174, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = a aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.2625751069470006)
When was the NFL established?	schedule	0.24651872332093783	Derivation(When was the NFL established?,schedule,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,will continue on,false,299.0,472.0,3.0,0.6637871861457825),QueryState($x: (the NFL, will continue on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, will continue on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL season, r0.rel_exact: will continue on, r0.id: reverb-362681150, r0.namespace: reverb, r0.arg2_exact: schedule, r0.arg2: schedule, r0.rel: will continue on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.825, r0.arg1_exact: the NFL season),$x: (the NFL, will continue on, $x))),AnswerState(schedule))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6637871861457825, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.24651872332093783)
When was the NFL established?	the 22	0.10700818019297609	Derivation(When was the NFL established?,the 22,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,to rule on,false,299.0,217.0,3.0,0.6880709826946259),QueryState($x: (the NFL, to rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, to rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: has yet to rule on, r0.id: reverb-337221816, r0.namespace: reverb, r0.arg2_exact: the 22, r0.arg2: the 22, r0.rel: has yet to rule on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.694, r0.arg1_exact: The NFL),$x: (the NFL, to rule on, $x))),AnswerState(the 22))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6880709826946259, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = aaa 11 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.10700818019297609)
When was the NFL established?	Kezar Stadium	0.10506205472713326	Derivation(When was the NFL established?,Kezar Stadium,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be go from,false,299.0,843.0,2.0,0.632991760969162),QueryState($x: (the NFL, be go from, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be go from, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: was gone forever from, r0.id: reverb-318750088, r0.namespace: reverb, r0.arg2_exact: Kezar Stadium, r0.arg2_fbid_s: 02z0qh, r0.arg2: Kezar Stadium, r0.rel: was gone forever from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.954, r0.arg1_exact: the NFL),$x: (the NFL, be go from, $x))),AnswerState(Kezar Stadium))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.632991760969162, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = Aaaaa Aaaaa -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.10506205472713326)
When was the NFL established?	the eventual replacement	0.06957801821682974	Derivation(When was the NFL established?,the eventual replacement,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the 1986 NFL Draft, r0.rel_exact: came to be, r0.id: reverb-211713827, r0.namespace: reverb, r0.arg2_exact: the eventual replacement, r0.arg2: the eventual replacement, r0.rel: came to be, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.611, r0.arg1_exact: the 1986 NFL Draft),$x: (the NFL, be to come to, $x))),AnswerState(the eventual replacement))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),0.06957801821682974)
When was the NFL established?	the line	0.06957801821682974	Derivation(When was the NFL established?,the line,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL RedZone Channel, r0.rel_exact: is coming to, r0.id: reverb-164894375, r0.namespace: reverb, r0.arg2_exact: the line, r0.arg2: the line, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.805, r0.arg1_exact: the NFL RedZone Channel),$x: (the NFL, be to come to, $x))),AnswerState(the line))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06957801821682974)
When was the NFL established?	a drastic close	0.06957801821682974	Derivation(When was the NFL established?,a drastic close,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL football season, r0.rel_exact: is coming to, r0.id: reverb-23466567, r0.namespace: reverb, r0.arg2_exact: a drastic close, r0.arg2: a drastic close, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.862, r0.arg1_exact: the NFL football season),$x: (the NFL, be to come to, $x))),AnswerState(a drastic close))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = a aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06957801821682974)
When was the NFL established?	board	0.06206235370869795	Derivation(When was the NFL established?,board,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is reportedly ready to get on, r0.id: reverb-304345390, r0.namespace: reverb, r0.arg2_exact: board, r0.arg2: board, r0.rel: is reportedly ready to get on, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.786, r0.arg1_exact: the NFL),$x: (the NFL, be to be on, $x))),AnswerState(board))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06206235370869795)
When was the NFL established?	the facility	0.06206235370869795	Derivation(When was the NFL established?,the facility,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: would be expected to pay on, r0.id: reverb-33893855, r0.namespace: reverb, r0.arg2_exact: the facility, r0.arg2: the facility, r0.rel: would be expected to pay on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.847, r0.arg1_exact: the NFL),$x: (the NFL, be to be on, $x))),AnswerState(the facility))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06206235370869795)
When was the NFL established?	the players	0.04171394833929476	Derivation(When was the NFL established?,the players,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has been coming down hard on, r0.id: reverb-109982162, r0.namespace: reverb, r0.arg2_exact: the players, r0.arg2: the players, r0.rel: has been coming down hard on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.967, r0.arg1_exact: the NFL),$x: (the NFL, be come on, $x))),AnswerState(the players))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.04171394833929476)
When was the NFL established?	Hoboken	0.036459752442998816	Derivation(When was the NFL established?,Hoboken,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is coming to, r0.id: reverb-202280183, r0.namespace: reverb, r0.arg2_exact: Hoboken, r0.arg2_fbid_s: 0xn7b, r0.arg2: Hoboken, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.852, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(Hoboken))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.036459752442998816)
When was the NFL established?	London	0.036459752442998816	Derivation(When was the NFL established?,London,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is coming to, r0.id: reverb-198283178, r0.namespace: reverb, r0.arg2_exact: London, r0.arg2_fbid_s: 04jpl, r0.arg2: London, r0.rel: is coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.815, r0.arg1_exact: The NFL),$x: (the NFL, be to come to, $x))),AnswerState(London))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.036459752442998816)
When was the NFL established?	a trade	0.012280307059800322	Derivation(When was the NFL established?,a trade,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,be acquire in,false,8312.0,1022.0,38.0,0.6150816977024078),QueryState($x: (the NFL, be acquire in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be acquire in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the 2000 NFL Draft, r0.rel_exact: was acquired in, r0.id: reverb-223335529, r0.namespace: reverb, r0.arg2_exact: a trade, r0.arg2: a trade, r0.rel: was acquired in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.736, r0.arg1_exact: the 2000 NFL Draft),$x: (the NFL, be acquire in, $x))),AnswerState(a trade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6150816977024078, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.012280307059800322)
When was the NFL established?	the Saints	-0.06878737717759487	Derivation(When was the NFL established?,the Saints,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,to come on,false,299.0,926.0,3.0,0.6427279412746429),QueryState($x: (the NFL, to come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, to come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: needs to come down hard on, r0.id: reverb-155284615, r0.namespace: reverb, r0.arg2_exact: the Saints, r0.arg2_fbid_s: 01k2l42, r0.arg2: the Saints, r0.rel: needs to come down hard on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.772, r0.arg1_exact: the NFL),$x: (the NFL, to come on, $x))),AnswerState(the Saints))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6427279412746429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.06878737717759487)
When was the NFL established?	slam dunks	-0.09434945334430411	Derivation(When was the NFL established?,slam dunks,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have to come to,false,299.0,337.0,3.0,0.6743151843547821),QueryState($x: (the NFL, have to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has come to, r0.id: reverb-55247873, r0.namespace: reverb, r0.arg2_exact: slam dunks, r0.arg2_fbid_s: 012xhn, r0.arg2: slam dunks, r0.rel: has come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.701, r0.arg1_exact: the NFL),$x: (the NFL, have to come to, $x))),AnswerState(slam dunks))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6743151843547821, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.09434945334430411)
When was the NFL established?	fines	-0.09629903026336617	Derivation(When was the NFL established?,fines,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is going to come down hard with, r0.id: reverb-223222340, r0.namespace: reverb, r0.arg2_exact: fines, r0.arg2: fines, r0.rel: is going to come down hard with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.692, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(fines))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.42857142857142855, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.09629903026336617)
When was the NFL established?	New York City	-0.10555376612384526	Derivation(When was the NFL established?,New York City,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,set up in,false,8312.0,2037.0,102.0,0.6243838667869568),QueryState($x: (the NFL, set up in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, set up in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: set up shop in, r0.id: reverb-16572358, r0.namespace: reverb, r0.arg2_exact: New York City, r0.arg2_fbid_s: 02_286, r0.arg2: New York City, r0.rel: set up shop in, r0.corpora_ss: List(cw), r0.num_extrs_i: 27, r0.conf_f: 0.87, r0.arg1_exact: the NFL),$x: (the NFL, set up in, $x))),AnswerState(New York City))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6243838667869568, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = Aaa Aaaa Aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.10555376612384526)
When was the NFL established?	the start	-0.11044495887422645	Derivation(When was the NFL established?,the start,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be create in,false,23214.0,13361.0,1566.0,0.6188648045063019),QueryState($x: (the NFL, be create in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be create in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Lines, r0.rel_exact: are created in, r0.id: reverb-12869373, r0.namespace: reverb, r0.arg2_exact: the start, r0.arg2_fbid_s: 0b1fjk, r0.arg2: the start, r0.rel: are created in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.823, r0.arg1_exact: the NFL Lines),$x: (the NFL, be create in, $x))),AnswerState(the start))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6188648045063019, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.11044495887422645)
When was the NFL established?	lower bank rates	-0.11770446119362221	Derivation(When was the NFL established?,lower bank rates,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,found on,false,299.0,968.0,6.0,0.663002610206604),QueryState($x: (the NFL, found on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, found on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL cycling tops, r0.rel_exact: found on, r0.id: reverb-192512952, r0.namespace: reverb, r0.arg2_exact: lower bank rates, r0.arg2: lower bank rates, r0.rel: found on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.909, r0.arg1_exact: the NFL cycling tops),$x: (the NFL, found on, $x))),AnswerState(lower bank rates))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'when' and answer shape = aaaa aaaa aaaa -> 1.0, relSynRule pmi -> 0.663002610206604, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.11770446119362221)
When was the NFL established?	the fly	-0.1255377538103999	Derivation(When was the NFL established?,the fly,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,rule on,false,299.0,933.0,3.0,0.6424926221370697),QueryState($x: (the NFL, rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: changed the rules on, r0.id: reverb-74712888, r0.namespace: reverb, r0.arg2_exact: the fly, r0.arg2: the fly, r0.rel: changed the rules on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: The NFL),$x: (the NFL, rule on, $x))),AnswerState(the fly))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6424926221370697, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1255377538103999)
When was the NFL established?	social media and allowed players	-0.1255377538103999	Derivation(When was the NFL established?,social media and allowed players,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,rule on,false,299.0,933.0,3.0,0.6424926221370697),QueryState($x: (the NFL, rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: relaxed its rules on, r0.id: reverb-264515764, r0.namespace: reverb, r0.arg2_exact: social media and allowed players, r0.arg2: social media and allowed players, r0.rel: relaxed its rules on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.511, r0.arg1_exact: The NFL),$x: (the NFL, rule on, $x))),AnswerState(social media and allowed players))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6424926221370697, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aaaa aaaa aaa aaaa aaaa -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1255377538103999)
When was the NFL established?	Hugh Culverhouse	-0.13192880240060534	Derivation(When was the NFL established?,Hugh Culverhouse,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,found in,false,8312.0,12767.0,853.0,0.6333964169025421),QueryState($x: (the NFL, found in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, found in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: found a replacement in, r0.id: reverb-102839739, r0.namespace: reverb, r0.arg2_exact: Hugh Culverhouse, r0.arg2: Hugh Culverhouse, r0.rel: found a replacement in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.954, r0.arg1_exact: the NFL),$x: (the NFL, found in, $x))),AnswerState(Hugh Culverhouse))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6333964169025421, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = Aaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.13192880240060534)
When was the NFL established?	the NFL	-0.14351897518590695	Derivation(When was the NFL established?,the NFL,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Network, r0.rel_exact: is to report on, r0.id: reverb-33179681, r0.namespace: reverb, r0.arg2_exact: the NFL, r0.arg2: the NFL, r0.rel: is to report on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.764, r0.arg1_exact: the NFL Network),$x: (the NFL, be to be on, $x))),AnswerState(the NFL))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, question prefix = 'when' and answer shape = aaa AAA -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.14351897518590695)
When was the NFL established?	three	-0.14606973394600375	Derivation(When was the NFL established?,three,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,agree in,false,8312.0,399.0,14.0,0.6132700145244598),QueryState($x: (the NFL, agree in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, agree in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: agreed to take in, r0.id: reverb-237925807, r0.namespace: reverb, r0.arg2_exact: three, r0.arg2: three, r0.rel: agreed to take in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.62, r0.arg1_exact: the NFL),$x: (the NFL, agree in, $x))),AnswerState(three))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6132700145244598, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.14606973394600375)
When was the NFL established?	an agreement	-0.1506697509635484	Derivation(When was the NFL established?,an agreement,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have to come to,false,299.0,337.0,3.0,0.6743151843547821),QueryState($x: (the NFL, have to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Players Association, r0.rel_exact: have come to, r0.id: reverb-313418128, r0.namespace: reverb, r0.arg2_exact: an agreement, r0.arg2: an agreement, r0.rel: have come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.673, r0.arg1_exact: the NFL Players Association),$x: (the NFL, have to come to, $x))),AnswerState(an agreement))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6743151843547821, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = aa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1506697509635484)
When was the NFL established?	multiple networks and platforms	-0.1788914895261473	Derivation(When was the NFL established?,multiple networks and platforms,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be see on,false,299.0,1570.0,3.0,0.62622931599617),QueryState($x: (the NFL, be see on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be see on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL draft, r0.rel_exact: can be seen on, r0.id: reverb-207712478, r0.namespace: reverb, r0.arg2_exact: multiple networks and platforms, r0.arg2: multiple networks and platforms, r0.rel: can be seen on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.759, r0.arg1_exact: the NFL draft),$x: (the NFL, be see on, $x))),AnswerState(multiple networks and platforms))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.62622931599617, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'when' and answer shape = aaaa aaaa aaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1788914895261473)
When was the NFL established?	Connecticut	-0.19426182927062552	Derivation(When was the NFL established?,Connecticut,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,would return to,false,299.0,543.0,3.0,0.6594080924987793),QueryState($x: (the NFL, would return to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, would return to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: would return to, r0.id: reverb-257451974, r0.namespace: reverb, r0.arg2_exact: Connecticut, r0.arg2_fbid_s: 01x73, r0.arg2: Connecticut, r0.rel: would return to, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.819, r0.arg1_exact: The NFL),$x: (the NFL, would return to, $x))),AnswerState(Connecticut))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6594080924987793, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.19426182927062552)
When was the NFL established?	the bandwagon	-0.22647057926036496	Derivation(When was the NFL established?,the bandwagon,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: is yet to jump on, r0.id: reverb-342107942, r0.namespace: reverb, r0.arg2_exact: the bandwagon, r0.arg2_fbid_s: 0jq14, r0.arg2: the bandwagon, r0.rel: is yet to jump on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.93, r0.arg1_exact: The NFL),$x: (the NFL, be to be on, $x))),AnswerState(the bandwagon))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.22647057926036496)
When was the NFL established?	the ?vibrate? function	-0.23973249108718608	Derivation(When was the NFL established?,the ?vibrate? function,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: is n?t up to speed just yet on, r0.id: reverb-88623463, r0.namespace: reverb, r0.arg2_exact: the ?vibrate? function, r0.arg2: the ?vibrate? function, r0.rel: is n?t up to speed just yet on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.93, r0.arg1_exact: the NFL),$x: (the NFL, be to be on, $x))),AnswerState(the ?vibrate? function))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, question prefix = 'when' and answer shape = aaa ?aaaa? aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.23973249108718608)
When was the NFL established?	April	-0.305764267158414	Derivation(When was the NFL established?,April,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL Draft, r0.rel_exact: is scheduled to take place on, r0.id: reverb-346483574, r0.namespace: reverb, r0.arg2_exact: April, r0.arg2_fbid_s: 0lkm, r0.arg2: April, r0.rel: is scheduled to take place on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.97, r0.arg1_exact: The NFL Draft),$x: (the NFL, be to be on, $x))),AnswerState(April))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.305764267158414)
When was the NFL established?	Times Square	-0.3111350950184497	Derivation(When was the NFL established?,Times Square,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,set up in,false,8312.0,2037.0,102.0,0.6243838667869568),QueryState($x: (the NFL, set up in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, set up in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Shop, r0.rel_exact: set up in, r0.id: reverb-381946082, r0.namespace: reverb, r0.arg2_exact: Times Square, r0.arg2_fbid_s: 07qdr, r0.arg2: Times Square, r0.rel: set up in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.866, r0.arg1_exact: the NFL Shop),$x: (the NFL, set up in, $x))),AnswerState(Times Square))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6243838667869568, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, question prefix = 'when' and answer shape = Aaaaa Aaaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3111350950184497)
When was the NFL established?	SNL	-0.3140619263285074	Derivation(When was the NFL established?,SNL,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have appear on,false,299.0,1903.0,3.0,0.6202181875705719),QueryState($x: (the NFL, have appear on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have appear on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL veterans, r0.rel_exact: have appeared on, r0.id: reverb-244155508, r0.namespace: reverb, r0.arg2_exact: SNL, r0.arg2_fbid_s: 039cq4, r0.arg2: SNL, r0.rel: have appeared on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.889, r0.arg1_exact: the NFL veterans),$x: (the NFL, have appear on, $x))),AnswerState(SNL))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6202181875705719, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = AAA -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3140619263285074)
When was the NFL established?	scope	-0.35003135596398405	Derivation(When was the NFL established?,scope,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,institute in,false,8312.0,181.0,35.0,0.6666060984134674),QueryState($x: (the NFL, institute in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, institute in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: instituted a policy similar in, r0.id: reverb-156412396, r0.namespace: reverb, r0.arg2_exact: scope, r0.arg2: scope, r0.rel: instituted a policy similar in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.85, r0.arg1_exact: the NFL),$x: (the NFL, institute in, $x))),AnswerState(scope))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6666060984134674, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.35003135596398405)
When was the NFL established?	the vagaries	-0.37336467823731256	Derivation(When was the NFL established?,the vagaries,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,found in,false,8312.0,12767.0,853.0,0.6333964169025421),QueryState($x: (the NFL, found in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, found in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: has found a spot in, r0.id: reverb-74285092, r0.namespace: reverb, r0.arg2_exact: the vagaries, r0.arg2: the vagaries, r0.rel: has found a spot in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.66, r0.arg1_exact: the NFL),$x: (the NFL, found in, $x))),AnswerState(the vagaries))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6333964169025421, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.37336467823731256)
When was the NFL established?	foolish town	-0.37355166302490694	Derivation(When was the NFL established?,foolish town,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have to come to,false,299.0,337.0,3.0,0.6743151843547821),QueryState($x: (the NFL, have to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL draft, r0.rel_exact: has come to, r0.id: reverb-84324851, r0.namespace: reverb, r0.arg2_exact: foolish town, r0.arg2: foolish town, r0.rel: has come to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.967, r0.arg1_exact: The NFL draft),$x: (the NFL, have to come to, $x))),AnswerState(foolish town))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6743151843547821, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.37355166302490694)
When was the NFL established?	a few months time	-0.38844564643325397	Derivation(When was the NFL established?,a few months time,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established in, $x),false),RelSynRule(establish in,start up in,false,8312.0,189.0,8.0,0.6191324591636658),QueryState($x: (the NFL, start up in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, start up in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL season, r0.rel_exact: starts up again in, r0.id: reverb-140888136, r0.namespace: reverb, r0.arg2_exact: a few months time, r0.arg2: a few months time, r0.rel: starts up again in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.86, r0.arg1_exact: The NFL season),$x: (the NFL, start up in, $x))),AnswerState(a few months time))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6191324591636658, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'when' and answer shape = a aaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.38844564643325397)
When was the NFL established?	Washington	-0.3993149420980606	Derivation(When was the NFL established?,Washington,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to come to,false,299.0,110.0,2.0,0.6966319680213928),QueryState($x: (the NFL, be to come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: were thinking of coming to, r0.id: reverb-197645711, r0.namespace: reverb, r0.arg2_exact: Washington, r0.arg2: Washington, r0.rel: were thinking of coming to, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.564, r0.arg1_exact: the NFL),$x: (the NFL, be to come to, $x))),AnswerState(Washington))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6966319680213928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3993149420980606)
When was the NFL established?	the final week	-0.41015359854675437	Derivation(When was the NFL established?,the final week,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,have come down to,false,299.0,113.0,2.0,0.6957911252975464),QueryState($x: (the NFL, have come down to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, have come down to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL Pro Picks Championship, r0.rel_exact: has come down to, r0.id: reverb-251281170, r0.namespace: reverb, r0.arg2_exact: the final week, r0.arg2: the final week, r0.rel: has come down to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.719, r0.arg1_exact: The NFL Pro Picks Championship),$x: (the NFL, have come down to, $x))),AnswerState(the final week))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6957911252975464, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),-0.41015359854675437)
When was the NFL established?	TV	-0.4679064550970722	Derivation(When was the NFL established?,TV,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: were my things to watch on, r0.id: reverb-97553816, r0.namespace: reverb, r0.arg2_exact: TV, r0.arg2_fbid_s: 07c52, r0.arg2: TV, r0.rel: were my things to watch on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.905, r0.arg1_exact: the NFL),$x: (the NFL, be to be on, $x))),AnswerState(TV))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = AA -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4679064550970722)
When was the NFL established?	Sept. 8	-0.505672788940968	Derivation(When was the NFL established?,Sept. 8,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be to be on,false,299.0,209.0,2.0,0.6765740513801575),QueryState($x: (the NFL, be to be on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be to be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL season, r0.rel_exact: is scheduled to begin on, r0.id: reverb-326304834, r0.namespace: reverb, r0.arg2_exact: Sept. 8, r0.arg2: Sept. 8, r0.rel: is scheduled to begin on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.93, r0.arg1_exact: The NFL season),$x: (the NFL, be to be on, $x))),AnswerState(Sept. 8))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6765740513801575, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = Aaaa. 1 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.505672788940968)
When was the NFL established?	the erstwhile	-0.5179052047394599	Derivation(When was the NFL established?,the erstwhile,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,found on,false,299.0,968.0,6.0,0.663002610206604),QueryState($x: (the NFL, found on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, found on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL picks, r0.rel_exact: made found on, r0.id: reverb-370201327, r0.namespace: reverb, r0.arg2_exact: the erstwhile, r0.arg2: the erstwhile, r0.rel: made found on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.514, r0.arg1_exact: the NFL picks),$x: (the NFL, found on, $x))),AnswerState(the erstwhile))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.663002610206604, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5179052047394599)
When was the NFL established?	large LED screens	-0.5248949745316416	Derivation(When was the NFL established?,large LED screens,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be live on,false,299.0,1254.0,5.0,0.6492156386375427),QueryState($x: (the NFL, be live on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be live on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL draft, r0.rel_exact: will be shown live on, r0.id: reverb-66967809, r0.namespace: reverb, r0.arg2_exact: large LED screens, r0.arg2: large LED screens, r0.rel: will be shown live on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.909, r0.arg1_exact: the NFL draft),$x: (the NFL, be live on, $x))),AnswerState(large LED screens))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6492156386375427, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = aaaa AAA aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5248949745316416)
When was the NFL established?	the day	-0.5351975455412201	Derivation(When was the NFL established?,the day,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be start in,false,23214.0,4049.0,784.0,0.6345522701740265),QueryState($x: (the NFL, be start in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be start in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL playoffs, r0.rel_exact: would be starting later in, r0.id: reverb-242473597, r0.namespace: reverb, r0.arg2_exact: the day, r0.arg2: the day, r0.rel: would be starting later in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8, r0.arg1_exact: The NFL playoffs),$x: (the NFL, be start in, $x))),AnswerState(the day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6345522701740265, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = aaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5351975455412201)
When was the NFL established?	10 minutes	-0.560673827066505	Derivation(When was the NFL established?,10 minutes,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,close in,false,23214.0,4500.0,377.0,0.608371913433075),QueryState($x: (the NFL, close in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, close in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the art retractable roof NFL stadium, r0.rel_exact: closes in, r0.id: reverb-337235523, r0.namespace: reverb, r0.arg2_exact: 10 minutes, r0.arg2: 10 minutes, r0.rel: closes in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.708, r0.arg1_exact: the art retractable roof NFL stadium),$x: (the NFL, close in, $x))),AnswerState(10 minutes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.608371913433075, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, question prefix = 'when' and answer shape = 11 aaaa -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.560673827066505)
When was the NFL established?	strong	-0.5684528897984966	Derivation(When was the NFL established?,strong,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be come on,false,299.0,792.0,3.0,0.6476127207279205),QueryState($x: (the NFL, be come on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be come on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL Mock Drafts, r0.rel_exact: are coming on pretty, r0.id: reverb-184918289, r0.namespace: reverb, r0.arg2_exact: strong, r0.arg2: strong, r0.rel: are coming on pretty, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.604, r0.arg1_exact: The NFL Mock Drafts),$x: (the NFL, be come on, $x))),AnswerState(strong))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6476127207279205, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5684528897984966)
When was the NFL established?	downtown Indianapolis	-0.598305848849465	Derivation(When was the NFL established?,downtown Indianapolis,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (the NFL, was established in, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, was established in, $x),false),RelSynRule(be establish in,be open in,false,23214.0,4781.0,361.0,0.6051238179206848),QueryState($x: (the NFL, be open in, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be open in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL Ticket Exchange, r0.rel_exact: will be open in, r0.id: reverb-2628952, r0.namespace: reverb, r0.arg2_exact: downtown Indianapolis, r0.arg2: downtown Indianapolis, r0.rel: will be open in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.766, r0.arg1_exact: the NFL Ticket Exchange),$x: (the NFL, be open in, $x))),AnswerState(downtown Indianapolis))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6051238179206848, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.75, question prefix = 'when' and answer shape = aaaa Aaaaa -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.598305848849465)
When was the NFL established?	samples	-0.65550656261617	Derivation(When was the NFL established?,samples,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,rule on,false,299.0,933.0,3.0,0.6424926221370697),QueryState($x: (the NFL, rule on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, rule on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: delayed a ruling on, r0.id: reverb-382472189, r0.namespace: reverb, r0.arg2_exact: samples, r0.arg2_fbid_s: 0155s6, r0.arg2: samples, r0.rel: delayed a ruling on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.876, r0.arg1_exact: the NFL),$x: (the NFL, rule on, $x))),AnswerState(samples))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6424926221370697, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.65550656261617)
When was the NFL established?	concussions	-0.660714478434087	Derivation(When was the NFL established?,concussions,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,create on,false,299.0,1577.0,4.0,0.6350803375244141),QueryState($x: (the NFL, create on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, create on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The NFL, r0.rel_exact: created a committee on, r0.id: reverb-217032108, r0.namespace: reverb, r0.arg2_exact: concussions, r0.arg2_fbid_s: 023ndx, r0.arg2: concussions, r0.rel: created a committee on, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.937, r0.arg1_exact: The NFL),$x: (the NFL, create on, $x))),AnswerState(concussions))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6350803375244141, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.660714478434087)
When was the NFL established?	the playoff picture	-0.7033898912426237	Derivation(When was the NFL established?,the playoff picture,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,be go from,false,299.0,843.0,2.0,0.632991760969162),QueryState($x: (the NFL, be go from, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, be go from, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL?s glamour teams, r0.rel_exact: are gone from, r0.id: reverb-107883638, r0.namespace: reverb, r0.arg2_exact: the playoff picture, r0.arg2: the playoff picture, r0.rel: are gone from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.79, r0.arg1_exact: the NFL?s glamour teams),$x: (the NFL, be go from, $x))),AnswerState(the playoff picture))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.632991760969162, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.2, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),-0.7033898912426237)
When was the NFL established?	the Oakland Raiders	-0.7139972859706758	Derivation(When was the NFL established?,the Oakland Raiders,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,do come to,false,299.0,372.0,3.0,0.6712273359298706),QueryState($x: (the NFL, do come to, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, do come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL lockout, r0.rel_exact: finally does come to end, r0.id: reverb-288159811, r0.namespace: reverb, r0.arg2_exact: the Oakland Raiders, r0.arg2: the Oakland Raiders, r0.rel: finally does come to end, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.501, r0.arg1_exact: the NFL lockout),$x: (the NFL, do come to, $x))),AnswerState(the Oakland Raiders))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6712273359298706, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaa Aaaaa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7139972859706758)
When was the NFL established?	individual circumstances	-0.7256572462915256	Derivation(When was the NFL established?,individual circumstances,Vector(QaStep(When was the NFL established?,QuestionStateImpl(When was the NFL established?,Sentence(When was the NFL established?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (the NFL, established on, $x),false)), QaStep(When was the NFL established?,QueryState($x: (the NFL, established on, $x),false),RelSynRule(establish on,involve on,false,299.0,179.0,2.0,0.6814161837100983),QueryState($x: (the NFL, involve on, $x),true)), QaStep(When was the NFL established?,QueryState($x: (the NFL, involve on, $x),true),ExecutionAction(ExecTuple((r0.arg1: the NFL, r0.rel_exact: cannot get involved on, r0.id: reverb-355101536, r0.namespace: reverb, r0.arg2_exact: individual circumstances, r0.arg2: individual circumstances, r0.rel: cannot get involved on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.849, r0.arg1_exact: the NFL),$x: (the NFL, involve on, $x))),AnswerState(individual circumstances))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6814161837100983, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7256572462915256)
What year was the U.S. Mint established?	1792	5.898017079867841	Derivation(What year was the U.S. Mint established?,1792,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1792, r0.rel_exact: is a, r0.id: nell-2455, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.967, r1.arg2: 1792, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The U.S. Mint, r1.rel_exact: was established in, r1.arg2_exact: 1792, r1.num_extrs_i: 10, r1.id: reverb-241322887, r0.arg1_exact: 1792, r1.arg1_exact: The U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the U.S. Mint, established, $x))),AnswerState(1792))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.898017079867841)
What year was the U.S. Mint established?	1837	5.898017079867841	Derivation(What year was the U.S. Mint established?,1837,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1837, r0.rel_exact: is a, r0.id: nell-2684, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.852, r1.arg2: 1837, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the U.S. Mint, r1.rel_exact: was established in, r1.arg2_exact: 1837, r1.num_extrs_i: 2, r1.id: reverb-118881852, r0.arg1_exact: 1837, r1.arg1_exact: the U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the U.S. Mint, established, $x))),AnswerState(1837))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.898017079867841)
What year was the U.S. Mint established?	c 1837	5.0870636170585355	Derivation(What year was the U.S. Mint established?,c 1837,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: c 1837, r0.rel_exact: is a, r0.id: nell-272148, r1.rel: was established in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.852, r1.arg2: 1837, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the U.S. Mint, r1.rel_exact: was established in, r1.arg2_exact: 1837, r1.num_extrs_i: 2, r1.id: reverb-118881852, r0.arg1_exact: c 1837, r1.arg1_exact: the U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the U.S. Mint, established, $x))),AnswerState(c 1837))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what year' and answer shape = a 1111 -> 1.0),5.0870636170585355)
What year was the U.S. Mint established?	congress	2.205783322240017	Derivation(What year was the U.S. Mint established?,congress,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: congress, r0.rel_exact: is a, r0.id: nell-385668, r1.rel: was established by, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.936, r1.arg2: Congress, r1.arg2_fbid_s: 07t31, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: The U.S. Mint, r1.rel_exact: was established by, r1.arg2_exact: Congress, r1.num_extrs_i: 3, r1.id: reverb-106339957, r0.arg1_exact: congress, r1.arg1_exact: The U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (the U.S. Mint, established, $x))),AnswerState(congress))),SparseVector(minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5555555555555556, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.205783322240017)
What year was the U.S. Mint established?	San Francisco	0.07037615180850831	Derivation(What year was the U.S. Mint established?,San Francisco,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is an example of", year) (the U.S. Mint, established, $x),false),ExecutionAction(ExecTuple((r0.arg1: San Francisco, r0.rel_exact: is an example of, r0.id: reverb-121152416, r1.rel: was established in, r0.namespace: reverb, r0.arg2_exact: the 30-year tradition, r1.conf_f: 0.948, r1.arg2: San Francisco, r0.arg2: the 30-year tradition, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the new U.S. Mint, r0.corpora_ss: List(cw), r1.rel_exact: was established in, r0.num_extrs_i: 2, r1.arg2_exact: San Francisco, r1.num_extrs_i: 2, r0.conf_f: 0.73, r1.id: reverb-259287691, r0.arg1_exact: San Francisco, r1.arg1_exact: the new U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, "is an example of", year) (the U.S. Mint, established, $x))),AnswerState(San Francisco))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8333333333333334, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.5, query similarity with question -> 0.45454545454545453, question prefix = 'what year' and answer shape = Aaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.07037615180850831)
What year was the U.S. Mint established?	The congress	-1.8757178513810695	Derivation(What year was the U.S. Mint established?,The congress,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "type", year) (the U.S. Mint, established, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (the U.S. Mint, established, $x),true)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, be a, year) (the U.S. Mint, established, $x),true),ExecutionAction(ExecTuple((r0.arg1: The congress, r0.rel_exact: will be a world leader in, r0.id: reverb-228230123, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: the coming years, r1.conf_f: 0.936, r1.arg2: Congress, r1.arg2_fbid_s: 07t31, r0.arg2: the coming years, r0.rel: will be a world leader in, r1.namespace: reverb, r1.arg1: The U.S. Mint, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 2, r1.arg2_exact: Congress, r1.num_extrs_i: 3, r0.conf_f: 0.61, r1.id: reverb-106339957, r0.arg1_exact: The congress, r1.arg1_exact: The U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (the U.S. Mint, established, $x))),AnswerState(The congress))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.8, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.5555555555555556, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8757178513810695)
What year was the U.S. Mint established?	Congress	-2.1198913371660204	Derivation(What year was the U.S. Mint established?,Congress,Vector(QaStep(What year was the U.S. Mint established?,QuestionStateImpl(What year was the U.S. Mint established?,Sentence(What year was the U.S. Mint established?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, "is a", year) (the U.S. Mint, established, $x),false),RelSynRule(be a,indium,false,1172321.0,106.0,3.0,0.45189613103866577),QueryState($x: ($x, indium, year) (the U.S. Mint, established, $x),true)), QaStep(What year was the U.S. Mint established?,QueryState($x: ($x, indium, year) (the U.S. Mint, established, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07t31, r0.arg1: Congress, r0.rel_exact: has ruled India for, r0.id: reverb-294044008, r1.rel: was established by, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.936, r1.arg2: Congress, r1.arg2_fbid_s: 07t31, r0.arg2: years, r0.rel: has ruled India for, r1.namespace: reverb, r1.arg1: The U.S. Mint, r0.corpora_ss: List(cw), r1.rel_exact: was established by, r0.num_extrs_i: 5, r1.arg2_exact: Congress, r1.num_extrs_i: 3, r0.conf_f: 0.742, r1.id: reverb-106339957, r0.arg1_exact: Congress, r1.arg1_exact: The U.S. Mint, r1.corpora_ss: List(cw)),$x: ($x, indium, year) (the U.S. Mint, established, $x))),AnswerState(Congress))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.45189613103866577, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.1198913371660204)
What is a golden parachute?	the Heck	1.0427134917562377	Derivation(What is a golden parachute?,the Heck,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: the Heck, r0.rel_exact: is, r0.id: reverb-293623256, r0.namespace: reverb, r0.arg2_exact: a Golden Parachute, r0.arg2: a Golden Parachute, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.688, r0.arg1_exact: the Heck),$x: ($x, is, a golden parachute))),AnswerState(the Heck))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = aaa Aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.0427134917562377)
What is a golden parachute?	Conan O?Brien	0.0680616210988243	Derivation(What is a golden parachute?,Conan O?Brien,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: Conan O?Brien, r0.rel_exact: is n?t getting, r0.id: reverb-319446145, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: is n?t getting, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.736, r0.arg1_exact: Conan O?Brien),$x: ($x, is, a golden parachute))),AnswerState(Conan O?Brien))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa A?Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0680616210988243)
What is a golden parachute?	bonus	-0.04247774269520632	Derivation(What is a golden parachute?,bonus,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: bonus, r0.rel_exact: is called, r0.id: reverb-210641174, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: is called, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.817, r0.arg1_exact: bonus),$x: ($x, is, a golden parachute))),AnswerState(bonus))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.04247774269520632)
What is a golden parachute?	No?it	-0.13642351637144334	Derivation(What is a golden parachute?,No?it,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: No?it, r0.rel_exact: will be, r0.id: reverb-258818301, r0.namespace: reverb, r0.arg2_exact: a multiple-six-figure golden parachute, r0.arg2: a multiple-six-figure golden parachute, r0.rel: will be, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.871, r0.arg1_exact: No?it),$x: ($x, is, a golden parachute))),AnswerState(No?it))),SparseVector(question prefix = 'what' and answer shape = Aa?aa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.13642351637144334)
What is a golden parachute?	Zollars	-0.47666986156878743	Derivation(What is a golden parachute?,Zollars,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: Zollars, r0.rel_exact: is all set with, r0.id: reverb-221313850, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: is all set with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.84, r0.arg1_exact: Zollars),$x: ($x, is, a golden parachute))),AnswerState(Zollars))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.47666986156878743)
What is a golden parachute?	the former CEO	-0.5005504746903109	Derivation(What is a golden parachute?,the former CEO,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: the former CEO, r0.rel_exact: is getting, r0.id: reverb-44764292, r0.namespace: reverb, r0.arg2_exact: a $ 20M golden parachute, r0.arg2: a $ 20M golden parachute, r0.rel: is getting, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.701, r0.arg1_exact: the former CEO),$x: ($x, is, a golden parachute))),AnswerState(the former CEO))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6, steps -> 0.5, question prefix = 'what' and answer shape = aaa aaaa AAA -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5005504746903109)
What is a golden parachute?	Stan O'Neal	-0.5005504746903109	Derivation(What is a golden parachute?,Stan O'Neal,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: Stan O'Neal, r0.rel_exact: was given, r0.id: reverb-252496222, r0.namespace: reverb, r0.arg2_exact: a $ 160m golden parachute, r0.arg2: a $ 160m golden parachute, r0.rel: was given, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.88, r0.arg1_exact: Stan O'Neal),$x: ($x, is, a golden parachute))),AnswerState(Stan O'Neal))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaa A'Aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5005504746903109)
What is a golden parachute?	the government	-0.5696539689278441	Derivation(What is a golden parachute?,the government,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: the government, r0.rel_exact: is also guaranteeing, r0.id: reverb-64177769, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: is also guaranteeing, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.513, r0.arg1_exact: the government),$x: ($x, is, a golden parachute))),AnswerState(the government))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5696539689278441)
What is a golden parachute?	the rest	-0.7708505321251	Derivation(What is a golden parachute?,the rest,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: the rest, r0.rel_exact: are going to want, r0.id: reverb-323119733, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: are going to want, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.655, r0.arg1_exact: the rest),$x: ($x, is, a golden parachute))),AnswerState(the rest))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7708505321251)
What is a golden parachute?	Janet Robinson	-1.0542300007857852	Derivation(What is a golden parachute?,Janet Robinson,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: Janet Robinson, r0.rel_exact: was fired with, r0.id: reverb-187018165, r0.namespace: reverb, r0.arg2_exact: a $ 24 million golden parachute, r0.arg2: a $ 24 million golden parachute, r0.rel: was fired with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.794, r0.arg1_exact: Janet Robinson),$x: ($x, is, a golden parachute))),AnswerState(Janet Robinson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0542300007857852)
What is a golden parachute?	Lincoln	-1.2602304893822303	Derivation(What is a golden parachute?,Lincoln,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: Lincoln, r0.rel_exact: was given, r0.id: reverb-215723464, r0.namespace: reverb, r0.arg2_exact: a state-funded $ 50 million golden parachute, r0.arg2: a state-funded $ 50 million golden parachute, r0.rel: was given, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.799, r0.arg1_exact: Lincoln),$x: ($x, is, a golden parachute))),AnswerState(Lincoln))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2602304893822303)
What is a golden parachute?	June 2012?Sammons	-1.457961883950238	Derivation(What is a golden parachute?,June 2012?Sammons,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: June 2012?Sammons, r0.rel_exact: is entitled to, r0.id: reverb-151985715, r0.namespace: reverb, r0.arg2_exact: a golden parachute, r0.arg2: a golden parachute, r0.rel: is entitled to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.835, r0.arg1_exact: June 2012?Sammons),$x: ($x, is, a golden parachute))),AnswerState(June 2012?Sammons))),SparseVector(question prefix = 'what' and isDate -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaa 1111?Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.457961883950238)
What is a golden parachute?	The Seems	-1.8704500569178002	Derivation(What is a golden parachute?,The Seems,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: The Seems, r0.rel_exact: are available for, r0.id: reverb-133560747, r0.namespace: reverb, r0.arg2_exact: a ?Golden Parachute, r0.arg2: a ?Golden Parachute, r0.rel: are available for, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.892, r0.arg1_exact: The Seems),$x: ($x, is, a golden parachute))),AnswerState(The Seems))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = Aaa Aaaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.8704500569178002)
What is a golden parachute?	course	-2.668994978502907	Derivation(What is a golden parachute?,course,Vector(QaStep(What is a golden parachute?,QuestionStateImpl(What is a golden parachute?,Sentence(What is a golden parachute?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, a golden parachute),false)), QaStep(What is a golden parachute?,QueryState($x: ($x, is, a golden parachute),false),ExecutionAction(ExecTuple((r0.arg1: course, r0.rel_exact: is going to have, r0.id: reverb-197804567, r0.namespace: reverb, r0.arg2_exact: a ?Golden Parachute? clause, r0.arg2: a ?Golden Parachute? clause, r0.rel: is going to have, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.774, r0.arg1_exact: course),$x: ($x, is, a golden parachute))),AnswerState(course))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.16666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.668994978502907)
Where was the trial held?	Ancaster	4.01992065888352	Derivation(Where was the trial held?,Ancaster,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: held in, r0.id: reverb-272657950, r0.namespace: reverb, r0.arg2_exact: Ancaster, r0.arg2: Ancaster, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.875, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(Ancaster))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),4.01992065888352)
Where was the trial held?	Sumner	4.01992065888352	Derivation(Where was the trial held?,Sumner,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-259635653, r0.namespace: reverb, r0.arg2_exact: Sumner, r0.arg2: Sumner, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.89, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Sumner))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),4.01992065888352)
Where was the trial held?	Miami	4.01992065888352	Derivation(Where was the trial held?,Miami,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-95441422, r0.namespace: reverb, r0.arg2_exact: Miami, r0.arg2: Miami, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.859, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Miami))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),4.01992065888352)
Where was the trial held?	Pekanbaru	3.489951850077749	Derivation(Where was the trial held?,Pekanbaru,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-227947777, r0.namespace: reverb, r0.arg2_exact: Pekanbaru, r0.arg2_fbid_s: 03bcrp, r0.arg2: Pekanbaru, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.726, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Pekanbaru))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Nuremberg	3.489951850077749	Derivation(Where was the trial held?,Nuremberg,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trials, r0.rel_exact: held in, r0.id: reverb-29070806, r0.namespace: reverb, r0.arg2_exact: Nuremberg, r0.arg2_fbid_s: 05bkf, r0.arg2: Nuremberg, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.831, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(Nuremberg))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Manchester	3.489951850077749	Derivation(Where was the trial held?,Manchester,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-299144772, r0.namespace: reverb, r0.arg2_exact: Manchester, r0.arg2_fbid_s: 052bw, r0.arg2: Manchester, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.855, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Manchester))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Minsk	3.489951850077749	Derivation(Where was the trial held?,Minsk,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-319589372, r0.namespace: reverb, r0.arg2_exact: Minsk, r0.arg2_fbid_s: 0dlxj, r0.arg2: Minsk, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.822, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Minsk))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Gloucestershire	3.489951850077749	Derivation(Where was the trial held?,Gloucestershire,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: held in, r0.id: reverb-206034322, r0.namespace: reverb, r0.arg2_exact: Gloucestershire, r0.arg2_fbid_s: 0cv5l, r0.arg2: Gloucestershire, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.85, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(Gloucestershire))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Moscow	3.489951850077749	Derivation(Where was the trial held?,Moscow,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the Trial, r0.rel_exact: held in, r0.id: reverb-160387550, r0.namespace: reverb, r0.arg2_exact: Moscow, r0.arg2_fbid_s: 04swd, r0.arg2: Moscow, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.947, r0.arg1_exact: the Trial),$x: (the trial, held in, $x))),AnswerState(Moscow))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Regina	3.489951850077749	Derivation(Where was the trial held?,Regina,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-107000875, r0.namespace: reverb, r0.arg2_exact: Regina, r0.arg2_fbid_s: 06c7h, r0.arg2: Regina, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.855, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Regina))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where was the trial held?	Marshall	3.2151344060944957	Derivation(Where was the trial held?,Marshall,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-53746547, r0.namespace: reverb, r0.arg2_exact: Marshall, r0.arg2: Marshall, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.986, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Marshall))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.2151344060944957)
Where was the trial held?	Dayton	3.2151344060944957	Derivation(Where was the trial held?,Dayton,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-274771449, r0.namespace: reverb, r0.arg2_exact: Dayton, r0.arg2: Dayton, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.939, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Dayton))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.2151344060944957)
Where was the trial held?	Danville	3.2151344060944957	Derivation(Where was the trial held?,Danville,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was held in, r0.id: reverb-294568374, r0.namespace: reverb, r0.arg2_exact: Danville, r0.arg2: Danville, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.647, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Danville))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.2151344060944957)
Where was the trial held?	Fargo	3.2151344060944957	Derivation(Where was the trial held?,Fargo,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-317359532, r0.namespace: reverb, r0.arg2_exact: Fargo, r0.arg2: Fargo, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.939, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Fargo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.2151344060944957)
Where was the trial held?	Corpus Christi	3.2077532876552537	Derivation(Where was the trial held?,Corpus Christi,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-296822180, r0.namespace: reverb, r0.arg2_exact: Corpus Christi, r0.arg2: Corpus Christi, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.841, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Corpus Christi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.2077532876552537)
Where was the trial held?	San Francisco	2.871531834045686	Derivation(Where was the trial held?,San Francisco,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-2116815, r0.namespace: reverb, r0.arg2_exact: San Francisco, r0.arg2: San Francisco, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.79, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(San Francisco))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = Aaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.871531834045686)
Where was the trial held?	Jammu	2.6851655972887256	Derivation(Where was the trial held?,Jammu,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was held in, r0.id: reverb-107574425, r0.namespace: reverb, r0.arg2_exact: Jammu, r0.arg2_fbid_s: 02m3lp, r0.arg2: Jammu, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.542, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Jammu))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.6851655972887256)
Where was the trial held?	Cairo	2.6851655972887256	Derivation(Where was the trial held?,Cairo,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: is being held in, r0.id: reverb-367729362, r0.namespace: reverb, r0.arg2_exact: Cairo, r0.arg2_fbid_s: 01w2v, r0.arg2: Cairo, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.799, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Cairo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.6851655972887256)
Where was the trial held?	Kanawha County	2.6777844788494836	Derivation(Where was the trial held?,Kanawha County,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-256774907, r0.namespace: reverb, r0.arg2_exact: Kanawha County, r0.arg2_fbid_s: 0mlm_, r0.arg2: Kanawha County, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.719, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Kanawha County))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6777844788494836)
Where was the trial held?	a civilian court	2.6614560208884344	Derivation(Where was the trial held?,a civilian court,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-369367216, r0.namespace: reverb, r0.arg2_exact: a civilian court, r0.arg2: a civilian court, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.588, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(a civilian court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = a aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	the District Court	2.6614560208884344	Derivation(Where was the trial held?,the District Court,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-26065922, r0.namespace: reverb, r0.arg2_exact: the District Court, r0.arg2: the District Court, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.822, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(the District Court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	the United States	2.6614560208884344	Derivation(Where was the trial held?,the United States,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: held in, r0.id: reverb-220988311, r0.namespace: reverb, r0.arg2_exact: the United States, r0.arg2: the United States, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.979, r0.arg1_exact: The trials),$x: (the trial, held in, $x))),AnswerState(the United States))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	four-to-five foot barrels	2.6614560208884344	Derivation(Where was the trial held?,four-to-five foot barrels,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the Trials, r0.rel_exact: held in, r0.id: reverb-74124251, r0.namespace: reverb, r0.arg2_exact: four-to-five foot barrels, r0.arg2: four-to-five foot barrels, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.704, r0.arg1_exact: the Trials),$x: (the trial, held in, $x))),AnswerState(four-to-five foot barrels))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aaaa-aa-aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	four-to-five foot Padang barrels	2.6614560208884344	Derivation(Where was the trial held?,four-to-five foot Padang barrels,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the Trials, r0.rel_exact: held in, r0.id: reverb-364749265, r0.namespace: reverb, r0.arg2_exact: four-to-five foot Padang barrels, r0.arg2: four-to-five foot Padang barrels, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.842, r0.arg1_exact: the Trials),$x: (the trial, held in, $x))),AnswerState(four-to-five foot Padang barrels))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaaa-aa-aaaa aaaa Aaaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	a normal courtroom	2.6614560208884344	Derivation(Where was the trial held?,a normal courtroom,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-36478714, r0.namespace: reverb, r0.arg2_exact: a normal courtroom, r0.arg2: a normal courtroom, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(a normal courtroom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = a aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	the high security model jail	2.6614560208884344	Derivation(Where was the trial held?,the high security model jail,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-226236093, r0.namespace: reverb, r0.arg2_exact: the high security model jail, r0.arg2: the high security model jail, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.752, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(the high security model jail))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = aaa aaaa aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	an anti-terrorist court	2.6614560208884344	Derivation(Where was the trial held?,an anti-terrorist court,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-19542733, r0.namespace: reverb, r0.arg2_exact: an anti-terrorist court, r0.arg2: an anti-terrorist court, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.525, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(an anti-terrorist court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aa aaaa-aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where was the trial held?	French	2.5857695562612486	Derivation(Where was the trial held?,French,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was being held in, r0.id: reverb-147467235, r0.namespace: reverb, r0.arg2_exact: French, r0.arg2: French, r0.rel: was being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.952, r0.arg1_exact: the trial),$x: (the trial, be be hold in, $x))),AnswerState(French))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5857695562612486)
Where was the trial held?	Napanee	2.5857695562612486	Derivation(Where was the trial held?,Napanee,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: is being held in, r0.id: reverb-115416577, r0.namespace: reverb, r0.arg2_exact: Napanee, r0.arg2: Napanee, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.926, r0.arg1_exact: the trial),$x: (the trial, be be hold in, $x))),AnswerState(Napanee))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5857695562612486)
Where was the trial held?	Chatsworth	2.5857695562612486	Derivation(Where was the trial held?,Chatsworth,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: is being held in, r0.id: reverb-282730394, r0.namespace: reverb, r0.arg2_exact: Chatsworth, r0.arg2: Chatsworth, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.942, r0.arg1_exact: The trial),$x: (the trial, be be hold in, $x))),AnswerState(Chatsworth))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5857695562612486)
Where was the trial held?	Damanhour	2.5525547887320297	Derivation(Where was the trial held?,Damanhour,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial, r0.rel_exact: held in, r0.id: openie4-4362198, r0.namespace: openie4, r0.arg2_exact: Damanhour, r0.arg2: Damanhour, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90452075, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Damanhour))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.5525547887320297)
Where was the trial held?	August	2.5149120368446747	Derivation(Where was the trial held?,August,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: held in, r0.id: reverb-310394012, r0.namespace: reverb, r0.arg2_exact: August, r0.arg2_fbid_s: 0ll3, r0.arg2: August, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.859, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(August))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and isDate -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.5149120368446747)
Where was the trial held?	Lynchburg	2.5116125564903746	Derivation(Where was the trial held?,Lynchburg,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: will be held in, r0.id: reverb-168754453, r0.namespace: reverb, r0.arg2_exact: Lynchburg, r0.arg2: Lynchburg, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.724, r0.arg1_exact: the trial),$x: (the trial, will be hold in, $x))),AnswerState(Lynchburg))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5116125564903746)
Where was the trial held?	Diyarbakir	2.5116125564903746	Derivation(Where was the trial held?,Diyarbakir,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will be held in, r0.id: reverb-364718237, r0.namespace: reverb, r0.arg2_exact: Diyarbakir, r0.arg2: Diyarbakir, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.913, r0.arg1_exact: The trial),$x: (the trial, will be hold in, $x))),AnswerState(Diyarbakir))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5116125564903746)
Where was the trial held?	Rolla	2.5116125564903746	Derivation(Where was the trial held?,Rolla,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: will be held in, r0.id: reverb-331555457, r0.namespace: reverb, r0.arg2_exact: Rolla, r0.arg2: Rolla, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.858, r0.arg1_exact: the trial),$x: (the trial, will be hold in, $x))),AnswerState(Rolla))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5116125564903746)
Where was the trial held?	Appleton	2.5116125564903746	Derivation(Where was the trial held?,Appleton,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: will be held in, r0.id: reverb-278847207, r0.namespace: reverb, r0.arg2_exact: Appleton, r0.arg2: Appleton, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.51, r0.arg1_exact: the trial),$x: (the trial, will be hold in, $x))),AnswerState(Appleton))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5116125564903746)
Where was the trial held?	Houston	2.5116125564903746	Derivation(Where was the trial held?,Houston,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will be held in, r0.id: reverb-144343818, r0.namespace: reverb, r0.arg2_exact: Houston, r0.arg2: Houston, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.913, r0.arg1_exact: The trials),$x: (the trial, will be hold in, $x))),AnswerState(Houston))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.5116125564903746)
Where was the trial held?	Fort Smith	2.455721812492614	Derivation(Where was the trial held?,Fort Smith,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-306555331, r0.namespace: reverb, r0.arg2_exact: Fort Smith, r0.arg2: Fort Smith, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.957, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Fort Smith))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.455721812492614)
Where was the trial held?	Madison County	2.4029670348662293	Derivation(Where was the trial held?,Madison County,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-43526913, r0.namespace: reverb, r0.arg2_exact: Madison County, r0.arg2: Madison County, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.97, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Madison County))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.4029670348662293)
Where was the trial held?	Somerset County	2.4029670348662293	Derivation(Where was the trial held?,Somerset County,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-321218523, r0.namespace: reverb, r0.arg2_exact: Somerset County, r0.arg2: Somerset County, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.986, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(Somerset County))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.4029670348662293)
Where was the trial held?	Potchefstroom	2.401578621910774	Derivation(Where was the trial held?,Potchefstroom,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial?s, r0.rel_exact: held in, r0.id: reverb-60027597, r0.namespace: reverb, r0.arg2_exact: Potchefstroom, r0.arg2: Potchefstroom, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.822, r0.arg1_exact: the trial?s),$x: (the trial, held in, $x))),AnswerState(Potchefstroom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.401578621910774)
Where was the trial held?	The Hague	2.3415630252399158	Derivation(Where was the trial held?,The Hague,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-34355603, r0.namespace: reverb, r0.arg2_exact: The Hague, r0.arg2_fbid_s: 07g0_, r0.arg2: The Hague, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.879, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(The Hague))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = Aaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3415630252399158)
Where was the trial held?	Johannesburg	2.3365929664138663	Derivation(Where was the trial held?,Johannesburg,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-207021850, r0.namespace: reverb, r0.arg2_exact: Johannesburg, r0.arg2: Johannesburg, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.886, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Johannesburg))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.3365929664138663)
Where was the trial held?	Areyonga	2.3365929664138663	Derivation(Where was the trial held?,Areyonga,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will take place in, r0.id: reverb-224714409, r0.namespace: reverb, r0.arg2_exact: Areyonga, r0.arg2: Areyonga, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.986, r0.arg1_exact: The trials),$x: (the trial, will take place in, $x))),AnswerState(Areyonga))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.3365929664138663)
Where was the trial held?	Phoenix	2.3365929664138663	Derivation(Where was the trial held?,Phoenix,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will take place in, r0.id: reverb-103400132, r0.namespace: reverb, r0.arg2_exact: Phoenix, r0.arg2: Phoenix, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.804, r0.arg1_exact: The trials),$x: (the trial, will take place in, $x))),AnswerState(Phoenix))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.3365929664138663)
Where was the trial held?	Florencia	2.282772470894214	Derivation(Where was the trial held?,Florencia,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: would be held in, r0.id: reverb-332227083, r0.namespace: reverb, r0.arg2_exact: Florencia, r0.arg2_fbid_s: 031y2, r0.arg2: Florencia, r0.rel: would be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.787, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Florencia))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.282772470894214)
Where was the trial held?	Essex	2.282772470894214	Derivation(Where was the trial held?,Essex,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: would be held in, r0.id: reverb-380966858, r0.namespace: reverb, r0.arg2_exact: Essex, r0.arg2_fbid_s: 02ly_, r0.arg2: Essex, r0.rel: would be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.778, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Essex))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.282772470894214)
Where was the trial held?	Xinjiang	2.0558007474554776	Derivation(Where was the trial held?,Xinjiang,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: is being held in, r0.id: reverb-159290120, r0.namespace: reverb, r0.arg2_exact: Xinjiang, r0.arg2_fbid_s: 0jbn5, r0.arg2: Xinjiang, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.627, r0.arg1_exact: the trial),$x: (the trial, be be hold in, $x))),AnswerState(Xinjiang))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.0558007474554776)
Where was the trial held?	Greensboro	2.0558007474554776	Derivation(Where was the trial held?,Greensboro,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: is being held in, r0.id: reverb-375645918, r0.namespace: reverb, r0.arg2_exact: Greensboro, r0.arg2_fbid_s: 0kcw2, r0.arg2: Greensboro, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.98, r0.arg1_exact: The trial),$x: (the trial, be be hold in, $x))),AnswerState(Greensboro))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.0558007474554776)
Where was the trial held?	Uzbekistan	2.0558007474554776	Derivation(Where was the trial held?,Uzbekistan,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: is being held in, r0.id: reverb-345592602, r0.namespace: reverb, r0.arg2_exact: Uzbekistan, r0.arg2_fbid_s: 07t_x, r0.arg2: Uzbekistan, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.912, r0.arg1_exact: The trial),$x: (the trial, be be hold in, $x))),AnswerState(Uzbekistan))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.0558007474554776)
Where was the trial held?	London	2.0558007474554776	Derivation(Where was the trial held?,London,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was being held in, r0.id: reverb-106348793, r0.namespace: reverb, r0.arg2_exact: London, r0.arg2_fbid_s: 04jpl, r0.arg2: London, r0.rel: was being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.983, r0.arg1_exact: The trial),$x: (the trial, be be hold in, $x))),AnswerState(London))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.0558007474554776)
Where was the trial held?	Birmingham	2.0225859799262595	Derivation(Where was the trial held?,Birmingham,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial, r0.rel_exact: held in, r0.id: openie4-6878984, r0.namespace: openie4, r0.arg2_exact: Birmingham, r0.arg2_fbid_s: 0k33p, r0.arg2: Birmingham, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90452075, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(Birmingham))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.0225859799262595)
Where was the trial held?	Germany	2.0225859799262595	Derivation(Where was the trial held?,Germany,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: held in, r0.id: openie4-5618016, r0.namespace: openie4, r0.arg2_exact: Germany, r0.arg2_fbid_s: 0345h, r0.arg2: Germany, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.91808045, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(Germany))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),2.0225859799262595)
Where was the trial held?	Afghanistan	1.9981196614734849	Derivation(Where was the trial held?,Afghanistan,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,would be hold in,false,28799.0,192.0,31.0,0.6221373677253723),QueryState($x: (the trial, would be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, would be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: would be held in, r0.id: reverb-224753242, r0.namespace: reverb, r0.arg2_exact: Afghanistan, r0.arg2_fbid_s: 0jdd, r0.arg2: Afghanistan, r0.rel: would be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.737, r0.arg1_exact: the trials),$x: (the trial, would be hold in, $x))),AnswerState(Afghanistan))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6221373677253723, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9981196614734849)
Where was the trial held?	Japan	1.996347129531694	Derivation(Where was the trial held?,Japan,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,can be hold in,false,28799.0,329.0,49.0,0.6196145713329315),QueryState($x: (the trial, can be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, can be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: can be held in, r0.id: reverb-63664526, r0.namespace: reverb, r0.arg2_exact: Japan, r0.arg2_fbid_s: 03_3d, r0.arg2: Japan, r0.rel: can be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.763, r0.arg1_exact: the trial),$x: (the trial, can be hold in, $x))),AnswerState(Japan))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6196145713329315, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.996347129531694)
Where was the trial held?	Stuttgart	1.9959277992855502	Derivation(Where was the trial held?,Stuttgart,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,should be hold in,false,28799.0,219.0,32.0,0.6190177500247955),QueryState($x: (the trial, should be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, should be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: should be held in, r0.id: reverb-283629576, r0.namespace: reverb, r0.arg2_exact: Stuttgart, r0.arg2_fbid_s: 0727_, r0.arg2: Stuttgart, r0.rel: should be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.615, r0.arg1_exact: the trial),$x: (the trial, should be hold in, $x))),AnswerState(Stuttgart))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6190177500247955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9959277992855502)
Where was the trial held?	Libya	1.9959277992855502	Derivation(Where was the trial held?,Libya,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,should be hold in,false,28799.0,219.0,32.0,0.6190177500247955),QueryState($x: (the trial, should be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, should be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: should be held in, r0.id: reverb-307885143, r0.namespace: reverb, r0.arg2_exact: Libya, r0.arg2_fbid_s: 04gqr, r0.arg2: Libya, r0.rel: should be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.83, r0.arg1_exact: the trial),$x: (the trial, should be hold in, $x))),AnswerState(Libya))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6190177500247955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9959277992855502)
Where was the trial held?	Kenya	1.9959277992855502	Derivation(Where was the trial held?,Kenya,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,should be hold in,false,28799.0,219.0,32.0,0.6190177500247955),QueryState($x: (the trial, should be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, should be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: should be held in, r0.id: reverb-101429582, r0.namespace: reverb, r0.arg2_exact: Kenya, r0.arg2_fbid_s: 019rg5, r0.arg2: Kenya, r0.rel: should be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.726, r0.arg1_exact: the trials),$x: (the trial, should be hold in, $x))),AnswerState(Kenya))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6190177500247955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9959277992855502)
Where was the trial held?	Spain	1.9816437476846045	Derivation(Where was the trial held?,Spain,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will be held in, r0.id: reverb-299768776, r0.namespace: reverb, r0.arg2_exact: Spain, r0.arg2_fbid_s: 06mkj, r0.arg2: Spain, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.913, r0.arg1_exact: The trial),$x: (the trial, will be hold in, $x))),AnswerState(Spain))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	Omaha	1.9816437476846045	Derivation(Where was the trial held?,Omaha,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will be held in, r0.id: reverb-362334217, r0.namespace: reverb, r0.arg2_exact: Omaha, r0.arg2_fbid_s: 0chrx, r0.arg2: Omaha, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.97, r0.arg1_exact: The trials),$x: (the trial, will be hold in, $x))),AnswerState(Omaha))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	Edmonton	1.9816437476846045	Derivation(Where was the trial held?,Edmonton,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: will be held in, r0.id: reverb-16938775, r0.namespace: reverb, r0.arg2_exact: Edmonton, r0.arg2_fbid_s: 0nlh7, r0.arg2: Edmonton, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.875, r0.arg1_exact: the trial),$x: (the trial, will be hold in, $x))),AnswerState(Edmonton))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	Antigua	1.9816437476846045	Derivation(Where was the trial held?,Antigua,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will be held in, r0.id: reverb-267035589, r0.namespace: reverb, r0.arg2_exact: Antigua, r0.arg2_fbid_s: 069pbv, r0.arg2: Antigua, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.913, r0.arg1_exact: The trials),$x: (the trial, will be hold in, $x))),AnswerState(Antigua))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	Orlando	1.9816437476846045	Derivation(Where was the trial held?,Orlando,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will be held in, r0.id: reverb-334649099, r0.namespace: reverb, r0.arg2_exact: Orlando, r0.arg2_fbid_s: 0ply0, r0.arg2: Orlando, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.97, r0.arg1_exact: The trial),$x: (the trial, will be hold in, $x))),AnswerState(Orlando))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	Himachal	1.9816437476846045	Derivation(Where was the trial held?,Himachal,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: will be held in, r0.id: reverb-248937647, r0.namespace: reverb, r0.arg2_exact: Himachal, r0.arg2_fbid_s: 03p85, r0.arg2: Himachal, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.772, r0.arg1_exact: the trials),$x: (the trial, will be hold in, $x))),AnswerState(Himachal))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9816437476846045)
Where was the trial held?	one end	1.9635115555200233	Derivation(Where was the trial held?,one end,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,hold from,false,28799.0,396.0,52.0,0.6156791746616364),QueryState($x: (the trial, hold from, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, hold from, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: held from, r0.id: reverb-346029085, r0.namespace: reverb, r0.arg2_exact: one end, r0.arg2: one end, r0.rel: held from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.729, r0.arg1_exact: the trials),$x: (the trial, hold from, $x))),AnswerState(one end))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6156791746616364, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = aaa aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.9635115555200233)
Where was the trial held?	the ICC premises	1.8566697680994102	Derivation(Where was the trial held?,the ICC premises,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: is being held in, r0.id: reverb-89714248, r0.namespace: reverb, r0.arg2_exact: the ICC premises, r0.arg2: the ICC premises, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.916, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(the ICC premises))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'where' and answer shape = aaa AAA aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	the German city	1.8566697680994102	Derivation(Where was the trial held?,the German city,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: were held in, r0.id: reverb-268056559, r0.namespace: reverb, r0.arg2_exact: the German city, r0.arg2: the German city, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.925, r0.arg1_exact: The trials),$x: (the trial, held in, $x))),AnswerState(the German city))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'where' and answer shape = aaa Aaaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	the 436th Judicial District Court	1.8566697680994102	Derivation(Where was the trial held?,the 436th Judicial District Court,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-95469614, r0.namespace: reverb, r0.arg2_exact: the 436th Judicial District Court, r0.arg2: the 436th Judicial District Court, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.957, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(the 436th Judicial District Court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = aaa 111aa Aaaaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	a military facility remote	1.8566697680994102	Derivation(Where was the trial held?,a military facility remote,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: were held in, r0.id: reverb-24905989, r0.namespace: reverb, r0.arg2_exact: a military facility remote, r0.arg2: a military facility remote, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.834, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(a military facility remote))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	perfect 5-6 ft surf	1.8566697680994102	Derivation(Where was the trial held?,perfect 5-6 ft surf,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: were held in, r0.id: reverb-355903068, r0.namespace: reverb, r0.arg2_exact: perfect 5-6 ft surf, r0.arg2: perfect 5-6 ft surf, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.925, r0.arg1_exact: The trials),$x: (the trial, held in, $x))),AnswerState(perfect 5-6 ft surf))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and answer shape = aaaa 1-1 aa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	the Frank J. Murphy Courthouse	1.8566697680994102	Derivation(Where was the trial held?,the Frank J. Murphy Courthouse,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: were held in, r0.id: reverb-54478137, r0.namespace: reverb, r0.arg2_exact: the Frank J. Murphy Courthouse, r0.arg2: the Frank J. Murphy Courthouse, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.957, r0.arg1_exact: The trials),$x: (the trial, held in, $x))),AnswerState(the Frank J. Murphy Courthouse))),SparseVector(question prefix = 'where' and answer shape = aaa Aaaaa A. Aaaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	New York federal court	1.8566697680994102	Derivation(Where was the trial held?,New York federal court,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-93055791, r0.namespace: reverb, r0.arg2_exact: New York federal court, r0.arg2: New York federal court, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.957, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(New York federal court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'where' and answer shape = Aaa Aaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	a specially built courtroom	1.8566697680994102	Derivation(Where was the trial held?,a specially built courtroom,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: was held in, r0.id: reverb-52572872, r0.namespace: reverb, r0.arg2_exact: a specially built courtroom, r0.arg2: a specially built courtroom, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(a specially built courtroom))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and answer shape = a aaaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	a room	1.8566697680994102	Derivation(Where was the trial held?,a room,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: is being held in, r0.id: reverb-188324951, r0.namespace: reverb, r0.arg2_exact: a room, r0.arg2: a room, r0.rel: is being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9, r0.arg1_exact: The trial),$x: (the trial, held in, $x))),AnswerState(a room))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'where' and answer shape = a aaaa -> 1.0),1.8566697680994102)
Where was the trial held?	an adjourned session	1.8566697680994102	Derivation(Where was the trial held?,an adjourned session,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: were held in, r0.id: reverb-2409782, r0.namespace: reverb, r0.arg2_exact: an adjourned session, r0.arg2: an adjourned session, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.817, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(an adjourned session))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'where' and answer shape = aa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	private or public	1.8566697680994102	Derivation(Where was the trial held?,private or public,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was held in, r0.id: reverb-102636544, r0.namespace: reverb, r0.arg2_exact: private or public, r0.arg2: private or public, r0.rel: was held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.733, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(private or public))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and answer shape = aaaa aa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	a timely manner	1.8566697680994102	Derivation(Where was the trial held?,a timely manner,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the trial, r0.rel_exact: be held in, r0.id: reverb-194379199, r0.namespace: reverb, r0.arg2_exact: a timely manner, r0.arg2: a timely manner, r0.rel: be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.548, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(a timely manner))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = a aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8566697680994102)
Where was the trial held?	Idaho	1.8066241576080952	Derivation(Where was the trial held?,Idaho,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-175877019, r0.namespace: reverb, r0.arg2_exact: Idaho, r0.arg2_fbid_s: 03s5t, r0.arg2: Idaho, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.948, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Idaho))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Rennes	1.8066241576080952	Derivation(Where was the trial held?,Rennes,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-51114921, r0.namespace: reverb, r0.arg2_exact: Rennes, r0.arg2_fbid_s: 0chjm, r0.arg2: Rennes, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.956, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Rennes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Cambridge	1.8066241576080952	Derivation(Where was the trial held?,Cambridge,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will take place in, r0.id: reverb-296523997, r0.namespace: reverb, r0.arg2_exact: Cambridge, r0.arg2_fbid_s: 0978r, r0.arg2: Cambridge, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.819, r0.arg1_exact: The trials),$x: (the trial, will take place in, $x))),AnswerState(Cambridge))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Brazil	1.8066241576080952	Derivation(Where was the trial held?,Brazil,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: will take place in, r0.id: reverb-253182700, r0.namespace: reverb, r0.arg2_exact: Brazil, r0.arg2_fbid_s: 015fr, r0.arg2: Brazil, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.986, r0.arg1_exact: The trials),$x: (the trial, will take place in, $x))),AnswerState(Brazil))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Toowoomba	1.8066241576080952	Derivation(Where was the trial held?,Toowoomba,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-357720972, r0.namespace: reverb, r0.arg2_exact: Toowoomba, r0.arg2_fbid_s: 02ckm7, r0.arg2: Toowoomba, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.86, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Toowoomba))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Arabic	1.8066241576080952	Derivation(Where was the trial held?,Arabic,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-300221965, r0.namespace: reverb, r0.arg2_exact: Arabic, r0.arg2_fbid_s: 0jzc, r0.arg2: Arabic, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.886, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Arabic))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Bendigo	1.8066241576080952	Derivation(Where was the trial held?,Bendigo,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-245025261, r0.namespace: reverb, r0.arg2_exact: Bendigo, r0.arg2_fbid_s: 0gxbl, r0.arg2: Bendigo, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.921, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Bendigo))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Mannheim	1.8066241576080952	Derivation(Where was the trial held?,Mannheim,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-88489692, r0.namespace: reverb, r0.arg2_exact: Mannheim, r0.arg2_fbid_s: 0pf5y, r0.arg2: Mannheim, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.956, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Mannheim))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Turin	1.8066241576080952	Derivation(Where was the trial held?,Turin,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-198228087, r0.namespace: reverb, r0.arg2_exact: Turin, r0.arg2_fbid_s: 07mgr, r0.arg2: Turin, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.886, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Turin))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Woolhampton	1.8066241576080952	Derivation(Where was the trial held?,Woolhampton,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-342297017, r0.namespace: reverb, r0.arg2_exact: Woolhampton, r0.arg2_fbid_s: 066nhb, r0.arg2: Woolhampton, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.876, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Woolhampton))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8066241576080952)
Where was the trial held?	Grand Island	1.7736021850329822	Derivation(Where was the trial held?,Grand Island,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,be be hold in,false,28799.0,1861.0,254.0,0.6168865263462067),QueryState($x: (the trial, be be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, be be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was being held in, r0.id: reverb-297423768, r0.namespace: reverb, r0.arg2_exact: Grand Island, r0.arg2: Grand Island, r0.rel: was being held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.952, r0.arg1_exact: the trial),$x: (the trial, be be hold in, $x))),AnswerState(Grand Island))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6168865263462067, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.7736021850329822)
Where was the trial held?	February	1.71012578405565	Derivation(Where was the trial held?,February,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The trials, r0.rel_exact: were held in, r0.id: reverb-222232054, r0.namespace: reverb, r0.arg2_exact: February, r0.arg2_fbid_s: 02xx5, r0.arg2: February, r0.rel: were held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.961, r0.arg1_exact: The trials),$x: (the trial, held in, $x))),AnswerState(February))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, question prefix = 'where' and isDate -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.71012578405565)
Where was the trial held?	March	1.5365727432572989	Derivation(Where was the trial held?,March,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: will be held in, r0.id: reverb-376098397, r0.namespace: reverb, r0.arg2_exact: March, r0.arg2: March, r0.rel: will be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.727, r0.arg1_exact: the trials),$x: (the trial, will be hold in, $x))),AnswerState(March))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and isDate -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5365727432572989)
Where was the trial held?	Justice Friedman	1.5244255951855998	Derivation(Where was the trial held?,Justice Friedman,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will take place in,false,28799.0,5824.0,444.0,0.5986870527267456),QueryState($x: (the trial, will take place in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will take place in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: The trial, r0.rel_exact: will take place in, r0.id: reverb-198683667, r0.namespace: reverb, r0.arg2_exact: Justice Friedman, r0.arg2: Justice Friedman, r0.rel: will take place in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.819, r0.arg1_exact: The trial),$x: (the trial, will take place in, $x))),AnswerState(Justice Friedman))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986870527267456, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5244255951855998)
Where was the trial held?	Istanbul	1.5222488780651822	Derivation(Where was the trial held?,Istanbul,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,to be hold in,false,28799.0,2616.0,581.0,0.6321016550064087),QueryState($x: (the trial, to be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, to be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: was planned to be holding in, r0.id: reverb-250323652, r0.namespace: reverb, r0.arg2_exact: Istanbul, r0.arg2_fbid_s: 09949m, r0.arg2: Istanbul, r0.rel: was planned to be holding in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.877, r0.arg1_exact: the trial),$x: (the trial, to be hold in, $x))),AnswerState(Istanbul))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6321016550064087, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5222488780651822)
Where was the trial held?	Colorado	1.5222488780651822	Derivation(Where was the trial held?,Colorado,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,to be hold in,false,28799.0,2616.0,581.0,0.6321016550064087),QueryState($x: (the trial, to be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, to be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: have to be held in, r0.id: reverb-373676812, r0.namespace: reverb, r0.arg2_exact: Colorado, r0.arg2_fbid_s: 01n4w, r0.arg2: Colorado, r0.rel: have to be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.609, r0.arg1_exact: the trial),$x: (the trial, to be hold in, $x))),AnswerState(Colorado))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6321016550064087, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5222488780651822)
Where was the trial held?	Toronto	1.5222488780651822	Derivation(Where was the trial held?,Toronto,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,to be hold in,false,28799.0,2616.0,581.0,0.6321016550064087),QueryState($x: (the trial, to be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, to be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: is going to be held in, r0.id: reverb-100516485, r0.namespace: reverb, r0.arg2_exact: Toronto, r0.arg2_fbid_s: 0h7h6, r0.arg2: Toronto, r0.rel: is going to be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.773, r0.arg1_exact: the trial),$x: (the trial, to be hold in, $x))),AnswerState(Toronto))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6321016550064087, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5222488780651822)
Where was the trial held?	India	1.5152479098000708	Derivation(Where was the trial held?,India,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,would be hold in,false,28799.0,192.0,31.0,0.6221373677253723),QueryState($x: (the trial, would be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, would be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: would ideally be held in, r0.id: reverb-107336718, r0.namespace: reverb, r0.arg2_exact: India, r0.arg2_fbid_s: 03rk0, r0.arg2: India, r0.rel: would ideally be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.894, r0.arg1_exact: the trial),$x: (the trial, would be hold in, $x))),AnswerState(India))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6221373677253723, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5152479098000708)
Where was the trial held?	Evansville	1.5152479098000708	Derivation(Where was the trial held?,Evansville,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,would be hold in,false,28799.0,192.0,31.0,0.6221373677253723),QueryState($x: (the trial, would be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, would be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: would still be held in, r0.id: reverb-357364752, r0.namespace: reverb, r0.arg2_exact: Evansville, r0.arg2_fbid_s: 0sqgt, r0.arg2: Evansville, r0.rel: would still be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.538, r0.arg1_exact: the trial),$x: (the trial, would be hold in, $x))),AnswerState(Evansville))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6221373677253723, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.5152479098000708)
Where was the trial held?	Gitmo	1.4987719960111905	Derivation(Where was the trial held?,Gitmo,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),RelSynRule(hold in,will be hold in,false,28799.0,11897.0,907.0,0.5986876487731934),QueryState($x: (the trial, will be hold in, $x),true)), QaStep(Where was the trial held?,QueryState($x: (the trial, will be hold in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the trials, r0.rel_exact: will eventually be held in, r0.id: reverb-58978845, r0.namespace: reverb, r0.arg2_exact: Gitmo, r0.arg2_fbid_s: 03dvr, r0.arg2: Gitmo, r0.rel: will eventually be held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.633, r0.arg1_exact: the trials),$x: (the trial, will be hold in, $x))),AnswerState(Gitmo))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5986876487731934, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.4987719960111905)
Where was the trial held?	the aftermath	1.480901921038664	Derivation(Where was the trial held?,the aftermath,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trials, r0.rel_exact: held in, r0.id: reverb-148746412, r0.namespace: reverb, r0.arg2_exact: the aftermath, r0.arg2: the aftermath, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.72, r0.arg1_exact: the trials),$x: (the trial, held in, $x))),AnswerState(the aftermath))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.480901921038664)
Where was the trial held?	the case	1.480901921038664	Derivation(Where was the trial held?,the case,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-317180674, r0.namespace: reverb, r0.arg2_exact: the case, r0.arg2: the case, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.72, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(the case))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.480901921038664)
Where was the trial held?	the county	1.480901921038664	Derivation(Where was the trial held?,the county,Vector(QaStep(Where was the trial held?,QuestionStateImpl(Where was the trial held?,Sentence(Where was the trial held?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the trial, held in, $x),false)), QaStep(Where was the trial held?,QueryState($x: (the trial, held in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y0f, r0.arg1: the trial, r0.rel_exact: held in, r0.id: reverb-308782657, r0.namespace: reverb, r0.arg2_exact: the county, r0.arg2: the county, r0.rel: held in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.727, r0.arg1_exact: the trial),$x: (the trial, held in, $x))),AnswerState(the county))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'where' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.480901921038664)
What are triglycerides?	The other outer limits	2.1934494627733203	Derivation(What are triglycerides?,The other outer limits,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: The other outer limits, r0.rel_exact: are, r0.id: reverb-51185518, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.759, r0.arg1_exact: The other outer limits),$x: ($x, are, triglycerides))),AnswerState(The other outer limits))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1934494627733203)
What are triglycerides?	a person?s diet	1.3912391191102988	Derivation(What are triglycerides?,a person?s diet,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: a person?s diet, r0.rel_exact: are, r0.id: reverb-12710635, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.627, r0.arg1_exact: a person?s diet),$x: ($x, are, triglycerides))),AnswerState(a person?s diet))),SparseVector(question prefix = 'what' and answer shape = a aaaa?a aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	the end products	1.3912391191102988	Derivation(What are triglycerides?,the end products,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the end products, r0.rel_exact: is, r0.id: reverb-261167114, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.736, r0.arg1_exact: the end products),$x: ($x, are, triglycerides))),AnswerState(the end products))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaa aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Oils and fats	1.3912391191102988	Derivation(What are triglycerides?,Oils and fats,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Oils and fats, r0.rel_exact: are, r0.id: reverb-1872529, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.669, r0.arg1_exact: Oils and fats),$x: ($x, are, triglycerides))),AnswerState(Oils and fats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaa aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	The REAL Culprit	1.3912391191102988	Derivation(What are triglycerides?,The REAL Culprit,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: The REAL Culprit, r0.rel_exact: is, r0.id: reverb-193428625, r0.namespace: reverb, r0.arg2_exact: Triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.673, r0.arg1_exact: The REAL Culprit),$x: ($x, are, triglycerides))),AnswerState(The REAL Culprit))),SparseVector(question prefix = 'what' and answer shape = Aaa AAAA Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	dietary fat	1.3912391191102988	Derivation(What are triglycerides?,dietary fat,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: dietary fat, r0.rel_exact: is, r0.id: reverb-78637348, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.736, r0.arg1_exact: dietary fat),$x: ($x, are, triglycerides))),AnswerState(dietary fat))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	as important as cholesterol	1.3912391191102988	Derivation(What are triglycerides?,as important as cholesterol,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: as important as cholesterol, r0.rel_exact: is, r0.id: reverb-351956542, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: as important as cholesterol),$x: ($x, are, triglycerides))),AnswerState(as important as cholesterol))),SparseVector(question prefix = 'what' and answer shape = aa aaaa aa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Butter , margarine and vegetable oil	1.3912391191102988	Derivation(What are triglycerides?,Butter , margarine and vegetable oil,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Butter , margarine and vegetable oil, r0.rel_exact: are, r0.id: reverb-154515034, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.9, r0.arg1_exact: Butter , margarine and vegetable oil),$x: ($x, are, triglycerides))),AnswerState(Butter , margarine and vegetable oil))),SparseVector(question prefix = 'what' and answer shape = Aaaaa , aaaa aaa aaaa aaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Susi Yi	1.3912391191102988	Derivation(What are triglycerides?,Susi Yi,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Susi Yi, r0.rel_exact: are, r0.id: reverb-356358092, r0.namespace: reverb, r0.arg2_exact: Triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.522, r0.arg1_exact: Susi Yi),$x: ($x, are, triglycerides))),AnswerState(Susi Yi))),SparseVector(question prefix = 'what' and answer shape = Aaaa Aa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Vegetable-based oils	1.3912391191102988	Derivation(What are triglycerides?,Vegetable-based oils,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Vegetable-based oils, r0.rel_exact: are, r0.id: reverb-48543524, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.652, r0.arg1_exact: Vegetable-based oils),$x: ($x, are, triglycerides))),AnswerState(Vegetable-based oils))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa-aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	NJ Fats	1.3912391191102988	Derivation(What are triglycerides?,NJ Fats,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: NJ Fats, r0.rel_exact: are, r0.id: reverb-125223986, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.74, r0.arg1_exact: NJ Fats),$x: ($x, are, triglycerides))),AnswerState(NJ Fats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = AA Aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	text/html TRIGLYCERIDES	1.3912391191102988	Derivation(What are triglycerides?,text/html TRIGLYCERIDES,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: text/html TRIGLYCERIDES, r0.rel_exact: are, r0.id: reverb-23074253, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.715, r0.arg1_exact: text/html TRIGLYCERIDES),$x: ($x, are, triglycerides))),AnswerState(text/html TRIGLYCERIDES))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = aaaa/aaaa AAAA -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Today?s interesting word	1.3912391191102988	Derivation(What are triglycerides?,Today?s interesting word,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Today?s interesting word, r0.rel_exact: is, r0.id: reverb-52358471, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.896, r0.arg1_exact: Today?s interesting word),$x: ($x, are, triglycerides))),AnswerState(Today?s interesting word))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = Aaaaa?a aaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What are triglycerides?	Cholesterol 4	1.2738510046568876	Derivation(What are triglycerides?,Cholesterol 4,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Cholesterol 4, r0.rel_exact: are, r0.id: reverb-207876809, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.697, r0.arg1_exact: Cholesterol 4),$x: ($x, are, triglycerides))),AnswerState(Cholesterol 4))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa 1 -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2738510046568876)
What are triglycerides?	Espa?ol	1.047704199639943	Derivation(What are triglycerides?,Espa?ol,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Espa?ol, r0.rel_exact: is, r0.id: reverb-214617788, r0.namespace: reverb, r0.arg2_exact: Triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.725, r0.arg1_exact: Espa?ol),$x: ($x, are, triglycerides))),AnswerState(Espa?ol))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What are triglycerides?	fats and oils	1.0037651762438393	Derivation(What are triglycerides?,fats and oils,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: fats and oils, r0.rel_exact: are, r0.id: reverb-49667429, r0.namespace: reverb, r0.arg2_exact: Triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.646, r0.arg1_exact: fats and oils),$x: ($x, are, triglycerides))),AnswerState(fats and oils))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0037651762438393)
What are triglycerides?	a glance	0.9821974393422803	Derivation(What are triglycerides?,a glance,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: a glance, r0.rel_exact: are, r0.id: reverb-345634755, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.646, r0.arg1_exact: a glance),$x: ($x, are, triglycerides))),AnswerState(a glance))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.9821974393422803)
What are triglycerides?	a lipid panel	0.8935158429570886	Derivation(What are triglycerides?,a lipid panel,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: a lipid panel, r0.rel_exact: is, r0.id: reverb-188134621, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.659, r0.arg1_exact: a lipid panel),$x: ($x, are, triglycerides))),AnswerState(a lipid panel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8935158429570886)
What are triglycerides?	a great site	0.8935158429570886	Derivation(What are triglycerides?,a great site,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: a great site, r0.rel_exact: Are, r0.id: reverb-57213859, r0.namespace: reverb, r0.arg2_exact: Triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglycerides, r0.rel: Are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.646, r0.arg1_exact: a great site),$x: ($x, are, triglycerides))),AnswerState(a great site))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8935158429570886)
What are triglycerides?	close	0.8783066289217556	Derivation(What are triglycerides?,close,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: close, r0.rel_exact: are, r0.id: reverb-22598973, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.715, r0.arg1_exact: close),$x: ($x, are, triglycerides))),AnswerState(close))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What are triglycerides?	CVD	0.7780492601390756	Derivation(What are triglycerides?,CVD,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: CVD, r0.rel_exact: are, r0.id: reverb-216356086, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.592, r0.arg1_exact: CVD),$x: ($x, are, triglycerides))),AnswerState(CVD))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAA -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7780492601390756)
What are triglycerides?	the diet	0.7535235290836304	Derivation(What are triglycerides?,the diet,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the diet, r0.rel_exact: are, r0.id: reverb-140570330, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.627, r0.arg1_exact: the diet),$x: ($x, are, triglycerides))),AnswerState(the diet))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What are triglycerides?	the question	0.7535235290836304	Derivation(What are triglycerides?,the question,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the question, r0.rel_exact: are, r0.id: reverb-64759297, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.638, r0.arg1_exact: the question),$x: ($x, are, triglycerides))),AnswerState(the question))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What are triglycerides?	the heck	0.7535235290836304	Derivation(What are triglycerides?,the heck,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the heck, r0.rel_exact: are, r0.id: reverb-133557495, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.538, r0.arg1_exact: the heck),$x: ($x, are, triglycerides))),AnswerState(the heck))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What are triglycerides?	the body	0.7535235290836304	Derivation(What are triglycerides?,the body,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the body, r0.rel_exact: is, r0.id: reverb-240353090, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.684, r0.arg1_exact: the body),$x: ($x, are, triglycerides))),AnswerState(the body))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What are triglycerides?	the blood	0.7535235290836304	Derivation(What are triglycerides?,the blood,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the blood, r0.rel_exact: are, r0.id: reverb-376149744, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.721, r0.arg1_exact: the blood),$x: ($x, are, triglycerides))),AnswerState(the blood))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What are triglycerides?	high total cholesterol	0.6934552855964584	Derivation(What are triglycerides?,high total cholesterol,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: high total cholesterol, r0.rel_exact: is, r0.id: reverb-300907899, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.633, r0.arg1_exact: high total cholesterol),$x: ($x, are, triglycerides))),AnswerState(high total cholesterol))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6934552855964584)
What are triglycerides?	fatty acids	0.6377903582845919	Derivation(What are triglycerides?,fatty acids,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02yxd, r0.arg1: fatty acids, r0.rel_exact: is, r0.id: reverb-16485995, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.644, r0.arg1_exact: fatty acids),$x: ($x, are, triglycerides))),AnswerState(fatty acids))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6377903582845919)
What are triglycerides?	Fibromyalgia	0.5177353908341729	Derivation(What are triglycerides?,Fibromyalgia,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01v3ks, r0.arg1: Fibromyalgia, r0.rel_exact: are, r0.id: reverb-27622838, r0.namespace: reverb, r0.arg2_exact: Triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: Triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: Fibromyalgia),$x: ($x, are, triglycerides))),AnswerState(Fibromyalgia))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5177353908341729)
What are triglycerides?	food	0.34833782011598546	Derivation(What are triglycerides?,food,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wbm, r0.arg1: food, r0.rel_exact: are, r0.id: reverb-104788572, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.721, r0.arg1_exact: food),$x: ($x, are, triglycerides))),AnswerState(food))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	fructose	0.34833782011598546	Derivation(What are triglycerides?,fructose,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d9t0, r0.arg1: fructose, r0.rel_exact: are, r0.id: reverb-17057883, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.883, r0.arg1_exact: fructose),$x: ($x, are, triglycerides))),AnswerState(fructose))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	fats	0.34833782011598546	Derivation(What are triglycerides?,fats,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02zks, r0.arg1: fats, r0.rel_exact: are, r0.id: reverb-69173034, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 20, r0.conf_f: 0.826, r0.arg1_exact: fats),$x: ($x, are, triglycerides))),AnswerState(fats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	triglycerides	0.34833782011598546	Derivation(What are triglycerides?,triglycerides,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0fmjs, r0.arg1: triglycerides, r0.rel_exact: is, r0.id: reverb-182999151, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.713, r0.arg1_exact: triglycerides),$x: ($x, are, triglycerides))),AnswerState(triglycerides))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	tissues	0.34833782011598546	Derivation(What are triglycerides?,tissues,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0q4pl, r0.arg1: tissues, r0.rel_exact: are, r0.id: reverb-21578982, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.627, r0.arg1_exact: tissues),$x: ($x, are, triglycerides))),AnswerState(tissues))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	lipids	0.34833782011598546	Derivation(What are triglycerides?,lipids,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04k8n, r0.arg1: lipids, r0.rel_exact: are, r0.id: reverb-254437246, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.737, r0.arg1_exact: lipids),$x: ($x, are, triglycerides))),AnswerState(lipids))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	cholesterol	0.34833782011598546	Derivation(What are triglycerides?,cholesterol,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01w_3, r0.arg1: cholesterol, r0.rel_exact: is, r0.id: reverb-243703802, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.659, r0.arg1_exact: cholesterol),$x: ($x, are, triglycerides))),AnswerState(cholesterol))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What are triglycerides?	the oil	0.2653380372297598	Derivation(What are triglycerides?,the oil,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the oil, r0.rel_exact: was, r0.id: reverb-62953033, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.555, r0.arg1_exact: the oil),$x: ($x, are, triglycerides))),AnswerState(the oil))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaa aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.2653380372297598)
What are triglycerides?	Fats	0.01905717168640142	Derivation(What are triglycerides?,Fats,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02zks, r0.arg1: Fats, r0.rel_exact: are, r0.id: reverb-61509914, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 19, r0.conf_f: 0.907, r0.arg1_exact: Fats),$x: ($x, are, triglycerides))),AnswerState(Fats))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.01905717168640142)
What are triglycerides?	Oils	0.01905717168640142	Derivation(What are triglycerides?,Oils,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bp_wy, r0.arg1: Oils, r0.rel_exact: are, r0.id: reverb-221841882, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.669, r0.arg1_exact: Oils),$x: ($x, are, triglycerides))),AnswerState(Oils))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.01905717168640142)
What are triglycerides?	again what	-0.03942021209317459	Derivation(What are triglycerides?,again what,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: again what, r0.rel_exact: exactly is, r0.id: reverb-315117488, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: exactly is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.684, r0.arg1_exact: again what),$x: ($x, are, triglycerides))),AnswerState(again what))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.03942021209317459)
What are triglycerides?	the contained lipids	-0.16400200399582787	Derivation(What are triglycerides?,the contained lipids,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the contained lipids, r0.rel_exact: are, r0.id: reverb-304490649, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.614, r0.arg1_exact: the contained lipids),$x: ($x, are, triglycerides))),AnswerState(the contained lipids))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What are triglycerides?	the recomended zones	-0.16400200399582787	Derivation(What are triglycerides?,the recomended zones,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the recomended zones, r0.rel_exact: are, r0.id: reverb-137628550, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.89, r0.arg1_exact: the recomended zones),$x: ($x, are, triglycerides))),AnswerState(the recomended zones))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What are triglycerides?	no differences	-0.16616089115512223	Derivation(What are triglycerides?,no differences,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: no differences, r0.rel_exact: were observed in, r0.id: reverb-298520973, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: were observed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.869, r0.arg1_exact: no differences),$x: ($x, are, triglycerides))),AnswerState(no differences))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16616089115512223)
What are triglycerides?	plants and animals	-0.2034142029396968	Derivation(What are triglycerides?,plants and animals,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: plants and animals, r0.rel_exact: are called, r0.id: reverb-316686802, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are called, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.73, r0.arg1_exact: plants and animals),$x: ($x, are, triglycerides))),AnswerState(plants and animals))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaaa aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2034142029396968)
What are triglycerides?	40 %	-0.2183333864677497	Derivation(What are triglycerides?,40 %,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: 40 %, r0.rel_exact: is stored as, r0.id: reverb-64583741, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is stored as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: 40 %),$x: ($x, are, triglycerides))),AnswerState(40 %))),SparseVector(question prefix = 'what' and answer shape = 11 % -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What are triglycerides?	HDL2	-0.2183333864677497	Derivation(What are triglycerides?,HDL2,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: HDL2, r0.rel_exact: is depleted of, r0.id: reverb-222242620, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is depleted of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.77, r0.arg1_exact: HDL2),$x: ($x, are, triglycerides))),AnswerState(HDL2))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = AAA1 -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What are triglycerides?	A large proportion	-0.2183333864677497	Derivation(What are triglycerides?,A large proportion,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: A large proportion, r0.rel_exact: is transported as, r0.id: reverb-107997832, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is transported as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.967, r0.arg1_exact: A large proportion),$x: ($x, are, triglycerides))),AnswerState(A large proportion))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What are triglycerides?	question	-0.3288727502617803	Derivation(What are triglycerides?,question,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: question, r0.rel_exact: is named, r0.id: reverb-336878024, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is named, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.774, r0.arg1_exact: question),$x: ($x, are, triglycerides))),AnswerState(question))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3288727502617803)
What are triglycerides?	Type II Diabetes	-0.3459090688790074	Derivation(What are triglycerides?,Type II Diabetes,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0146bp, r0.arg1: Type II Diabetes, r0.rel_exact: are elevated, r0.id: reverb-131568830, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: are elevated, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.917, r0.arg1_exact: Type II Diabetes),$x: ($x, are, triglycerides))),AnswerState(Type II Diabetes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = Aaaa AA Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3459090688790074)
What are triglycerides?	Body fat	-0.3459090688790074	Derivation(What are triglycerides?,Body fat,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0265bb, r0.arg1: Body fat, r0.rel_exact: is primarily, r0.id: reverb-352771984, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is primarily, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.855, r0.arg1_exact: Body fat),$x: ($x, are, triglycerides))),AnswerState(Body fat))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.3459090688790074)
What are triglycerides?	?All three	-0.4195299496650058	Derivation(What are triglycerides?,?All three,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: ?All three, r0.rel_exact: can be made into, r0.id: reverb-264834460, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: can be made into, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.942, r0.arg1_exact: ?All three),$x: ($x, are, triglycerides))),AnswerState(?All three))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = ?Aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4195299496650058)
What are triglycerides?	simply tissues	-0.441813338487687	Derivation(What are triglycerides?,simply tissues,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: simply tissues, r0.rel_exact: are transmuted to, r0.id: reverb-39917831, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are transmuted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.818, r0.arg1_exact: simply tissues),$x: ($x, are, triglycerides))),AnswerState(simply tissues))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.441813338487687)
What are triglycerides?	fat molecules	-0.45365585009990594	Derivation(What are triglycerides?,fat molecules,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: fat molecules, r0.rel_exact: are primarily, r0.id: reverb-367759184, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are primarily, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.577, r0.arg1_exact: fat molecules),$x: ($x, are, triglycerides))),AnswerState(fat molecules))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.45365585009990594)
What are triglycerides?	The molecules	-0.5062941712635389	Derivation(What are triglycerides?,The molecules,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: The molecules, r0.rel_exact: are called, r0.id: reverb-218283124, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are called, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.94, r0.arg1_exact: The molecules),$x: ($x, are, triglycerides))),AnswerState(The molecules))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5062941712635389)
What are triglycerides?	HFCS	-0.6416047841006864	Derivation(What are triglycerides?,HFCS,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 076xc1, r0.arg1: HFCS, r0.rel_exact: is converted to, r0.id: reverb-56587177, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is converted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.821, r0.arg1_exact: HFCS),$x: ($x, are, triglycerides))),AnswerState(HFCS))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6416047841006864)
What are triglycerides?	Coefficient calories	-0.7412694868066378	Derivation(What are triglycerides?,Coefficient calories,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Coefficient calories, r0.rel_exact: are prolonged into, r0.id: reverb-133042919, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are prolonged into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.893, r0.arg1_exact: Coefficient calories),$x: ($x, are, triglycerides))),AnswerState(Coefficient calories))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7412694868066378)
What are triglycerides?	Excess calories	-0.7412694868066378	Derivation(What are triglycerides?,Excess calories,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Excess calories, r0.rel_exact: are converted to, r0.id: reverb-28308528, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are converted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.955, r0.arg1_exact: Excess calories),$x: ($x, are, triglycerides))),AnswerState(Excess calories))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7412694868066378)
What are triglycerides?	ApoE	-0.7483021952735196	Derivation(What are triglycerides?,ApoE,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0byv2v, r0.arg1: ApoE, r0.rel_exact: is involved in, r0.id: reverb-256561619, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: is involved in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.988, r0.arg1_exact: ApoE),$x: ($x, are, triglycerides))),AnswerState(ApoE))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AaaA -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7483021952735196)
What are triglycerides?	the remainder	-0.8560489764944181	Derivation(What are triglycerides?,the remainder,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the remainder, r0.rel_exact: is converted to, r0.id: reverb-287468502, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is converted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.909, r0.arg1_exact: the remainder),$x: ($x, are, triglycerides))),AnswerState(the remainder))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8560489764944181)
What are triglycerides?	blood lipids	-0.9717821472934569	Derivation(What are triglycerides?,blood lipids,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03cshr5, r0.arg1: blood lipids, r0.rel_exact: are converted to, r0.id: reverb-242395547, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are converted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.794, r0.arg1_exact: blood lipids),$x: ($x, are, triglycerides))),AnswerState(blood lipids))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9717821472934569)
What are triglycerides?	the material	-1.1779634776100278	Derivation(What are triglycerides?,the material,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: the material, r0.rel_exact: is shown to be free of, r0.id: reverb-319390465, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is shown to be free of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.659, r0.arg1_exact: the material),$x: ($x, are, triglycerides))),AnswerState(the material))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1779634776100278)
What are triglycerides?	the feedstock	-1.2438111498736308	Derivation(What are triglycerides?,the feedstock,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vk5h5, r0.arg1: the feedstock, r0.rel_exact: is, r0.id: openie4-41001704, r0.namespace: openie4, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9251283, r0.arg1_exact: the feedstock),$x: ($x, are, triglycerides))),AnswerState(the feedstock))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2438111498736308)
What are triglycerides?	carbohydrates	-1.2612346854620626	Derivation(What are triglycerides?,carbohydrates,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01sh2, r0.arg1: carbohydrates, r0.rel_exact: are converted into, r0.id: reverb-65215441, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are converted into, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.82, r0.arg1_exact: carbohydrates),$x: ($x, are, triglycerides))),AnswerState(carbohydrates))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2612346854620626)
What are triglycerides?	Diet	-1.2617430882831333	Derivation(What are triglycerides?,Diet,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: Diet, r0.rel_exact: is key for controlling, r0.id: reverb-5715767, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is key for controlling, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.947, r0.arg1_exact: Diet),$x: ($x, are, triglycerides))),AnswerState(Diet))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2617430882831333)
What are triglycerides?	Transesterification	-1.2930336779411318	Derivation(What are triglycerides?,Transesterification,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01b1l7, r0.arg1: Transesterification, r0.rel_exact: is used to convert, r0.id: reverb-213900409, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is used to convert, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.51, r0.arg1_exact: Transesterification),$x: ($x, are, triglycerides))),AnswerState(Transesterification))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2930336779411318)
What are triglycerides?	obesity	-1.4624312486593185	Derivation(What are triglycerides?,obesity,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0fltx, r0.arg1: obesity, r0.rel_exact: is characterized by increased, r0.id: reverb-191391349, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is characterized by increased, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.878, r0.arg1_exact: obesity),$x: ($x, are, triglycerides))),AnswerState(obesity))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4624312486593185)
What are triglycerides?	ratio	-1.4624312486593185	Derivation(What are triglycerides?,ratio,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0m1mr, r0.arg1: ratio, r0.rel_exact: was positively associated with, r0.id: reverb-126920251, r0.namespace: reverb, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: was positively associated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.853, r0.arg1_exact: ratio),$x: ($x, are, triglycerides))),AnswerState(ratio))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4624312486593185)
What are triglycerides?	HDL	-1.5626886174419992	Derivation(What are triglycerides?,HDL,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03lz8, r0.arg1: HDL, r0.rel_exact: is closely related to, r0.id: reverb-126690450, r0.namespace: reverb, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: is closely related to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: HDL),$x: ($x, are, triglycerides))),AnswerState(HDL))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAA -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.5626886174419992)
What are triglycerides?	The remainder 80 %	-1.886895819816497	Derivation(What are triglycerides?,The remainder 80 %,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1: The remainder 80 %, r0.rel_exact: will be converted to, r0.id: openie4-32924051, r0.namespace: openie4, r0.arg2_exact: triglyceride, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglyceride, r0.rel: will be converted to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9186942, r0.arg1_exact: The remainder 80 %),$x: ($x, are, triglycerides))),AnswerState(The remainder 80 %))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = Aaa aaaa 11 % -> 1.0, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.886895819816497)
What are triglycerides?	Fats and oils	-2.2156680654250107	Derivation(What are triglycerides?,Fats and oils,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bp_wy, r0.arg1: Fats and oils, r0.rel_exact: are composed of, r0.id: openie4-66747349, r0.namespace: openie4, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are composed of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.91117793, r0.arg1_exact: Fats and oils),$x: ($x, are, triglycerides))),AnswerState(Fats and oils))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaa aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2156680654250107)
What are triglycerides?	glucose	-2.92979711881081	Derivation(What are triglycerides?,glucose,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03d49, r0.arg1: glucose, r0.rel_exact: to be processed into, r0.id: openie4-59322532, r0.namespace: openie4, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: to be processed into, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.82353, r0.arg1_exact: glucose),$x: ($x, are, triglycerides))),AnswerState(glucose))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.92979711881081)
What are triglycerides?	the unused calories	-3.7709091885311374	Derivation(What are triglycerides?,the unused calories,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01wv2, r0.arg1: the unused calories, r0.rel_exact: are converted into, r0.id: openie4-28974167, r0.namespace: openie4, r0.arg2_exact: triglycerides, r0.arg2_fbid_s: 0fmjs, r0.arg2: triglycerides, r0.rel: are converted into, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.91117793, r0.arg1_exact: the unused calories),$x: ($x, are, triglycerides))),AnswerState(the unused calories))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.7709091885311374)
What are triglycerides?	LDL	-4.168894114968633	Derivation(What are triglycerides?,LDL,Vector(QaStep(What are triglycerides?,QuestionStateImpl(What are triglycerides?,Sentence(What are triglycerides?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, are, triglycerides),false)), QaStep(What are triglycerides?,QueryState($x: ($x, are, triglycerides),false),RelSynRule(be,be as well,false,1.3235778E7,2513.0,1885.0,0.47856301069259644),QueryState($x: ($x, be as well, triglycerides),true)), QaStep(What are triglycerides?,QueryState($x: ($x, be as well, triglycerides),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0dl9m, r0.arg1: LDL, r0.rel_exact: is at as well as, r0.id: reverb-280173132, r0.namespace: reverb, r0.arg2_exact: your triglycerides and blood sugar levels, r0.arg2: your triglycerides and blood sugar levels, r0.rel: is at as well as, r0.corpora_ss: List(cw), r0.num_extrs_i: 28, r0.conf_f: 0.58, r0.arg1_exact: LDL),$x: ($x, be as well, triglycerides))),AnswerState(LDL))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.47856301069259644, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.16666666666666666, question prefix = 'what' and answer shape = AAA -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.168894114968633)
What is the population of Mexico?	95 million	3.6149044185936976	Derivation(What is the population of Mexico?,95 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the population of, Mexico),false)), QaStep(What is the population of Mexico?,QueryState($x: ($x, is the population of, Mexico),false),ExecutionAction(ExecTuple((r0.arg1: 95 million, r0.rel_exact: is the population of, r0.id: reverb-285246030, r0.namespace: reverb, r0.arg2_exact: Mexico, r0.arg2_fbid_s: 0b90_r, r0.arg2: Mexico, r0.rel: is the population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.797, r0.arg1_exact: 95 million),$x: ($x, is the population of, Mexico))),AnswerState(95 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = 11 aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.6149044185936976)
What is the population of Mexico?	Ok	2.9887646009645197	Derivation(What is the population of Mexico?,Ok,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the population of, Mexico),false)), QaStep(What is the population of Mexico?,QueryState($x: ($x, is the population of, Mexico),false),ExecutionAction(ExecTuple((r0.arg1: Ok, r0.rel_exact: is the population of, r0.id: reverb-206914787, r0.namespace: reverb, r0.arg2_exact: Mexico, r0.arg2_fbid_s: 0b90_r, r0.arg2: Mexico, r0.rel: is the population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.925, r0.arg1_exact: Ok),$x: ($x, is the population of, Mexico))),AnswerState(Ok))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.9887646009645197)
What is the population of Mexico?	Native Americans today	2.9887646009645197	Derivation(What is the population of Mexico?,Native Americans today,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the population of, Mexico),false)), QaStep(What is the population of Mexico?,QueryState($x: ($x, is the population of, Mexico),false),ExecutionAction(ExecTuple((r0.arg1: Native Americans today, r0.rel_exact: is the population of, r0.id: reverb-144585537, r0.namespace: reverb, r0.arg2_exact: Mexico, r0.arg2_fbid_s: 0b90_r, r0.arg2: Mexico, r0.rel: is the population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.62, r0.arg1_exact: Native Americans today),$x: ($x, is the population of, Mexico))),AnswerState(Native Americans today))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.9887646009645197)
What is the population of Mexico?	20 million habitants	2.6205424483789246	Derivation(What is the population of Mexico?,20 million habitants,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has population of, r0.id: reverb-231543931, r0.namespace: reverb, r0.arg2_exact: 20 million habitants, r0.arg2: 20 million habitants, r0.rel: has population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.514, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(20 million habitants))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = 11 aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6205424483789246)
What is the population of Mexico?	106 million	2.1834505635828334	Derivation(What is the population of Mexico?,106 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-36122809, r0.namespace: reverb, r0.arg2_exact: 106 million, r0.arg2: 106 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.923, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(106 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1834505635828334)
What is the population of Mexico?	111 million	2.1834505635828334	Derivation(What is the population of Mexico?,111 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-83784912, r0.namespace: reverb, r0.arg2_exact: 111 million, r0.arg2: 111 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.923, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(111 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1834505635828334)
What is the population of Mexico?	105 million	2.1834505635828334	Derivation(What is the population of Mexico?,105 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-327010813, r0.namespace: reverb, r0.arg2_exact: 105 million, r0.arg2: 105 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.923, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(105 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1834505635828334)
What is the population of Mexico?	110 million	2.1834505635828334	Derivation(What is the population of Mexico?,110 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-139573364, r0.namespace: reverb, r0.arg2_exact: 110 million, r0.arg2: 110 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.923, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(110 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1834505635828334)
What is the population of Mexico?	140 million	2.1834505635828334	Derivation(What is the population of Mexico?,140 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-87959881, r0.namespace: reverb, r0.arg2_exact: 140 million, r0.arg2: 140 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.935, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(140 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1834505635828334)
What is the population of Mexico?	less than 2 %	2.0169527587871565	Derivation(What is the population of Mexico?,less than 2 %,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-84957412, r0.namespace: reverb, r0.arg2_exact: less than 2 %, r0.arg2: less than 2 %, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.822, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(less than 2 %))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa 1 % -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.0169527587871565)
What is the population of Mexico?	26 millions inhabitants	2.0169527587871565	Derivation(What is the population of Mexico?,26 millions inhabitants,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: had a population of, r0.id: reverb-17327078, r0.namespace: reverb, r0.arg2_exact: 26 millions inhabitants, r0.arg2: 26 millions inhabitants, r0.rel: had a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.905, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(26 millions inhabitants))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = 11 aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.0169527587871565)
What is the population of Mexico?	102 million people	2.0169527587871565	Derivation(What is the population of Mexico?,102 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of, r0.id: reverb-50631196, r0.namespace: reverb, r0.arg2_exact: 102 million people, r0.arg2: 102 million people, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.935, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(102 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.0169527587871565)
What is the population of Mexico?	113 million	1.8212967498277728	Derivation(What is the population of Mexico?,113 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a total population of, r0.id: reverb-342154066, r0.namespace: reverb, r0.arg2_exact: 113 million, r0.arg2: 113 million, r0.rel: has a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.728, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(113 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8212967498277728)
What is the population of Mexico?	120 million	1.8212967498277728	Derivation(What is the population of Mexico?,120 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of about, r0.id: reverb-322143636, r0.namespace: reverb, r0.arg2_exact: 120 million, r0.arg2: 120 million, r0.rel: has a population of about, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.571, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(120 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8212967498277728)
What is the population of Mexico?	The buyers	1.8155389381008036	Derivation(What is the population of Mexico?,The buyers,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the population of, Mexico),false)), QaStep(What is the population of Mexico?,QueryState($x: ($x, is the population of, Mexico),false),ExecutionAction(ExecTuple((r0.arg1: The buyers, r0.rel_exact: were the Spanish population of, r0.id: reverb-177884555, r0.namespace: reverb, r0.arg2_exact: Mexico, r0.arg2_fbid_s: 0b90_r, r0.arg2: Mexico, r0.rel: were the Spanish population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.932, r0.arg1_exact: The buyers),$x: ($x, is the population of, Mexico))),AnswerState(The buyers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8155389381008036)
What is the population of Mexico?	594,100 persons	1.6547989450320955	Derivation(What is the population of Mexico?,594,100 persons,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: had a total population of, r0.id: reverb-114156666, r0.namespace: reverb, r0.arg2_exact: 594,100 persons, r0.arg2: 594,100 persons, r0.rel: had a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.772, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(594,100 persons))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	103 million people	1.6547989450320955	Derivation(What is the population of Mexico?,103 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of over, r0.id: reverb-87191980, r0.namespace: reverb, r0.arg2_exact: 103 million people, r0.arg2: 103 million people, r0.rel: has a population of over, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(103 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	110 million people	1.6547989450320955	Derivation(What is the population of Mexico?,110 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of around, r0.id: reverb-284812844, r0.namespace: reverb, r0.arg2_exact: 110 million people, r0.arg2: 110 million people, r0.rel: has a population of around, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.947, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(110 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	2 million people	1.6547989450320955	Derivation(What is the population of Mexico?,2 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of roughly, r0.id: reverb-128737269, r0.namespace: reverb, r0.arg2_exact: 2 million people, r0.arg2: 2 million people, r0.rel: has a population of roughly, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.561, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(2 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 1 aaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	Spanish-speakers	1.6547989450320955	Derivation(What is the population of Mexico?,Spanish-speakers,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has the largest population of, r0.id: reverb-116063601, r0.namespace: reverb, r0.arg2_exact: Spanish-speakers, r0.arg2: Spanish-speakers, r0.rel: has the largest population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.822, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(Spanish-speakers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = Aaaaa-aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	91,158,290	1.6547989450320955	Derivation(What is the population of Mexico?,91,158,290,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: had a total population of, r0.id: reverb-7486257, r0.namespace: reverb, r0.arg2_exact: 91,158,290, r0.arg2: 91,158,290, r0.rel: had a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.862, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(91,158,290))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 11,111,111 -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	106 million people	1.6547989450320955	Derivation(What is the population of Mexico?,106 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of roughly, r0.id: reverb-263869128, r0.namespace: reverb, r0.arg2_exact: 106 million people, r0.arg2: 106 million people, r0.rel: has a population of roughly, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(106 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	350 million inhabitants	1.6547989450320955	Derivation(What is the population of Mexico?,350 million inhabitants,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a total population of, r0.id: reverb-126868867, r0.namespace: reverb, r0.arg2_exact: 350 million inhabitants, r0.arg2: 350 million inhabitants, r0.rel: has a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.714, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(350 million inhabitants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6547989450320955)
What is the population of Mexico?	20 million	1.4293360486867763	Derivation(What is the population of Mexico?,20 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of, r0.id: reverb-331670396, r0.namespace: reverb, r0.arg2_exact: 20 million, r0.arg2: 20 million, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.693, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(20 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = 11 aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4293360486867763)
What is the population of Mexico?	75 %	1.4133630691953882	Derivation(What is the population of Mexico?,75 %,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has an urban population of around, r0.id: reverb-307956618, r0.namespace: reverb, r0.arg2_exact: 75 %, r0.arg2: 75 %, r0.rel: has an urban population of around, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.897, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(75 %))),SparseVector(question prefix = 'what' and answer shape = 11 % -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4133630691953882)
What is the population of Mexico?	the US.	1.4133630691953882	Derivation(What is the population of Mexico?,the US.,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has reduced the overall population of, r0.id: reverb-14661832, r0.namespace: reverb, r0.arg2_exact: the US., r0.arg2: the US., r0.rel: has reduced the overall population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.873, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(the US.))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = aaa AA. -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4133630691953882)
What is the population of Mexico?	one hundred million people	1.3659869174086225	Derivation(What is the population of Mexico?,one hundred million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of almost, r0.id: reverb-358433963, r0.namespace: reverb, r0.arg2_exact: one hundred million people, r0.arg2: one hundred million people, r0.rel: has a population of almost, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.8, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(one hundred million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3659869174086225)
What is the population of Mexico?	100 million	1.2913279410220024	Derivation(What is the population of Mexico?,100 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of over, r0.id: reverb-308698635, r0.namespace: reverb, r0.arg2_exact: 100 million, r0.arg2_fbid_s: 03cn0gg, r0.arg2: 100 million, r0.rel: has a population of over, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.898, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(100 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = 111 aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2913279410220024)
What is the population of Mexico?	330,000 people	1.2409088721691688	Derivation(What is the population of Mexico?,330,000 people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: also has a population of slightly over, r0.id: reverb-213179288, r0.namespace: reverb, r0.arg2_exact: 330,000 people, r0.arg2: 330,000 people, r0.rel: also has a population of slightly over, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.884, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(330,000 people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2409088721691688)
What is the population of Mexico?	Spanish speakers	1.131862844693207	Derivation(What is the population of Mexico?,Spanish speakers,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has the largest population of, r0.id: reverb-260269491, r0.namespace: reverb, r0.arg2_exact: Spanish speakers, r0.arg2: Spanish speakers, r0.rel: has the largest population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 17, r0.conf_f: 0.923, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(Spanish speakers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.131862844693207)
What is the population of Mexico?	Catholics	1.069828149725032	Derivation(What is the population of Mexico?,Catholics,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has the second largest population of, r0.id: reverb-377403117, r0.namespace: reverb, r0.arg2_exact: Catholics, r0.arg2: Catholics, r0.rel: has the second largest population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.892, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(Catholics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.069828149725032)
What is the population of Mexico?	25 million	1.067182234931715	Derivation(What is the population of Mexico?,25 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: now has a population of, r0.id: reverb-334642316, r0.namespace: reverb, r0.arg2_exact: 25 million, r0.arg2: 25 million, r0.rel: now has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.923, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(25 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = 11 aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.067182234931715)
What is the population of Mexico?	97,483,412 inhabitants	0.8031962310575969	Derivation(What is the population of Mexico?,97,483,412 inhabitants,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1: Population Mexico, r0.rel_exact: has a population of, r0.id: reverb-235480045, r0.namespace: reverb, r0.arg2_exact: 97,483,412 inhabitants, r0.arg2: 97,483,412 inhabitants, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.935, r0.arg1_exact: Population Mexico),$x: (Mexico, have population of, $x))),AnswerState(97,483,412 inhabitants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'what' and answer shape = 11,111,111 aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	116,511	0.8031962310575969	Derivation(What is the population of Mexico?,116,511,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: had a population of, r0.id: reverb-124115910, r0.namespace: reverb, r0.arg2_exact: 116,511, r0.arg2: 116,511, r0.rel: had a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.786, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(116,511))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	9 million people	0.8031962310575969	Derivation(What is the population of Mexico?,9 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of, r0.id: reverb-165590464, r0.namespace: reverb, r0.arg2_exact: 9 million people, r0.arg2: 9 million people, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.863, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(9 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 1 aaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	1,819,046	0.8031962310575969	Derivation(What is the population of Mexico?,1,819,046,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: has a population of, r0.id: reverb-304464048, r0.namespace: reverb, r0.arg2_exact: 1,819,046, r0.arg2: 1,819,046, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.728, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(1,819,046))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 1,111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	531,815 inhabitants	0.8031962310575969	Derivation(What is the population of Mexico?,531,815 inhabitants,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: had a population of, r0.id: reverb-381073404, r0.namespace: reverb, r0.arg2_exact: 531,815 inhabitants, r0.arg2: 531,815 inhabitants, r0.rel: had a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 47, r0.conf_f: 0.905, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(531,815 inhabitants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	more than 110,000 people	0.8031962310575969	Derivation(What is the population of Mexico?,more than 110,000 people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: had a population of, r0.id: reverb-360521689, r0.namespace: reverb, r0.arg2_exact: more than 110,000 people, r0.arg2: more than 110,000 people, r0.rel: had a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.867, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(more than 110,000 people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa 111,111 aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	20m	0.8031962310575969	Derivation(What is the population of Mexico?,20m,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of, r0.id: reverb-94746232, r0.namespace: reverb, r0.arg2_exact: 20m, r0.arg2: 20m, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.619, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(20m))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 11a -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	Native American tribes	0.8031962310575969	Derivation(What is the population of Mexico?,Native American tribes,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: have large populations of, r0.id: reverb-181455986, r0.namespace: reverb, r0.arg2_exact: Native American tribes, r0.arg2: Native American tribes, r0.rel: have large populations of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.731, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(Native American tribes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = Aaaaa Aaaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	9 million vii people	0.8031962310575969	Derivation(What is the population of Mexico?,9 million vii people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of, r0.id: reverb-318305963, r0.namespace: reverb, r0.arg2_exact: 9 million vii people, r0.arg2: 9 million vii people, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.714, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(9 million vii people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 1 aaaa aaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	3.1 million	0.8031962310575969	Derivation(What is the population of Mexico?,3.1 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: had a population of, r0.id: reverb-355920747, r0.namespace: reverb, r0.arg2_exact: 3.1 million, r0.arg2: 3.1 million, r0.rel: had a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.716, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(3.1 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 1.1 aaaa -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	596,000	0.8031962310575969	Derivation(What is the population of Mexico?,596,000,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of, r0.id: reverb-331299717, r0.namespace: reverb, r0.arg2_exact: 596,000, r0.arg2: 596,000, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.767, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(596,000))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8031962310575969)
What is the population of Mexico?	Canada	0.539859340919262	Derivation(What is the population of Mexico?,Canada,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has three times the population of, r0.id: reverb-160597073, r0.namespace: reverb, r0.arg2_exact: Canada, r0.arg2_fbid_s: 0d060g, r0.arg2: Canada, r0.rel: has three times the population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.881, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(Canada))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.539859340919262)
What is the population of Mexico?	Asians	0.539859340919262	Derivation(What is the population of Mexico?,Asians,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: also has a sizeable population of, r0.id: reverb-32596011, r0.namespace: reverb, r0.arg2_exact: Asians, r0.arg2_fbid_s: 0bbx4b8, r0.arg2: Asians, r0.rel: also has a sizeable population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.607, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(Asians))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.539859340919262)
What is the population of Mexico?	2.0 million	0.4410424173025358	Derivation(What is the population of Mexico?,2.0 million,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: had a total population of, r0.id: reverb-266787752, r0.namespace: reverb, r0.arg2_exact: 2.0 million, r0.arg2: 2.0 million, r0.rel: had a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.825, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(2.0 million))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 1.1 aaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	8,841,916	0.4410424173025358	Derivation(What is the population of Mexico?,8,841,916,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of approximately, r0.id: reverb-128339470, r0.namespace: reverb, r0.arg2_exact: 8,841,916, r0.arg2: 8,841,916, r0.rel: has a population of approximately, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.888, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(8,841,916))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 1,111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	100,000 people	0.4410424173025358	Derivation(What is the population of Mexico?,100,000 people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: had a population of roughly, r0.id: reverb-147894666, r0.namespace: reverb, r0.arg2_exact: 100,000 people, r0.arg2: 100,000 people, r0.rel: had a population of roughly, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.923, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(100,000 people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	943,403	0.4410424173025358	Derivation(What is the population of Mexico?,943,403,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: has a Hispanic population of, r0.id: reverb-332083080, r0.namespace: reverb, r0.arg2_exact: 943,403, r0.arg2: 943,403, r0.rel: has a Hispanic population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.804, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(943,403))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	20 million people	0.4410424173025358	Derivation(What is the population of Mexico?,20 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has a population of over, r0.id: reverb-37738033, r0.namespace: reverb, r0.arg2_exact: 20 million people, r0.arg2: 20 million people, r0.rel: has a population of over, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(20 million people))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = 11 aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	100,000	0.4410424173025358	Derivation(What is the population of Mexico?,100,000,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: had a population of roughly, r0.id: reverb-118598739, r0.namespace: reverb, r0.arg2_exact: 100,000, r0.arg2: 100,000, r0.rel: had a population of roughly, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.961, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(100,000))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = 111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	50,072,597	0.4410424173025358	Derivation(What is the population of Mexico?,50,072,597,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05fjy, r0.arg1: New Mexico, r0.rel_exact: had a total population of, r0.id: reverb-385065615, r0.namespace: reverb, r0.arg2_exact: 50,072,597, r0.arg2: 50,072,597, r0.rel: had a total population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.788, r0.arg1_exact: New Mexico),$x: (Mexico, have population of, $x))),AnswerState(50,072,597))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = 11,111,111 -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4410424173025358)
What is the population of Mexico?	2,009,671	0.19631796719281724	Derivation(What is the population of Mexico?,2,009,671,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1: karol m New Mexico, r0.rel_exact: has a population of, r0.id: reverb-76681304, r0.namespace: reverb, r0.arg2_exact: 2,009,671, r0.arg2: 2,009,671, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 22, r0.conf_f: 0.78, r0.arg1_exact: karol m New Mexico),$x: (Mexico, have population of, $x))),AnswerState(2,009,671))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.25, question prefix = 'what' and answer shape = 1,111,111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.19631796719281724)
What is the population of Mexico?	100 million people	0.03645690805934931	Derivation(What is the population of Mexico?,100 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1: The Facts Mexico, r0.rel_exact: has a population of almost, r0.id: reverb-229980134, r0.namespace: reverb, r0.arg2_exact: 100 million people, r0.arg2: 100 million people, r0.rel: has a population of almost, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: The Facts Mexico),$x: (Mexico, have population of, $x))),AnswerState(100 million people))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'what' and answer shape = 111 aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.03645690805934931)
What is the population of Mexico?	any city	-0.1966731727241326	Derivation(What is the population of Mexico?,any city,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: Mexico City, r0.rel_exact: has the largest population of, r0.id: reverb-241196984, r0.namespace: reverb, r0.arg2_exact: any city, r0.arg2: any city, r0.rel: has the largest population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.822, r0.arg1_exact: Mexico City),$x: (Mexico, have population of, $x))),AnswerState(any city))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1966731727241326)
What is the population of Mexico?	25 million people	-0.41056029667196253	Derivation(What is the population of Mexico?,25 million people,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04sqj, r0.arg1: ?Mexico City, r0.rel_exact: has a population of, r0.id: reverb-248845020, r0.namespace: reverb, r0.arg2_exact: 25 million people, r0.arg2: 25 million people, r0.rel: has a population of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.822, r0.arg1_exact: ?Mexico City),$x: (Mexico, have population of, $x))),AnswerState(25 million people))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = 11 aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.41056029667196253)
What is the population of Mexico?	1200	-1.5440051909780832	Derivation(What is the population of Mexico?,1200,Vector(QaStep(What is the population of Mexico?,QuestionStateImpl(What is the population of Mexico?,Sentence(What is the population of Mexico?),false),RegexQuestionPattern(List(ent, rel),<lemma='what'> <lemma='be'> <pos='DT'> (<rel>:< pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+) <lemma='of'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($ent, have $rel of, $x))),QueryState($x: (Mexico, have population of, $x),false)), QaStep(What is the population of Mexico?,QueryState($x: (Mexico, have population of, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b90_r, r0.arg1: Mexico, r0.rel_exact: has a population of only, r0.id: reverb-188414140, r0.namespace: reverb, r0.arg2_exact: 1200, r0.arg2: 1200, r0.rel: has a population of only, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.806, r0.arg1_exact: Mexico),$x: (Mexico, have population of, $x))),AnswerState(1200))),SparseVector(question prefix = 'what' and isDate -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = 1111 -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.5440051909780832)
What kind of animal was Winnie the Pooh?	PB	-2.975980382013814	Derivation(What kind of animal was Winnie the Pooh?,PB,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0j0z4sw, r0.arg1: PB, r0.rel_exact: Type, r1.arg1_fbid_s: 025r_0t, r0.id: fb-99427303, r1.rel: was Tigger from, r0.namespace: freebase, r0.arg2_exact: Zoo Animal, r1.conf_f: 0.892, r1.arg2: Winnie-the-pooh, r1.arg2_fbid_s: 082kw, r0.arg2: Zoo Animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: PB, r1.rel_exact: was Tigger from, r1.arg2_exact: Winnie-the-pooh, r1.num_extrs_i: 2, r1.id: reverb-214184418, r0.arg1_exact: PB, r1.arg1_exact: PB, r1.corpora_ss: List(cw)),$x: ($x, "type", animal) ($x, was, Winnie the Pooh))),AnswerState(PB))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.5, query similarity with question -> 0.4, question prefix = 'what' and answer shape = AA -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.975980382013814)
What kind of animal was Winnie the Pooh?	Kids	-3.665218527691255	Derivation(What kind of animal was Winnie the Pooh?,Kids,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "is a", animal) ($x, was, Winnie the Pooh),false),RelSynRule(be a,be an animal that be a kind of,false,1172321.0,1298.0,65.0,0.4697284698486328),QueryState($x: ($x, be an animal that be a kind of, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be an animal that be a kind of, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: Kids, r0.rel_exact: is an animal that is a kind of, r0.prob_f: 0.9999981, r0.id: nell-947426, r1.rel: is actually, r0.namespace: nell, r0.arg2_exact: Animals, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: Animals, r0.rel: is an animal that is a kind of, r1.namespace: reverb, r1.arg1: kids, r1.rel_exact: is actually, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r1.id: reverb-206071749, r0.arg1_exact: Kids, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be an animal that be a kind of, animal) ($x, was, Winnie the Pooh))),AnswerState(Kids))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4697284698486328, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.875, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.665218527691255)
What kind of animal was Winnie the Pooh?	Kid	-4.369200370163146	Derivation(What kind of animal was Winnie the Pooh?,Kid,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be an, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: Kid, r0.rel_exact: is an, r0.id: nell-947239, r1.rel: is actually, r0.namespace: nell, r0.arg2_exact: animal, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: animal, r0.rel: is an, r1.namespace: reverb, r1.arg1: kids, r1.rel_exact: is actually, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r1.id: reverb-206071749, r0.arg1_exact: Kid, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be an, animal) ($x, was, Winnie the Pooh))),AnswerState(Kid))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.5714285714285714, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.369200370163146)
What kind of animal was Winnie the Pooh?	the characters	-4.563614905723297	Derivation(What kind of animal was Winnie the Pooh?,the characters,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a kind of", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "is a kind of", animal) ($x, was, Winnie the Pooh),false),RelSynRule(be a kind of,be any sort of,false,44765.0,270.0,115.0,0.6386665105819702),QueryState($x: ($x, be any sort of, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be any sort of, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: the characters, r0.rel_exact: is any sort of, r0.id: reverb-191936629, r1.rel: was, r0.namespace: reverb, r0.arg2_exact: anthropomorphic animal, r1.conf_f: 0.873, r1.arg2: the book Winnie-the-Pooh, r0.arg2: anthropomorphic animal, r0.rel: is any sort of, r1.namespace: reverb, r1.arg1: the character, r0.corpora_ss: List(cw), r1.rel_exact: was, r0.num_extrs_i: 3, r1.arg2_exact: the book Winnie-the-Pooh, r1.num_extrs_i: 2, r0.conf_f: 0.626, r1.id: reverb-65733916, r0.arg1_exact: the characters, r1.arg1_exact: the character, r1.corpora_ss: List(cw)),$x: ($x, be any sort of, animal) ($x, was, Winnie the Pooh))),AnswerState(the characters))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6386665105819702, minimum join key similarity -> 0.9629629629629629, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.2857142857142857, steps -> 0.75, query similarity with question -> 0.45454545454545453, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.563614905723297)
What kind of animal was Winnie the Pooh?	a good example	-5.027152954935404	Derivation(What kind of animal was Winnie the Pooh?,a good example,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "is a", animal) ($x, was, Winnie the Pooh),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (animal, setting, $x) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: (animal, setting, $x) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 032nch, r0.arg1: animal cruelty, r0.rel_exact: Set, r0.id: reverb-348397529, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: a good example, r1.conf_f: 0.944, r1.arg2: Winnie-The-Pooh or Eyeore, r0.arg2: a good example, r0.rel: Set, r1.namespace: reverb, r1.arg1: good example, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: Winnie-The-Pooh or Eyeore, r1.num_extrs_i: 2, r0.conf_f: 0.676, r1.id: reverb-12053305, r0.arg1_exact: animal cruelty, r1.arg1_exact: good example, r1.corpora_ss: List(cw)),$x: (animal, setting, $x) ($x, was, Winnie the Pooh))),AnswerState(a good example))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.9230769230769231, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.125, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.027152954935404)
What kind of animal was Winnie the Pooh?	the character	-6.135471032001193	Derivation(What kind of animal was Winnie the Pooh?,the character,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: the character, r0.rel_exact: is a humanoid form of, r0.id: reverb-41177329, r1.rel: was, r0.namespace: reverb, r0.arg2_exact: the animal, r0.arg2_fbid_s: 06j0d5, r1.conf_f: 0.873, r1.arg2: the book Winnie-the-Pooh, r0.arg2: the animal, r0.rel: is a humanoid form of, r1.namespace: reverb, r1.arg1: the character, r0.corpora_ss: List(cw), r1.rel_exact: was, r0.num_extrs_i: 2, r1.arg2_exact: the book Winnie-the-Pooh, r1.num_extrs_i: 2, r0.conf_f: 0.883, r1.id: reverb-65733916, r0.arg1_exact: the character, r1.arg1_exact: the character, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(the character))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.135471032001193)
What kind of animal was Winnie the Pooh?	A kid	-6.2180415348973614	Derivation(What kind of animal was Winnie the Pooh?,A kid,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: A kid, r0.rel_exact: was shown a picture of, r0.id: reverb-275633302, r1.rel: is actually, r0.namespace: reverb, r0.arg2_exact: an animal, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: an animal, r0.rel: was shown a picture of, r1.namespace: reverb, r1.arg1: kids, r0.corpora_ss: List(cw), r1.rel_exact: is actually, r0.num_extrs_i: 4, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r0.conf_f: 0.964, r1.id: reverb-206071749, r0.arg1_exact: A kid, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(A kid))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = A aaa -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.14285714285714285, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.2180415348973614)
What kind of animal was Winnie the Pooh?	kids	-6.415273441406254	Derivation(What kind of animal was Winnie the Pooh?,kids,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: kids, r0.rel_exact: Be a Voice for, r0.id: reverb-45178306, r1.rel: is actually, r0.namespace: reverb, r0.arg2_exact: Animals, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: Animals, r0.rel: Be a Voice for, r1.namespace: reverb, r1.arg1: kids, r0.corpora_ss: List(cw), r1.rel_exact: is actually, r0.num_extrs_i: 2, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r0.conf_f: 0.612, r1.id: reverb-206071749, r0.arg1_exact: kids, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(kids))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.16666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.415273441406254)
What kind of animal was Winnie the Pooh?	such kids	-6.513607699129556	Derivation(What kind of animal was Winnie the Pooh?,such kids,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: such kids, r0.rel_exact: are treated a little better than, r0.id: reverb-313790351, r1.rel: is actually, r0.namespace: reverb, r0.arg2_exact: animals, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: animals, r0.rel: are treated a little better than, r1.namespace: reverb, r1.arg1: kids, r0.corpora_ss: List(cw), r1.rel_exact: is actually, r0.num_extrs_i: 2, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r0.conf_f: 0.689, r1.id: reverb-206071749, r0.arg1_exact: such kids, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(such kids))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6153846153846154, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.16666666666666666, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.513607699129556)
What kind of animal was Winnie the Pooh?	the kids	-6.855757124924031	Derivation(What kind of animal was Winnie the Pooh?,the kids,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1: the kids, r0.rel_exact: have been a little like, r0.id: reverb-261700319, r1.rel: is actually, r0.namespace: reverb, r0.arg2_exact: caged animals, r1.conf_f: 0.778, r1.arg2: Winnie-the-Pooh accessible, r0.arg2: caged animals, r0.rel: have been a little like, r1.namespace: reverb, r1.arg1: kids, r0.corpora_ss: List(cw), r1.rel_exact: is actually, r0.num_extrs_i: 7, r1.arg2_exact: Winnie-the-Pooh accessible, r1.num_extrs_i: 2, r0.conf_f: 0.71, r1.id: reverb-206071749, r0.arg1_exact: the kids, r1.arg1_exact: kids, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(the kids))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6666666666666666, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.14285714285714285, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.855757124924031)
What kind of animal was Winnie the Pooh?	Disney	-7.109569324627671	Derivation(What kind of animal was Winnie the Pooh?,Disney,Vector(QaStep(What kind of animal was Winnie the Pooh?,QuestionStateImpl(What kind of animal was Winnie the Pooh?,Sentence(What kind of animal was Winnie the Pooh?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, "type", animal) ($x, was, Winnie the Pooh),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true)), QaStep(What kind of animal was Winnie the Pooh?,QueryState($x: ($x, be a, animal) ($x, was, Winnie the Pooh),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09b3v, r0.arg1: Disney, r0.rel_exact: would be a prime target for, r1.arg1_fbid_s: 09b3v, r0.id: reverb-143215721, r1.rel: is taking, r0.namespace: reverb, r0.arg2_exact: animal rights activists, r0.arg2_fbid_s: 0h4xw_, r1.conf_f: 0.776, r1.arg2: Winnie-the-Pooh, r1.arg2_fbid_s: 082kw, r0.arg2: animal rights activists, r0.rel: would be a prime target for, r1.namespace: reverb, r1.arg1: Disney, r0.corpora_ss: List(cw), r1.rel_exact: is taking, r0.num_extrs_i: 3, r1.arg2_exact: Winnie-the-Pooh, r1.num_extrs_i: 2, r0.conf_f: 0.895, r1.id: reverb-23695700, r0.arg1_exact: Disney, r1.arg1_exact: Disney, r1.corpora_ss: List(cw)),$x: ($x, be a, animal) ($x, was, Winnie the Pooh))),AnswerState(Disney))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.14285714285714285, steps -> 0.75, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-7.109569324627671)
When was George Foreman born?	January 10th	4.513329502049129	Derivation(When was George Foreman born?,January 10th,Vector(QaStep(When was George Foreman born?,QuestionStateImpl(When was George Foreman born?,Sentence(When was George Foreman born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (George Foreman, was born on, $x),false)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, was born on, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0139wt, r0.arg1: George Foreman, r0.rel_exact: was born on, r0.id: reverb-249934150, r0.namespace: reverb, r0.arg2_exact: January 10th, r0.arg2: January 10th, r0.rel: was born on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.949, r0.arg1_exact: George Foreman),$x: (George Foreman, was born on, $x))),AnswerState(January 10th))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = Aaaaa 11aa -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.513329502049129)
When was George Foreman born?	the boxing scene	0.6092904231578102	Derivation(When was George Foreman born?,the boxing scene,Vector(QaStep(When was George Foreman born?,QuestionStateImpl(When was George Foreman born?,Sentence(When was George Foreman born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (George Foreman, was born on, $x),false)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, was born on, $x),false),RelSynRule(be bear on,be know on,false,11629.0,105.0,3.0,0.5963560938835144),QueryState($x: (George Foreman, be know on, $x),true)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, be know on, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0139wt, r0.arg1: George Foreman, r0.rel_exact: was well known on, r0.id: reverb-362313757, r0.namespace: reverb, r0.arg2_exact: the boxing scene, r0.arg2: the boxing scene, r0.rel: was well known on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.916, r0.arg1_exact: George Foreman),$x: (George Foreman, be know on, $x))),AnswerState(the boxing scene))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5963560938835144, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),0.6092904231578102)
When was George Foreman born?	JD	-1.266938774189668	Derivation(When was George Foreman born?,JD,Vector(QaStep(When was George Foreman born?,QuestionStateImpl(When was George Foreman born?,Sentence(When was George Foreman born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (George Foreman, was born on, $x),false)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (George Foreman, be bear, $x),true)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1: close George Edward Foreman, r0.rel_exact: was born to, r0.id: reverb-249386492, r0.namespace: reverb, r0.arg2_exact: JD, r0.arg2_fbid_s: 013zdg, r0.arg2: JD, r0.rel: was born to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.938, r0.arg1_exact: close George Edward Foreman),$x: (George Foreman, be bear, $x))),AnswerState(JD))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'when' and answer shape = AA -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.266938774189668)
When was George Foreman born?	Nancy	-1.5792592496441022	Derivation(When was George Foreman born?,Nancy,Vector(QaStep(When was George Foreman born?,QuestionStateImpl(When was George Foreman born?,Sentence(When was George Foreman born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (George Foreman, was born on, $x),false)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, was born on, $x),false),RelSynRule(be bear on,be bear,false,11629.0,27501.0,432.0,0.5776621997356415),QueryState($x: (George Foreman, be bear, $x),true)), QaStep(When was George Foreman born?,QueryState($x: (George Foreman, be bear, $x),true),ExecutionAction(ExecTuple((r0.arg1: George E. Foreman, r0.rel_exact: was born to, r0.id: reverb-249272698, r0.namespace: reverb, r0.arg2_exact: Nancy, r0.arg2_fbid_s: 011w4n, r0.arg2: Nancy, r0.rel: was born to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.938, r0.arg1_exact: George E. Foreman),$x: (George Foreman, be bear, $x))),AnswerState(Nancy))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5776621997356415, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.5792592496441022)
Who was president in 1913?	Woodrow Wilson	2.7106438610637804	Derivation(Who was president in 1913?,Woodrow Wilson,Vector(QaStep(Who was president in 1913?,QuestionStateImpl(Who was president in 1913?,Sentence(Who was president in 1913?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was president in, 1913),false)), QaStep(Who was president in 1913?,QueryState($x: ($x, was president in, 1913),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 083q7, r0.arg1: Woodrow Wilson, r0.rel_exact: was elected President in, r0.id: reverb-106719650, r0.namespace: reverb, r0.arg2_exact: 1913, r0.arg2: 1913, r0.rel: was elected President in, r0.corpora_ss: List(cw), r0.num_extrs_i: 24, r0.conf_f: 0.972, r0.arg1_exact: Woodrow Wilson),$x: ($x, was president in, 1913))),AnswerState(Woodrow Wilson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.7106438610637804)
Who was president in 1913?	Stephen M. Barrett	2.3033477663537303	Derivation(Who was president in 1913?,Stephen M. Barrett,Vector(QaStep(Who was president in 1913?,QuestionStateImpl(Who was president in 1913?,Sentence(Who was president in 1913?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was president in, 1913),false)), QaStep(Who was president in 1913?,QueryState($x: ($x, was president in, 1913),false),ExecutionAction(ExecTuple((r0.arg1: Stephen M. Barrett, r0.rel_exact: was named president in, r0.id: reverb-290105769, r0.namespace: reverb, r0.arg2_exact: 1913, r0.arg2: 1913, r0.rel: was named president in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.868, r0.arg1_exact: Stephen M. Barrett),$x: ($x, was president in, 1913))),AnswerState(Stephen M. Barrett))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'who' and answer shape = Aaaaa A. Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3033477663537303)
Who was president in 1913?	premier	1.7923368078005855	Derivation(Who was president in 1913?,premier,Vector(QaStep(Who was president in 1913?,QuestionStateImpl(Who was president in 1913?,Sentence(Who was president in 1913?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was president in, 1913),false)), QaStep(Who was president in 1913?,QueryState($x: ($x, was president in, 1913),false),ExecutionAction(ExecTuple((r0.arg1: premier, r0.rel_exact: was elected president in, r0.id: reverb-40138344, r0.namespace: reverb, r0.arg2_exact: 1913, r0.arg2: 1913, r0.rel: was elected president in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.898, r0.arg1_exact: premier),$x: ($x, was president in, 1913))),AnswerState(premier))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.7923368078005855)
Who was president in 1913?	Yuan Shikai	0.6691878544335264	Derivation(Who was president in 1913?,Yuan Shikai,Vector(QaStep(Who was president in 1913?,QuestionStateImpl(Who was president in 1913?,Sentence(Who was president in 1913?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was president in, 1913),false)), QaStep(Who was president in 1913?,QueryState($x: ($x, was president in, 1913),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g4hq, r0.arg1: Yuan Shikai, r0.rel_exact: was officially elected president in, r0.id: reverb-163278042, r0.namespace: reverb, r0.arg2_exact: 1913, r0.arg2: 1913, r0.rel: was officially elected president in, r0.corpora_ss: List(cw), r0.num_extrs_i: 18, r0.conf_f: 0.967, r0.arg1_exact: Yuan Shikai),$x: ($x, was president in, 1913))),AnswerState(Yuan Shikai))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6691878544335264)
Who is the CEO of UPS?	France Julien	1.442023709681426	Derivation(Who is the CEO of UPS?,France Julien,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be a friend of,false,1054.0,930.0,4.0,0.6122113168239594),QueryState($x: ($x, be a friend of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be a friend of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: France Julien, r0.rel_exact: is a special friend of, r0.id: reverb-118120816, r0.namespace: reverb, r0.arg2_exact: UP, r0.arg2: UP, r0.rel: is a special friend of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.926, r0.arg1_exact: France Julien),$x: ($x, be a friend of, UPS))),AnswerState(France Julien))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6122113168239594, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.442023709681426)
Who is the CEO of UPS?	Salman Khurshid	1.181192236348426	Derivation(Who is the CEO of UPS?,Salman Khurshid,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be leader in,false,1054.0,834.0,2.0,0.5939551889896393),QueryState($x: ($x, be leader in, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be leader in, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Salman Khurshid, r0.rel_exact: are Muslim leaders in, r0.id: reverb-148121607, r0.namespace: reverb, r0.arg2_exact: UP, r0.arg2: UP, r0.rel: are Muslim leaders in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.765, r0.arg1_exact: Salman Khurshid),$x: ($x, be leader in, UPS))),AnswerState(Salman Khurshid))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5939551889896393, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.181192236348426)
Who is the CEO of UPS?	Ron Sowder	1.0690396826648079	Derivation(Who is the CEO of UPS?,Ron Sowder,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Ron Sowder, r0.rel_exact: began working for, r0.id: reverb-190027937, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: began working for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.949, r0.arg1_exact: Ron Sowder),$x: ($x, work for, UPS))),AnswerState(Ron Sowder))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0690396826648079)
Who is the CEO of UPS?	The Deputy	1.0690396826648079	Derivation(Who is the CEO of UPS?,The Deputy,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: The Deputy, r0.rel_exact: once worked for, r0.id: reverb-179240058, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: once worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.929, r0.arg1_exact: The Deputy),$x: ($x, work for, UPS))),AnswerState(The Deputy))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0690396826648079)
Who is the CEO of UPS?	Rommel Griffin	1.0187889193190505	Derivation(Who is the CEO of UPS?,Rommel Griffin,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be employee of,false,1054.0,262.0,4.0,0.6518000662326813),QueryState($x: ($x, be employee of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be employee of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Rommel Griffin, r0.rel_exact: was a 28-year employee of, r0.id: reverb-103029389, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: was a 28-year employee of, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.88, r0.arg1_exact: Rommel Griffin),$x: ($x, be employee of, UPS))),AnswerState(Rommel Griffin))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6518000662326813, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0187889193190505)
Who is the CEO of UPS?	Mulayam Singh	0.9881008594553031	Derivation(Who is the CEO of UPS?,Mulayam Singh,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be chief of,false,1054.0,530.0,2.0,0.6081225872039795),QueryState($x: ($x, be chief of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be chief of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Mulayam Singh, r0.rel_exact: was our Chief Minister of, r0.id: reverb-200616396, r0.namespace: reverb, r0.arg2_exact: UP, r0.arg2: UP, r0.rel: was our Chief Minister of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.972, r0.arg1_exact: Mulayam Singh),$x: ($x, be chief of, UPS))),AnswerState(Mulayam Singh))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6081225872039795, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9881008594553031)
Who is the CEO of UPS?	Weather delay	0.8544178622536038	Derivation(Who is the CEO of UPS?,Weather delay,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be outside of,false,1054.0,595.0,3.0,0.6171782314777374),QueryState($x: ($x, be outside of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be outside of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Weather delay, r0.rel_exact: is outside of, r0.id: reverb-291597065, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: is outside of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.78, r0.arg1_exact: Weather delay),$x: ($x, be outside of, UPS))),AnswerState(Weather delay))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6171782314777374, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'who' and answer shape = Aaaaa aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.8544178622536038)
Who is the CEO of UPS?	a growing number	0.773745249055656	Derivation(Who is the CEO of UPS?,a growing number,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,true,1054.0,3484.0,74.0,0.6621181666851044),QueryState($x: (UPS, collaborate with, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, collaborate with, $x),true),ExecutionAction(ExecTuple((r0.arg1: UP, r0.rel_exact: is proud to collaborate with, r0.id: reverb-32252233, r0.namespace: reverb, r0.arg2_exact: a growing number, r0.arg2: a growing number, r0.rel: is proud to collaborate with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.72, r0.arg1_exact: UP),$x: (UPS, collaborate with, $x))),AnswerState(a growing number))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6621181666851044, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.773745249055656)
Who is the CEO of UPS?	Rosemary Turner	0.7348757732749926	Derivation(Who is the CEO of UPS?,Rosemary Turner,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be president of,false,1054.0,4368.0,13.0,0.6007044017314911),QueryState($x: ($x, be president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Rosemary Turner, r0.rel_exact: is president of, r0.id: reverb-352539277, r0.namespace: reverb, r0.arg2_exact: the UPS, r0.arg2: the UPS, r0.rel: is president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.741, r0.arg1_exact: Rosemary Turner),$x: ($x, be president of, UPS))),AnswerState(Rosemary Turner))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6007044017314911, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7348757732749926)
Who is the CEO of UPS?	HP printers	0.7178557948908817	Derivation(Who is the CEO of UPS?,HP printers,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: HP printers, r0.rel_exact: work for, r0.id: reverb-189511338, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: work for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.854, r0.arg1_exact: HP printers),$x: ($x, work for, UPS))),AnswerState(HP printers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'who' and answer shape = AA aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.7178557948908817)
Who is the CEO of UPS?	South Rowan High School	0.7178557948908817	Derivation(Who is the CEO of UPS?,South Rowan High School,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: South Rowan High School, r0.rel_exact: worked for, r0.id: reverb-257507056, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.904, r0.arg1_exact: South Rowan High School),$x: ($x, work for, UPS))),AnswerState(South Rowan High School))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),0.7178557948908817)
Who is the CEO of UPS?	New Balance	0.5893371500822182	Derivation(Who is the CEO of UPS?,New Balance,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,true,1054.0,3484.0,74.0,0.6621181666851044),QueryState($x: (UPS, collaborate with, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, collaborate with, $x),true),ExecutionAction(ExecTuple((r0.arg1: up, r0.rel_exact: recently collaborated with, r0.id: reverb-70796051, r0.namespace: reverb, r0.arg2_exact: New Balance, r0.arg2_fbid_s: 08dr90, r0.arg2: New Balance, r0.rel: recently collaborated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.581, r0.arg1_exact: up),$x: (UPS, collaborate with, $x))),AnswerState(New Balance))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.6621181666851044, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5893371500822182)
Who is the CEO of UPS?	a sophomore	0.5612515455054006	Derivation(Who is the CEO of UPS?,a sophomore,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: a sophomore, r0.rel_exact: is the CEO of, r0.id: reverb-305624960, r0.namespace: reverb, r0.arg2_exact: a start-up company, r0.arg2: a start-up company, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.744, r0.arg1_exact: a sophomore),$x: ($x, is the CEO of, UPS))),AnswerState(a sophomore))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5612515455054006)
Who is the CEO of UPS?	a former PV quality engineer	0.5612515455054006	Derivation(Who is the CEO of UPS?,a former PV quality engineer,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: a former PV quality engineer, r0.rel_exact: is the CEO of, r0.id: reverb-224308309, r0.namespace: reverb, r0.arg2_exact: a solar start-up, r0.arg2: a solar start-up, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.693, r0.arg1_exact: a former PV quality engineer),$x: ($x, is the CEO of, UPS))),AnswerState(a former PV quality engineer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, question prefix = 'who' and answer shape = a aaaa AA aaaa aaaa -> 1.0, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5612515455054006)
Who is the CEO of UPS?	Serial entrepreneur Bill Gross	0.5612515455054006	Derivation(Who is the CEO of UPS?,Serial entrepreneur Bill Gross,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: Serial entrepreneur Bill Gross, r0.rel_exact: is the CEO of, r0.id: reverb-99842253, r0.namespace: reverb, r0.arg2_exact: PostUp, r0.arg2: PostUp, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.955, r0.arg1_exact: Serial entrepreneur Bill Gross),$x: ($x, is the CEO of, UPS))),AnswerState(Serial entrepreneur Bill Gross))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, question prefix = 'who' and answer shape = Aaaaa aaaa Aaaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5612515455054006)
Who is the CEO of UPS?	Joe	0.5612515455054006	Derivation(Who is the CEO of UPS?,Joe,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: Joe, r0.rel_exact: is the CEO of, r0.id: reverb-351422493, r0.namespace: reverb, r0.arg2_exact: a CapeTown technology start-up, r0.arg2: a CapeTown technology start-up, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.774, r0.arg1_exact: Joe),$x: ($x, is the CEO of, UPS))),AnswerState(Joe))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5612515455054006)
Who is the CEO of UPS?	Pierre Lamont Taylor	0.45000593056266114	Derivation(Who is the CEO of UPS?,Pierre Lamont Taylor,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Pierre Lamont Taylor, r0.rel_exact: worked for, r0.id: reverb-163617812, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.927, r0.arg1_exact: Pierre Lamont Taylor),$x: ($x, work for, UPS))),AnswerState(Pierre Lamont Taylor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.45000593056266114)
Who is the CEO of UPS?	Maya	0.2926084359799255	Derivation(Who is the CEO of UPS?,Maya,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be kick out of,false,1054.0,329.0,4.0,0.6446840167045593),QueryState($x: ($x, be kick out of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be kick out of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Maya, r0.rel_exact: is kicked out of, r0.id: reverb-275828640, r0.namespace: reverb, r0.arg2_exact: UP, r0.arg2: UP, r0.rel: is kicked out of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.777, r0.arg1_exact: Maya),$x: ($x, be kick out of, UPS))),AnswerState(Maya))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6446840167045593, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.2926084359799255)
Who is the CEO of UPS?	friend	0.20684483633773665	Derivation(Who is the CEO of UPS?,friend,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: friend, r0.rel_exact: works for, r0.id: reverb-390849907, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.735, r0.arg1_exact: friend),$x: ($x, work for, UPS))),AnswerState(friend))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.20684483633773665)
Who is the CEO of UPS?	Doi	0.18788698608511156	Derivation(Who is the CEO of UPS?,Doi,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 026p9_, r0.arg1: Doi, r0.rel_exact: worked for, r0.id: reverb-322316379, r0.namespace: reverb, r0.arg2_exact: UP, r0.arg2: UP, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.88, r0.arg1_exact: Doi),$x: ($x, work for, UPS))),AnswerState(Doi))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.18788698608511156)
Who is the CEO of UPS?	Moser Baer	0.13629396575231478	Derivation(Who is the CEO of UPS?,Moser Baer,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be launch by,true,1054.0,807.0,2.0,0.5949836075305939),QueryState($x: (UPS, be launch by, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, be launch by, $x),true),ExecutionAction(ExecTuple((r0.arg1: The UPS, r0.rel_exact: is being launched by, r0.id: reverb-307580545, r0.namespace: reverb, r0.arg2_exact: Moser Baer, r0.arg2: Moser Baer, r0.rel: is being launched by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.94, r0.arg1_exact: The UPS),$x: (UPS, be launch by, $x))),AnswerState(Moser Baer))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949836075305939, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.13629396575231478)
Who is the CEO of UPS?	any relatives	0.1330230845996243	Derivation(Who is the CEO of UPS?,any relatives,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: any relatives, r0.rel_exact: work for, r0.id: reverb-264299292, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: work for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.727, r0.arg1_exact: any relatives),$x: ($x, work for, UPS))),AnswerState(any relatives))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.1330230845996243)
Who is the CEO of UPS?	the program director	0.045623894141903154	Derivation(Who is the CEO of UPS?,the program director,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be president of,false,1054.0,4368.0,13.0,0.6007044017314911),QueryState($x: ($x, be president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: the program director, r0.rel_exact: has been named president of, r0.id: reverb-219039228, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: has been named president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.834, r0.arg1_exact: the program director),$x: ($x, be president of, UPS))),AnswerState(the program director))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6007044017314911, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.045623894141903154)
Who is the CEO of UPS?	Todd	1.815849124975344E-5	Derivation(Who is the CEO of UPS?,Todd,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Todd, r0.rel_exact: worked for, r0.id: reverb-200156295, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.952, r0.arg1_exact: Todd),$x: ($x, work for, UPS))),AnswerState(Todd))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.815849124975344E-5)
Who is the CEO of UPS?	Jake	1.815849124975344E-5	Derivation(Who is the CEO of UPS?,Jake,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Jake, r0.rel_exact: works for, r0.id: reverb-171476505, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.905, r0.arg1_exact: Jake),$x: ($x, work for, UPS))),AnswerState(Jake))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.815849124975344E-5)
Who is the CEO of UPS?	Jeff	1.815849124975344E-5	Derivation(Who is the CEO of UPS?,Jeff,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Jeff, r0.rel_exact: worked for, r0.id: reverb-28672687, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.952, r0.arg1_exact: Jeff),$x: ($x, work for, UPS))),AnswerState(Jeff))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.815849124975344E-5)
Who is the CEO of UPS?	Fed Up	-0.04337643106408695	Derivation(Who is the CEO of UPS?,Fed Up,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the host of,false,1054.0,327.0,2.0,0.6232137382030487),QueryState($x: ($x, be the host of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the host of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Fed Up, r0.rel_exact: is the host of, r0.id: reverb-45011156, r0.namespace: reverb, r0.arg2_exact: Wise Up, r0.arg2: Wise Up, r0.rel: is the host of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.913, r0.arg1_exact: Fed Up),$x: ($x, be the host of, UPS))),AnswerState(Fed Up))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6232137382030487, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = Aaa Aa -> 1.0, action type = ExecutionAction -> 1.0),-0.04337643106408695)
Who is the CEO of UPS?	a UPS driver	-0.08693045789814269	Derivation(Who is the CEO of UPS?,a UPS driver,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a UPS driver, r0.rel_exact: has worked for, r0.id: reverb-137178238, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: has worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.651, r0.arg1_exact: a UPS driver),$x: ($x, work for, UPS))),AnswerState(a UPS driver))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = a AAA aaaa -> 1.0),-0.08693045789814269)
Who is the CEO of UPS?	Kim	-0.08693045789814269	Derivation(Who is the CEO of UPS?,Kim,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Kim, r0.rel_exact: currently works for, r0.id: reverb-148415339, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: currently works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.905, r0.arg1_exact: Kim),$x: ($x, work for, UPS))),AnswerState(Kim))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.08693045789814269)
Who is the CEO of UPS?	Lea Schizas	-0.09728021297250988	Derivation(Who is the CEO of UPS?,Lea Schizas,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the founder of,false,1054.0,3014.0,22.0,0.62873974442482),QueryState($x: ($x, be the founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Lea Schizas, r0.rel_exact: is the founder of, r0.id: reverb-35610150, r0.namespace: reverb, r0.arg2_exact: The MuseItUp Club, r0.arg2: The MuseItUp Club, r0.rel: is the founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.988, r0.arg1_exact: Lea Schizas),$x: ($x, be the founder of, UPS))),AnswerState(Lea Schizas))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.62873974442482, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.09728021297250988)
Who is the CEO of UPS?	much reliance	-0.11072189719768666	Derivation(Who is the CEO of UPS?,much reliance,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,do without,true,1054.0,111.0,2.0,0.6569771766662598),QueryState($x: (UPS, do without, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, do without, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bhnm, r0.arg1: UPS, r0.rel_exact: did very well without, r0.id: reverb-37004964, r0.namespace: reverb, r0.arg2_exact: much reliance, r0.arg2: much reliance, r0.rel: did very well without, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.795, r0.arg1_exact: UPS),$x: (UPS, do without, $x))),AnswerState(much reliance))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6569771766662598, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.11072189719768666)
Who is the CEO of UPS?	AMETEK Solidstate Controls	-0.11822648092245513	Derivation(Who is the CEO of UPS?,AMETEK Solidstate Controls,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be leader in,false,1054.0,834.0,2.0,0.5939551889896393),QueryState($x: ($x, be leader in, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be leader in, UPS),true),ExecutionAction(ExecTuple((r0.arg1: AMETEK Solidstate Controls, r0.rel_exact: is a recognized leader in, r0.id: reverb-316249371, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: is a recognized leader in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.894, r0.arg1_exact: AMETEK Solidstate Controls),$x: ($x, be leader in, UPS))),AnswerState(AMETEK Solidstate Controls))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5939551889896393, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = AAAA Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.11822648092245513)
Who is the CEO of UPS?	Control Range	-0.16551409318763666	Derivation(Who is the CEO of UPS?,Control Range,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Control Range, r0.rel_exact: works for, r0.id: reverb-268159195, r0.namespace: reverb, r0.arg2_exact: up to 10 meters, r0.arg2: up to 10 meters, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.879, r0.arg1_exact: Control Range),$x: ($x, work for, UPS))),AnswerState(Control Range))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.16551409318763666)
Who is the CEO of UPS?	a computer repair technician	-0.1877096594640073	Derivation(Who is the CEO of UPS?,a computer repair technician,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a computer repair technician, r0.rel_exact: works for, r0.id: reverb-367213334, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.719, r0.arg1_exact: a computer repair technician),$x: ($x, work for, UPS))),AnswerState(a computer repair technician))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = a aaaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.1877096594640073)
Who is the CEO of UPS?	Mitch Taylor	-0.20329080361436191	Derivation(Who is the CEO of UPS?,Mitch Taylor,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the president of,false,1054.0,2064.0,9.0,0.6126398742198944),QueryState($x: ($x, be the president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Mitch Taylor, r0.rel_exact: is the founding president of, r0.id: reverb-36375445, r0.namespace: reverb, r0.arg2_exact: the UP ADJA chapter, r0.arg2: the UP ADJA chapter, r0.rel: is the founding president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.843, r0.arg1_exact: Mitch Taylor),$x: ($x, be the president of, UPS))),AnswerState(Mitch Taylor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6126398742198944, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.25, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.20329080361436191)
Who is the CEO of UPS?	a marketing manager	-0.22460130010498625	Derivation(Who is the CEO of UPS?,a marketing manager,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,co-founded,false,1054.0,1370.0,12.0,0.6344372928142548),QueryState($x: ($x, co-founded, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, co-founded, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a marketing manager, r0.rel_exact: co-founded, r0.id: reverb-384647629, r0.namespace: reverb, r0.arg2_exact: several start-ups, r0.arg2: several start-ups, r0.rel: co-founded, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.78, r0.arg1_exact: a marketing manager),$x: ($x, co-founded, UPS))),AnswerState(a marketing manager))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6344372928142548, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.22460130010498625)
Who is the CEO of UPS?	a public company	-0.22460130010498625	Derivation(Who is the CEO of UPS?,a public company,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,co-founded,false,1054.0,1370.0,12.0,0.6344372928142548),QueryState($x: ($x, co-founded, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, co-founded, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a public company, r0.rel_exact: co-founded, r0.id: reverb-312525664, r0.namespace: reverb, r0.arg2_exact: three successful start-ups, r0.arg2: three successful start-ups, r0.rel: co-founded, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.816, r0.arg1_exact: a public company),$x: ($x, co-founded, UPS))),AnswerState(a public company))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6344372928142548, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.22460130010498625)
Who is the CEO of UPS?	a security background	-0.2554188276063998	Derivation(Who is the CEO of UPS?,a security background,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a security background, r0.rel_exact: worked for, r0.id: reverb-297323310, r0.namespace: reverb, r0.arg2_exact: a start-up, r0.arg2: a start-up, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.868, r0.arg1_exact: a security background),$x: ($x, work for, UPS))),AnswerState(a security background))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.2554188276063998)
Who is the CEO of UPS?	David Cygielman	-0.26332989862896294	Derivation(Who is the CEO of UPS?,David Cygielman,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be ceo of,false,1054.0,815.0,4.0,0.6163361966609955),QueryState($x: ($x, be ceo of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be ceo of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: David Cygielman, r0.rel_exact: is CEO of, r0.id: reverb-105146441, r0.namespace: reverb, r0.arg2_exact: UpStarter Moishe House, r0.arg2: UpStarter Moishe House, r0.rel: is CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.955, r0.arg1_exact: David Cygielman),$x: ($x, be ceo of, UPS))),AnswerState(David Cygielman))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6163361966609955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.26332989862896294)
Who is the CEO of UPS?	law	-0.28965438507328023	Derivation(Who is the CEO of UPS?,law,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04gb7, r0.arg1: law, r0.rel_exact: works for, r0.id: reverb-72613290, r0.namespace: reverb, r0.arg2_exact: ups, r0.arg2_fbid_s: 0bhnm, r0.arg2: ups, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.585, r0.arg1_exact: law),$x: ($x, work for, UPS))),AnswerState(law))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'who' and answer shape = aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.28965438507328023)
Who is the CEO of UPS?	Shawqi Khatib	-0.3182582216288814	Derivation(Who is the CEO of UPS?,Shawqi Khatib,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the head of,false,1054.0,2583.0,17.0,0.6255049705505371),QueryState($x: ($x, be the head of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the head of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Shawqi Khatib, r0.rel_exact: is the head of, r0.id: reverb-216493748, r0.namespace: reverb, r0.arg2_exact: the Supreme Follow-up Committee, r0.arg2: the Supreme Follow-up Committee, r0.rel: is the head of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.892, r0.arg1_exact: Shawqi Khatib),$x: ($x, be the head of, UPS))),AnswerState(Shawqi Khatib))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6255049705505371, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3182582216288814)
Who is the CEO of UPS?	Maria Zampini	-0.3272973158057273	Derivation(Who is the CEO of UPS?,Maria Zampini,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the president of,false,1054.0,2064.0,9.0,0.6126398742198944),QueryState($x: ($x, be the president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Maria Zampini, r0.rel_exact: is the president of, r0.id: reverb-257474535, r0.namespace: reverb, r0.arg2_exact: UpShoot LLC, r0.arg2: UpShoot LLC, r0.rel: is the president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.955, r0.arg1_exact: Maria Zampini),$x: ($x, be the president of, UPS))),AnswerState(Maria Zampini))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6126398742198944, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3272973158057273)
Who is the CEO of UPS?	Andrew Rasiej	-0.3285381363253508	Derivation(Who is the CEO of UPS?,Andrew Rasiej,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the chairman of,false,1054.0,728.0,3.0,0.6108738481998444),QueryState($x: ($x, be the chairman of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the chairman of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Andrew Rasiej, r0.rel_exact: is the chairman of, r0.id: reverb-337193487, r0.namespace: reverb, r0.arg2_exact: New York Tech MeetUp, r0.arg2: New York Tech MeetUp, r0.rel: is the chairman of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.932, r0.arg1_exact: Andrew Rasiej),$x: ($x, be the chairman of, UPS))),AnswerState(Andrew Rasiej))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6108738481998444, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3285381363253508)
Who is the CEO of UPS?	Janie Hotchkiss	-0.33479986385292837	Derivation(Who is the CEO of UPS?,Janie Hotchkiss,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the owner of,false,1054.0,2582.0,8.0,0.6019617021083832),QueryState($x: ($x, be the owner of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the owner of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Janie Hotchkiss, r0.rel_exact: is the owner of, r0.id: reverb-318258714, r0.namespace: reverb, r0.arg2_exact: Up2Tempo Magazineestore, r0.arg2: Up2Tempo Magazineestore, r0.rel: is the owner of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.932, r0.arg1_exact: Janie Hotchkiss),$x: ($x, be the owner of, UPS))),AnswerState(Janie Hotchkiss))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6019617021083832, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.33479986385292837)
Who is the CEO of UPS?	a player	-0.3552245167901369	Derivation(Who is the CEO of UPS?,a player,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,become president of,false,1054.0,505.0,2.0,0.6096325218677521),QueryState($x: ($x, become president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, become president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a player, r0.rel_exact: becomes President of, r0.id: reverb-383235339, r0.namespace: reverb, r0.arg2_exact: the UP, r0.arg2: the UP, r0.rel: becomes President of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: a player),$x: ($x, become president of, UPS))),AnswerState(a player))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6096325218677521, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3552245167901369)
Who is the CEO of UPS?	Salt Lake City	-0.3552245167901369	Derivation(Who is the CEO of UPS?,Salt Lake City,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,become president of,false,1054.0,505.0,2.0,0.6096325218677521),QueryState($x: ($x, become president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, become president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Salt Lake City, r0.rel_exact: became president of, r0.id: reverb-227027618, r0.namespace: reverb, r0.arg2_exact: UPS Germany, r0.arg2: UPS Germany, r0.rel: became president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.897, r0.arg1_exact: Salt Lake City),$x: ($x, become president of, UPS))),AnswerState(Salt Lake City))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6096325218677521, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaa Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3552245167901369)
Who is the CEO of UPS?	merchandising and marketing	-0.39142378365841024	Derivation(Who is the CEO of UPS?,merchandising and marketing,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be ceo of,false,1054.0,815.0,4.0,0.6163361966609955),QueryState($x: ($x, be ceo of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be ceo of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: merchandising and marketing, r0.rel_exact: was CEO of, r0.id: reverb-373082046, r0.namespace: reverb, r0.arg2_exact: 1 UP Studios, r0.arg2: 1 UP Studios, r0.rel: was CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.929, r0.arg1_exact: merchandising and marketing),$x: ($x, be ceo of, UPS))),AnswerState(merchandising and marketing))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6163361966609955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'who' and answer shape = aaaa aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.39142378365841024)
Who is the CEO of UPS?	EAOP	-0.4147741871654862	Derivation(Who is the CEO of UPS?,EAOP,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be employee of,false,1054.0,262.0,4.0,0.6518000662326813),QueryState($x: ($x, be employee of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be employee of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: EAOP, r0.rel_exact: are employees of, r0.id: reverb-107063413, r0.namespace: reverb, r0.arg2_exact: GEAR UP, r0.arg2: GEAR UP, r0.rel: are employees of, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.637, r0.arg1_exact: EAOP),$x: ($x, be employee of, UPS))),AnswerState(EAOP))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6518000662326813, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = AAAA -> 1.0),-0.4147741871654862)
Who is the CEO of UPS?	AAC	-0.42984100803374026	Derivation(Who is the CEO of UPS?,AAC,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,true,1054.0,3484.0,74.0,0.6621181666851044),QueryState($x: (UPS, collaborate with, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, collaborate with, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bhnm, r0.arg1: UPS, r0.rel_exact: collaborated with, r0.id: reverb-63941515, r0.namespace: reverb, r0.arg2_exact: AAC, r0.arg2_fbid_s: 01fy_s, r0.arg2: AAC, r0.rel: collaborated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.62, r0.arg1_exact: UPS),$x: (UPS, collaborate with, $x))),AnswerState(AAC))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6621181666851044, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = AAA -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.42984100803374026)
Who is the CEO of UPS?	Scott	-0.4597027593126042	Derivation(Who is the CEO of UPS?,Scott,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,rejoin,false,1054.0,1305.0,3.0,0.5926345586776733),QueryState($x: ($x, rejoin, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, rejoin, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Scott, r0.rel_exact: rejoined, r0.id: reverb-268695245, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: rejoined, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.891, r0.arg1_exact: Scott),$x: ($x, rejoin, UPS))),AnswerState(Scott))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926345586776733, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4597027593126042)
Who is the CEO of UPS?	Ruprich	-0.46114943400429564	Derivation(Who is the CEO of UPS?,Ruprich,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Ruprich, r0.rel_exact: worked for, r0.id: reverb-112172830, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.984, r0.arg1_exact: Ruprich),$x: ($x, work for, UPS))),AnswerState(Ruprich))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.46114943400429564)
Who is the CEO of UPS?	Marne	-0.46114943400429564	Derivation(Who is the CEO of UPS?,Marne,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Marne, r0.rel_exact: works for, r0.id: reverb-19112653, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.914, r0.arg1_exact: Marne),$x: ($x, work for, UPS))),AnswerState(Marne))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.46114943400429564)
Who is the CEO of UPS?	Benner	-0.46114943400429564	Derivation(Who is the CEO of UPS?,Benner,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Benner, r0.rel_exact: works for, r0.id: reverb-164752474, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.823, r0.arg1_exact: Benner),$x: ($x, work for, UPS))),AnswerState(Benner))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.46114943400429564)
Who is the CEO of UPS?	Hawkins	-0.46114943400429564	Derivation(Who is the CEO of UPS?,Hawkins,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Hawkins, r0.rel_exact: works for, r0.id: reverb-243438918, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works for, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.905, r0.arg1_exact: Hawkins),$x: ($x, work for, UPS))),AnswerState(Hawkins))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.46114943400429564)
Who is the CEO of UPS?	The SEIU	-0.4650832053372642	Derivation(Who is the CEO of UPS?,The SEIU,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,co-founded,false,1054.0,1370.0,12.0,0.6344372928142548),QueryState($x: ($x, co-founded, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, co-founded, UPS),true),ExecutionAction(ExecTuple((r0.arg1: The SEIU, r0.rel_exact: co-founded, r0.id: reverb-351262292, r0.namespace: reverb, r0.arg2_exact: Stand Up, r0.arg2: Stand Up, r0.rel: co-founded, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.926, r0.arg1_exact: The SEIU),$x: ($x, co-founded, UPS))),AnswerState(The SEIU))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6344372928142548, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaa AAAA -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4650832053372642)
Who is the CEO of UPS?	David Ronick	-0.4693082700073721	Derivation(Who is the CEO of UPS?,David Ronick,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be a co-founder of,false,1054.0,357.0,7.0,0.6596195697784424),QueryState($x: ($x, be a co-founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be a co-founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: David Ronick, r0.rel_exact: is a co-founder of, r0.id: reverb-36796331, r0.namespace: reverb, r0.arg2_exact: UpStart Bootcamp, r0.arg2: UpStart Bootcamp, r0.rel: is a co-founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 15, r0.conf_f: 0.962, r0.arg1_exact: David Ronick),$x: ($x, be a co-founder of, UPS))),AnswerState(David Ronick))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6596195697784424, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4693082700073721)
Who is the CEO of UPS?	Kathreen Ricketson	-0.474680688602064	Derivation(Who is the CEO of UPS?,Kathreen Ricketson,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be founder of,false,1054.0,555.0,2.0,0.6066822409629822),QueryState($x: ($x, be founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Kathreen Ricketson, r0.rel_exact: is founder of, r0.id: reverb-191138634, r0.namespace: reverb, r0.arg2_exact: WhipUp.net, r0.arg2: WhipUp.net, r0.rel: is founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.967, r0.arg1_exact: Kathreen Ricketson),$x: ($x, be founder of, UPS))),AnswerState(Kathreen Ricketson))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6066822409629822, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.474680688602064)
Who is the CEO of UPS?	Rock Ed Philippines	-0.48381924340348426	Derivation(Who is the CEO of UPS?,Rock Ed Philippines,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,false,1054.0,3484.0,13.0,0.6077708005905151),QueryState($x: ($x, collaborate with, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, collaborate with, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Rock Ed Philippines, r0.rel_exact: collaborates with, r0.id: reverb-200672600, r0.namespace: reverb, r0.arg2_exact: UP ACTS, r0.arg2: UP ACTS, r0.rel: collaborates with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.876, r0.arg1_exact: Rock Ed Philippines),$x: ($x, collaborate with, UPS))),AnswerState(Rock Ed Philippines))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6077708005905151, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaaa Aa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.48381924340348426)
Who is the CEO of UPS?	Ty	-0.4893235842926542	Derivation(Who is the CEO of UPS?,Ty,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Ty, r0.rel_exact: used to work for, r0.id: reverb-282080088, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: used to work for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.883, r0.arg1_exact: Ty),$x: ($x, work for, UPS))),AnswerState(Ty))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4893235842926542)
Who is the CEO of UPS?	staffer Christian Brown	-0.4893235842926542	Derivation(Who is the CEO of UPS?,staffer Christian Brown,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: staffer Christian Brown, r0.rel_exact: works part time for, r0.id: reverb-168221475, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: works part time for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.705, r0.arg1_exact: staffer Christian Brown),$x: ($x, work for, UPS))),AnswerState(staffer Christian Brown))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aaaa Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4893235842926542)
Who is the CEO of UPS?	the shipping calculator	-0.4893235842926542	Derivation(Who is the CEO of UPS?,the shipping calculator,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: the shipping calculator, r0.rel_exact: will only work for, r0.id: reverb-95820235, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: will only work for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.91, r0.arg1_exact: the shipping calculator),$x: ($x, work for, UPS))),AnswerState(the shipping calculator))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4893235842926542)
Who is the CEO of UPS?	?I?ve	-0.4893235842926542	Derivation(Who is the CEO of UPS?,?I?ve,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: ?I?ve, r0.rel_exact: worked part time for, r0.id: reverb-318819506, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked part time for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.973, r0.arg1_exact: ?I?ve),$x: ($x, work for, UPS))),AnswerState(?I?ve))),SparseVector(question prefix = 'who' and answer shape = ?A?aa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4893235842926542)
Who is the CEO of UPS?	Mainstream editors and publishers	-0.49590073283867775	Derivation(Who is the CEO of UPS?,Mainstream editors and publishers,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Mainstream editors and publishers, r0.rel_exact: work for, r0.id: reverb-220325063, r0.namespace: reverb, r0.arg2_exact: higher ups, r0.arg2: higher ups, r0.rel: work for, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.848, r0.arg1_exact: Mainstream editors and publishers),$x: ($x, work for, UPS))),AnswerState(Mainstream editors and publishers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'who' and answer shape = Aaaaa aaaa aaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.49590073283867775)
Who is the CEO of UPS?	Deans	-0.4989261444310207	Derivation(Who is the CEO of UPS?,Deans,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the president of,false,1054.0,2064.0,9.0,0.6126398742198944),QueryState($x: ($x, be the president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Deans, r0.rel_exact: currently is the president of, r0.id: reverb-77029674, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: currently is the president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.741, r0.arg1_exact: Deans),$x: ($x, be the president of, UPS))),AnswerState(Deans))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6126398742198944, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4989261444310207)
Who is the CEO of UPS?	Raj Mashruwala	-0.5228695925038733	Derivation(Who is the CEO of UPS?,Raj Mashruwala,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,co-founded,false,1054.0,1370.0,12.0,0.6344372928142548),QueryState($x: ($x, co-founded, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, co-founded, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Raj Mashruwala, r0.rel_exact: co-founded, r0.id: reverb-256133683, r0.namespace: reverb, r0.arg2_exact: YieldUp International, r0.arg2: YieldUp International, r0.rel: co-founded, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.975, r0.arg1_exact: Raj Mashruwala),$x: ($x, co-founded, UPS))),AnswerState(Raj Mashruwala))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.6344372928142548, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5228695925038733)
Who is the CEO of UPS?	The Salon	-0.5416056305700934	Derivation(Who is the CEO of UPS?,The Salon,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,false,1054.0,3484.0,13.0,0.6077708005905151),QueryState($x: ($x, collaborate with, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, collaborate with, UPS),true),ExecutionAction(ExecTuple((r0.arg1: The Salon, r0.rel_exact: collaborates with, r0.id: reverb-288110716, r0.namespace: reverb, r0.arg2_exact: make-up artists, r0.arg2: make-up artists, r0.rel: collaborates with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.917, r0.arg1_exact: The Salon),$x: ($x, collaborate with, UPS))),AnswerState(The Salon))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, relSynRule pmi -> 0.6077708005905151, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5416056305700934)
Who is the CEO of UPS?	tranquilizers	-0.5512872307829111	Derivation(Who is the CEO of UPS?,tranquilizers,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,do without,true,1054.0,111.0,2.0,0.6569771766662598),QueryState($x: (UPS, do without, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, do without, $x),true),ExecutionAction(ExecTuple((r0.arg1: up, r0.rel_exact: was done without, r0.id: reverb-156626123, r0.namespace: reverb, r0.arg2_exact: tranquilizers, r0.arg2: tranquilizers, r0.rel: was done without, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.652, r0.arg1_exact: up),$x: (UPS, do without, $x))),AnswerState(tranquilizers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6569771766662598, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),-0.5512872307829111)
Who is the CEO of UPS?	the player	-0.5535499735916268	Derivation(Who is the CEO of UPS?,the player,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01_456, r0.arg1: the player, r0.rel_exact: is the CEO of, r0.id: reverb-277880221, r0.namespace: reverb, r0.arg2_exact: a start-up international airline, r0.arg2: a start-up international airline, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.831, r0.arg1_exact: the player),$x: ($x, is the CEO of, UPS))),AnswerState(the player))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5535499735916268)
Who is the CEO of UPS?	Mujteba	-0.6177536833897769	Derivation(Who is the CEO of UPS?,Mujteba,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: Mujteba, r0.rel_exact: is the CEO of, r0.id: reverb-79092936, r0.namespace: reverb, r0.arg2_exact: start-up travel firm Bonvoy, r0.arg2: start-up travel firm Bonvoy, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: Mujteba),$x: ($x, is the CEO of, UPS))),AnswerState(Mujteba))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6177536833897769)
Who is the CEO of UPS?	Emily	-0.6177536833897769	Derivation(Who is the CEO of UPS?,Emily,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: Emily, r0.rel_exact: is the CEO of, r0.id: reverb-153987709, r0.namespace: reverb, r0.arg2_exact: a Silicon Valley start-up, r0.arg2: a Silicon Valley start-up, r0.rel: is the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: Emily),$x: ($x, is the CEO of, UPS))),AnswerState(Emily))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6177536833897769)
Who is the CEO of UPS?	Jeremy Peirson	-0.6268529068588731	Derivation(Who is the CEO of UPS?,Jeremy Peirson,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be absent from,false,1054.0,607.0,3.0,0.6165542304515839),QueryState($x: ($x, be absent from, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be absent from, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Jeremy Peirson, r0.rel_exact: was absent from, r0.id: reverb-317857629, r0.namespace: reverb, r0.arg2_exact: the line-up, r0.arg2: the line-up, r0.rel: was absent from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.75, r0.arg1_exact: Jeremy Peirson),$x: ($x, be absent from, UPS))),AnswerState(Jeremy Peirson))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6165542304515839, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6268529068588731)
Who is the CEO of UPS?	Steve Squire	-0.643621112214013	Derivation(Who is the CEO of UPS?,Steve Squire,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be head by,true,1054.0,1737.0,4.0,0.5926885008811951),QueryState($x: (UPS, be head by, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, be head by, $x),true),ExecutionAction(ExecTuple((r0.arg1: Their top-up list, r0.rel_exact: is headed by, r0.id: reverb-291803529, r0.namespace: reverb, r0.arg2_exact: Steve Squire, r0.arg2: Steve Squire, r0.rel: is headed by, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.965, r0.arg1_exact: Their top-up list),$x: (UPS, be head by, $x))),AnswerState(Steve Squire))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926885008811951, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.643621112214013)
Who is the CEO of UPS?	Byrnes	-0.6552777491378026	Derivation(Who is the CEO of UPS?,Byrnes,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be an employee of,false,1054.0,392.0,4.0,0.6392089128494263),QueryState($x: ($x, be an employee of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be an employee of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Byrnes, r0.rel_exact: has been an employee of, r0.id: reverb-14697402, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: has been an employee of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.992, r0.arg1_exact: Byrnes),$x: ($x, be an employee of, UPS))),AnswerState(Byrnes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6392089128494263, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6552777491378026)
Who is the CEO of UPS?	Mills	-0.6552777491378026	Derivation(Who is the CEO of UPS?,Mills,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be an employee of,false,1054.0,392.0,4.0,0.6392089128494263),QueryState($x: ($x, be an employee of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be an employee of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Mills, r0.rel_exact: has been an employee of, r0.id: reverb-179970447, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: has been an employee of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.925, r0.arg1_exact: Mills),$x: ($x, be an employee of, UPS))),AnswerState(Mills))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6392089128494263, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6552777491378026)
Who is the CEO of UPS?	Danny Moon	-0.6987839041489989	Derivation(Who is the CEO of UPS?,Danny Moon,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be ceo of,false,1054.0,815.0,4.0,0.6163361966609955),QueryState($x: ($x, be ceo of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be ceo of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Danny Moon, r0.rel_exact: is CEO of, r0.id: reverb-306969952, r0.namespace: reverb, r0.arg2_exact: UpNext, r0.arg2: UpNext, r0.rel: is CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.774, r0.arg1_exact: Danny Moon),$x: ($x, be ceo of, UPS))),AnswerState(Danny Moon))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6163361966609955, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6987839041489989)
Who is the CEO of UPS?	ZIP drives and disks	-0.7307594601293614	Derivation(Who is the CEO of UPS?,ZIP drives and disks,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: ZIP drives and disks, r0.rel_exact: can work well for back, r0.id: reverb-127254764, r0.namespace: reverb, r0.arg2_exact: ups, r0.arg2_fbid_s: 0bhnm, r0.arg2: ups, r0.rel: can work well for back, r0.corpora_ss: List(cw), r0.num_extrs_i: 14, r0.conf_f: 0.705, r0.arg1_exact: ZIP drives and disks),$x: ($x, work for, UPS))),AnswerState(ZIP drives and disks))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = AAA aaaa aaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.7307594601293614)
Who is the CEO of UPS?	Update Sadee	-0.7442568805465986	Derivation(Who is the CEO of UPS?,Update Sadee,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,have retire from,false,1054.0,258.0,2.0,0.630620002746582),QueryState($x: ($x, have retire from, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, have retire from, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Update Sadee, r0.rel_exact: has retired from, r0.id: reverb-265276635, r0.namespace: reverb, r0.arg2_exact: the Back-Up Pack, r0.arg2: the Back-Up Pack, r0.rel: has retired from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.939, r0.arg1_exact: Update Sadee),$x: ($x, have retire from, UPS))),AnswerState(Update Sadee))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.630620002746582, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7442568805465986)
Who is the CEO of UPS?	Kaitlyn Keyt	-0.751439455539676	Derivation(Who is the CEO of UPS?,Kaitlyn Keyt,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the founder of,false,1054.0,3014.0,22.0,0.62873974442482),QueryState($x: ($x, be the founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Kaitlyn Keyt, r0.rel_exact: is the founder of, r0.id: reverb-137754965, r0.namespace: reverb, r0.arg2_exact: VibesUP, r0.arg2: VibesUP, r0.rel: is the founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: Kaitlyn Keyt),$x: ($x, be the founder of, UPS))),AnswerState(Kaitlyn Keyt))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.62873974442482, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.751439455539676)
Who is the CEO of UPS?	Voisin Consulting	-0.7603108676172232	Derivation(Who is the CEO of UPS?,Voisin Consulting,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,false,1054.0,3484.0,13.0,0.6077708005905151),QueryState($x: ($x, collaborate with, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, collaborate with, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Voisin Consulting, r0.rel_exact: collaborates with, r0.id: reverb-26306759, r0.namespace: reverb, r0.arg2_exact: start-ups, r0.arg2_fbid_s: 0h01f, r0.arg2: start-ups, r0.rel: collaborates with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: Voisin Consulting),$x: ($x, collaborate with, UPS))),AnswerState(Voisin Consulting))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6077708005905151, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7603108676172232)
Who is the CEO of UPS?	Wayne Wilkinson	-0.7709456823607252	Derivation(Who is the CEO of UPS?,Wayne Wilkinson,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,rejoin,false,1054.0,1305.0,3.0,0.5926345586776733),QueryState($x: ($x, rejoin, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, rejoin, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Wayne Wilkinson, r0.rel_exact: rejoined, r0.id: reverb-126168216, r0.namespace: reverb, r0.arg2_exact: the line-up, r0.arg2: the line-up, r0.rel: rejoined, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.712, r0.arg1_exact: Wayne Wilkinson),$x: ($x, rejoin, UPS))),AnswerState(Wayne Wilkinson))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5926345586776733, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7709456823607252)
Who is the CEO of UPS?	Kyushu University	-0.8431246146944711	Derivation(Who is the CEO of UPS?,Kyushu University,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,collaborate with,true,1054.0,3484.0,74.0,0.6621181666851044),QueryState($x: (UPS, collaborate with, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, collaborate with, $x),true),ExecutionAction(ExecTuple((r0.arg1: UP Manila, r0.rel_exact: will collaborate with, r0.id: reverb-19299947, r0.namespace: reverb, r0.arg2_exact: Kyushu University, r0.arg2_fbid_s: 01rp_s, r0.arg2: Kyushu University, r0.rel: will collaborate with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.669, r0.arg1_exact: UP Manila),$x: (UPS, collaborate with, $x))),AnswerState(Kyushu University))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6621181666851044, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8431246146944711)
Who is the CEO of UPS?	much time-consuming	-0.8450625250187902	Derivation(Who is the CEO of UPS?,much time-consuming,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,do without,true,1054.0,111.0,2.0,0.6569771766662598),QueryState($x: (UPS, do without, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, do without, $x),true),ExecutionAction(ExecTuple((r0.arg1: up, r0.rel_exact: can be done easily without too, r0.id: reverb-103989442, r0.namespace: reverb, r0.arg2_exact: much time-consuming, r0.arg2: much time-consuming, r0.rel: can be done easily without too, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.715, r0.arg1_exact: up),$x: (UPS, do without, $x))),AnswerState(much time-consuming))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6569771766662598, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'who' and answer shape = aaaa aaaa-aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8450625250187902)
Who is the CEO of UPS?	Flowers	-0.8504420267615249	Derivation(Who is the CEO of UPS?,Flowers,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,become president of,false,1054.0,505.0,2.0,0.6096325218677521),QueryState($x: ($x, become president of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, become president of, UPS),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0c9ph5, r0.arg1: Flowers, r0.rel_exact: became president of, r0.id: reverb-180852698, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: became president of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.888, r0.arg1_exact: Flowers),$x: ($x, become president of, UPS))),AnswerState(Flowers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6096325218677521, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8504420267615249)
Who is the CEO of UPS?	EBay spokesman Kevin Pursglove	-0.8792467442349376	Derivation(Who is the CEO of UPS?,EBay spokesman Kevin Pursglove,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,also say,false,1054.0,883.0,5.0,0.6208051443099976),QueryState($x: ($x, also say, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, also say, UPS),true),ExecutionAction(ExecTuple((r0.arg1: EBay spokesman Kevin Pursglove, r0.rel_exact: also says, r0.id: reverb-251414207, r0.namespace: reverb, r0.arg2_exact: the UPS story, r0.arg2: the UPS story, r0.rel: also says, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.826, r0.arg1_exact: EBay spokesman Kevin Pursglove),$x: ($x, also say, UPS))),AnswerState(EBay spokesman Kevin Pursglove))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6208051443099976, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = AAaa aaaa Aaaaa Aaaaa -> 1.0),-0.8792467442349376)
Who is the CEO of UPS?	Joselin Mane	-0.8869426073681081	Derivation(Who is the CEO of UPS?,Joselin Mane,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be co-founder of,false,1054.0,386.0,4.0,0.6396909058094025),QueryState($x: ($x, be co-founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be co-founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Joselin Mane, r0.rel_exact: is co-founder of, r0.id: reverb-78254078, r0.namespace: reverb, r0.arg2_exact: Boston TweetUp, r0.arg2: Boston TweetUp, r0.rel: is co-founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.955, r0.arg1_exact: Joselin Mane),$x: ($x, be co-founder of, UPS))),AnswerState(Joselin Mane))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6396909058094025, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8869426073681081)
Who is the CEO of UPS?	technology areas	-0.8922071480498219	Derivation(Who is the CEO of UPS?,technology areas,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1: technology areas, r0.rel_exact: worked for, r0.id: reverb-110533973, r0.namespace: reverb, r0.arg2_exact: start ups / product companies, r0.arg2: start ups / product companies, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.666, r0.arg1_exact: technology areas),$x: ($x, work for, UPS))),AnswerState(technology areas))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.2, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8922071480498219)
Who is the CEO of UPS?	the legal basis	-0.892974020082115	Derivation(Who is the CEO of UPS?,the legal basis,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,authorise,false,1054.0,660.0,2.0,0.6012674868106842),QueryState($x: ($x, authorise, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, authorise, UPS),true),ExecutionAction(ExecTuple((r0.arg1: the legal basis, r0.rel_exact: authorised, r0.id: reverb-107961609, r0.namespace: reverb, r0.arg2_exact: the Round Ups, r0.arg2: the Round Ups, r0.rel: authorised, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.764, r0.arg1_exact: the legal basis),$x: ($x, authorise, UPS))),AnswerState(the legal basis))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6012674868106842, minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.892974020082115)
Who is the CEO of UPS?	the Occupation	-0.892974020082115	Derivation(Who is the CEO of UPS?,the Occupation,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,authorise,false,1054.0,660.0,2.0,0.6012674868106842),QueryState($x: ($x, authorise, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, authorise, UPS),true),ExecutionAction(ExecTuple((r0.arg1: the Occupation, r0.rel_exact: authorised, r0.id: reverb-180166977, r0.namespace: reverb, r0.arg2_exact: the setting up, r0.arg2: the setting up, r0.rel: authorised, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.624, r0.arg1_exact: the Occupation),$x: ($x, authorise, UPS))),AnswerState(the Occupation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6012674868106842, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, question prefix = 'who' and answer shape = aaa Aaaaa -> 1.0, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.892974020082115)
Who is the CEO of UPS?	Deviant Decorum	-0.9105843967041238	Derivation(Who is the CEO of UPS?,Deviant Decorum,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be a huge fan of,false,1054.0,188.0,2.0,0.6405111849308014),QueryState($x: ($x, be a huge fan of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be a huge fan of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Deviant Decorum, r0.rel_exact: have been a huge fans of, r0.id: reverb-146372726, r0.namespace: reverb, r0.arg2_exact: U.P., r0.arg2: U.P., r0.rel: have been a huge fans of, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.844, r0.arg1_exact: Deviant Decorum),$x: ($x, be a huge fan of, UPS))),AnswerState(Deviant Decorum))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6405111849308014, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8333333333333334, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9105843967041238)
Who is the CEO of UPS?	Eric	-0.9106542821932648	Derivation(Who is the CEO of UPS?,Eric,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be a co-founder of,false,1054.0,357.0,7.0,0.6596195697784424),QueryState($x: ($x, be a co-founder of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be a co-founder of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Eric, r0.rel_exact: was a co-founder of, r0.id: reverb-264489331, r0.namespace: reverb, r0.arg2_exact: UP Aerospace, r0.arg2: UP Aerospace, r0.rel: was a co-founder of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.982, r0.arg1_exact: Eric),$x: ($x, be a co-founder of, UPS))),AnswerState(Eric))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6596195697784424, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9106542821932648)
Who is the CEO of UPS?	liver metastases	-0.9370366983558995	Derivation(Who is the CEO of UPS?,liver metastases,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the target of,false,1054.0,561.0,2.0,0.6063461899757385),QueryState($x: ($x, be the target of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the target of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: liver metastases, r0.rel_exact: were the target of, r0.id: reverb-2274473, r0.namespace: reverb, r0.arg2_exact: follow-up, r0.arg2: follow-up, r0.rel: were the target of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.86, r0.arg1_exact: liver metastases),$x: ($x, be the target of, UPS))),AnswerState(liver metastases))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6063461899757385, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9370366983558995)
Who is the CEO of UPS?	rearmament effort	-0.9370366983558995	Derivation(Who is the CEO of UPS?,rearmament effort,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the target of,false,1054.0,561.0,2.0,0.6063461899757385),QueryState($x: ($x, be the target of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the target of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: rearmament effort, r0.rel_exact: are the targets of, r0.id: reverb-31508444, r0.namespace: reverb, r0.arg2_exact: the arms build-up, r0.arg2: the arms build-up, r0.rel: are the targets of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.596, r0.arg1_exact: rearmament effort),$x: ($x, be the target of, UPS))),AnswerState(rearmament effort))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6063461899757385, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9370366983558995)
Who is the CEO of UPS?	Corey Hart	-0.9381658264348431	Derivation(Who is the CEO of UPS?,Corey Hart,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be force out of,false,1054.0,467.0,2.0,0.6120772063732147),QueryState($x: ($x, be force out of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be force out of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Corey Hart, r0.rel_exact: was forced out of, r0.id: reverb-243846736, r0.namespace: reverb, r0.arg2_exact: the line-up, r0.arg2: the line-up, r0.rel: was forced out of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.827, r0.arg1_exact: Corey Hart),$x: ($x, be force out of, UPS))),AnswerState(Corey Hart))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6120772063732147, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9381658264348431)
Who is the CEO of UPS?	flexible comfort	-0.942545951513887	Derivation(Who is the CEO of UPS?,flexible comfort,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be the star of,false,1054.0,721.0,2.0,0.5985050201416016),QueryState($x: ($x, be the star of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be the star of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: flexible comfort, r0.rel_exact: is the star of, r0.id: reverb-38211861, r0.namespace: reverb, r0.arg2_exact: the SKECHERS Tone-ups Flex, r0.arg2: the SKECHERS Tone-ups Flex, r0.rel: is the star of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.87, r0.arg1_exact: flexible comfort),$x: ($x, be the star of, UPS))),AnswerState(flexible comfort))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5985050201416016, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.942545951513887)
Who is the CEO of UPS?	the Parle brothers	-0.9691066218352375	Derivation(Who is the CEO of UPS?,the Parle brothers,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be launch by,true,1054.0,807.0,2.0,0.5949836075305939),QueryState($x: (UPS, be launch by, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, be launch by, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03dx0n, r0.arg1: Thums Up, r0.rel_exact: was quickly launched by, r0.id: reverb-36732536, r0.namespace: reverb, r0.arg2_exact: the Parle brothers, r0.arg2: the Parle brothers, r0.rel: was quickly launched by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.97, r0.arg1_exact: Thums Up),$x: (UPS, be launch by, $x))),AnswerState(the Parle brothers))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949836075305939, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9691066218352375)
Who is the CEO of UPS?	a Los Angeles Area consultant	-0.9698291948969535	Derivation(Who is the CEO of UPS?,a Los Angeles Area consultant,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be leader in,false,1054.0,834.0,2.0,0.5939551889896393),QueryState($x: ($x, be leader in, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be leader in, UPS),true),ExecutionAction(ExecTuple((r0.arg1: a Los Angeles Area consultant, r0.rel_exact: is a leader in, r0.id: reverb-315894326, r0.namespace: reverb, r0.arg2_exact: this up, r0.arg2: this up, r0.rel: is a leader in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.81, r0.arg1_exact: a Los Angeles Area consultant),$x: ($x, be leader in, UPS))),AnswerState(a Los Angeles Area consultant))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5939551889896393, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a Aaa Aaaaa Aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.9698291948969535)
Who is the CEO of UPS?	the Children???s Laureate	-0.9723951961082491	Derivation(Who is the CEO of UPS?,the Children???s Laureate,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be launch by,true,1054.0,807.0,2.0,0.5949836075305939),QueryState($x: (UPS, be launch by, $x),true)), QaStep(Who is the CEO of UPS?,QueryState($x: (UPS, be launch by, $x),true),ExecutionAction(ExecTuple((r0.arg1: Last year Booked Up, r0.rel_exact: was launched by, r0.id: reverb-97453721, r0.namespace: reverb, r0.arg2_exact: the Children???s Laureate, r0.arg2: the Children???s Laureate, r0.rel: was launched by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.985, r0.arg1_exact: Last year Booked Up),$x: (UPS, be launch by, $x))),AnswerState(the Children???s Laureate))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949836075305939, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = aaa Aaaaa??a Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9723951961082491)
Who is the CEO of UPS?	Plaintiff	-0.9911182428100658	Derivation(Who is the CEO of UPS?,Plaintiff,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,work for,false,1054.0,31130.0,67.0,0.5905755460262299),QueryState($x: ($x, work for, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, work for, UPS),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 065gc, r0.arg1: Plaintiff, r0.rel_exact: worked for, r0.id: reverb-118401760, r0.namespace: reverb, r0.arg2_exact: UPS, r0.arg2_fbid_s: 0bhnm, r0.arg2: UPS, r0.rel: worked for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.884, r0.arg1_exact: Plaintiff),$x: ($x, work for, UPS))),AnswerState(Plaintiff))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5905755460262299, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9911182428100658)
Who is the CEO of UPS?	Medical Sciences	-1.087937525471788	Derivation(Who is the CEO of UPS?,Medical Sciences,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),RelSynRule(be the ceo of,be resident of,false,1054.0,862.0,2.0,0.5929232537746429),QueryState($x: ($x, be resident of, UPS),true)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, be resident of, UPS),true),ExecutionAction(ExecTuple((r0.arg1: Medical Sciences, r0.rel_exact: are bonafide residents of, r0.id: reverb-252317147, r0.namespace: reverb, r0.arg2_exact: U.P., r0.arg2: U.P., r0.rel: are bonafide residents of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.852, r0.arg1_exact: Medical Sciences),$x: ($x, be resident of, UPS))),AnswerState(Medical Sciences))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5929232537746429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.087937525471788)
Who is the CEO of UPS?	Dauber	-1.1006254350631912	Derivation(Who is the CEO of UPS?,Dauber,Vector(QaStep(Who is the CEO of UPS?,QuestionStateImpl(Who is the CEO of UPS?,Sentence(Who is the CEO of UPS?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the CEO of, UPS),false)), QaStep(Who is the CEO of UPS?,QueryState($x: ($x, is the CEO of, UPS),false),ExecutionAction(ExecTuple((r0.arg1: Dauber, r0.rel_exact: previously was the CEO of, r0.id: reverb-127443517, r0.namespace: reverb, r0.arg2_exact: a broadband services start-up, r0.arg2: a broadband services start-up, r0.rel: previously was the CEO of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.875, r0.arg1_exact: Dauber),$x: ($x, is the CEO of, UPS))),AnswerState(Dauber))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5714285714285714, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1006254350631912)
What does LPGA stand for?	ladies professional golf association	2.716060274854339	Derivation(What does LPGA stand for?,ladies professional golf association,Vector(QaStep(What does LPGA stand for?,QuestionStateImpl(What does LPGA stand for?,Sentence(What does LPGA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (LPGA, stand for, $x),false)), QaStep(What does LPGA stand for?,QueryState($x: (LPGA, stand for, $x),false),RelSynRule(stand for,be an organization know by the acronym,false,15674.0,289.0,46.0,0.6407017409801483),QueryState($x: (LPGA, be an organization know by the acronym, $x),true)), QaStep(What does LPGA stand for?,QueryState($x: (LPGA, be an organization know by the acronym, $x),true),ExecutionAction(ExecTuple((r0.arg1: LPGA, r0.rel_exact: is an organization known by the acronym, r0.prob_f: 0.7843779, r0.id: nell-1050047, r0.namespace: nell, r0.arg2_exact: ladies professional golf association, r0.arg2: ladies professional golf association, r0.rel: is an organization known by the acronym, r0.arg1_exact: LPGA),$x: (LPGA, be an organization know by the acronym, $x))),AnswerState(ladies professional golf association))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6407017409801483, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.08333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.716060274854339)
What does LPGA stand for?	Ladies Professional Golf Association	1.502250923171556	Derivation(What does LPGA stand for?,Ladies Professional Golf Association,Vector(QaStep(What does LPGA stand for?,QuestionStateImpl(What does LPGA stand for?,Sentence(What does LPGA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (LPGA, stand for, $x),false)), QaStep(What does LPGA stand for?,QueryState($x: (LPGA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: The LPGA, r0.rel_exact: stands for, r0.id: reverb-232392816, r0.namespace: reverb, r0.arg2_exact: Ladies Professional Golf Association, r0.arg2: Ladies Professional Golf Association, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.967, r0.arg1_exact: The LPGA),$x: (LPGA, stand for, $x))),AnswerState(Ladies Professional Golf Association))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.502250923171556)
What does LPGA stand for?	a few years	-0.7291300410048331	Derivation(What does LPGA stand for?,a few years,Vector(QaStep(What does LPGA stand for?,QuestionStateImpl(What does LPGA stand for?,Sentence(What does LPGA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (LPGA, stand for, $x),false)), QaStep(What does LPGA stand for?,QueryState($x: (LPGA, stand for, $x),false),RelSynRule(stand for,disappear for,false,15674.0,396.0,18.0,0.6015374660491943),QueryState($x: (LPGA, disappear for, $x),true)), QaStep(What does LPGA stand for?,QueryState($x: (LPGA, disappear for, $x),true),ExecutionAction(ExecTuple((r0.arg1: The LPGA veteran, r0.rel_exact: disappeared for, r0.id: reverb-144569281, r0.namespace: reverb, r0.arg2_exact: a few years, r0.arg2: a few years, r0.rel: disappeared for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.81, r0.arg1_exact: The LPGA veteran),$x: (LPGA, disappear for, $x))),AnswerState(a few years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6015374660491943, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.14285714285714285, question prefix = 'what' and answer shape = a aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.7291300410048331)
Who was the prosecutor?	Patrick Dinkelacker	2.500341027166063	Derivation(Who was the prosecutor?,Patrick Dinkelacker,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Patrick Dinkelacker, r0.rel_exact: was, r0.id: reverb-193738158, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Patrick Dinkelacker),$x: ($x, was, the prosecutor))),AnswerState(Patrick Dinkelacker))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.500341027166063)
Who was the prosecutor?	Christopher Graveline	2.500341027166063	Derivation(Who was the prosecutor?,Christopher Graveline,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Christopher Graveline, r0.rel_exact: was, r0.id: reverb-246456594, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.934, r0.arg1_exact: Christopher Graveline),$x: ($x, was, the prosecutor))),AnswerState(Christopher Graveline))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.500341027166063)
Who was the prosecutor?	Michael Nifong	2.500341027166063	Derivation(Who was the prosecutor?,Michael Nifong,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Michael Nifong, r0.rel_exact: is, r0.id: reverb-223042526, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.5, r0.arg1_exact: Michael Nifong),$x: ($x, was, the prosecutor))),AnswerState(Michael Nifong))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.500341027166063)
Who was the prosecutor?	Richard Barlow	2.500341027166063	Derivation(Who was the prosecutor?,Richard Barlow,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Richard Barlow, r0.rel_exact: was, r0.id: reverb-327189590, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.514, r0.arg1_exact: Richard Barlow),$x: ($x, was, the prosecutor))),AnswerState(Richard Barlow))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.500341027166063)
Who was the prosecutor?	Key Pittman	2.189077455407423	Derivation(Who was the prosecutor?,Key Pittman,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 047xph, r0.arg1: Key Pittman, r0.rel_exact: was, r0.id: reverb-173119226, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.835, r0.arg1_exact: Key Pittman),$x: ($x, was, the prosecutor))),AnswerState(Key Pittman))),SparseVector(question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.189077455407423)
Who was the prosecutor?	Tim Curry	2.189077455407423	Derivation(Who was the prosecutor?,Tim Curry,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07rzf, r0.arg1: Tim Curry, r0.rel_exact: was, r0.id: reverb-286298, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.901, r0.arg1_exact: Tim Curry),$x: ($x, was, the prosecutor))),AnswerState(Tim Curry))),SparseVector(question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.189077455407423)
Who was the prosecutor?	The Secretary	2.189077455407423	Derivation(Who was the prosecutor?,The Secretary,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d6vx9, r0.arg1: The Secretary, r0.rel_exact: is, r0.id: reverb-134614777, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.769, r0.arg1_exact: The Secretary),$x: ($x, was, the prosecutor))),AnswerState(The Secretary))),SparseVector(question prefix = 'who' and answer shape = Aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.189077455407423)
Who was the prosecutor?	Roger Goodell	1.9703722183602934	Derivation(Who was the prosecutor?,Roger Goodell,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0f_yml, r0.arg1: Roger Goodell, r0.rel_exact: was, r0.id: reverb-23749609, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.818, r0.arg1_exact: Roger Goodell),$x: ($x, was, the prosecutor))),AnswerState(Roger Goodell))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9703722183602934)
Who was the prosecutor?	Vincent Bugliosi	1.9703722183602934	Derivation(Who was the prosecutor?,Vincent Bugliosi,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 020fmm, r0.arg1: Vincent Bugliosi, r0.rel_exact: was, r0.id: reverb-151907275, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.726, r0.arg1_exact: Vincent Bugliosi),$x: ($x, was, the prosecutor))),AnswerState(Vincent Bugliosi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9703722183602934)
Who was the prosecutor?	prison time	1.8950236250768346	Derivation(Who was the prosecutor?,prison time,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: prison time, r0.rel_exact: is, r0.id: reverb-46239200, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.629, r0.arg1_exact: prison time),$x: ($x, was, the prosecutor))),AnswerState(prison time))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8950236250768346)
Who was the prosecutor?	arson cases	1.8950236250768346	Derivation(Who was the prosecutor?,arson cases,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: arson cases, r0.rel_exact: are, r0.id: reverb-253430257, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.627, r0.arg1_exact: arson cases),$x: ($x, was, the prosecutor))),AnswerState(arson cases))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8950236250768346)
Who was the prosecutor?	street crime	1.8950236250768346	Derivation(Who was the prosecutor?,street crime,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: street crime, r0.rel_exact: is, r0.id: reverb-317299153, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.577, r0.arg1_exact: street crime),$x: ($x, was, the prosecutor))),AnswerState(street crime))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.8950236250768346)
Who was the prosecutor?	The current conditions	1.7039069240555118	Derivation(Who was the prosecutor?,The current conditions,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The current conditions, r0.rel_exact: are, r0.id: reverb-366526150, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.669, r0.arg1_exact: The current conditions),$x: ($x, was, the prosecutor))),AnswerState(The current conditions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7039069240555118)
Who was the prosecutor?	The formal network	1.7039069240555118	Derivation(Who was the prosecutor?,The formal network,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The formal network, r0.rel_exact: is, r0.id: reverb-190121265, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.67, r0.arg1_exact: The formal network),$x: ($x, was, the prosecutor))),AnswerState(The formal network))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7039069240555118)
Who was the prosecutor?	God	1.5630761236502433	Derivation(Who was the prosecutor?,God,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: God, r0.rel_exact: is, r0.id: reverb-288604107, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.748, r0.arg1_exact: God),$x: ($x, was, the prosecutor))),AnswerState(God))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Google , Google	1.5630761236502433	Derivation(Who was the prosecutor?,Google , Google,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Google , Google, r0.rel_exact: is, r0.id: reverb-312041252, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.729, r0.arg1_exact: Google , Google),$x: ($x, was, the prosecutor))),AnswerState(Google , Google))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aaaaa , Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	New York Attorney General Andy Cuomo	1.5630761236502433	Derivation(Who was the prosecutor?,New York Attorney General Andy Cuomo,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: New York Attorney General Andy Cuomo, r0.rel_exact: is, r0.id: reverb-270087427, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.682, r0.arg1_exact: New York Attorney General Andy Cuomo),$x: ($x, was, the prosecutor))),AnswerState(New York Attorney General Andy Cuomo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaa Aaaaa Aaaaa Aaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Mr. Simeon Sampson	1.5630761236502433	Derivation(Who was the prosecutor?,Mr. Simeon Sampson,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Mr. Simeon Sampson, r0.rel_exact: was, r0.id: reverb-205218785, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.922, r0.arg1_exact: Mr. Simeon Sampson),$x: ($x, was, the prosecutor))),AnswerState(Mr. Simeon Sampson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aa. Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Port and Allan Perkins	1.5630761236502433	Derivation(Who was the prosecutor?,Port and Allan Perkins,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Port and Allan Perkins, r0.rel_exact: was, r0.id: reverb-289159486, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.728, r0.arg1_exact: Port and Allan Perkins),$x: ($x, was, the prosecutor))),AnswerState(Port and Allan Perkins))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaa aaa Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Deputy District Attorney Todd Zocchi	1.5630761236502433	Derivation(Who was the prosecutor?,Deputy District Attorney Todd Zocchi,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Deputy District Attorney Todd Zocchi, r0.rel_exact: was, r0.id: reverb-74064443, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.922, r0.arg1_exact: Deputy District Attorney Todd Zocchi),$x: ($x, was, the prosecutor))),AnswerState(Deputy District Attorney Todd Zocchi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	One such supplementary policy	1.5630761236502433	Derivation(Who was the prosecutor?,One such supplementary policy,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: One such supplementary policy, r0.rel_exact: is, r0.id: reverb-237653682, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.548, r0.arg1_exact: One such supplementary policy),$x: ($x, was, the prosecutor))),AnswerState(One such supplementary policy))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	McCabe	1.5630761236502433	Derivation(Who was the prosecutor?,McCabe,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: McCabe, r0.rel_exact: is, r0.id: reverb-196244102, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.911, r0.arg1_exact: McCabe),$x: ($x, was, the prosecutor))),AnswerState(McCabe))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = AaAaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	The state	1.5630761236502433	Derivation(Who was the prosecutor?,The state,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The state, r0.rel_exact: is, r0.id: reverb-372289979, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.918, r0.arg1_exact: The state),$x: ($x, was, the prosecutor))),AnswerState(The state))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	The scribes and Pharisees	1.5630761236502433	Derivation(Who was the prosecutor?,The scribes and Pharisees,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The scribes and Pharisees, r0.rel_exact: were, r0.id: reverb-388673116, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: were, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.846, r0.arg1_exact: The scribes and Pharisees),$x: ($x, was, the prosecutor))),AnswerState(The scribes and Pharisees))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa aaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	more culturally admired job	1.5630761236502433	Derivation(Who was the prosecutor?,more culturally admired job,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: more culturally admired job, r0.rel_exact: Was, r0.id: reverb-127079824, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: Was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.729, r0.arg1_exact: more culturally admired job),$x: ($x, was, the prosecutor))),AnswerState(more culturally admired job))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = aaaa aaaa aaaa aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	a witness	1.5630761236502433	Derivation(Who was the prosecutor?,a witness,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: a witness, r0.rel_exact: was, r0.id: reverb-124738242, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.636, r0.arg1_exact: a witness),$x: ($x, was, the prosecutor))),AnswerState(a witness))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	54 as	1.5630761236502433	Derivation(Who was the prosecutor?,54 as,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: 54 as, r0.rel_exact: is, r0.id: reverb-347717343, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.968, r0.arg1_exact: 54 as),$x: ($x, was, the prosecutor))),AnswerState(54 as))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'who' and answer shape = 11 aa -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Mr Martin	1.5630761236502433	Derivation(Who was the prosecutor?,Mr Martin,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Mr Martin, r0.rel_exact: was, r0.id: reverb-7953063, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Mr Martin),$x: ($x, was, the prosecutor))),AnswerState(Mr Martin))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	an imposing African-American	1.5630761236502433	Derivation(Who was the prosecutor?,an imposing African-American,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: an imposing African-American, r0.rel_exact: is, r0.id: reverb-148380219, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.636, r0.arg1_exact: an imposing African-American),$x: ($x, was, the prosecutor))),AnswerState(an imposing African-American))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aa aaaa Aaaaa-Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	a crime	1.5630761236502433	Derivation(Who was the prosecutor?,a crime,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: a crime, r0.rel_exact: is, r0.id: reverb-241759794, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.677, r0.arg1_exact: a crime),$x: ($x, was, the prosecutor))),AnswerState(a crime))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = a aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	carol lam	1.5630761236502433	Derivation(Who was the prosecutor?,carol lam,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: carol lam, r0.rel_exact: was, r0.id: reverb-240091198, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.762, r0.arg1_exact: carol lam),$x: ($x, was, the prosecutor))),AnswerState(carol lam))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaaa aaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	the EAW	1.5630761236502433	Derivation(Who was the prosecutor?,the EAW,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the EAW, r0.rel_exact: was, r0.id: reverb-353044911, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.671, r0.arg1_exact: the EAW),$x: ($x, was, the prosecutor))),AnswerState(the EAW))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa AAA -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	An aging William Jennings Bryan	1.5630761236502433	Derivation(Who was the prosecutor?,An aging William Jennings Bryan,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: An aging William Jennings Bryan, r0.rel_exact: was, r0.id: reverb-132133414, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.835, r0.arg1_exact: An aging William Jennings Bryan),$x: ($x, was, the prosecutor))),AnswerState(An aging William Jennings Bryan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aa aaaa Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	The State Attorney	1.5630761236502433	Derivation(Who was the prosecutor?,The State Attorney,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The State Attorney, r0.rel_exact: was, r0.id: reverb-6946309, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: The State Attorney),$x: ($x, was, the prosecutor))),AnswerState(The State Attorney))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, question prefix = 'who' and answer shape = Aaa Aaaaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	the scary part	1.5630761236502433	Derivation(Who was the prosecutor?,the scary part,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the scary part, r0.rel_exact: is, r0.id: reverb-343302866, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.543, r0.arg1_exact: the scary part),$x: ($x, was, the prosecutor))),AnswerState(the scary part))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	Charles HENNESSY	1.5630761236502433	Derivation(Who was the prosecutor?,Charles HENNESSY,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Charles HENNESSY, r0.rel_exact: was, r0.id: reverb-51563132, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: Charles HENNESSY),$x: ($x, was, the prosecutor))),AnswerState(Charles HENNESSY))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = Aaaaa AAAA -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	The doctrine	1.5630761236502433	Derivation(Who was the prosecutor?,The doctrine,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The doctrine, r0.rel_exact: is, r0.id: reverb-67299837, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.736, r0.arg1_exact: The doctrine),$x: ($x, was, the prosecutor))),AnswerState(The doctrine))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who was the prosecutor?	hands	1.0520651650970987	Derivation(Who was the prosecutor?,hands,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: hands, r0.rel_exact: is, r0.id: reverb-372398721, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.749, r0.arg1_exact: hands),$x: ($x, was, the prosecutor))),AnswerState(hands))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	front	1.0520651650970987	Derivation(Who was the prosecutor?,front,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: front, r0.rel_exact: are, r0.id: reverb-140400329, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.531, r0.arg1_exact: front),$x: ($x, was, the prosecutor))),AnswerState(front))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	question	1.0520651650970987	Derivation(Who was the prosecutor?,question,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: question, r0.rel_exact: was, r0.id: reverb-110542814, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.88, r0.arg1_exact: question),$x: ($x, was, the prosecutor))),AnswerState(question))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	trial	1.0520651650970987	Derivation(Who was the prosecutor?,trial,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: trial, r0.rel_exact: is, r0.id: reverb-19634851, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.897, r0.arg1_exact: trial),$x: ($x, was, the prosecutor))),AnswerState(trial))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	justice	1.0520651650970987	Derivation(Who was the prosecutor?,justice,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: justice, r0.rel_exact: is, r0.id: reverb-159117212, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: justice),$x: ($x, was, the prosecutor))),AnswerState(justice))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	boss	1.0520651650970987	Derivation(Who was the prosecutor?,boss,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: boss, r0.rel_exact: is, r0.id: reverb-77952484, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.655, r0.arg1_exact: boss),$x: ($x, was, the prosecutor))),AnswerState(boss))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	ocampo	1.0520651650970987	Derivation(Who was the prosecutor?,ocampo,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: ocampo, r0.rel_exact: is, r0.id: reverb-201444513, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.672, r0.arg1_exact: ocampo),$x: ($x, was, the prosecutor))),AnswerState(ocampo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	issue	1.0520651650970987	Derivation(Who was the prosecutor?,issue,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: issue, r0.rel_exact: was, r0.id: reverb-218646367, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.618, r0.arg1_exact: issue),$x: ($x, was, the prosecutor))),AnswerState(issue))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),1.0520651650970987)
Who was the prosecutor?	Luis Moreno-Ocampo	1.0331073148444732	Derivation(Who was the prosecutor?,Luis Moreno-Ocampo,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 08623f, r0.arg1: Luis Moreno-Ocampo, r0.rel_exact: is, r0.id: reverb-292650833, r0.namespace: reverb, r0.arg2_exact: the Prosecutor, r0.arg2: the Prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.856, r0.arg1_exact: Luis Moreno-Ocampo),$x: ($x, was, the prosecutor))),AnswerState(Luis Moreno-Ocampo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaaa-Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0331073148444732)
Who was the prosecutor?	Stuart Shapiro	1.032975157014573	Derivation(Who was the prosecutor?,Stuart Shapiro,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Stuart Shapiro, r0.rel_exact: was, r0.id: openie4-10120171, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.943674, r0.arg1_exact: Stuart Shapiro),$x: ($x, was, the prosecutor))),AnswerState(Stuart Shapiro))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.032975157014573)
Who was the prosecutor?	Judith Hawley	1.032975157014573	Derivation(Who was the prosecutor?,Judith Hawley,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Judith Hawley, r0.rel_exact: was, r0.id: openie4-17228911, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.943674, r0.arg1_exact: Judith Hawley),$x: ($x, was, the prosecutor))),AnswerState(Judith Hawley))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.032975157014573)
Who was the prosecutor?	the prosecution	0.9782434133589859	Derivation(Who was the prosecutor?,the prosecution,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the prosecution, r0.rel_exact: is, r0.id: reverb-350182757, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.67, r0.arg1_exact: the prosecution),$x: ($x, was, the prosecutor))),AnswerState(the prosecution))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the hearing	0.9782434133589859	Derivation(Who was the prosecutor?,the hearing,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the hearing, r0.rel_exact: are, r0.id: reverb-342910636, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.708, r0.arg1_exact: the hearing),$x: ($x, was, the prosecutor))),AnswerState(the hearing))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the judge	0.9782434133589859	Derivation(Who was the prosecutor?,the judge,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the judge, r0.rel_exact: is, r0.id: reverb-352290106, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.736, r0.arg1_exact: the judge),$x: ($x, was, the prosecutor))),AnswerState(the judge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the middle	0.9782434133589859	Derivation(Who was the prosecutor?,the middle,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the middle, r0.rel_exact: are, r0.id: reverb-385342961, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.522, r0.arg1_exact: the middle),$x: ($x, was, the prosecutor))),AnswerState(the middle))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the employees	0.9782434133589859	Derivation(Who was the prosecutor?,the employees,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the employees, r0.rel_exact: are, r0.id: reverb-241005626, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.737, r0.arg1_exact: the employees),$x: ($x, was, the prosecutor))),AnswerState(the employees))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the husband	0.9782434133589859	Derivation(Who was the prosecutor?,the husband,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the husband, r0.rel_exact: is, r0.id: reverb-65925372, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.679, r0.arg1_exact: the husband),$x: ($x, was, the prosecutor))),AnswerState(the husband))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	the attorney	0.9782434133589859	Derivation(Who was the prosecutor?,the attorney,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the attorney, r0.rel_exact: is, r0.id: reverb-379523558, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.701, r0.arg1_exact: the attorney),$x: ($x, was, the prosecutor))),AnswerState(the attorney))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who was the prosecutor?	PEO	0.8950818533082108	Derivation(Who was the prosecutor?,PEO,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: PEO, r0.rel_exact: is, r0.id: reverb-196047577, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: PEO),$x: ($x, was, the prosecutor))),AnswerState(PEO))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = AAA -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8950818533082108)
Who was the prosecutor?	STF	0.8950818533082108	Derivation(Who was the prosecutor?,STF,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: STF, r0.rel_exact: Was, r0.id: reverb-297455965, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: Was, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.815, r0.arg1_exact: STF),$x: ($x, was, the prosecutor))),AnswerState(STF))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = AAA -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8950818533082108)
Who was the prosecutor?	Mr. Jordan	0.892893733691787	Derivation(Who was the prosecutor?,Mr. Jordan,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 054zvp, r0.arg1: Mr. Jordan, r0.rel_exact: was, r0.id: reverb-30941447, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.598, r0.arg1_exact: Mr. Jordan),$x: ($x, was, the prosecutor))),AnswerState(Mr. Jordan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'who' and answer shape = Aa. Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.892893733691787)
Who was the prosecutor?	William Jennings Bryan	0.7652574505162526	Derivation(Who was the prosecutor?,William Jennings Bryan,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0b3tf, r0.arg1: William Jennings Bryan, r0.rel_exact: was, r0.id: reverb-206729133, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.874, r0.arg1_exact: William Jennings Bryan),$x: ($x, was, the prosecutor))),AnswerState(William Jennings Bryan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7652574505162526)
Who was the prosecutor?	the King	0.6509746678974293	Derivation(Who was the prosecutor?,the King,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the King, r0.rel_exact: is, r0.id: openie4-55741478, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.943674, r0.arg1_exact: the King),$x: ($x, was, the prosecutor))),AnswerState(the King))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aaa Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6509746678974293)
Who was the prosecutor?	defendants	0.5220963562913286	Derivation(Who was the prosecutor?,defendants,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02g60, r0.arg1: defendants, r0.rel_exact: are, r0.id: reverb-191350177, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.708, r0.arg1_exact: defendants),$x: ($x, was, the prosecutor))),AnswerState(defendants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = aaaa -> 1.0),0.5220963562913286)
Who was the prosecutor?	the room	0.44827460455321577	Derivation(Who was the prosecutor?,the room,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0dm4k3, r0.arg1: the room, r0.rel_exact: is, r0.id: reverb-343663106, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 11, r0.conf_f: 0.736, r0.arg1_exact: the room),$x: ($x, was, the prosecutor))),AnswerState(the room))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.44827460455321577)
Who was the prosecutor?	Bugliosi	0.38407089475506573	Derivation(Who was the prosecutor?,Bugliosi,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Bugliosi, r0.rel_exact: was, r0.id: reverb-30247544, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.934, r0.arg1_exact: Bugliosi),$x: ($x, was, the prosecutor))),AnswerState(Bugliosi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Vandeveld	0.38407089475506573	Derivation(Who was the prosecutor?,Vandeveld,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Vandeveld, r0.rel_exact: was, r0.id: reverb-78837533, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.552, r0.arg1_exact: Vandeveld),$x: ($x, was, the prosecutor))),AnswerState(Vandeveld))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Baldwin	0.38407089475506573	Derivation(Who was the prosecutor?,Baldwin,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Baldwin, r0.rel_exact: was, r0.id: reverb-734076, r0.namespace: reverb, r0.arg2_exact: the prosecutors, r0.arg2: the prosecutors, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.671, r0.arg1_exact: Baldwin),$x: ($x, was, the prosecutor))),AnswerState(Baldwin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Bondi	0.38407089475506573	Derivation(Who was the prosecutor?,Bondi,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Bondi, r0.rel_exact: was, r0.id: reverb-347260724, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.589, r0.arg1_exact: Bondi),$x: ($x, was, the prosecutor))),AnswerState(Bondi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Daley	0.38407089475506573	Derivation(Who was the prosecutor?,Daley,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Daley, r0.rel_exact: was, r0.id: reverb-267355198, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.696, r0.arg1_exact: Daley),$x: ($x, was, the prosecutor))),AnswerState(Daley))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Coppotelli	0.38407089475506573	Derivation(Who was the prosecutor?,Coppotelli,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Coppotelli, r0.rel_exact: was, r0.id: reverb-52916990, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.589, r0.arg1_exact: Coppotelli),$x: ($x, was, the prosecutor))),AnswerState(Coppotelli))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Fitzgerald	0.38407089475506573	Derivation(Who was the prosecutor?,Fitzgerald,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Fitzgerald, r0.rel_exact: is, r0.id: reverb-235189790, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.682, r0.arg1_exact: Fitzgerald),$x: ($x, was, the prosecutor))),AnswerState(Fitzgerald))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	Pamela	0.38407089475506573	Derivation(Who was the prosecutor?,Pamela,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Pamela, r0.rel_exact: is, r0.id: reverb-85970680, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.911, r0.arg1_exact: Pamela),$x: ($x, was, the prosecutor))),AnswerState(Pamela))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.38407089475506573)
Who was the prosecutor?	The House of Representatives	0.0957102534987524	Derivation(Who was the prosecutor?,The House of Representatives,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The House of Representatives, r0.rel_exact: is, r0.id: openie4-55042113, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.95310843, r0.arg1_exact: The House of Representatives),$x: ($x, was, the prosecutor))),AnswerState(The House of Representatives))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'who' and answer shape = Aaa Aaaaa aa Aaaaa -> 1.0),0.0957102534987524)
Who was the prosecutor?	the State	0.0957102534987524	Derivation(Who was the prosecutor?,the State,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the State, r0.rel_exact: is, r0.id: openie4-55252830, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.9251283, r0.arg1_exact: the State),$x: ($x, was, the prosecutor))),AnswerState(the State))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'who' and answer shape = aaa Aaaaa -> 1.0, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0957102534987524)
Who was the prosecutor?	Rose and Gysegem	0.0957102534987524	Derivation(Who was the prosecutor?,Rose and Gysegem,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Rose and Gysegem, r0.rel_exact: were, r0.id: openie4-63624548, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: were, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9329287, r0.arg1_exact: Rose and Gysegem),$x: ($x, was, the prosecutor))),AnswerState(Rose and Gysegem))),SparseVector(question prefix = 'who' and answer shape = Aaaa aaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0957102534987524)
Who was the prosecutor?	The kicker	0.0957102534987524	Derivation(Who was the prosecutor?,The kicker,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The kicker, r0.rel_exact: was, r0.id: openie4-55733012, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90820295, r0.arg1_exact: The kicker),$x: ($x, was, the prosecutor))),AnswerState(The kicker))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0957102534987524)
Who was the prosecutor?	Charley	-0.1458979140507044	Derivation(Who was the prosecutor?,Charley,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03mtf0, r0.arg1: Charley, r0.rel_exact: is, r0.id: reverb-130689223, r0.namespace: reverb, r0.arg2_exact: the prosecutor, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.911, r0.arg1_exact: Charley),$x: ($x, was, the prosecutor))),AnswerState(Charley))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1458979140507044)
Who was the prosecutor?	the problem	-0.4891224567925059	Derivation(Who was the prosecutor?,the problem,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the problem, r0.rel_exact: is, r0.id: openie4-50392039, r0.namespace: openie4, r0.arg2_exact: the prosecutors, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutors, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.9251283, r0.arg1_exact: the problem),$x: ($x, was, the prosecutor))),AnswerState(the problem))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4891224567925059)
Who was the prosecutor?	the victim	-0.4891224567925059	Derivation(Who was the prosecutor?,the victim,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: the victim, r0.rel_exact: was, r0.id: openie4-57432898, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9126242, r0.arg1_exact: the victim),$x: ($x, was, the prosecutor))),AnswerState(the victim))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4891224567925059)
Who was the prosecutor?	the solicitor	-1.0190912655982753	Derivation(Who was the prosecutor?,the solicitor,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0mch7, r0.arg1: the solicitor, r0.rel_exact: is, r0.id: openie4-40750063, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9251283, r0.arg1_exact: the solicitor),$x: ($x, was, the prosecutor))),AnswerState(the solicitor))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0190912655982753)
Who was the prosecutor?	the wife	-1.0190912655982753	Derivation(Who was the prosecutor?,the wife,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 025rz_f, r0.arg1: the wife, r0.rel_exact: was, r0.id: openie4-63321620, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90820295, r0.arg1_exact: the wife),$x: ($x, was, the prosecutor))),AnswerState(the wife))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0190912655982753)
Who was the prosecutor?	criminal intents	-1.5340874806712157	Derivation(Who was the prosecutor?,criminal intents,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: criminal intents, r0.rel_exact: were found only within, r0.id: reverb-136128012, r0.namespace: reverb, r0.arg2_exact: the prosecutor?s, r0.arg2: the prosecutor?s, r0.rel: were found only within, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.894, r0.arg1_exact: criminal intents),$x: ($x, was, the prosecutor))),AnswerState(criminal intents))),SparseVector(question prefix = 'who' and answer shape = aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.5340874806712157)
Who was the prosecutor?	Pearl	-1.613263784202195	Derivation(Who was the prosecutor?,Pearl,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05_8m, r0.arg1: Pearl, r0.rel_exact: is, r0.id: openie4-45443925, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.92783785, r0.arg1_exact: Pearl),$x: ($x, was, the prosecutor))),AnswerState(Pearl))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.613263784202195)
Who was the prosecutor?	Satan	-1.613263784202195	Derivation(Who was the prosecutor?,Satan,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06wzv, r0.arg1: Satan, r0.rel_exact: is, r0.id: openie4-21695629, r0.namespace: openie4, r0.arg2_exact: the prosecutor, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutor, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.93831193, r0.arg1_exact: Satan),$x: ($x, was, the prosecutor))),AnswerState(Satan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.613263784202195)
Who was the prosecutor?	The other , ?juror 19 ,?	-1.6648384189005512	Derivation(Who was the prosecutor?,The other , ?juror 19 ,?,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: The other , ?juror 19 ,?, r0.rel_exact: was removed by, r0.id: reverb-169368658, r0.namespace: reverb, r0.arg2_exact: the prosecutor?s, r0.arg2: the prosecutor?s, r0.rel: was removed by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.892, r0.arg1_exact: The other , ?juror 19 ,?),$x: ($x, was, the prosecutor))),AnswerState(The other , ?juror 19 ,?))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa , ?aaaa 11 ,? -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.6648384189005512)
Who was the prosecutor?	Mumia?s death sentence	-1.6648384189005512	Derivation(Who was the prosecutor?,Mumia?s death sentence,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),ExecutionAction(ExecTuple((r0.arg1: Mumia?s death sentence, r0.rel_exact: was secured by, r0.id: reverb-270498067, r0.namespace: reverb, r0.arg2_exact: the prosecutor?s, r0.arg2: the prosecutor?s, r0.rel: was secured by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.803, r0.arg1_exact: Mumia?s death sentence),$x: ($x, was, the prosecutor))),AnswerState(Mumia?s death sentence))),SparseVector(question prefix = 'who' and answer shape = Aaaaa?a aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.6648384189005512)
Who was the prosecutor?	the review	-3.466928307221528	Derivation(Who was the prosecutor?,the review,Vector(QaStep(Who was the prosecutor?,QuestionStateImpl(Who was the prosecutor?,Sentence(Who was the prosecutor?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, was, the prosecutor),false)), QaStep(Who was the prosecutor?,QueryState($x: ($x, was, the prosecutor),false),RelSynRule(be,outside be,false,1.3235778E7,272.0,211.0,0.47961318492889404),QueryState($x: ($x, outside be, the prosecutor),true)), QaStep(Who was the prosecutor?,QueryState($x: ($x, outside be, the prosecutor),true),ExecutionAction(ExecTuple((r0.arg1: the review, r0.rel_exact: must be undertaken outside, r0.id: openie4-4035689, r0.namespace: openie4, r0.arg2_exact: the prosecutors, r0.arg2_fbid_s: 028w3j, r0.arg2: the prosecutors, r0.rel: must be undertaken outside, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90452075, r0.arg1_exact: the review),$x: ($x, outside be, the prosecutor))),AnswerState(the review))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.47961318492889404, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.466928307221528)
Where did the ukulele originate?	Portugal	3.489951850077749	Derivation(Where did the ukulele originate?,Portugal,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),ExecutionAction(ExecTuple((r0.arg1: the ukulele, r0.rel_exact: originated in, r0.id: reverb-297527833, r0.namespace: reverb, r0.arg2_exact: Portugal, r0.arg2_fbid_s: 05r4w, r0.arg2: Portugal, r0.rel: originated in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.753, r0.arg1_exact: the ukulele),$x: (the ukulele, originate in, $x))),AnswerState(Portugal))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where did the ukulele originate?	Hawaii	3.489951850077749	Derivation(Where did the ukulele originate?,Hawaii,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The Ukulele, r0.rel_exact: originated in, r0.id: reverb-40678961, r0.namespace: reverb, r0.arg2_exact: Hawaii, r0.arg2_fbid_s: 03gh4, r0.arg2: Hawaii, r0.rel: originated in, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.938, r0.arg1_exact: The Ukulele),$x: (the ukulele, originate in, $x))),AnswerState(Hawaii))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),3.489951850077749)
Where did the ukulele originate?	the 19th Century	2.6614560208884344	Derivation(Where did the ukulele originate?,the 19th Century,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),ExecutionAction(ExecTuple((r0.arg1: The ukulele, r0.rel_exact: originated in, r0.id: reverb-150990710, r0.namespace: reverb, r0.arg2_exact: the 19th Century, r0.arg2: the 19th Century, r0.rel: originated in, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.901, r0.arg1_exact: The ukulele),$x: (the ukulele, originate in, $x))),AnswerState(the 19th Century))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'where' and answer shape = aaa 11aa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6614560208884344)
Where did the ukulele originate?	Japan	1.8565886111826244	Derivation(Where did the ukulele originate?,Japan,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),RelSynRule(originate in,be popular in,false,8034.0,1173.0,57.0,0.624509185552597),QueryState($x: (the ukulele, be popular in, $x),true)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, be popular in, $x),true),ExecutionAction(ExecTuple((r0.arg1: the ukulele, r0.rel_exact: was popular in, r0.id: reverb-315779710, r0.namespace: reverb, r0.arg2_exact: Japan, r0.arg2_fbid_s: 03_3d, r0.arg2: Japan, r0.rel: was popular in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.95, r0.arg1_exact: the ukulele),$x: (the ukulele, be popular in, $x))),AnswerState(Japan))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.624509185552597, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'where' and answer shape = Aaaaa -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8565886111826244)
Where did the ukulele originate?	Nova Scotia	1.110829356790593	Derivation(Where did the ukulele originate?,Nova Scotia,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),RelSynRule(originate in,be the cradle of,true,8034.0,221.0,20.0,0.6439416110515594),QueryState($x: ($x, be the cradle of, the ukulele),true)), QaStep(Where did the ukulele originate?,QueryState($x: ($x, be the cradle of, the ukulele),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 059t8, r0.arg1: Nova Scotia, r0.rel_exact: is the cradle of, r0.id: reverb-258149383, r0.namespace: reverb, r0.arg2_exact: the Ukulele, r0.arg2: the Ukulele, r0.rel: is the cradle of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.675, r0.arg1_exact: Nova Scotia),$x: ($x, be the cradle of, the ukulele))),AnswerState(Nova Scotia))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6439416110515594, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.110829356790593)
Where did the ukulele originate?	the nineteenth century	1.076092650379688	Derivation(Where did the ukulele originate?,the nineteenth century,Vector(QaStep(Where did the ukulele originate?,QuestionStateImpl(Where did the ukulele originate?,Sentence(Where did the ukulele originate?),false),RegexQuestionPattern(List(ent, rel),<lemma='where'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x))),QueryState($x: (the ukulele, originate in, $x),false)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate in, $x),false),RelSynRule(originate in,originate from,false,8034.0,4277.0,287.0,0.6345949172973633),QueryState($x: (the ukulele, originate from, $x),true)), QaStep(Where did the ukulele originate?,QueryState($x: (the ukulele, originate from, $x),true),ExecutionAction(ExecTuple((r0.arg1: The ukulele, r0.rel_exact: originated from, r0.id: reverb-262407572, r0.namespace: reverb, r0.arg2_exact: the nineteenth century, r0.arg2: the nineteenth century, r0.rel: originated from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.842, r0.arg1_exact: The ukulele),$x: (the ukulele, originate from, $x))),AnswerState(the nineteenth century))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6345949172973633, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'where' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.076092650379688)
What is nanotechnology?	One particularly exciting emerging area	3.764691703861489	Derivation(What is nanotechnology?,One particularly exciting emerging area,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: One particularly exciting emerging area, r0.rel_exact: is, r0.id: reverb-252233599, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.903, r0.arg1_exact: One particularly exciting emerging area),$x: ($x, is, nanotechnology))),AnswerState(One particularly exciting emerging area))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.764691703861489)
What is nanotechnology?	25 weeks	2.017378936739478	Derivation(What is nanotechnology?,25 weeks,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: 25 weeks, r0.rel_exact: is, r0.id: reverb-42742838, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.572, r0.arg1_exact: 25 weeks),$x: ($x, is, nanotechnology))),AnswerState(25 weeks))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = 11 aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.017378936739478)
What is nanotechnology?	General Nanotechnology Questions	1.6874228408259355	Derivation(What is nanotechnology?,General Nanotechnology Questions,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: General Nanotechnology Questions, r0.rel_exact: is, r0.id: reverb-176636906, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.891, r0.arg1_exact: General Nanotechnology Questions),$x: ($x, is, nanotechnology))),AnswerState(General Nanotechnology Questions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.6874228408259355)
What is nanotechnology?	NANOCON	1.497936530283132	Derivation(What is nanotechnology?,NANOCON,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: NANOCON, r0.rel_exact: was, r0.id: reverb-118026504, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.754, r0.arg1_exact: NANOCON),$x: ($x, is, nanotechnology))),AnswerState(NANOCON))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.497936530283132)
What is nanotechnology?	Recent Research	1.4827040249552492	Derivation(What is nanotechnology?,Recent Research,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Recent Research, r0.rel_exact: Is, r0.id: reverb-318305997, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.71, r0.arg1_exact: Recent Research),$x: ($x, is, nanotechnology))),AnswerState(Recent Research))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4827040249552492)
What is nanotechnology?	Mr. Scalise	1.3912391191102988	Derivation(What is nanotechnology?,Mr. Scalise,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Mr. Scalise, r0.rel_exact: is, r0.id: reverb-91547829, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.869, r0.arg1_exact: Mr. Scalise),$x: ($x, is, nanotechnology))),AnswerState(Mr. Scalise))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = Aa. Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Food Safety and Nutrition	1.3912391191102988	Derivation(What is nanotechnology?,Food Safety and Nutrition,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Food Safety and Nutrition, r0.rel_exact: is, r0.id: reverb-258829603, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.752, r0.arg1_exact: Food Safety and Nutrition),$x: ($x, is, nanotechnology))),AnswerState(Food Safety and Nutrition))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa aaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	big	1.3912391191102988	Derivation(What is nanotechnology?,big,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: big, r0.rel_exact: is, r0.id: reverb-378733492, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.679, r0.arg1_exact: big),$x: ($x, is, nanotechnology))),AnswerState(big))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	a co-author	1.3912391191102988	Derivation(What is nanotechnology?,a co-author,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: a co-author, r0.rel_exact: Is, r0.id: reverb-95055072, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.808, r0.arg1_exact: a co-author),$x: ($x, is, nanotechnology))),AnswerState(a co-author))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = a aa-aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	The key thematic fields	1.3912391191102988	Derivation(What is nanotechnology?,The key thematic fields,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: The key thematic fields, r0.rel_exact: are, r0.id: reverb-121063093, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.968, r0.arg1_exact: The key thematic fields),$x: ($x, is, nanotechnology))),AnswerState(The key thematic fields))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Lynn?s primary technical focus	1.3912391191102988	Derivation(What is nanotechnology?,Lynn?s primary technical focus,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Lynn?s primary technical focus, r0.rel_exact: is, r0.id: reverb-202091209, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 15, r0.conf_f: 0.939, r0.arg1_exact: Lynn?s primary technical focus),$x: ($x, is, nanotechnology))),AnswerState(Lynn?s primary technical focus))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa?a aaaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Nanotechnology?the new buzzword	1.3912391191102988	Derivation(What is nanotechnology?,Nanotechnology?the new buzzword,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Nanotechnology?the new buzzword, r0.rel_exact: is, r0.id: reverb-183467316, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.831, r0.arg1_exact: Nanotechnology?the new buzzword),$x: ($x, is, nanotechnology))),AnswerState(Nanotechnology?the new buzzword))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = Aaaaa?aaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	The New Industrial Revolution	1.3912391191102988	Derivation(What is nanotechnology?,The New Industrial Revolution,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: The New Industrial Revolution, r0.rel_exact: is, r0.id: reverb-318563335, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.823, r0.arg1_exact: The New Industrial Revolution),$x: ($x, is, nanotechnology))),AnswerState(The New Industrial Revolution))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa Aaa Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Today?s ?buzz word ?	1.3912391191102988	Derivation(What is nanotechnology?,Today?s ?buzz word ?,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Today?s ?buzz word ?, r0.rel_exact: is, r0.id: reverb-52239673, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.911, r0.arg1_exact: Today?s ?buzz word ?),$x: ($x, is, nanotechnology))),AnswerState(Today?s ?buzz word ?))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa?a ?aaaa aaaa ? -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	CC J1J4 Biology	1.3912391191102988	Derivation(What is nanotechnology?,CC J1J4 Biology,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: CC J1J4 Biology, r0.rel_exact: is, r0.id: reverb-183082101, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.719, r0.arg1_exact: CC J1J4 Biology),$x: ($x, is, nanotechnology))),AnswerState(CC J1J4 Biology))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = AA A1A1 Aaaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	close What	1.3912391191102988	Derivation(What is nanotechnology?,close What,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: close What, r0.rel_exact: is, r0.id: reverb-94107608, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.742, r0.arg1_exact: close What),$x: ($x, is, nanotechnology))),AnswerState(close What))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = aaaa Aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Mirkin?s passion	1.3912391191102988	Derivation(What is nanotechnology?,Mirkin?s passion,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Mirkin?s passion, r0.rel_exact: is, r0.id: reverb-34913851, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.787, r0.arg1_exact: Mirkin?s passion),$x: ($x, is, nanotechnology))),AnswerState(Mirkin?s passion))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa?a aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	commonly available sunscreens and cosmetics	1.3912391191102988	Derivation(What is nanotechnology?,commonly available sunscreens and cosmetics,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: commonly available sunscreens and cosmetics, r0.rel_exact: is, r0.id: reverb-104793868, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.838, r0.arg1_exact: commonly available sunscreens and cosmetics),$x: ($x, is, nanotechnology))),AnswerState(commonly available sunscreens and cosmetics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa aaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	SST Executive Director	1.3912391191102988	Derivation(What is nanotechnology?,SST Executive Director,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: SST Executive Director, r0.rel_exact: is, r0.id: reverb-48808634, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.726, r0.arg1_exact: SST Executive Director),$x: ($x, is, nanotechnology))),AnswerState(SST Executive Director))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAA Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	layman?s terms	1.3912391191102988	Derivation(What is nanotechnology?,layman?s terms,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: layman?s terms, r0.rel_exact: is, r0.id: reverb-295352374, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.535, r0.arg1_exact: layman?s terms),$x: ($x, is, nanotechnology))),AnswerState(layman?s terms))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa?a aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	reasonably mature Drexlerian nanotechnology	1.3912391191102988	Derivation(What is nanotechnology?,reasonably mature Drexlerian nanotechnology,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: reasonably mature Drexlerian nanotechnology, r0.rel_exact: is, r0.id: reverb-43757825, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.719, r0.arg1_exact: reasonably mature Drexlerian nanotechnology),$x: ($x, is, nanotechnology))),AnswerState(reasonably mature Drexlerian nanotechnology))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa Aaaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	Panelists and participants	1.3912391191102988	Derivation(What is nanotechnology?,Panelists and participants,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Panelists and participants, r0.rel_exact: is, r0.id: reverb-302533884, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.831, r0.arg1_exact: Panelists and participants),$x: ($x, is, nanotechnology))),AnswerState(Panelists and participants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	An example	1.3912391191102988	Derivation(What is nanotechnology?,An example,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: An example, r0.rel_exact: is, r0.id: reverb-109396975, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.918, r0.arg1_exact: An example),$x: ($x, is, nanotechnology))),AnswerState(An example))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = Aa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3912391191102988)
What is nanotechnology?	research today	1.167759167090362	Derivation(What is nanotechnology?,research today,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: research today, r0.rel_exact: is, r0.id: reverb-24344346, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.599, r0.arg1_exact: research today),$x: ($x, is, nanotechnology))),AnswerState(research today))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.167759167090362)
What is nanotechnology?	timeless questions	1.167759167090362	Derivation(What is nanotechnology?,timeless questions,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: timeless questions, r0.rel_exact: is, r0.id: reverb-323007365, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: timeless questions),$x: ($x, is, nanotechnology))),AnswerState(timeless questions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.167759167090362)
What is nanotechnology?	nanowerk dares	1.167759167090362	Derivation(What is nanotechnology?,nanowerk dares,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: nanowerk dares, r0.rel_exact: Is, r0.id: reverb-205641464, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.541, r0.arg1_exact: nanowerk dares),$x: ($x, is, nanotechnology))),AnswerState(nanowerk dares))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.167759167090362)
What is nanotechnology?	molecular manufacturing	1.167759167090362	Derivation(What is nanotechnology?,molecular manufacturing,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: molecular manufacturing, r0.rel_exact: is, r0.id: reverb-74147687, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.808, r0.arg1_exact: molecular manufacturing),$x: ($x, is, nanotechnology))),AnswerState(molecular manufacturing))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.167759167090362)
What is nanotechnology?	Action	1.047704199639943	Derivation(What is nanotechnology?,Action,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Action, r0.rel_exact: Is, r0.id: reverb-328032057, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.683, r0.arg1_exact: Action),$x: ($x, is, nanotechnology))),AnswerState(Action))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is nanotechnology?	Definitions	1.047704199639943	Derivation(What is nanotechnology?,Definitions,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Definitions, r0.rel_exact: is, r0.id: reverb-70767258, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.826, r0.arg1_exact: Definitions),$x: ($x, is, nanotechnology))),AnswerState(Definitions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is nanotechnology?	Description	1.047704199639943	Derivation(What is nanotechnology?,Description,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Description, r0.rel_exact: is, r0.id: reverb-135056538, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.726, r0.arg1_exact: Description),$x: ($x, is, nanotechnology))),AnswerState(Description))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is nanotechnology?	Question	1.047704199639943	Derivation(What is nanotechnology?,Question,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Question, r0.rel_exact: is, r0.id: reverb-191102732, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.8, r0.arg1_exact: Question),$x: ($x, is, nanotechnology))),AnswerState(Question))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is nanotechnology?	Jyv?skyl?	1.047704199639943	Derivation(What is nanotechnology?,Jyv?skyl?,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Jyv?skyl?, r0.rel_exact: is, r0.id: reverb-141007811, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.64, r0.arg1_exact: Jyv?skyl?),$x: ($x, is, nanotechnology))),AnswerState(Jyv?skyl?))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is nanotechnology?	a talk	0.9821974393422803	Derivation(What is nanotechnology?,a talk,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: a talk, r0.rel_exact: is, r0.id: reverb-378345151, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.742, r0.arg1_exact: a talk),$x: ($x, is, nanotechnology))),AnswerState(a talk))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.9821974393422803)
What is nanotechnology?	the Consumer	0.9360457431539	Derivation(What is nanotechnology?,the Consumer,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the Consumer, r0.rel_exact: is, r0.id: reverb-195529625, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.726, r0.arg1_exact: the Consumer),$x: ($x, is, nanotechnology))),AnswerState(the Consumer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = aaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9360457431539)
What is nanotechnology?	the Nanoworld	0.9360457431539	Derivation(What is nanotechnology?,the Nanoworld,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the Nanoworld, r0.rel_exact: is, r0.id: reverb-358369938, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.826, r0.arg1_exact: the Nanoworld),$x: ($x, is, nanotechnology))),AnswerState(the Nanoworld))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = aaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9360457431539)
What is nanotechnology?	important	0.8783066289217556	Derivation(What is nanotechnology?,important,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: important, r0.rel_exact: is, r0.id: reverb-166712854, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.679, r0.arg1_exact: important),$x: ($x, is, nanotechnology))),AnswerState(important))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	safe	0.8783066289217556	Derivation(What is nanotechnology?,safe,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: safe, r0.rel_exact: is, r0.id: reverb-381322234, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.838, r0.arg1_exact: safe),$x: ($x, is, nanotechnology))),AnswerState(safe))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	three	0.8783066289217556	Derivation(What is nanotechnology?,three,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: three, r0.rel_exact: is, r0.id: reverb-289261059, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.517, r0.arg1_exact: three),$x: ($x, is, nanotechnology))),AnswerState(three))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	interdisciplinary	0.8783066289217556	Derivation(What is nanotechnology?,interdisciplinary,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: interdisciplinary, r0.rel_exact: is, r0.id: reverb-76319594, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.742, r0.arg1_exact: interdisciplinary),$x: ($x, is, nanotechnology))),AnswerState(interdisciplinary))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	section	0.8783066289217556	Derivation(What is nanotechnology?,section,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: section, r0.rel_exact: is, r0.id: reverb-58629051, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.713, r0.arg1_exact: section),$x: ($x, is, nanotechnology))),AnswerState(section))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	view	0.8783066289217556	Derivation(What is nanotechnology?,view,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: view, r0.rel_exact: is, r0.id: reverb-181484152, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.713, r0.arg1_exact: view),$x: ($x, is, nanotechnology))),AnswerState(view))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8783066289217556)
What is nanotechnology?	Everyone today	0.8683030187714109	Derivation(What is nanotechnology?,Everyone today,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Everyone today, r0.rel_exact: is, r0.id: reverb-214250050, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.831, r0.arg1_exact: Everyone today),$x: ($x, is, nanotechnology))),AnswerState(Everyone today))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8683030187714109)
What is nanotechnology?	Oak Ridge National Laboratory	0.8612703103045287	Derivation(What is nanotechnology?,Oak Ridge National Laboratory,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 09hv1, r0.arg1: Oak Ridge National Laboratory, r0.rel_exact: is, r0.id: reverb-49230485, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.821, r0.arg1_exact: Oak Ridge National Laboratory),$x: ($x, is, nanotechnology))),AnswerState(Oak Ridge National Laboratory))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8612703103045287)
What is nanotechnology?	Wiley-Blackwell	0.8612703103045287	Derivation(What is nanotechnology?,Wiley-Blackwell,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0chqgp, r0.arg1: Wiley-Blackwell, r0.rel_exact: Is, r0.id: reverb-292227327, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.77, r0.arg1_exact: Wiley-Blackwell),$x: ($x, is, nanotechnology))),AnswerState(Wiley-Blackwell))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = Aaaaa-Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8612703103045287)
What is nanotechnology?	the researchers	0.7535235290836304	Derivation(What is nanotechnology?,the researchers,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the researchers, r0.rel_exact: is, r0.id: reverb-264977676, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.668, r0.arg1_exact: the researchers),$x: ($x, is, nanotechnology))),AnswerState(the researchers))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the field	0.7535235290836304	Derivation(What is nanotechnology?,the field,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the field, r0.rel_exact: is, r0.id: reverb-62808966, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.736, r0.arg1_exact: the field),$x: ($x, is, nanotechnology))),AnswerState(the field))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the story	0.7535235290836304	Derivation(What is nanotechnology?,the story,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the story, r0.rel_exact: is, r0.id: reverb-1873502, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.532, r0.arg1_exact: the story),$x: ($x, is, nanotechnology))),AnswerState(the story))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the topics	0.7535235290836304	Derivation(What is nanotechnology?,the topics,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the topics, r0.rel_exact: is, r0.id: reverb-325087785, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 25, r0.conf_f: 0.644, r0.arg1_exact: the topics),$x: ($x, is, nanotechnology))),AnswerState(the topics))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the showcase	0.7535235290836304	Derivation(What is nanotechnology?,the showcase,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the showcase, r0.rel_exact: are, r0.id: reverb-357037795, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.883, r0.arg1_exact: the showcase),$x: ($x, is, nanotechnology))),AnswerState(the showcase))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the industry	0.7535235290836304	Derivation(What is nanotechnology?,the industry,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the industry, r0.rel_exact: is, r0.id: reverb-85342440, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.679, r0.arg1_exact: the industry),$x: ($x, is, nanotechnology))),AnswerState(the industry))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	the university	0.7535235290836304	Derivation(What is nanotechnology?,the university,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the university, r0.rel_exact: is, r0.id: reverb-335509773, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.838, r0.arg1_exact: the university),$x: ($x, is, nanotechnology))),AnswerState(the university))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7535235290836304)
What is nanotechnology?	The subject	0.7008852079199979	Derivation(What is nanotechnology?,The subject,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: The subject, r0.rel_exact: is, r0.id: reverb-278063047, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.918, r0.arg1_exact: The subject),$x: ($x, is, nanotechnology))),AnswerState(The subject))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7008852079199979)
What is nanotechnology?	One example	0.7008852079199979	Derivation(What is nanotechnology?,One example,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: One example, r0.rel_exact: is, r0.id: reverb-336909732, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.918, r0.arg1_exact: One example),$x: ($x, is, nanotechnology))),AnswerState(One example))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7008852079199979)
What is nanotechnology?	green building materials	0.6934552855964584	Derivation(What is nanotechnology?,green building materials,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: green building materials, r0.rel_exact: is, r0.id: reverb-41701729, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.748, r0.arg1_exact: green building materials),$x: ($x, is, nanotechnology))),AnswerState(green building materials))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6934552855964584)
What is nanotechnology?	recent science fiction	0.6934552855964584	Derivation(What is nanotechnology?,recent science fiction,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: recent science fiction, r0.rel_exact: is, r0.id: reverb-25461768, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.614, r0.arg1_exact: recent science fiction),$x: ($x, is, nanotechnology))),AnswerState(recent science fiction))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6934552855964584)
What is nanotechnology?	various video clips	0.6934552855964584	Derivation(What is nanotechnology?,various video clips,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: various video clips, r0.rel_exact: is, r0.id: reverb-141038869, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.66, r0.arg1_exact: various video clips),$x: ($x, is, nanotechnology))),AnswerState(various video clips))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6934552855964584)
What is nanotechnology?	plain language	0.6377903582845919	Derivation(What is nanotechnology?,plain language,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 016gdz, r0.arg1: plain language, r0.rel_exact: is, r0.id: reverb-351011003, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.842, r0.arg1_exact: plain language),$x: ($x, is, nanotechnology))),AnswerState(plain language))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6377903582845919)
What is nanotechnology?	A science video discussion	0.5769871771987825	Derivation(What is nanotechnology?,A science video discussion,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: A science video discussion, r0.rel_exact: is, r0.id: reverb-261712389, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.572, r0.arg1_exact: A science video discussion),$x: ($x, is, nanotechnology))),AnswerState(A science video discussion))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5769871771987825)
What is nanotechnology?	Finland	0.5177353908341729	Derivation(What is nanotechnology?,Finland,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02vzc, r0.arg1: Finland, r0.rel_exact: is, r0.id: reverb-77824456, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.688, r0.arg1_exact: Finland),$x: ($x, is, nanotechnology))),AnswerState(Finland))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5177353908341729)
What is nanotechnology?	Physics	0.5177353908341729	Derivation(What is nanotechnology?,Physics,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05qjt, r0.arg1: Physics, r0.rel_exact: is, r0.id: reverb-342343614, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.804, r0.arg1_exact: Physics),$x: ($x, is, nanotechnology))),AnswerState(Physics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5177353908341729)
What is nanotechnology?	agriculture	0.34833782011598546	Derivation(What is nanotechnology?,agriculture,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0hkf, r0.arg1: agriculture, r0.rel_exact: is, r0.id: reverb-182929222, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.549, r0.arg1_exact: agriculture),$x: ($x, is, nanotechnology))),AnswerState(agriculture))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	notice	0.34833782011598546	Derivation(What is nanotechnology?,notice,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07dqpn, r0.arg1: notice, r0.rel_exact: is, r0.id: reverb-158903899, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.677, r0.arg1_exact: notice),$x: ($x, is, nanotechnology))),AnswerState(notice))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	earth	0.34833782011598546	Derivation(What is nanotechnology?,earth,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02j71, r0.arg1: earth, r0.rel_exact: is, r0.id: reverb-252321237, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.817, r0.arg1_exact: earth),$x: ($x, is, nanotechnology))),AnswerState(earth))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	miniaturization	0.34833782011598546	Derivation(What is nanotechnology?,miniaturization,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 041w6p, r0.arg1: miniaturization, r0.rel_exact: is, r0.id: reverb-183773788, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.659, r0.arg1_exact: miniaturization),$x: ($x, is, nanotechnology))),AnswerState(miniaturization))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	research	0.34833782011598546	Derivation(What is nanotechnology?,research,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06cs1, r0.arg1: research, r0.rel_exact: is, r0.id: reverb-149475781, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.833, r0.arg1_exact: research),$x: ($x, is, nanotechnology))),AnswerState(research))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	healthcare	0.34833782011598546	Derivation(What is nanotechnology?,healthcare,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01mw2x, r0.arg1: healthcare, r0.rel_exact: is, r0.id: reverb-39153719, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: healthcare),$x: ($x, is, nanotechnology))),AnswerState(healthcare))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	electronics	0.34833782011598546	Derivation(What is nanotechnology?,electronics,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02mrp, r0.arg1: electronics, r0.rel_exact: is, r0.id: reverb-85361600, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.736, r0.arg1_exact: electronics),$x: ($x, is, nanotechnology))),AnswerState(electronics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.34833782011598546)
What is nanotechnology?	The semantic question	0.2690762896840797	Derivation(What is nanotechnology?,The semantic question,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: The semantic question, r0.rel_exact: is, r0.id: reverb-336298405, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.521, r0.arg1_exact: The semantic question),$x: ($x, is, nanotechnology))),AnswerState(The semantic question))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What is nanotechnology?	One such technology	0.2690762896840797	Derivation(What is nanotechnology?,One such technology,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: One such technology, r0.rel_exact: is, r0.id: reverb-26408362, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.784, r0.arg1_exact: One such technology),$x: ($x, is, nanotechnology))),AnswerState(One such technology))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What is nanotechnology?	The working title	0.2690762896840797	Derivation(What is nanotechnology?,The working title,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: The working title, r0.rel_exact: is, r0.id: reverb-324013679, r0.namespace: reverb, r0.arg2_exact: Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.729, r0.arg1_exact: The working title),$x: ($x, is, nanotechnology))),AnswerState(The working title))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What is nanotechnology?	One such field	0.2690762896840797	Derivation(What is nanotechnology?,One such field,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: One such field, r0.rel_exact: is, r0.id: reverb-297775308, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.918, r0.arg1_exact: One such field),$x: ($x, is, nanotechnology))),AnswerState(One such field))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What is nanotechnology?	the event	0.22355472027786027	Derivation(What is nanotechnology?,the event,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0276mk2, r0.arg1: the event, r0.rel_exact: is, r0.id: reverb-223042812, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.736, r0.arg1_exact: the event),$x: ($x, is, nanotechnology))),AnswerState(the event))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.22355472027786027)
What is nanotechnology?	July 2008	-0.13478438593876363	Derivation(What is nanotechnology?,July 2008,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: July 2008, r0.rel_exact: is, r0.id: reverb-57582804, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.726, r0.arg1_exact: July 2008),$x: ($x, is, nanotechnology))),AnswerState(July 2008))),SparseVector(question prefix = 'what' and isDate -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = Aaaa 1111 -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.13478438593876363)
What is nanotechnology?	the general workshops	-0.16400200399582787	Derivation(What is nanotechnology?,the general workshops,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the general workshops, r0.rel_exact: is, r0.id: reverb-379941455, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.748, r0.arg1_exact: the general workshops),$x: ($x, is, nanotechnology))),AnswerState(the general workshops))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What is nanotechnology?	the following questions	-0.16400200399582787	Derivation(What is nanotechnology?,the following questions,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the following questions, r0.rel_exact: is, r0.id: reverb-246225012, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.713, r0.arg1_exact: the following questions),$x: ($x, is, nanotechnology))),AnswerState(the following questions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What is nanotechnology?	the near future	-0.16400200399582787	Derivation(What is nanotechnology?,the near future,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the near future, r0.rel_exact: is, r0.id: reverb-27050043, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.748, r0.arg1_exact: the near future),$x: ($x, is, nanotechnology))),AnswerState(the near future))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What is nanotechnology?	the incredible predictions	-0.16400200399582787	Derivation(What is nanotechnology?,the incredible predictions,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the incredible predictions, r0.rel_exact: is, r0.id: reverb-45874492, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.504, r0.arg1_exact: the incredible predictions),$x: ($x, is, nanotechnology))),AnswerState(the incredible predictions))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16400200399582787)
What is nanotechnology?	the topic	-0.7138423410678605	Derivation(What is nanotechnology?,the topic,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the topic, r0.rel_exact: is, r0.id: openie4-47880600, r0.namespace: openie4, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9251283, r0.arg1_exact: the topic),$x: ($x, is, nanotechnology))),AnswerState(the topic))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7138423410678605)
What is nanotechnology?	the enemy	-0.7138423410678605	Derivation(What is nanotechnology?,the enemy,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the enemy, r0.rel_exact: is, r0.id: openie4-10698097, r0.namespace: openie4, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9251283, r0.arg1_exact: the enemy),$x: ($x, is, nanotechnology))),AnswerState(the enemy))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7138423410678605)
What is nanotechnology?	the question	-0.7138423410678605	Derivation(What is nanotechnology?,the question,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the question, r0.rel_exact: is, r0.id: openie4-23666686, r0.namespace: openie4, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.9126242, r0.arg1_exact: the question),$x: ($x, is, nanotechnology))),AnswerState(the question))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7138423410678605)
What is nanotechnology?	Dr. Sanhai?s presentation	-1.03627393634882	Derivation(What is nanotechnology?,Dr. Sanhai?s presentation,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: Dr. Sanhai?s presentation, r0.rel_exact: was, r0.id: reverb-194976688, r0.namespace: reverb, r0.arg2_exact: ?Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: ?Nanotechnology, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.88, r0.arg1_exact: Dr. Sanhai?s presentation),$x: ($x, is, nanotechnology))),AnswerState(Dr. Sanhai?s presentation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, question prefix = 'what' and answer shape = Aa. Aaaaa?a aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.03627393634882)
What is nanotechnology?	the American Dietetic Association	-1.03627393634882	Derivation(What is nanotechnology?,the American Dietetic Association,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the American Dietetic Association, r0.rel_exact: is, r0.id: reverb-12187745, r0.namespace: reverb, r0.arg2_exact: ?Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: ?Nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.821, r0.arg1_exact: the American Dietetic Association),$x: ($x, is, nanotechnology))),AnswerState(the American Dietetic Association))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa Aaaaa Aaaaa -> 1.0),-1.03627393634882)
What is nanotechnology?	the leaflet	-1.6739895263754885	Derivation(What is nanotechnology?,the leaflet,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: the leaflet, r0.rel_exact: was, r0.id: reverb-103260526, r0.namespace: reverb, r0.arg2_exact: ?Nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: ?Nanotechnology, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.819, r0.arg1_exact: the leaflet),$x: ($x, is, nanotechnology))),AnswerState(the leaflet))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.6739895263754885)
What is nanotechnology?	2003	-1.8075650168998794	Derivation(What is nanotechnology?,2003,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),ExecutionAction(ExecTuple((r0.arg1: 2003, r0.rel_exact: is, r0.id: reverb-155205665, r0.namespace: reverb, r0.arg2_exact: nanotechnology, r0.arg2_fbid_s: 05d5r, r0.arg2: nanotechnology, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: 2003),$x: ($x, is, nanotechnology))),AnswerState(2003))),SparseVector(question prefix = 'what' and isDate -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = 1111 -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.8075650168998794)
What is nanotechnology?	?Venture Capital	-1.8965008866215163	Derivation(What is nanotechnology?,?Venture Capital,Vector(QaStep(What is nanotechnology?,QuestionStateImpl(What is nanotechnology?,Sentence(What is nanotechnology?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, nanotechnology),false)), QaStep(What is nanotechnology?,QueryState($x: ($x, is, nanotechnology),false),RelSynRule(be,be discussion on,true,1.3235778E7,179.0,125.0,0.47632795572280884),QueryState($x: (nanotechnology, be discussion on, $x),true)), QaStep(What is nanotechnology?,QueryState($x: (nanotechnology, be discussion on, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05d5r, r0.arg1: nanotechnology, r0.rel_exact: was a panel discussion on, r0.id: reverb-60756524, r0.namespace: reverb, r0.arg2_exact: ?Venture Capital, r0.arg2_fbid_s: 01m2bt, r0.arg2: ?Venture Capital, r0.rel: was a panel discussion on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.965, r0.arg1_exact: nanotechnology),$x: (nanotechnology, be discussion on, $x))),AnswerState(?Venture Capital))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.47632795572280884, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = ?Aaaaa Aaaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8965008866215163)
What does NASA stand for?	National Aeronautics and Space Administration	2.716060274854339	Derivation(What does NASA stand for?,National Aeronautics and Space Administration,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,be an organization know by the acronym,false,15674.0,289.0,46.0,0.6407017409801483),QueryState($x: (NASA, be an organization know by the acronym, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, be an organization know by the acronym, $x),true),ExecutionAction(ExecTuple((r0.arg1: nasa, r0.rel_exact: is an organization known by the acronym, r0.prob_f: 0.9999999, r0.id: nell-1201487, r0.namespace: nell, r0.arg2_exact: National Aeronautics and Space Administration, r0.arg2: National Aeronautics and Space Administration, r0.rel: is an organization known by the acronym, r0.arg1_exact: nasa),$x: (NASA, be an organization know by the acronym, $x))),AnswerState(National Aeronautics and Space Administration))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6407017409801483, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa aaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.08333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.716060274854339)
What does NASA stand for?	National Aeronautical Space Administration	2.716007450901116	Derivation(What does NASA stand for?,National Aeronautical Space Administration,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: stands for, r0.id: reverb-197995695, r0.namespace: reverb, r0.arg2_exact: National Aeronautical Space Administration, r0.arg2: National Aeronautical Space Administration, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.914, r0.arg1_exact: NASA),$x: (NASA, stand for, $x))),AnswerState(National Aeronautical Space Administration))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.716007450901116)
What does NASA stand for?	aeronautics	1.6731061519068022	Derivation(What does NASA stand for?,aeronautics,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: stands for, r0.id: reverb-383842463, r0.namespace: reverb, r0.arg2_exact: aeronautics, r0.arg2_fbid_s: 0wl4, r0.arg2: aeronautics, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.74, r0.arg1_exact: NASA),$x: (NASA, stand for, $x))),AnswerState(aeronautics))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6731061519068022)
What does NASA stand for?	A Straight Answer	1.5088280717175795	Derivation(What does NASA stand for?,A Straight Answer,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: actually stood for ?Never, r0.id: reverb-101311236, r0.namespace: reverb, r0.arg2_exact: A Straight Answer, r0.arg2: A Straight Answer, r0.rel: actually stood for ?Never, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.693, r0.arg1_exact: NASA),$x: (NASA, stand for, $x))),AnswerState(A Straight Answer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5088280717175795)
What does NASA stand for?	Need	1.3438255034772182	Derivation(What does NASA stand for?,Need,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: Nasa, r0.rel_exact: stood for, r0.id: reverb-198704537, r0.namespace: reverb, r0.arg2_exact: Need, r0.arg2_fbid_s: 02xnwp, r0.arg2: Need, r0.rel: stood for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.662, r0.arg1_exact: Nasa),$x: (NASA, stand for, $x))),AnswerState(Need))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3438255034772182)
What does NASA stand for?	the Apollo missions	0.5419984028220735	Derivation(What does NASA stand for?,the Apollo missions,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: initially considered for, r0.id: reverb-217079921, r0.namespace: reverb, r0.arg2_exact: the Apollo missions, r0.arg2: the Apollo missions, r0.rel: initially considered for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.906, r0.arg1_exact: NASA),$x: (NASA, consider for, $x))),AnswerState(the Apollo missions))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.5419984028220735)
What does NASA stand for?	a reliability rate	0.368225168145794	Derivation(What does NASA stand for?,a reliability rate,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,be strive for,false,15674.0,150.0,6.0,0.5975426733493805),QueryState($x: (NASA, be strive for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, be strive for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: was striving for, r0.id: reverb-49911871, r0.namespace: reverb, r0.arg2_exact: a reliability rate, r0.arg2: a reliability rate, r0.rel: was striving for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.858, r0.arg1_exact: NASA),$x: (NASA, be strive for, $x))),AnswerState(a reliability rate))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5975426733493805, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.368225168145794)
What does NASA stand for?	North America South America	0.28849439544199684	Derivation(What does NASA stand for?,North America South America,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: N.A.S.A., r0.rel_exact: stands for, r0.id: reverb-122128875, r0.namespace: reverb, r0.arg2_exact: North America South America, r0.arg2: North America South America, r0.rel: stands for, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.914, r0.arg1_exact: N.A.S.A.),$x: (NASA, stand for, $x))),AnswerState(North America South America))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.28849439544199684)
What does NASA stand for?	space exploration	0.09423162994883238	Derivation(What does NASA stand for?,space exploration,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,be suppose to be about,false,15674.0,167.0,6.0,0.5941877067089081),QueryState($x: (NASA, be suppose to be about, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, be suppose to be about, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: is supposed to be about, r0.id: reverb-339151000, r0.namespace: reverb, r0.arg2_exact: space exploration, r0.arg2_fbid_s: 0717w, r0.arg2: space exploration, r0.rel: is supposed to be about, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.933, r0.arg1_exact: NASA),$x: (NASA, be suppose to be about, $x))),AnswerState(space exploration))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5941877067089081, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.09423162994883238)
What does NASA stand for?	use	0.08374222189531322	Derivation(What does NASA stand for?,use,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: is considering for, r0.id: reverb-291123358, r0.namespace: reverb, r0.arg2_exact: use, r0.arg2: use, r0.rel: is considering for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.536, r0.arg1_exact: NASA),$x: (NASA, consider for, $x))),AnswerState(use))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.08374222189531322)
What does NASA stand for?	debris removal	-0.13973773012462365	Derivation(What does NASA stand for?,debris removal,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: considers strategies for, r0.id: reverb-58039588, r0.namespace: reverb, r0.arg2_exact: debris removal, r0.arg2: debris removal, r0.rel: considers strategies for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.911, r0.arg1_exact: NASA),$x: (NASA, consider for, $x))),AnswerState(debris removal))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.13973773012462365)
What does NASA stand for?	the House	-0.19283462124916273	Derivation(What does NASA stand for?,the House,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,to be elect to,false,15674.0,225.0,9.0,0.5975426733493805),QueryState($x: (NASA, to be elect to, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, to be elect to, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: was first elected to, r0.id: reverb-194170930, r0.namespace: reverb, r0.arg2_exact: the House, r0.arg2: the House, r0.rel: was first elected to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.921, r0.arg1_exact: NASA),$x: (NASA, to be elect to, $x))),AnswerState(the House))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5975426733493805, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.125, question prefix = 'what' and answer shape = aaa Aaaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.19283462124916273)
What does NASA stand for?	the MAXIM mission	-0.30206522605965036	Derivation(What does NASA stand for?,the MAXIM mission,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider this for,false,15674.0,105.0,25.0,0.6532861590385437),QueryState($x: (NASA, consider this for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider this for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: is now considering this design for, r0.id: reverb-82688543, r0.namespace: reverb, r0.arg2_exact: the MAXIM mission, r0.arg2: the MAXIM mission, r0.rel: is now considering this design for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.952, r0.arg1_exact: NASA),$x: (NASA, consider this for, $x))),AnswerState(the MAXIM mission))),SparseVector(question prefix = 'what' and answer shape = aaa AAAA aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6532861590385437, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.30206522605965036)
What does NASA stand for?	surface operations	-0.5399947766030342	Derivation(What does NASA stand for?,surface operations,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,think for,false,15674.0,2471.0,120.0,0.6036048531532288),QueryState($x: (NASA, think for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, think for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: is thinking about for, r0.id: reverb-5189500, r0.namespace: reverb, r0.arg2_exact: surface operations, r0.arg2: surface operations, r0.rel: is thinking about for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.547, r0.arg1_exact: NASA),$x: (NASA, think for, $x))),AnswerState(surface operations))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6036048531532288, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5399947766030342)
What does NASA stand for?	shuttle coatings	-0.5421308565191356	Derivation(What does NASA stand for?,shuttle coatings,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: considers these materials for, r0.id: reverb-122101258, r0.namespace: reverb, r0.arg2_exact: shuttle coatings, r0.arg2: shuttle coatings, r0.rel: considers these materials for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.809, r0.arg1_exact: NASA),$x: (NASA, consider for, $x))),AnswerState(shuttle coatings))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5421308565191356)
What does NASA stand for?	way	-0.5518752069484132	Derivation(What does NASA stand for?,way,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,sit for,false,15674.0,1983.0,127.0,0.6122519373893738),QueryState($x: (NASA, sit for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, sit for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: have been sitting idle for, r0.id: reverb-57667425, r0.namespace: reverb, r0.arg2_exact: way, r0.arg2: way, r0.rel: have been sitting idle for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.863, r0.arg1_exact: NASA),$x: (NASA, sit for, $x))),AnswerState(way))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6122519373893738, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5518752069484132)
What does NASA stand for?	future planetary exploration	-0.6140416116185274	Derivation(What does NASA stand for?,future planetary exploration,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: is considering for, r0.id: reverb-31164239, r0.namespace: reverb, r0.arg2_exact: future planetary exploration, r0.arg2: future planetary exploration, r0.rel: is considering for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.533, r0.arg1_exact: NASA),$x: (NASA, consider for, $x))),AnswerState(future planetary exploration))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6140416116185274)
What does NASA stand for?	weekend display	-0.9471127493668199	Derivation(What does NASA stand for?,weekend display,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,stop for,false,15674.0,2145.0,84.0,0.5968801081180573),QueryState($x: (NASA, stop for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stop for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: pulls out all the stops for, r0.id: reverb-55905332, r0.namespace: reverb, r0.arg2_exact: weekend display, r0.arg2: weekend display, r0.rel: pulls out all the stops for, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.883, r0.arg1_exact: NASA),$x: (NASA, stop for, $x))),AnswerState(weekend display))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5968801081180573, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9471127493668199)
What does NASA stand for?	Lunar Crater Observation	-1.219846181103055	Derivation(What does NASA stand for?,Lunar Crater Observation,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,be short for,false,15674.0,1169.0,372.0,0.662350982427597),QueryState($x: (NASA, be short for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, be short for, $x),true),ExecutionAction(ExecTuple((r0.arg1: NASA?s LCROSS, r0.rel_exact: is short for, r0.id: reverb-304588323, r0.namespace: reverb, r0.arg2_exact: Lunar Crater Observation, r0.arg2: Lunar Crater Observation, r0.rel: is short for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.673, r0.arg1_exact: NASA?s LCROSS),$x: (NASA, be short for, $x))),AnswerState(Lunar Crater Observation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.662350982427597, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.219846181103055)
What does NASA stand for?	an interview	-1.472023363528638	Derivation(What does NASA stand for?,an interview,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,sit for,false,15674.0,1983.0,127.0,0.6122519373893738),QueryState($x: (NASA, sit for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, sit for, $x),true),ExecutionAction(ExecTuple((r0.arg1: 3:08PM Nasa, r0.rel_exact: just sat down for, r0.id: reverb-125811381, r0.namespace: reverb, r0.arg2_exact: an interview, r0.arg2: an interview, r0.rel: just sat down for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.787, r0.arg1_exact: 3:08PM Nasa),$x: (NASA, sit for, $x))),AnswerState(an interview))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6122519373893738, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.472023363528638)
What does NASA stand for?	future space exploration	-1.819084910885962	Derivation(What does NASA stand for?,future space exploration,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,think for,false,15674.0,2471.0,120.0,0.6036048531532288),QueryState($x: (NASA, think for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, think for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05f4p, r0.arg1: NASA, r0.rel_exact: has a well-thought-out plan for, r0.id: reverb-69065161, r0.namespace: reverb, r0.arg2_exact: future space exploration, r0.arg2: future space exploration, r0.rel: has a well-thought-out plan for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.957, r0.arg1_exact: NASA),$x: (NASA, think for, $x))),AnswerState(future space exploration))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6036048531532288, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.819084910885962)
What does NASA stand for?	decades	-2.0769411440380616	Derivation(What does NASA stand for?,decades,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,have be empty for,false,15674.0,176.0,13.0,0.6167095899581909),QueryState($x: (NASA, have be empty for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, have be empty for, $x),true),ExecutionAction(ExecTuple((r0.arg1: NASA&?s till, r0.rel_exact: has been empty for, r0.id: reverb-11350081, r0.namespace: reverb, r0.arg2_exact: decades, r0.arg2: decades, r0.rel: has been empty for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.945, r0.arg1_exact: NASA&?s till),$x: (NASA, have be empty for, $x))),AnswerState(decades))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6167095899581909, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.0769411440380616)
What does NASA stand for?	the challenge	-2.170123022255426	Derivation(What does NASA stand for?,the challenge,Vector(QaStep(What does NASA stand for?,QuestionStateImpl(What does NASA stand for?,Sentence(What does NASA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (NASA, stand for, $x),false)), QaStep(What does NASA stand for?,QueryState($x: (NASA, stand for, $x),false),RelSynRule(stand for,consider for,false,15674.0,522.0,23.0,0.6005646288394928),QueryState($x: (NASA, consider for, $x),true)), QaStep(What does NASA stand for?,QueryState($x: (NASA, consider for, $x),true),ExecutionAction(ExecTuple((r0.arg1: can NASA, r0.rel_exact: be considered ready for, r0.id: reverb-354879279, r0.namespace: reverb, r0.arg2_exact: the challenge, r0.arg2: the challenge, r0.rel: be considered ready for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.704, r0.arg1_exact: can NASA),$x: (NASA, consider for, $x))),AnswerState(the challenge))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6005646288394928, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.170123022255426)
When did Rachel Carson die?	1964	5.066581196708707	Derivation(When did Rachel Carson die?,1964,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die in, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0kzfp, r0.arg1: Rachel Carson, r0.rel_exact: died in, r0.id: reverb-274443818, r0.namespace: reverb, r0.arg2_exact: 1964, r0.arg2: 1964, r0.rel: died in, r0.corpora_ss: List(cw), r0.num_extrs_i: 40, r0.conf_f: 0.935, r0.arg1_exact: Rachel Carson),$x: (Rachel Carson, die in, $x))),AnswerState(1964))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.066581196708707)
When did Rachel Carson die?	1965	5.066581196708707	Derivation(When did Rachel Carson die?,1965,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die in, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0kzfp, r0.arg1: Rachel Carson, r0.rel_exact: died in, r0.id: reverb-256224193, r0.namespace: reverb, r0.arg2_exact: 1965, r0.arg2: 1965, r0.rel: died in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.824, r0.arg1_exact: Rachel Carson),$x: (Rachel Carson, die in, $x))),AnswerState(1965))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.066581196708707)
When did Rachel Carson die?	April 14 , 1964	3.540504193524713	Derivation(When did Rachel Carson die?,April 14 , 1964,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die on, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die on, $x),false),ExecutionAction(ExecTuple((r0.arg1: Resistance Rachel Carson, r0.rel_exact: died on, r0.id: reverb-57704673, r0.namespace: reverb, r0.arg2_exact: April 14 , 1964, r0.arg2: April 14 , 1964, r0.rel: died on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.939, r0.arg1_exact: Resistance Rachel Carson),$x: (Rachel Carson, die on, $x))),AnswerState(April 14 , 1964))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = Aaaaa 11 , 1111 -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.540504193524713)
When did Rachel Carson die?	April 14	2.6059498754757566	Derivation(When did Rachel Carson die?,April 14,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die in, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die in, $x),false),ExecutionAction(ExecTuple((r0.arg1: breast cancer Rachel Carson, r0.rel_exact: died in, r0.id: reverb-255833679, r0.namespace: reverb, r0.arg2_exact: April 14, r0.arg2_fbid_s: 0ts8, r0.arg2: April 14, r0.rel: died in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.866, r0.arg1_exact: breast cancer Rachel Carson),$x: (Rachel Carson, die in, $x))),AnswerState(April 14))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'when' and answer shape = Aaaaa 11 -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.6059498754757566)
When did Rachel Carson die?	Silver Spring	2.1314872120826642	Derivation(When did Rachel Carson die?,Silver Spring,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die in, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die in, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0kzfp, r0.arg1: Rachel Carson, r0.rel_exact: died in, r0.id: reverb-52523141, r0.namespace: reverb, r0.arg2_exact: Silver Spring, r0.arg2_fbid_s: 0bxc4, r0.arg2: Silver Spring, r0.rel: died in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.846, r0.arg1_exact: Rachel Carson),$x: (Rachel Carson, die in, $x))),AnswerState(Silver Spring))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'when' and answer shape = Aaaaa Aaaaa -> 1.0, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.1314872120826642)
When did Rachel Carson die?	breast cancer	-0.8934584797531993	Derivation(When did Rachel Carson die?,breast cancer,Vector(QaStep(When did Rachel Carson die?,QuestionStateImpl(When did Rachel Carson die?,Sentence(When did Rachel Carson die?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (Rachel Carson, die on, $x),false)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, die on, $x),false),RelSynRule(die on,pass away,false,12584.0,6735.0,507.0,0.6241642534732819),QueryState($x: (Rachel Carson, pass away, $x),true)), QaStep(When did Rachel Carson die?,QueryState($x: (Rachel Carson, pass away, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0kzfp, r0.arg1: Rachel Carson, r0.rel_exact: passed away from, r0.id: reverb-30648572, r0.namespace: reverb, r0.arg2_exact: breast cancer, r0.arg2_fbid_s: 0j8hd, r0.arg2: breast cancer, r0.rel: passed away from, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.843, r0.arg1_exact: Rachel Carson),$x: (Rachel Carson, pass away, $x))),AnswerState(breast cancer))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6241642534732819, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.8934584797531993)
What is the Moulin Rouge?	The other one	1.7051178518862036	Derivation(What is the Moulin Rouge?,The other one,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The other one, r0.rel_exact: is, r0.id: reverb-146888211, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.953, r0.arg1_exact: The other one),$x: ($x, is, the Moulin Rouge))),AnswerState(The other one))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7051178518862036)
What is the Moulin Rouge?	A well-known spot	1.6776341266768726	Derivation(What is the Moulin Rouge?,A well-known spot,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: A well-known spot, r0.rel_exact: is, r0.id: reverb-284433602, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.953, r0.arg1_exact: A well-known spot),$x: ($x, is, the Moulin Rouge))),AnswerState(A well-known spot))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = A aaaa-aaaa aaaa -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6776341266768726)
What is the Moulin Rouge?	the 61 acres	1.6776341266768726	Derivation(What is the Moulin Rouge?,the 61 acres,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the 61 acres, r0.rel_exact: is, r0.id: reverb-333869639, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.833, r0.arg1_exact: the 61 acres),$x: ($x, is, the Moulin Rouge))),AnswerState(the 61 acres))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa 11 aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6776341266768726)
What is the Moulin Rouge?	Moulin Rouge	1.1622207686570432	Derivation(What is the Moulin Rouge?,Moulin Rouge,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Moulin Rouge, r0.rel_exact: is, r0.id: reverb-61130507, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge song, r0.arg2: the Moulin Rouge song, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.553, r0.arg1_exact: Moulin Rouge),$x: ($x, is, the Moulin Rouge))),AnswerState(Moulin Rouge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1622207686570432)
What is the Moulin Rouge?	the murderer	1.0399185366502042	Derivation(What is the Moulin Rouge?,the murderer,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the murderer, r0.rel_exact: is, r0.id: reverb-45389382, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.515, r0.arg1_exact: the murderer),$x: ($x, is, the Moulin Rouge))),AnswerState(the murderer))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0399185366502042)
What is the Moulin Rouge?	a true masterpiece	0.573032586658883	Derivation(What is the Moulin Rouge?,a true masterpiece,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: a true masterpiece, r0.rel_exact: is, r0.id: reverb-184278201, r0.namespace: reverb, r0.arg2_exact: the musical Moulin Rouge, r0.arg2: the musical Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.79, r0.arg1_exact: a true masterpiece),$x: ($x, is, the Moulin Rouge))),AnswerState(a true masterpiece))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.573032586658883)
What is the Moulin Rouge?	Noir Design Hotel	0.48332207597776766	Derivation(What is the Moulin Rouge?,Noir Design Hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Noir Design Hotel, r0.rel_exact: is steps from, r0.id: reverb-297415533, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is steps from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: Noir Design Hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(Noir Design Hotel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa Aaaaa -> 1.0),0.48332207597776766)
What is the Moulin Rouge?	the Tryp Blanche Fontaine Hotel	0.47045474749333693	Derivation(What is the Moulin Rouge?,the Tryp Blanche Fontaine Hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the Tryp Blanche Fontaine Hotel, r0.rel_exact: is near, r0.id: reverb-319247125, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is near, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.968, r0.arg1_exact: the Tryp Blanche Fontaine Hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(the Tryp Blanche Fontaine Hotel))),SparseVector(question prefix = 'what' and answer shape = aaa Aaaa Aaaaa Aaaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.47045474749333693)
What is the Moulin Rouge?	the hill	0.4330402727854248	Derivation(What is the Moulin Rouge?,the hill,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the hill, r0.rel_exact: is, r0.id: reverb-166211318, r0.namespace: reverb, r0.arg2_exact: the famous Moulin Rouge, r0.arg2: the famous Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.833, r0.arg1_exact: the hill),$x: ($x, is, the Moulin Rouge))),AnswerState(the hill))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4330402727854248)
What is the Moulin Rouge?	the street	0.4330402727854248	Derivation(What is the Moulin Rouge?,the street,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the street, r0.rel_exact: is, r0.id: reverb-329431095, r0.namespace: reverb, r0.arg2_exact: the famed Moulin Rouge, r0.arg2: the famed Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.784, r0.arg1_exact: the street),$x: ($x, is, the Moulin Rouge))),AnswerState(the street))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4330402727854248)
What is the Moulin Rouge?	The restaurant	0.3804019516217918	Derivation(What is the Moulin Rouge?,The restaurant,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The restaurant, r0.rel_exact: is, r0.id: reverb-117493645, r0.namespace: reverb, r0.arg2_exact: the face-lifted Moulin Rouge, r0.arg2: the face-lifted Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.908, r0.arg1_exact: The restaurant),$x: ($x, is, the Moulin Rouge))),AnswerState(The restaurant))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3804019516217918)
What is the Moulin Rouge?	Headington Cinema	0.15952652694377423	Derivation(What is the Moulin Rouge?,Headington Cinema,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Headington Cinema, r0.rel_exact: had been renamed, r0.id: reverb-255336545, r0.namespace: reverb, r0.arg2_exact: The Moulin Rouge, r0.arg2: The Moulin Rouge, r0.rel: had been renamed, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.749, r0.arg1_exact: Headington Cinema),$x: ($x, is, the Moulin Rouge))),AnswerState(Headington Cinema))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.15952652694377423)
What is the Moulin Rouge?	Mademoiselle Cha-u-Kao	0.0680616210988243	Derivation(What is the Moulin Rouge?,Mademoiselle Cha-u-Kao,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Mademoiselle Cha-u-Kao, r0.rel_exact: is depicted at, r0.id: reverb-291130226, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is depicted at, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.938, r0.arg1_exact: Mademoiselle Cha-u-Kao),$x: ($x, is, the Moulin Rouge))),AnswerState(Mademoiselle Cha-u-Kao))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaa-a-Aaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0680616210988243)
What is the Moulin Rouge?	The Riviera hotel	0.0680616210988243	Derivation(What is the Moulin Rouge?,The Riviera hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The Riviera hotel, r0.rel_exact: is located near, r0.id: reverb-315055466, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is located near, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.923, r0.arg1_exact: The Riviera hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(The Riviera hotel))),SparseVector(question prefix = 'what' and answer shape = Aaa Aaaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.0680616210988243)
What is the Moulin Rouge?	The Timhotel Paris XVII	-0.13313494209843157	Derivation(What is the Moulin Rouge?,The Timhotel Paris XVII,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The Timhotel Paris XVII, r0.rel_exact: is 2 km from, r0.id: reverb-82565735, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is 2 km from, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.97, r0.arg1_exact: The Timhotel Paris XVII),$x: ($x, is, the Moulin Rouge))),AnswerState(The Timhotel Paris XVII))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa AAAA -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.13313494209843157)
What is the Moulin Rouge?	Sjoerd	-0.27547329837153156	Derivation(What is the Moulin Rouge?,Sjoerd,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Sjoerd, r0.rel_exact: was performing at, r0.id: reverb-23403853, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was performing at, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.875, r0.arg1_exact: Sjoerd),$x: ($x, is, the Moulin Rouge))),AnswerState(Sjoerd))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.27547329837153156)
What is the Moulin Rouge?	French city	-0.31266784381350665	Derivation(What is the Moulin Rouge?,French city,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: French city, r0.rel_exact: is, r0.id: openie4-13959743, r0.namespace: openie4, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9369813, r0.arg1_exact: French city),$x: ($x, is, the Moulin Rouge))),AnswerState(French city))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.31266784381350665)
What is the Moulin Rouge?	Just down the street	-0.39661000733939766	Derivation(What is the Moulin Rouge?,Just down the street,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Just down the street, r0.rel_exact: is, r0.id: openie4-50758504, r0.namespace: openie4, r0.arg2_exact: the famed Moulin Rouge, r0.arg2: the famed Moulin Rouge, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.9474743, r0.arg1_exact: Just down the street),$x: ($x, is, the Moulin Rouge))),AnswerState(Just down the street))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaa aaaa aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.39661000733939766)
What is the Moulin Rouge?	Model	-0.4030489807827895	Derivation(What is the Moulin Rouge?,Model,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d1pc, r0.arg1: Model, r0.rel_exact: was doing, r0.id: reverb-171008920, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was doing, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.826, r0.arg1_exact: Model),$x: ($x, is, the Moulin Rouge))),AnswerState(Model))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4030489807827895)
What is the Moulin Rouge?	The Modern Hotel	-0.4219638828665182	Derivation(What is the Moulin Rouge?,The Modern Hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The Modern Hotel, r0.rel_exact: Is Located Near, r0.id: reverb-156472164, r0.namespace: reverb, r0.arg2_exact: The Moulin Rouge, r0.arg2: The Moulin Rouge, r0.rel: Is Located Near, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.993, r0.arg1_exact: The Modern Hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(The Modern Hotel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4219638828665182)
What is the Moulin Rouge?	home	-0.4448708690897185	Derivation(What is the Moulin Rouge?,home,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: home, r0.rel_exact: is well-known for, r0.id: reverb-245354823, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is well-known for, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.94, r0.arg1_exact: home),$x: ($x, is, the Moulin Rouge))),AnswerState(home))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4448708690897185)
What is the Moulin Rouge?	Dalloyau	-0.47666986156878743	Derivation(What is the Moulin Rouge?,Dalloyau,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Dalloyau, r0.rel_exact: are joining forces with, r0.id: reverb-284317624, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: are joining forces with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.822, r0.arg1_exact: Dalloyau),$x: ($x, is, the Moulin Rouge))),AnswerState(Dalloyau))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.47666986156878743)
What is the Moulin Rouge?	Le Moulin Plaza Hotel	-0.5388166427659555	Derivation(What is the Moulin Rouge?,Le Moulin Plaza Hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Le Moulin Plaza Hotel, r0.rel_exact: is close to, r0.id: reverb-333926248, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge theatre, r0.arg2: the Moulin Rouge theatre, r0.rel: is close to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.918, r0.arg1_exact: Le Moulin Plaza Hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(Le Moulin Plaza Hotel))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = Aa Aaaaa Aaaaa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5388166427659555)
What is the Moulin Rouge?	La locomotive	-0.5388166427659555	Derivation(What is the Moulin Rouge?,La locomotive,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: La locomotive, r0.rel_exact: is situated in, r0.id: reverb-238581471, r0.namespace: reverb, r0.arg2_exact: the famous Moulin Rouge, r0.arg2: the famous Moulin Rouge, r0.rel: is situated in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: La locomotive),$x: ($x, is, the Moulin Rouge))),AnswerState(La locomotive))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, question prefix = 'what' and answer shape = Aa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5388166427659555)
What is the Moulin Rouge?	The song	-0.6222922900914771	Derivation(What is the Moulin Rouge?,The song,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The song, r0.rel_exact: was recorded for, r0.id: reverb-350146551, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was recorded for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.981, r0.arg1_exact: The song),$x: ($x, is, the Moulin Rouge))),AnswerState(The song))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6222922900914771)
What is the Moulin Rouge?	noteworthy	-0.6460674322869748	Derivation(What is the Moulin Rouge?,noteworthy,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: noteworthy, r0.rel_exact: is the excursion to, r0.id: reverb-123365283, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is the excursion to, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.889, r0.arg1_exact: noteworthy),$x: ($x, is, the Moulin Rouge))),AnswerState(noteworthy))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6460674322869748)
What is the Moulin Rouge?	La Toya	-0.6631037509042013	Derivation(What is the Moulin Rouge?,La Toya,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 013v5j, r0.arg1: La Toya, r0.rel_exact: was immediately sued by, r0.id: reverb-363740223, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was immediately sued by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.937, r0.arg1_exact: La Toya),$x: ($x, is, the Moulin Rouge))),AnswerState(La Toya))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aa Aaaa -> 1.0),-0.6631037509042013)
What is the Moulin Rouge?	art history	-0.7038067998851252	Derivation(What is the Moulin Rouge?,art history,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01jzxy, r0.arg1: art history, r0.rel_exact: are, r0.id: reverb-301662975, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge dancers Louise Weber, r0.arg2: the Moulin Rouge dancers Louise Weber, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.76, r0.arg1_exact: art history),$x: ($x, is, the Moulin Rouge))),AnswerState(art history))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7038067998851252)
What is the Moulin Rouge?	Paris	-0.8054421071773017	Derivation(What is the Moulin Rouge?,Paris,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05qtj, r0.arg1: Paris, r0.rel_exact: is characterized by, r0.id: reverb-198405800, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is characterized by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: Paris),$x: ($x, is, the Moulin Rouge))),AnswerState(Paris))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8054421071773017)
What is the Moulin Rouge?	Montmartre	-0.8054421071773017	Derivation(What is the Moulin Rouge?,Montmartre,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0gc7k, r0.arg1: Montmartre, r0.rel_exact: is close to, r0.id: reverb-255558293, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is close to, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.735, r0.arg1_exact: Montmartre),$x: ($x, is, the Moulin Rouge))),AnswerState(Montmartre))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8054421071773017)
What is the Moulin Rouge?	The hotel	-0.8234888532887331	Derivation(What is the Moulin Rouge?,The hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The hotel, r0.rel_exact: is also close to, r0.id: reverb-263503387, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is also close to, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.932, r0.arg1_exact: The hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(The hotel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8234888532887331)
What is the Moulin Rouge?	Boyet	-0.8823515622363115	Derivation(What is the Moulin Rouge?,Boyet,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Boyet, r0.rel_exact: was listening to, r0.id: reverb-51052364, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge soundtrack, r0.arg2: the Moulin Rouge soundtrack, r0.rel: was listening to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.894, r0.arg1_exact: Boyet),$x: ($x, is, the Moulin Rouge))),AnswerState(Boyet))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8823515622363115)
What is the Moulin Rouge?	The Song From Moulin Rouge	-0.8943240498312017	Derivation(What is the Moulin Rouge?,The Song From Moulin Rouge,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The Song From Moulin Rouge, r0.rel_exact: can be found on Wikipedia at, r0.prob_f: 0.95, r0.id: nell-1713853, r0.namespace: nell, r0.arg2_exact: http://en.wikipedia.org/wiki/The%20Song%20from%20Moulin%20Rouge, r0.arg2: http://en.wikipedia.org/wiki/The%20Song%20from%20Moulin%20Rouge, r0.rel: can be found on Wikipedia at, r0.arg1_exact: The Song From Moulin Rouge),$x: ($x, is, the Moulin Rouge))),AnswerState(The Song From Moulin Rouge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, question prefix = 'what' and answer shape = Aaa Aaaa Aaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8943240498312017)
What is the Moulin Rouge?	At the Moulin Rouge	-0.8943240498312017	Derivation(What is the Moulin Rouge?,At the Moulin Rouge,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: At the Moulin Rouge, r0.rel_exact: can be found on Wikipedia at, r0.prob_f: 0.95, r0.id: nell-144332, r0.namespace: nell, r0.arg2_exact: http://en.wikipedia.org/wiki/At%20the%20Moulin%20Rouge, r0.arg2: http://en.wikipedia.org/wiki/At%20the%20Moulin%20Rouge, r0.rel: can be found on Wikipedia at, r0.arg1_exact: At the Moulin Rouge),$x: ($x, is, the Moulin Rouge))),AnswerState(At the Moulin Rouge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aa aaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.8943240498312017)
What is the Moulin Rouge?	The cruise	-0.9442067912070867	Derivation(What is the Moulin Rouge?,The cruise,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The cruise, r0.rel_exact: was a pleasant break before, r0.id: reverb-274264449, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was a pleasant break before, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.956, r0.arg1_exact: The cruise),$x: ($x, is, the Moulin Rouge))),AnswerState(The cruise))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9442067912070867)
What is the Moulin Rouge?	The acts	-1.024685416485989	Derivation(What is the Moulin Rouge?,The acts,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The acts, r0.rel_exact: are pretty much a mix between, r0.id: reverb-238838555, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: are pretty much a mix between, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.916, r0.arg1_exact: The acts),$x: ($x, is, the Moulin Rouge))),AnswerState(The acts))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.024685416485989)
What is the Moulin Rouge?	the Prima Lepic	-1.0463399404098128	Derivation(What is the Moulin Rouge?,the Prima Lepic,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the Prima Lepic, r0.rel_exact: is placed close to, r0.id: reverb-58899031, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is placed close to, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.901, r0.arg1_exact: the Prima Lepic),$x: ($x, is, the Moulin Rouge))),AnswerState(the Prima Lepic))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0463399404098128)
What is the Moulin Rouge?	One notable exception	-1.062870739722092	Derivation(What is the Moulin Rouge?,One notable exception,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: One notable exception, r0.rel_exact: are, r0.id: reverb-41072689, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge-style stage shows, r0.arg2: the Moulin Rouge-style stage shows, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.896, r0.arg1_exact: One notable exception),$x: ($x, is, the Moulin Rouge))),AnswerState(One notable exception))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),-1.062870739722092)
What is the Moulin Rouge?	the theatre	-1.099622777733614	Derivation(What is the Moulin Rouge?,the theatre,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 023x9d, r0.arg1: the theatre, r0.rel_exact: was right outside, r0.id: reverb-175389032, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was right outside, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.886, r0.arg1_exact: the theatre),$x: ($x, is, the Moulin Rouge))),AnswerState(the theatre))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.099622777733614)
What is the Moulin Rouge?	the song	-1.1382660647169796	Derivation(What is the Moulin Rouge?,the song,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the song, r0.rel_exact: is on, r0.id: reverb-133087734, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge movie soundtrack, r0.arg2: the Moulin Rouge movie soundtrack, r0.rel: is on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.725, r0.arg1_exact: the song),$x: ($x, is, the Moulin Rouge))),AnswerState(the song))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1382660647169796)
What is the Moulin Rouge?	a mistake	-1.1490548857312302	Derivation(What is the Moulin Rouge?,a mistake,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: a mistake, r0.rel_exact: was her participation in, r0.id: reverb-223980129, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge soundtrack, r0.arg2: the Moulin Rouge soundtrack, r0.rel: was her participation in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.848, r0.arg1_exact: a mistake),$x: ($x, is, the Moulin Rouge))),AnswerState(a mistake))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.1490548857312302)
What is the Moulin Rouge?	the smash	-1.1765322327926238	Derivation(What is the Moulin Rouge?,the smash,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the smash, r0.rel_exact: was recorded for, r0.id: reverb-36887977, r0.namespace: reverb, r0.arg2_exact: the movie Moulin Rouge, r0.arg2: the movie Moulin Rouge, r0.rel: was recorded for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.901, r0.arg1_exact: the smash),$x: ($x, is, the Moulin Rouge))),AnswerState(the smash))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1765322327926238)
What is the Moulin Rouge?	addition	-1.179324815365756	Derivation(What is the Moulin Rouge?,addition,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0gmqy, r0.arg1: addition, r0.rel_exact: there are, r0.id: reverb-239129148, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge show, r0.arg2: the Moulin Rouge show, r0.rel: there are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.765, r0.arg1_exact: addition),$x: ($x, is, the Moulin Rouge))),AnswerState(addition))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.75, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.179324815365756)
What is the Moulin Rouge?	The District Court	-1.3507566478469077	Derivation(What is the Moulin Rouge?,The District Court,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: The District Court, r0.rel_exact: was a general partner in, r0.id: reverb-135066885, r0.namespace: reverb, r0.arg2_exact: the ' Moulin Rouge, r0.arg2: the ' Moulin Rouge, r0.rel: was a general partner in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.671, r0.arg1_exact: The District Court),$x: ($x, is, the Moulin Rouge))),AnswerState(The District Court))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaaa Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.3507566478469077)
What is the Moulin Rouge?	the whole group	-1.4871795020073022	Derivation(What is the Moulin Rouge?,the whole group,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the whole group, r0.rel_exact: was taken to, r0.id: reverb-117375259, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: was taken to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.952, r0.arg1_exact: the whole group),$x: ($x, is, the Moulin Rouge))),AnswerState(the whole group))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4871795020073022)
What is the Moulin Rouge?	the movie version	-1.4871795020073022	Derivation(What is the Moulin Rouge?,the movie version,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the movie version, r0.rel_exact: is moved to, r0.id: reverb-260253421, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge, r0.arg2: the Moulin Rouge, r0.rel: is moved to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.902, r0.arg1_exact: the movie version),$x: ($x, is, the Moulin Rouge))),AnswerState(the movie version))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4871795020073022)
What is the Moulin Rouge?	the modern hotel	-1.4871795020073022	Derivation(What is the Moulin Rouge?,the modern hotel,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the modern hotel, r0.rel_exact: is located near, r0.id: reverb-258565158, r0.namespace: reverb, r0.arg2_exact: the moulin rouge, r0.arg2: the moulin rouge, r0.rel: is located near, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.963, r0.arg1_exact: the modern hotel),$x: ($x, is, the Moulin Rouge))),AnswerState(the modern hotel))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4871795020073022)
What is the Moulin Rouge?	Adam	-1.7834229077785952	Derivation(What is the Moulin Rouge?,Adam,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: Adam, r0.rel_exact: was also the Executive Producer of, r0.id: reverb-279432882, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge DVD, r0.arg2: the Moulin Rouge DVD, r0.rel: was also the Executive Producer of, r0.corpora_ss: List(cw), r0.num_extrs_i: 50, r0.conf_f: 0.967, r0.arg1_exact: Adam),$x: ($x, is, the Moulin Rouge))),AnswerState(Adam))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.7834229077785952)
What is the Moulin Rouge?	the northern part	-2.094057765872082	Derivation(What is the Moulin Rouge?,the northern part,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: the northern part, r0.rel_exact: is close to, r0.id: reverb-247242635, r0.namespace: reverb, r0.arg2_exact: the Moulin Rouge Theatre, r0.arg2: the Moulin Rouge Theatre, r0.rel: is close to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.913, r0.arg1_exact: the northern part),$x: ($x, is, the Moulin Rouge))),AnswerState(the northern part))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.094057765872082)
What is the Moulin Rouge?	The event	-2.770603135869993	Derivation(What is the Moulin Rouge?,The event,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0276mk2, r0.arg1: The event, r0.rel_exact: was held under, r0.id: reverb-325113925, r0.namespace: reverb, r0.arg2_exact: the theme ?Moulin Rouge ?, r0.arg2: the theme ?Moulin Rouge ?, r0.rel: was held under, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: The event),$x: ($x, is, the Moulin Rouge))),AnswerState(The event))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.770603135869993)
What is the Moulin Rouge?	a show	-3.195496246225896	Derivation(What is the Moulin Rouge?,a show,Vector(QaStep(What is the Moulin Rouge?,QuestionStateImpl(What is the Moulin Rouge?,Sentence(What is the Moulin Rouge?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, the Moulin Rouge),false)), QaStep(What is the Moulin Rouge?,QueryState($x: ($x, is, the Moulin Rouge),false),ExecutionAction(ExecTuple((r0.arg1: a show, r0.rel_exact: was taped at, r0.id: openie4-36721612, r0.namespace: openie4, r0.arg2_exact: the famous Moulin Rouge nightclub in Paris, r0.arg2_fbid_s: 05qtj, r0.arg2: the famous Moulin Rouge nightclub in Paris, r0.rel: was taped at, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90452075, r0.arg1_exact: a show),$x: ($x, is, the Moulin Rouge))),AnswerState(a show))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-3.195496246225896)
What other products does Harley-Davidson produce?	Motorcycles	-2.192471863897761	Derivation(What other products does Harley-Davidson produce?,Motorcycles,Vector(QaStep(What other products does Harley-Davidson produce?,QuestionStateImpl(What other products does Harley-Davidson produce?,Sentence(What other products does Harley-Davidson produce?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04_sv, r0.arg1: Motorcycles, r0.rel_exact: Here are a list of, r1.arg1_fbid_s: 03ny2, r0.id: reverb-35542768, r1.rel: produced, r0.namespace: reverb, r0.arg2_exact: other products, r1.conf_f: 0.787, r1.arg2: a motorcycle, r1.arg2_fbid_s: 04_sv, r0.arg2: other products, r0.rel: Here are a list of, r1.namespace: reverb, r1.arg1: Harley-Davidson, r0.corpora_ss: List(cw), r1.rel_exact: produced, r0.num_extrs_i: 2, r1.arg2_exact: a motorcycle, r1.num_extrs_i: 5, r0.conf_f: 0.719, r1.id: reverb-223181882, r0.arg1_exact: Motorcycles, r1.arg1_exact: Harley-Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, other products) (Harley-Davidson, produce, $x))),AnswerState(Motorcycles))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.782608695652174, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.192471863897761)
What other products does Harley-Davidson produce?	A product	-2.5221388670884344	Derivation(What other products does Harley-Davidson produce?,A product,Vector(QaStep(What other products does Harley-Davidson produce?,QuestionStateImpl(What other products does Harley-Davidson produce?,Sentence(What other products does Harley-Davidson produce?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true),ExecutionAction(ExecTuple((r0.arg1: A product, r0.rel_exact: be a collection of, r1.arg1_fbid_s: 03ny2, r0.id: reverb-97386522, r1.rel: produces, r0.namespace: reverb, r0.arg2_exact: other products, r1.conf_f: 0.682, r1.arg2: products, r0.arg2: other products, r0.rel: be a collection of, r1.namespace: reverb, r1.arg1: Harley Davidson, r0.corpora_ss: List(cw), r1.rel_exact: produces, r0.num_extrs_i: 2, r1.arg2_exact: products, r1.num_extrs_i: 2, r0.conf_f: 0.763, r1.id: reverb-282082414, r0.arg1_exact: A product, r1.arg1_exact: Harley Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, other products) (Harley-Davidson, produce, $x))),AnswerState(A product))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8235294117647058, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.4, question prefix = 'what' and answer shape = A aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.5221388670884344)
What other products does Harley-Davidson produce?	product	-2.909379813824576	Derivation(What other products does Harley-Davidson produce?,product,Vector(QaStep(What other products does Harley-Davidson produce?,QuestionStateImpl(What other products does Harley-Davidson produce?,Sentence(What other products does Harley-Davidson produce?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false),RelSynRule(type,instance,true,4.087548E7,6.0744824E7,3.979394E7,0.4390934705734253),QueryState($x: (other products, instance, $x) (Harley-Davidson, produce, $x),true)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: (other products, instance, $x) (Harley-Davidson, produce, $x),true),ExecutionAction(ExecTuple((r0.entityFrequency_i: 2, r0.arg1: n't others product, r0.rel_exact: Instance Of, r1.arg1_fbid_s: 03ny2, r0.id: probase-191019, r1.rel: produces, r0.namespace: probase, r0.arg2_exact: product, r1.conf_f: 0.682, r1.arg2: products, r0.entitySize_i: 2, r0.arg2: product, r0.rel: Instance Of, r0.conceptVagueness_f: 0.7875313, r1.namespace: reverb, r0.freq_i: 1, r1.arg1: Harley Davidson, r0.conceptFrequency_i: 199329, r1.rel_exact: produces, r0.popularity_i: 1, r0.zipfPearsonCoefficient_f: -0.9969022, r1.arg2_exact: products, r0.conceptSize_i: 103249, r1.num_extrs_i: 2, r1.id: reverb-282082414, r0.zipfSlope_f: -0.9906567, r0.arg1_exact: n't others product, r1.arg1_exact: Harley Davidson, r1.corpora_ss: List(cw)),$x: (other products, instance, $x) (Harley-Davidson, produce, $x))),AnswerState(product))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4390934705734253, minimum join key similarity -> 0.9333333333333333, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'probase' -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.909379813824576)
What other products does Harley-Davidson produce?	a product	-3.0930147505537278	Derivation(What other products does Harley-Davidson produce?,a product,Vector(QaStep(What other products does Harley-Davidson produce?,QuestionStateImpl(What other products does Harley-Davidson produce?,Sentence(What other products does Harley-Davidson produce?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true),ExecutionAction(ExecTuple((r0.arg1: a product, r0.rel_exact: is a cut above, r1.arg1_fbid_s: 03ny2, r0.id: reverb-138721111, r1.rel: produces, r0.namespace: reverb, r0.arg2_exact: all other products, r1.conf_f: 0.682, r1.arg2: products, r0.arg2: all other products, r0.rel: is a cut above, r1.namespace: reverb, r1.arg1: Harley Davidson, r0.corpora_ss: List(cw), r1.rel_exact: produces, r0.num_extrs_i: 2, r1.arg2_exact: products, r1.num_extrs_i: 2, r0.conf_f: 0.617, r1.id: reverb-282082414, r0.arg1_exact: a product, r1.arg1_exact: Harley Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, other products) (Harley-Davidson, produce, $x))),AnswerState(a product))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8235294117647058, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-3.0930147505537278)
What other products does Harley-Davidson produce?	the product	-3.185066264766239	Derivation(What other products does Harley-Davidson produce?,the product,Vector(QaStep(What other products does Harley-Davidson produce?,QuestionStateImpl(What other products does Harley-Davidson produce?,Sentence(What other products does Harley-Davidson produce?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, "type", other products) (Harley-Davidson, produce, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true)), QaStep(What other products does Harley-Davidson produce?,QueryState($x: ($x, be a, other products) (Harley-Davidson, produce, $x),true),ExecutionAction(ExecTuple((r0.arg1: the product, r0.rel_exact: is a mix of, r1.arg1_fbid_s: 03ny2, r0.id: reverb-352005073, r1.rel: produces, r0.namespace: reverb, r0.arg2_exact: other products, r1.conf_f: 0.682, r1.arg2: products, r0.arg2: other products, r0.rel: is a mix of, r1.namespace: reverb, r1.arg1: Harley Davidson, r0.corpora_ss: List(cw), r1.rel_exact: produces, r0.num_extrs_i: 2, r1.arg2_exact: products, r1.num_extrs_i: 2, r0.conf_f: 0.794, r1.id: reverb-282082414, r0.arg1_exact: the product, r1.arg1_exact: Harley Davidson, r1.corpora_ss: List(cw)),$x: ($x, be a, other products) (Harley-Davidson, produce, $x))),AnswerState(the product))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7368421052631579, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.185066264766239)
Who is Angela Davis?	Dorothy Dandridge	1.9703722183602934	Derivation(Who is Angela Davis?,Dorothy Dandridge,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 019nyf, r0.arg1: Dorothy Dandridge, r0.rel_exact: is, r0.id: reverb-301471764, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.776, r0.arg1_exact: Dorothy Dandridge),$x: ($x, is, Angela Davis))),AnswerState(Dorothy Dandridge))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9703722183602934)
Who is Angela Davis?	George Jackson	1.9703722183602934	Derivation(Who is Angela Davis?,George Jackson,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01wxwv, r0.arg1: George Jackson, r0.rel_exact: was, r0.id: reverb-204577603, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.863, r0.arg1_exact: George Jackson),$x: ($x, is, Angela Davis))),AnswerState(George Jackson))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9703722183602934)
Who is Angela Davis?	the recent CCDS convention	1.5630761236502433	Derivation(Who is Angela Davis?,the recent CCDS convention,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: the recent CCDS convention, r0.rel_exact: was, r0.id: reverb-328092655, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.647, r0.arg1_exact: the recent CCDS convention),$x: ($x, is, Angela Davis))),AnswerState(the recent CCDS convention))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'who' and answer shape = aaa aaaa AAAA aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
Who is Angela Davis?	the movement	0.9782434133589859	Derivation(Who is Angela Davis?,the movement,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: the movement, r0.rel_exact: was, r0.id: reverb-315115079, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.817, r0.arg1_exact: the movement),$x: ($x, is, Angela Davis))),AnswerState(the movement))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who is Angela Davis?	red lipstick	0.9782434133589859	Derivation(Who is Angela Davis?,red lipstick,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: red lipstick, r0.rel_exact: was, r0.id: reverb-13985475, r0.namespace: reverb, r0.arg2_exact: angela davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: angela davis, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: red lipstick),$x: ($x, is, Angela Davis))),AnswerState(red lipstick))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9782434133589859)
Who is Angela Davis?	The campaign	0.3493195959206836	Derivation(Who is Angela Davis?,The campaign,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: The campaign, r0.rel_exact: is, r0.id: reverb-336497789, r0.namespace: reverb, r0.arg2_exact: 100 % Angela Davis, r0.arg2: 100 % Angela Davis, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.548, r0.arg1_exact: The campaign),$x: ($x, is, Angela Davis))),AnswerState(The campaign))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3493195959206836)
Who is Angela Davis?	The panelists	0.10656829037477222	Derivation(Who is Angela Davis?,The panelists,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: The panelists, r0.rel_exact: are, r0.id: reverb-325608148, r0.namespace: reverb, r0.arg2_exact: civil rights activist Angela Davis, r0.arg2: civil rights activist Angela Davis, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 10, r0.conf_f: 0.946, r0.arg1_exact: The panelists),$x: ($x, is, Angela Davis))),AnswerState(The panelists))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.10656829037477222)
Who is Angela Davis?	The press conference	0.09433441847746304	Derivation(Who is Angela Davis?,The press conference,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: The press conference, r0.rel_exact: is to feature, r0.id: reverb-110393629, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is to feature, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.976, r0.arg1_exact: The press conference),$x: ($x, is, Angela Davis))),AnswerState(The press conference))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'who' and answer shape = Aaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.09433441847746304)
Who is Angela Davis?	The original speeches	0.09433441847746304	Derivation(Who is Angela Davis?,The original speeches,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: The original speeches, r0.rel_exact: were given by, r0.id: reverb-150191521, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: were given by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.959, r0.arg1_exact: The original speeches),$x: ($x, is, Angela Davis))),AnswerState(The original speeches))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'who' and answer shape = Aaa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.09433441847746304)
Who is Angela Davis?	Students	-0.1458979140507044	Derivation(Who is Angela Davis?,Students,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 014cnc, r0.arg1: Students, r0.rel_exact: is, r0.id: reverb-309870870, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.833, r0.arg1_exact: Students),$x: ($x, is, Angela Davis))),AnswerState(Students))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.1458979140507044)
Who is Angela Davis?	so-called military dependents	-0.24769294512506135	Derivation(Who is Angela Davis?,so-called military dependents,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: so-called military dependents, r0.rel_exact: was the case of, r0.id: reverb-42199201, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: was the case of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.788, r0.arg1_exact: so-called military dependents),$x: ($x, is, Angela Davis))),AnswerState(so-called military dependents))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = aa-aaaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.24769294512506135)
Who is Angela Davis?	Julia Wright	-0.5657393116874563	Derivation(Who is Angela Davis?,Julia Wright,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: Julia Wright, r0.rel_exact: was joined by, r0.id: reverb-23428556, r0.namespace: reverb, r0.arg2_exact: activist and scholar Angela Davis, r0.arg2: activist and scholar Angela Davis, r0.rel: was joined by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.985, r0.arg1_exact: Julia Wright),$x: ($x, is, Angela Davis))),AnswerState(Julia Wright))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.4, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5657393116874563)
Who is Angela Davis?	The Net	-0.5764651907335752	Derivation(Who is Angela Davis?,The Net,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01sk1v, r0.arg1: The Net, r0.rel_exact: is published by, r0.id: reverb-192584210, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is published by, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.928, r0.arg1_exact: The Net),$x: ($x, is, Angela Davis))),AnswerState(The Net))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'who' and answer shape = Aaa Aaa -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5764651907335752)
Who is Angela Davis?	the beginning	-0.6313290922190629	Derivation(Who is Angela Davis?,the beginning,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: the beginning, r0.rel_exact: is matched by, r0.id: reverb-345200319, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is matched by, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.58, r0.arg1_exact: the beginning),$x: ($x, is, Angela Davis))),AnswerState(the beginning))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6313290922190629)
Who is Angela Davis?	Michelle Obama	-0.8529568149473141	Derivation(Who is Angela Davis?,Michelle Obama,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 025s5v9, r0.arg1: Michelle Obama, r0.rel_exact: was supposed to be, r0.id: reverb-234615054, r0.namespace: reverb, r0.arg2_exact: the modern Angela Davis, r0.arg2: the modern Angela Davis, r0.rel: was supposed to be, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.738, r0.arg1_exact: Michelle Obama),$x: ($x, is, Angela Davis))),AnswerState(Michelle Obama))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8529568149473141)
Who is Angela Davis?	The play	-0.9832430828254359	Derivation(Who is Angela Davis?,The play,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05g4nd, r0.arg1: The play, r0.rel_exact: is about, r0.id: reverb-305471898, r0.namespace: reverb, r0.arg2_exact: the Angela Davis, r0.arg2: the Angela Davis, r0.rel: is about, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.691, r0.arg1_exact: The play),$x: ($x, is, Angela Davis))),AnswerState(The play))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'who' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9832430828254359)
Who is Angela Davis?	Michelle	-1.0724369385204053	Derivation(Who is Angela Davis?,Michelle,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: Michelle, r0.rel_exact: is, r0.id: reverb-307385040, r0.namespace: reverb, r0.arg2_exact: this secret Angela Davis militant, r0.arg2: this secret Angela Davis militant, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.571, r0.arg1_exact: Michelle),$x: ($x, is, Angela Davis))),AnswerState(Michelle))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0724369385204053)
Who is Angela Davis?	Jonathan?s guns	-1.2602529096573647	Derivation(Who is Angela Davis?,Jonathan?s guns,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: Jonathan?s guns, r0.rel_exact: are registered in, r0.id: reverb-58037743, r0.namespace: reverb, r0.arg2_exact: Angela Davis ? name, r0.arg2: Angela Davis ? name, r0.rel: are registered in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.971, r0.arg1_exact: Jonathan?s guns),$x: ($x, is, Angela Davis))),AnswerState(Jonathan?s guns))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aaaaa?a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.2602529096573647)
Who is Angela Davis?	Mick Jagger	-1.3185024800929481	Derivation(Who is Angela Davis?,Mick Jagger,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01kx_81, r0.arg1: Mick Jagger, r0.rel_exact: is singing about, r0.id: reverb-240827690, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is singing about, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.97, r0.arg1_exact: Mick Jagger),$x: ($x, is, Angela Davis))),AnswerState(Mick Jagger))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = Aaaa Aaaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.3185024800929481)
Who is Angela Davis?	Juliette	-1.426698174020239	Derivation(Who is Angela Davis?,Juliette,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: Juliette, r0.rel_exact: is sitting next to, r0.id: reverb-188377124, r0.namespace: reverb, r0.arg2_exact: Angela Davis, r0.arg2_fbid_s: 0cz_y, r0.arg2: Angela Davis, r0.rel: is sitting next to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.91, r0.arg1_exact: Juliette),$x: ($x, is, Angela Davis))),AnswerState(Juliette))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.426698174020239)
Who is Angela Davis?	the festival	-1.4426924935541101	Derivation(Who is Angela Davis?,the festival,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: the festival, r0.rel_exact: will be, r0.id: reverb-386883759, r0.namespace: reverb, r0.arg2_exact: keynote speakers Angela Davis, r0.arg2: keynote speakers Angela Davis, r0.rel: will be, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.745, r0.arg1_exact: the festival),$x: ($x, is, Angela Davis))),AnswerState(the festival))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4426924935541101)
Who is Angela Davis?	November	-1.852715347424871	Derivation(Who is Angela Davis?,November,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05cw8, r0.arg1: November, r0.rel_exact: is, r0.id: reverb-11200222, r0.namespace: reverb, r0.arg2_exact: Angela Davis Month, r0.arg2: Angela Davis Month, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.527, r0.arg1_exact: November),$x: ($x, is, Angela Davis))),AnswerState(November))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, question prefix = 'who' and isDate -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.852715347424871)
Who is Angela Davis?	Magee	-2.2358691925066116	Derivation(Who is Angela Davis?,Magee,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1: Magee, r0.rel_exact: was tried originally with, r0.id: reverb-79122597, r0.namespace: reverb, r0.arg2_exact: co-defendant Angela Davis, r0.arg2: co-defendant Angela Davis, r0.rel: was tried originally with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.968, r0.arg1_exact: Magee),$x: ($x, is, Angela Davis))),AnswerState(Magee))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2358691925066116)
Who is Angela Davis?	Mississippi	-3.576105211223092	Derivation(Who is Angela Davis?,Mississippi,Vector(QaStep(Who is Angela Davis?,QuestionStateImpl(Who is Angela Davis?,Sentence(Who is Angela Davis?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, Angela Davis),false)), QaStep(Who is Angela Davis?,QueryState($x: ($x, is, Angela Davis),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04tgp, r0.arg1: Mississippi, r0.rel_exact: was hosted by, r0.id: reverb-164257062, r0.namespace: reverb, r0.arg2_exact: Ms. Angela Davis-Morris, r0.arg2: Ms. Angela Davis-Morris, r0.rel: was hosted by, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.937, r0.arg1_exact: Mississippi),$x: ($x, is, Angela Davis))),AnswerState(Mississippi))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.25, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.576105211223092)
What is the oldest national park in the U.S.?	Yellowstone	1.4151927142273821	Derivation(What is the oldest national park in the U.S.?,Yellowstone,Vector(QaStep(What is the oldest national park in the U.S.?,QuestionStateImpl(What is the oldest national park in the U.S.?,Sentence(What is the oldest national park in the U.S.?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the oldest national park in, the U.S.),false)), QaStep(What is the oldest national park in the U.S.?,QueryState($x: ($x, is the oldest national park in, the U.S.),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 08874, r0.arg1: Yellowstone, r0.rel_exact: is the oldest national park in, r0.id: reverb-339689501, r0.namespace: reverb, r0.arg2_exact: the U.S. Click, r0.arg2: the U.S. Click, r0.rel: is the oldest national park in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.923, r0.arg1_exact: Yellowstone),$x: ($x, is the oldest national park in, the U.S.))),AnswerState(Yellowstone))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.6666666666666666, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4151927142273821)
What is the meaning of thalassemia?	3-6 %	-0.29920195411567607	Derivation(What is the meaning of thalassemia?,3-6 %,Vector(QaStep(What is the meaning of thalassemia?,QuestionStateImpl(What is the meaning of thalassemia?,Sentence(What is the meaning of thalassemia?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is the meaning of, thalassemia),false)), QaStep(What is the meaning of thalassemia?,QueryState($x: ($x, is the meaning of, thalassemia),false),RelSynRule(be the meaning of,be about find,true,509.0,110.0,2.0,0.6800068318843842),QueryState($x: (thalassemia, be about find, $x),true)), QaStep(What is the meaning of thalassemia?,QueryState($x: (thalassemia, be about find, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01p_5n, r0.arg1: Thalassemia, r0.rel_exact: has also been found in about, r0.id: reverb-4341661, r0.namespace: reverb, r0.arg2_exact: 3-6 %, r0.arg2: 3-6 %, r0.rel: has also been found in about, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.689, r0.arg1_exact: Thalassemia),$x: (thalassemia, be about find, $x))),AnswerState(3-6 %))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6800068318843842, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = 1-1 % -> 1.0, action type = ExecutionAction -> 1.0),-0.29920195411567607)
What is the Jewish alphabet called?	the Hebrew alphabet	2.076187112669701	Derivation(What is the Jewish alphabet called?,the Hebrew alphabet,Vector(QaStep(What is the Jewish alphabet called?,QuestionStateImpl(What is the Jewish alphabet called?,Sentence(What is the Jewish alphabet called?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (the Jewish alphabet, called, $x),false)), QaStep(What is the Jewish alphabet called?,QueryState($x: (the Jewish alphabet, called, $x),false),ExecutionAction(ExecTuple((r0.arg1: the Jewish alphabet, r0.rel_exact: is called, r0.id: reverb-293355194, r0.namespace: reverb, r0.arg2_exact: the Hebrew alphabet, r0.arg2: the Hebrew alphabet, r0.rel: is called, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.858, r0.arg1_exact: the Jewish alphabet),$x: (the Jewish alphabet, called, $x))),AnswerState(the Hebrew alphabet))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.076187112669701)
Who invented the Rubik's Cube?	Hungarian Ern? Rubik	1.1640346151034533	Derivation(Who invented the Rubik's Cube?,Hungarian Ern? Rubik,Vector(QaStep(Who invented the Rubik's Cube?,QuestionStateImpl(Who invented the Rubik's Cube?,Sentence(Who invented the Rubik's Cube?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, invented, the Rubik 's Cube),false)), QaStep(Who invented the Rubik's Cube?,QueryState($x: ($x, invented, the Rubik 's Cube),false),ExecutionAction(ExecTuple((r0.arg1: Hungarian Ern? Rubik, r0.rel_exact: invented, r0.id: reverb-169004494, r0.namespace: reverb, r0.arg2_exact: the Rubik?s cube, r0.arg2: the Rubik?s cube, r0.rel: invented, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.891, r0.arg1_exact: Hungarian Ern? Rubik),$x: ($x, invented, the Rubik 's Cube))),AnswerState(Hungarian Ern? Rubik))),SparseVector(question prefix = 'who' and answer shape = Aaaaa Aaaa Aaaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1640346151034533)
Who invented the Rubik's Cube?	the same people	1.1640346151034533	Derivation(Who invented the Rubik's Cube?,the same people,Vector(QaStep(Who invented the Rubik's Cube?,QuestionStateImpl(Who invented the Rubik's Cube?,Sentence(Who invented the Rubik's Cube?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, invented, the Rubik 's Cube),false)), QaStep(Who invented the Rubik's Cube?,QueryState($x: ($x, invented, the Rubik 's Cube),false),ExecutionAction(ExecTuple((r0.arg1: the same people, r0.rel_exact: invented, r0.id: reverb-135192246, r0.namespace: reverb, r0.arg2_exact: the Rubik?s Cube, r0.arg2: the Rubik?s Cube, r0.rel: invented, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.702, r0.arg1_exact: the same people),$x: ($x, invented, the Rubik 's Cube))),AnswerState(the same people))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1640346151034533)
Who invented the Rubik's Cube?	the guy	1.1531765782274335	Derivation(Who invented the Rubik's Cube?,the guy,Vector(QaStep(Who invented the Rubik's Cube?,QuestionStateImpl(Who invented the Rubik's Cube?,Sentence(Who invented the Rubik's Cube?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, invented, the Rubik 's Cube),false)), QaStep(Who invented the Rubik's Cube?,QueryState($x: ($x, invented, the Rubik 's Cube),false),ExecutionAction(ExecTuple((r0.arg1: the guy, r0.rel_exact: invented, r0.id: openie4-8718092, r0.namespace: openie4, r0.arg2_exact: the Rubik 's Cube, r0.arg2: the Rubik 's Cube, r0.rel: invented, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.90452075, r0.arg1_exact: the guy),$x: ($x, invented, the Rubik 's Cube))),AnswerState(the guy))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'who' and answer shape = aaa aaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1531765782274335)
Who invented the Rubik's Cube?	a Hungarian	-0.4604557785026273	Derivation(Who invented the Rubik's Cube?,a Hungarian,Vector(QaStep(Who invented the Rubik's Cube?,QuestionStateImpl(Who invented the Rubik's Cube?,Sentence(Who invented the Rubik's Cube?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, invented, the Rubik 's Cube),false)), QaStep(Who invented the Rubik's Cube?,QueryState($x: ($x, invented, the Rubik 's Cube),false),RelSynRule(invent,be invent by,true,9077.0,1558.0,270.0,0.6604301333427429),QueryState($x: (the Rubik 's Cube, be invent by, $x),true)), QaStep(Who invented the Rubik's Cube?,QueryState($x: (the Rubik 's Cube, be invent by, $x),true),ExecutionAction(ExecTuple((r0.arg1: the Rubik?s cube, r0.rel_exact: was invented by, r0.id: reverb-371229939, r0.namespace: reverb, r0.arg2_exact: a Hungarian, r0.arg2: a Hungarian, r0.rel: was invented by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.744, r0.arg1_exact: the Rubik?s cube),$x: (the Rubik 's Cube, be invent by, $x))),AnswerState(a Hungarian))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6604301333427429, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, question prefix = 'who' and answer shape = a Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.4604557785026273)
What year did Ayn Rand die?	1982	5.643443739808664	Derivation(What year did Ayn Rand die?,1982,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1982, r0.rel_exact: is a, r1.arg1_fbid_s: 0h25, r0.id: nell-8211, r1.rel: Died In, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.76, r1.arg2: 1982, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Ayn Rand, r1.rel_exact: Died In, r1.arg2_exact: 1982, r1.num_extrs_i: 2, r1.id: reverb-89683248, r0.arg1_exact: 1982, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Ayn Rand, die, $x))),AnswerState(1982))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.643443739808664)
What year did Ayn Rand die?	March 1982	4.890657518937338	Derivation(What year did Ayn Rand die?,March 1982,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: March 1982, r0.rel_exact: is a, r1.arg1_fbid_s: 0h25, r0.id: nell-1078538, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.777, r1.arg2: March 1982, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Ayn Rand, r1.rel_exact: died in, r1.arg2_exact: March 1982, r1.num_extrs_i: 5, r1.id: reverb-336076495, r0.arg1_exact: March 1982, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Ayn Rand, die, $x))),AnswerState(March 1982))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = Aaaaa 1111 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.890657518937338)
What year did Ayn Rand die?	May 1982	4.826027250117362	Derivation(What year did Ayn Rand die?,May 1982,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: May 1982, r0.rel_exact: is a, r1.arg1_fbid_s: 0h25, r0.id: nell-1102321, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.777, r1.arg2: March 1982, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Ayn Rand, r1.rel_exact: died in, r1.arg2_exact: March 1982, r1.num_extrs_i: 5, r1.id: reverb-336076495, r0.arg1_exact: May 1982, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Ayn Rand, die, $x))),AnswerState(May 1982))),SparseVector(minimum join key similarity -> 0.7777777777777778, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, question prefix = 'what year' and answer shape = Aaa 1111 -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),4.826027250117362)
What year did Ayn Rand die?	c.1982	2.8815453059095484	Derivation(What year did Ayn Rand die?,c.1982,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1982, r0.rel_exact: is a, r1.arg1_fbid_s: 0h25, r0.id: nell-272264, r1.rel: Died In, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.76, r1.arg2: 1982, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Ayn Rand, r1.rel_exact: Died In, r1.arg2_exact: 1982, r1.num_extrs_i: 2, r1.id: reverb-89683248, r0.arg1_exact: c.1982, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Ayn Rand, die, $x))),AnswerState(c.1982))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.8815453059095484)
What year did Ayn Rand die?	2004	2.8104415103923053	Derivation(What year did Ayn Rand die?,2004,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5htpv, r0.arg1: 2004, r0.rel_exact: Type, r1.arg1_fbid_s: 0h25, r0.id: fb-270138769, r1.rel: Died someday in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.837, r1.arg2: 2004, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Ayn Rand, r1.rel_exact: Died someday in, r1.arg2_exact: 2004, r1.num_extrs_i: 3, r1.id: reverb-155726373, r0.arg1_exact: 2004, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Ayn Rand, die, $x))),AnswerState(2004))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.375, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.8104415103923053)
What year did Ayn Rand die?	30 years	-1.2557428726455724	Derivation(What year did Ayn Rand die?,30 years,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 30 years, r0.rel_exact: was a national director for, r1.arg1_fbid_s: 0h25, r0.id: reverb-203116491, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.514, r1.arg2: 30 years, r0.arg2: years, r0.rel: was a national director for, r1.namespace: reverb, r1.arg1: Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 4, r1.arg2_exact: 30 years, r1.num_extrs_i: 38, r0.conf_f: 0.902, r1.id: reverb-315858230, r0.arg1_exact: 30 years, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Ayn Rand, die, $x))),AnswerState(30 years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.2557428726455724)
What year did Ayn Rand die?	30,000 years	-1.6793525026116227	Derivation(What year did Ayn Rand die?,30,000 years,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 30,000 years, r0.rel_exact: is a little like, r1.arg1_fbid_s: 0h25, r0.id: reverb-234119555, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: 50,000 years, r1.conf_f: 0.514, r1.arg2: 30 years, r0.arg2: 50,000 years, r0.rel: is a little like, r1.namespace: reverb, r1.arg1: Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: 30 years, r1.num_extrs_i: 38, r0.conf_f: 0.942, r1.id: reverb-315858230, r0.arg1_exact: 30,000 years, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Ayn Rand, die, $x))),AnswerState(30,000 years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.75, question prefix = 'what year' and answer shape = 11,111 aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.6793525026116227)
What year did Ayn Rand die?	a 10 or 20 years	-1.7449654218469282	Derivation(What year did Ayn Rand die?,a 10 or 20 years,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 10 or 20 years training, r0.rel_exact: built, r0.id: reverb-19405967, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: a 10 or 20 years, r1.conf_f: 0.55, r1.arg2: 20 years, r0.arg2: a 10 or 20 years, r0.rel: built, r1.namespace: reverb, r1.arg1: the controversial author Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: 20 years, r1.num_extrs_i: 2, r0.conf_f: 0.538, r1.id: reverb-284453039, r0.arg1_exact: 10 or 20 years training, r1.arg1_exact: the controversial author Ayn Rand, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Ayn Rand, die, $x))),AnswerState(a 10 or 20 years))),SparseVector(action type = RelSynRule -> 1.0, question prefix = 'what year' and answer shape = a 11 aa 11 aaaa -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7449654218469282)
What year did Ayn Rand die?	a quarter	-2.13756102863054	Derivation(What year did Ayn Rand die?,a quarter,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is an example of", year) (Ayn Rand, die, $x),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (year, would be as, $x) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: (year, would be as, $x) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 15-year-old, r0.rel_exact: would be counted as, r1.arg1_fbid_s: 0h25, r0.id: reverb-73506071, r1.rel: died more than, r0.namespace: reverb, r0.arg2_exact: a quarter, r1.conf_f: 0.874, r1.arg2: a quarter, r0.arg2: a quarter, r0.rel: would be counted as, r1.namespace: reverb, r1.arg1: Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died more than, r0.num_extrs_i: 2, r1.arg2_exact: a quarter, r1.num_extrs_i: 8, r0.conf_f: 0.78, r1.id: reverb-95307159, r0.arg1_exact: 15-year-old, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: (year, would be as, $x) (Ayn Rand, die, $x))),AnswerState(a quarter))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.3, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.13756102863054)
What year did Ayn Rand die?	20 years	-2.784526452221037	Derivation(What year did Ayn Rand die?,20 years,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 40 years, r0.rel_exact: built their house about, r0.id: reverb-360973519, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: 20 years, r1.conf_f: 0.55, r1.arg2: 20 years, r0.arg2: 20 years, r0.rel: built their house about, r1.namespace: reverb, r1.arg1: the controversial author Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 3, r1.arg2_exact: 20 years, r1.num_extrs_i: 2, r0.conf_f: 0.788, r1.id: reverb-284453039, r0.arg1_exact: 40 years, r1.arg1_exact: the controversial author Ayn Rand, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Ayn Rand, die, $x))),AnswerState(20 years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.42857142857142855, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.784526452221037)
What year did Ayn Rand die?	homes	-2.9765265996285803	Derivation(What year did Ayn Rand die?,homes,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a kind of", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a kind of", year) (Ayn Rand, die, $x),false),RelSynRule(be a kind of,be level of,false,44765.0,257.0,79.0,0.6284746825695038),QueryState($x: ($x, be level of, year) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, be level of, year) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: homes, r0.rel_exact: is approaching the level of, r1.arg1_fbid_s: 0h25, r0.id: reverb-128509420, r1.rel: died at, r0.namespace: reverb, r0.arg2_exact: the Depression years, r1.conf_f: 0.876, r1.arg2: her home, r0.arg2: the Depression years, r0.rel: is approaching the level of, r1.namespace: reverb, r1.arg1: Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died at, r0.num_extrs_i: 7, r1.arg2_exact: her home, r1.num_extrs_i: 3, r0.conf_f: 0.819, r1.id: reverb-208361917, r0.arg1_exact: homes, r1.arg1_exact: Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, be level of, year) (Ayn Rand, die, $x))),AnswerState(homes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6284746825695038, minimum join key similarity -> 0.6153846153846154, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.6, steps -> 0.75, query similarity with question -> 0.3, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.9765265996285803)
What year did Ayn Rand die?	the 20 years	-3.154802515575187	Derivation(What year did Ayn Rand die?,the 20 years,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "is a", year) (Ayn Rand, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: (year, building, $x) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Our 4 year old company, r0.rel_exact: has been built upon, r0.id: reverb-300960711, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: the 20 years, r1.conf_f: 0.55, r1.arg2: 20 years, r0.arg2: the 20 years, r0.rel: has been built upon, r1.namespace: reverb, r1.arg1: the controversial author Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 3, r1.arg2_exact: 20 years, r1.num_extrs_i: 2, r0.conf_f: 0.904, r1.id: reverb-284453039, r0.arg1_exact: Our 4 year old company, r1.arg1_exact: the controversial author Ayn Rand, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Ayn Rand, die, $x))),AnswerState(the 20 years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = aaa 11 aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.3, steps -> 0.75, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.154802515575187)
What year did Ayn Rand die?	New York City	-3.3029073411132917	Derivation(What year did Ayn Rand die?,New York City,Vector(QaStep(What year did Ayn Rand die?,QuestionStateImpl(What year did Ayn Rand die?,Sentence(What year did Ayn Rand die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, "type", year) (Ayn Rand, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true)), QaStep(What year did Ayn Rand die?,QueryState($x: ($x, be a, year) (Ayn Rand, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_286, r0.arg1: New York City, r0.rel_exact: was a change after, r0.id: reverb-51836269, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: 14 years, r1.conf_f: 0.66, r1.arg2: New York City, r1.arg2_fbid_s: 02_286, r0.arg2: 14 years, r0.rel: was a change after, r1.namespace: reverb, r1.arg1: the writer and philosopher Ayn Rand, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 3, r1.arg2_exact: New York City, r1.num_extrs_i: 3, r0.conf_f: 0.628, r1.id: reverb-21662073, r0.arg1_exact: New York City, r1.arg1_exact: the writer and philosopher Ayn Rand, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Ayn Rand, die, $x))),AnswerState(New York City))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what year' and answer shape = Aaa Aaaa Aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.375, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.3029073411132917)
What does DEA stand for?	Drug Enforcement Administration	3.1313207297332823	Derivation(What does DEA stand for?,Drug Enforcement Administration,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,be an organization know by the acronym,false,15674.0,289.0,46.0,0.6407017409801483),QueryState($x: (DEA, be an organization know by the acronym, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, be an organization know by the acronym, $x),true),ExecutionAction(ExecTuple((r0.arg1: DEA, r0.rel_exact: is an organization known by the acronym, r0.prob_f: 0.9999695, r0.id: nell-449036, r0.namespace: nell, r0.arg2_exact: Drug Enforcement Administration, r0.arg2: Drug Enforcement Administration, r0.rel: is an organization known by the acronym, r0.arg1_exact: DEA),$x: (DEA, be an organization know by the acronym, $x))),AnswerState(Drug Enforcement Administration))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6407017409801483, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.08333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa Aaaaa -> 1.0),3.1313207297332823)
What does DEA stand for?	the Dumb Enforcement Administration	2.716007450901116	Derivation(What does DEA stand for?,the Dumb Enforcement Administration,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 012qj2, r0.arg1: DEA, r0.rel_exact: stood for, r0.id: reverb-170441768, r0.namespace: reverb, r0.arg2_exact: the Dumb Enforcement Administration, r0.arg2: the Dumb Enforcement Administration, r0.rel: stood for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.519, r0.arg1_exact: DEA),$x: (DEA, stand for, $x))),AnswerState(the Dumb Enforcement Administration))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = aaa Aaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.716007450901116)
What does DEA stand for?	either diethanolamine or diethanolamide	0.697464670382532	Derivation(What does DEA stand for?,either diethanolamine or diethanolamide,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: the DEA, r0.rel_exact: must stand for, r0.id: reverb-211740145, r0.namespace: reverb, r0.arg2_exact: either diethanolamine or diethanolamide, r0.arg2: either diethanolamine or diethanolamide, r0.rel: must stand for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.666, r0.arg1_exact: the DEA),$x: (DEA, stand for, $x))),AnswerState(either diethanolamine or diethanolamide))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa aaaa aa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.697464670382532)
What does DEA stand for?	non-dsicrimination	-0.03078924625520374	Derivation(What does DEA stand for?,non-dsicrimination,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),ExecutionAction(ExecTuple((r0.arg1: The late Dr. Stanley Dea, r0.rel_exact: stood up for, r0.id: reverb-76103150, r0.namespace: reverb, r0.arg2_exact: non-dsicrimination, r0.arg2: non-dsicrimination, r0.rel: stood up for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.89, r0.arg1_exact: The late Dr. Stanley Dea),$x: (DEA, stand for, $x))),AnswerState(non-dsicrimination))),SparseVector(question prefix = 'what' and answer shape = aaa-aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.2, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.03078924625520374)
What does DEA stand for?	Lady Draculea	-0.5772037923526381	Derivation(What does DEA stand for?,Lady Draculea,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,be short for,false,15674.0,1169.0,372.0,0.662350982427597),QueryState($x: (DEA, be short for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, be short for, $x),true),ExecutionAction(ExecTuple((r0.arg1: Lady Dea, r0.rel_exact: is short for, r0.id: reverb-380404619, r0.namespace: reverb, r0.arg2_exact: Lady Draculea, r0.arg2: Lady Draculea, r0.rel: is short for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.98, r0.arg1_exact: Lady Dea),$x: (DEA, be short for, $x))),AnswerState(Lady Draculea))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.662350982427597, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.5772037923526381)
What does DEA stand for?	a second	-0.705484928886424	Derivation(What does DEA stand for?,a second,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,hesitate for,false,15674.0,416.0,68.0,0.6415332555770874),QueryState($x: (DEA, hesitate for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, hesitate for, $x),true),ExecutionAction(ExecTuple((r0.arg1: Deas Island, r0.rel_exact: hesitates for, r0.id: reverb-77079904, r0.namespace: reverb, r0.arg2_exact: a second, r0.arg2: a second, r0.rel: hesitates for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.755, r0.arg1_exact: Deas Island),$x: (DEA, hesitate for, $x))),AnswerState(a second))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6415332555770874, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.705484928886424)
What does DEA stand for?	ten years	-0.9341588391450735	Derivation(What does DEA stand for?,ten years,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,hesitate for,false,15674.0,416.0,68.0,0.6415332555770874),QueryState($x: (DEA, hesitate for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, hesitate for, $x),true),ExecutionAction(ExecTuple((r0.arg1: the DEA, r0.rel_exact: hesitate for, r0.id: reverb-153885328, r0.namespace: reverb, r0.arg2_exact: ten years, r0.arg2: ten years, r0.rel: hesitate for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.744, r0.arg1_exact: the DEA),$x: (DEA, hesitate for, $x))),AnswerState(ten years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6415332555770874, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.9341588391450735)
What does DEA stand for?	Order	-1.7222233367515862	Derivation(What does DEA stand for?,Order,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,have to wait for,false,15674.0,303.0,11.0,0.5945126116275787),QueryState($x: (DEA, have to wait for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, have to wait for, $x),true),ExecutionAction(ExecTuple((r0.arg1: more Deas, r0.rel_exact: you?ll have to wait for, r0.id: reverb-315273318, r0.namespace: reverb, r0.arg2_exact: Order, r0.arg2_fbid_s: 0gqpx, r0.arg2: Order, r0.rel: you?ll have to wait for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.655, r0.arg1_exact: more Deas),$x: (DEA, have to wait for, $x))),AnswerState(Order))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5945126116275787, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.1111111111111111, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7222233367515862)
What does DEA stand for?	several minutes	-1.7603284528786167	Derivation(What does DEA stand for?,several minutes,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,think for,false,15674.0,2471.0,120.0,0.6036048531532288),QueryState($x: (DEA, think for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, think for, $x),true),ExecutionAction(ExecTuple((r0.arg1: O'Dea, r0.rel_exact: thought for, r0.id: reverb-354383038, r0.namespace: reverb, r0.arg2_exact: several minutes, r0.arg2: several minutes, r0.rel: thought for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.806, r0.arg1_exact: O'Dea),$x: (DEA, think for, $x))),AnswerState(several minutes))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6036048531532288, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.7603284528786167)
What does DEA stand for?	any sign	-1.974934964029333	Derivation(What does DEA stand for?,any sign,Vector(QaStep(What does DEA stand for?,QuestionStateImpl(What does DEA stand for?,Sentence(What does DEA stand for?),false),RegexQuestionPattern(List(ent, rel),<lemma='what' | lemma='who'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel, $x))),QueryState($x: (DEA, stand for, $x),false)), QaStep(What does DEA stand for?,QueryState($x: (DEA, stand for, $x),false),RelSynRule(stand for,look around for,false,15674.0,117.0,11.0,0.6242488324642181),QueryState($x: (DEA, look around for, $x),true)), QaStep(What does DEA stand for?,QueryState($x: (DEA, look around for, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 012qj2, r0.arg1: ? ? Dea, r0.rel_exact: was looking around for, r0.id: reverb-366532349, r0.namespace: reverb, r0.arg2_exact: any sign, r0.arg2: any sign, r0.rel: was looking around for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.547, r0.arg1_exact: ? ? Dea),$x: (DEA, look around for, $x))),AnswerState(any sign))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6242488324642181, minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.125, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.974934964029333)
What kind of plant is kudzu?	tree?s	0.9320355601858805	Derivation(What kind of plant is kudzu?,tree?s,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: tree?s, r0.rel_exact: is a, r1.arg1_fbid_s: 07j7r, r0.id: nell-1756888, r1.rel: are dripping with, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Trees, r1.rel_exact: are dripping with, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-358970432, r0.arg1_exact: tree?s, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(tree?s))),SparseVector(question prefix = 'what' and answer shape = aaaa?a -> 1.0, minimum join key similarity -> 0.7272727272727273, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9320355601858805)
What kind of plant is kudzu?	TREES	0.8853829698858637	Derivation(What kind of plant is kudzu?,TREES,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: TREES, r0.rel_exact: is a, r1.arg1_fbid_s: 07j7r, r0.id: nell-1756889, r1.rel: are dripping with, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Trees, r1.rel_exact: are dripping with, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-358970432, r0.arg1_exact: TREES, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(TREES))),SparseVector(minimum join key similarity -> 0.2, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8853829698858637)
What kind of plant is kudzu?	family of trees	0.7160600932782548	Derivation(What kind of plant is kudzu?,family of trees,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: family of trees, r0.rel_exact: is a, r0.id: nell-570339, r1.rel: are beginning to resemble, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.804, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Family trees, r1.rel_exact: are beginning to resemble, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r1.id: reverb-283230201, r0.arg1_exact: family of trees, r1.arg1_exact: Family trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(family of trees))),SparseVector(minimum join key similarity -> 0.8148148148148148, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa aa aaaa -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.7160600932782548)
What kind of plant is kudzu?	neither tree	0.599686438763311	Derivation(What kind of plant is kudzu?,neither tree,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: neither tree, r0.rel_exact: is a, r1.arg1_fbid_s: 07j7r, r0.id: nell-1213753, r1.rel: are dripping with, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Trees, r1.rel_exact: are dripping with, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-358970432, r0.arg1_exact: neither tree, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(neither tree))),SparseVector(minimum join key similarity -> 0.35294117647058826, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.599686438763311)
What kind of plant is kudzu?	family trees	0.5222023478008058	Derivation(What kind of plant is kudzu?,family trees,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: family trees, r0.rel_exact: is a, r0.id: nell-570514, r1.rel: are beginning to resemble, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.804, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Family trees, r1.rel_exact: are beginning to resemble, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r1.id: reverb-283230201, r0.arg1_exact: family trees, r1.arg1_exact: Family trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(family trees))),SparseVector(minimum join key similarity -> 0.9166666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5222023478008058)
What kind of plant is kudzu?	wisteria	0.49842203627639825	Derivation(What kind of plant is kudzu?,wisteria,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: wisteria, r0.rel_exact: is a, r1.arg1_fbid_s: 01d2nt, r0.id: nell-1877615, r1.rel: is as invasive as, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.568, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wisteria, r1.rel_exact: is as invasive as, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-220877607, r0.arg1_exact: wisteria, r1.arg1_exact: wisteria, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(wisteria))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.49842203627639825)
What kind of plant is kudzu?	tree	0.4014766330464352	Derivation(What kind of plant is kudzu?,tree,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: tree, r0.rel_exact: is a, r1.arg1_fbid_s: 07j7r, r0.id: nell-1756757, r1.rel: are dripping with, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Trees, r1.rel_exact: are dripping with, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-358970432, r0.arg1_exact: tree, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(tree))),SparseVector(minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.4014766330464352)
What kind of plant is kudzu?	home	0.28109374852114866	Derivation(What kind of plant is kudzu?,home,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a kind of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a kind of", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: home, r0.rel_exact: is a kind of, r0.prob_f: 0.9375, r0.id: nell-741094, r1.rel: was surrounded by, r0.namespace: nell, r0.arg2_exact: Marine Plants, r1.conf_f: 0.971, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: Marine Plants, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our home, r1.rel_exact: was surrounded by, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r1.id: reverb-356562549, r0.arg1_exact: home, r1.arg1_exact: Our home, r1.corpora_ss: List(cw)),$x: ($x, "is a kind of", plant) ($x, is, kudzu))),AnswerState(home))),SparseVector(minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.28109374852114866)
What kind of plant is kudzu?	market	0.19881891850171285	Derivation(What kind of plant is kudzu?,market,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: market, r0.rel_exact: is a, r1.arg1_fbid_s: 0g4gr, r0.id: nell-1086059, r1.rel: is the coauthor of, r0.namespace: nell, r0.arg2_exact: plant, r1.conf_f: 0.805, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: marketing, r1.rel_exact: is the coauthor of, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r1.id: reverb-208989472, r0.arg1_exact: market, r1.arg1_exact: marketing, r1.corpora_ss: List(cw)),$x: ($x, "is a", plant) ($x, is, kudzu))),AnswerState(market))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.19881891850171285)
What kind of plant is kudzu?	a tree	-1.6634391473224015	Derivation(What kind of plant is kudzu?,a tree,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1: a tree, r0.rel_exact: is an example of, r1.arg1_fbid_s: 07j7r, r0.id: reverb-65564104, r1.rel: are dripping with, r0.namespace: reverb, r0.arg2_exact: a plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Trees, r0.corpora_ss: List(cw), r1.rel_exact: are dripping with, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r0.conf_f: 0.558, r1.id: reverb-358970432, r0.arg1_exact: a tree, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "is an example of", plant) ($x, is, kudzu))),AnswerState(a tree))),SparseVector(minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-1.6634391473224015)
What kind of plant is kudzu?	Kudzu	-2.2023804390176833	Derivation(What kind of plant is kudzu?,Kudzu,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0fw3y, r0.arg1: Kudzu, r0.rel_exact: is an example of, r1.arg1_fbid_s: 0fw3y, r0.id: reverb-236957601, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: a plant, r1.conf_f: 0.755, r1.arg2: its alternate Kudzu Virtual House interface, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kudzu, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: its alternate Kudzu Virtual House interface, r1.num_extrs_i: 11, r0.conf_f: 0.822, r1.id: reverb-66915213, r0.arg1_exact: Kudzu, r1.arg1_exact: Kudzu, r1.corpora_ss: List(cw)),$x: ($x, "is an example of", plant) ($x, is, kudzu))),AnswerState(Kudzu))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2023804390176833)
What kind of plant is kudzu?	Tree	-2.949489806135233	Derivation(What kind of plant is kudzu?,Tree,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07j7r, r0.arg1: Tree, r0.rel_exact: Type, r1.arg1_fbid_s: 07j7r, r0.id: fb-29158839, r1.rel: are dripping with, r0.namespace: freebase, r0.arg2_exact: Plant Form, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: Plant Form, r0.rel: Type, r1.namespace: reverb, r1.arg1: Trees, r1.rel_exact: are dripping with, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r1.id: reverb-358970432, r0.arg1_exact: Tree, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, "type", plant) ($x, is, kudzu))),AnswerState(Tree))),SparseVector(minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.949489806135233)
What kind of plant is kudzu?	Trees	-3.815887465292927	Derivation(What kind of plant is kudzu?,Trees,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a kind of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a kind of", plant) ($x, is, kudzu),false),RelSynRule(be a kind of,be one kind of,false,44765.0,228.0,66.0,0.6265977323055267),QueryState($x: ($x, be one kind of, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be one kind of, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07j7r, r0.arg1: Trees, r0.rel_exact: are one kind of, r1.arg1_fbid_s: 07j7r, r0.id: reverb-247622557, r1.rel: are dripping with, r0.namespace: reverb, r0.arg2_exact: plant, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: are one kind of, r1.namespace: reverb, r1.arg1: Trees, r0.corpora_ss: List(cw), r1.rel_exact: are dripping with, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r0.conf_f: 0.918, r1.id: reverb-358970432, r0.arg1_exact: Trees, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: ($x, be one kind of, plant) ($x, is, kudzu))),AnswerState(Trees))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6265977323055267, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.815887465292927)
What kind of plant is kudzu?	Rust	-3.845605812445008	Derivation(What kind of plant is kudzu?,Rust,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0cgppgx, r0.arg1: Rust, r0.rel_exact: Type, r1.arg1_fbid_s: 06lml, r0.id: fb-205522283, r1.rel: was detected on, r0.namespace: freebase, r0.arg2_exact: Plant Disease, r1.conf_f: 0.956, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: Plant Disease, r0.rel: Type, r1.namespace: reverb, r1.arg1: rust, r1.rel_exact: was detected on, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r1.id: reverb-112861978, r0.arg1_exact: Rust, r1.arg1_exact: rust, r1.corpora_ss: List(cw)),$x: ($x, "type", plant) ($x, is, kudzu))),AnswerState(Rust))),SparseVector(minimum join key similarity -> 0.75, fbid join key violation -> 1.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.845605812445008)
What kind of plant is kudzu?	Nature	-4.321162826683312	Derivation(What kind of plant is kudzu?,Nature,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false),RelSynRule(be an example of,provide example of,false,2809.0,150.0,5.0,0.6455693244934082),QueryState($x: ($x, provide example of, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, provide example of, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: Nature, r0.rel_exact: provides a few examples of, r0.id: reverb-145385266, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: plants, r1.conf_f: 0.614, r1.arg2: the kudzu, r0.arg2: plants, r0.rel: provides a few examples of, r1.namespace: reverb, r1.arg1: nature, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: the kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.732, r1.id: reverb-125274124, r0.arg1_exact: Nature, r1.arg1_exact: nature, r1.corpora_ss: List(cw)),$x: ($x, provide example of, plant) ($x, is, kudzu))),AnswerState(Nature))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6455693244934082, minimum join key similarity -> 0.8333333333333334, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.321162826683312)
What kind of plant is kudzu?	the tree	-4.556319825785563	Derivation(What kind of plant is kudzu?,the tree,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (plant, setting, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, setting, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0cj6x, r0.arg1: Planting, r0.rel_exact: Set, r1.arg1_fbid_s: 07j7r, r0.id: reverb-48732836, r1.rel: are dripping with, r0.namespace: reverb, r0.arg2_exact: the tree, r1.conf_f: 0.859, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: the tree, r0.rel: Set, r1.namespace: reverb, r1.arg1: Trees, r0.corpora_ss: List(cw), r1.rel_exact: are dripping with, r0.num_extrs_i: 7, r1.arg2_exact: kudzu, r1.num_extrs_i: 12, r0.conf_f: 0.701, r1.id: reverb-358970432, r0.arg1_exact: Planting, r1.arg1_exact: Trees, r1.corpora_ss: List(cw)),$x: (plant, setting, $x) ($x, is, kudzu))),AnswerState(the tree))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.46153846153846156, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.556319825785563)
What kind of plant is kudzu?	The Park	-4.557801140697045	Derivation(What kind of plant is kudzu?,The Park,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: The Park, r0.rel_exact: will be a national leader in promoting, r0.id: reverb-103291373, r1.rel: are, r0.namespace: reverb, r0.arg2_exact: plant, r1.conf_f: 0.89, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plant, r0.rel: will be a national leader in promoting, r1.namespace: reverb, r1.arg1: the park, r0.corpora_ss: List(cw), r1.rel_exact: are, r0.num_extrs_i: 3, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.852, r1.id: reverb-30198165, r0.arg1_exact: The Park, r1.arg1_exact: the park, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(The Park))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa Aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.557801140697045)
What kind of plant is kudzu?	the market	-5.07204289732767	Derivation(What kind of plant is kudzu?,the market,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the market, r0.rel_exact: was a dude with, r1.arg1_fbid_s: 0g4gr, r0.id: reverb-97025359, r1.rel: is the coauthor of, r0.namespace: reverb, r0.arg2_exact: plants, r1.conf_f: 0.805, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plants, r0.rel: was a dude with, r1.namespace: reverb, r1.arg1: marketing, r0.corpora_ss: List(cw), r1.rel_exact: is the coauthor of, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.813, r1.id: reverb-208989472, r0.arg1_exact: the market, r1.arg1_exact: marketing, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(the market))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.631578947368421, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.07204289732767)
What kind of plant is kudzu?	plants	-5.130976979233279	Derivation(What kind of plant is kudzu?,plants,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is an example of", plant) ($x, is, kudzu),false),RelSynRule(be an example of,be debate about,false,2809.0,109.0,4.0,0.6485738456249237),QueryState($x: ($x, be debate about, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be debate about, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: plants, r0.rel_exact: are debated about, r0.id: reverb-162505316, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: several plants, r1.conf_f: 0.647, r1.arg2: kudzu--a common weed pest, r0.arg2: several plants, r0.rel: are debated about, r1.namespace: reverb, r1.arg1: those plants, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: kudzu--a common weed pest, r1.num_extrs_i: 2, r0.conf_f: 0.731, r1.id: reverb-46708352, r0.arg1_exact: plants, r1.arg1_exact: those plants, r1.corpora_ss: List(cw)),$x: ($x, be debate about, plant) ($x, is, kudzu))),AnswerState(plants))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6485738456249237, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.14285714285714285, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.130976979233279)
What kind of plant is kudzu?	the southeastern U.S.	-5.2650069372712816	Derivation(What kind of plant is kudzu?,the southeastern U.S.,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the southeastern U.S., r0.rel_exact: were a mecca for, r0.id: reverb-57490826, r1.rel: is perfect for, r0.namespace: reverb, r0.arg2_exact: European plant hunters, r1.conf_f: 0.886, r1.arg2: Kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: European plant hunters, r0.rel: were a mecca for, r1.namespace: reverb, r1.arg1: the southeastern U.S., r0.corpora_ss: List(cw), r1.rel_exact: is perfect for, r0.num_extrs_i: 2, r1.arg2_exact: Kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.875, r1.id: reverb-86497295, r0.arg1_exact: the southeastern U.S., r1.arg1_exact: the southeastern U.S., r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(the southeastern U.S.))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, question prefix = 'what' and answer shape = aaa aaaa A.A. -> 1.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.2650069372712816)
What kind of plant is kudzu?	The Market	-5.275923893963269	Derivation(What kind of plant is kudzu?,The Market,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: The Market, r0.rel_exact: Is a Great Place to, r1.arg1_fbid_s: 0g4gr, r0.id: reverb-100143039, r1.rel: is the coauthor of, r0.namespace: reverb, r0.arg2_exact: Plant, r1.conf_f: 0.805, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: Plant, r0.rel: Is a Great Place to, r1.namespace: reverb, r1.arg1: marketing, r0.corpora_ss: List(cw), r1.rel_exact: is the coauthor of, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.81, r1.id: reverb-208989472, r0.arg1_exact: The Market, r1.arg1_exact: marketing, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(The Market))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5263157894736842, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = Aaa Aaaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.275923893963269)
What kind of plant is kudzu?	the park	-5.498137018054764	Derivation(What kind of plant is kudzu?,the park,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the park, r0.rel_exact: is a fascinating combination of, r0.id: reverb-255044497, r1.rel: are, r0.namespace: reverb, r0.arg2_exact: desert plants, r1.conf_f: 0.89, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: desert plants, r0.rel: is a fascinating combination of, r1.namespace: reverb, r1.arg1: the park, r0.corpora_ss: List(cw), r1.rel_exact: are, r0.num_extrs_i: 3, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.928, r1.id: reverb-30198165, r0.arg1_exact: the park, r1.arg1_exact: the park, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(the park))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.498137018054764)
What kind of plant is kudzu?	Plants	-5.498380321791074	Derivation(What kind of plant is kudzu?,Plants,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,domain,true,4.087548E7,24939.0,23499.0,0.45045262575149536),QueryState($x: (plant, domain, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, domain, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0bc5fqy, r0.arg1: Plant, r0.rel_exact: Domain, r0.id: fb-174309588, r1.rel: is, r0.namespace: freebase, r0.arg2_exact: Plants, r0.arg2_fbid_s: 0b7cwvg, r1.conf_f: 0.647, r1.arg2: kudzu--a common weed pest, r0.arg2: Plants, r0.rel: Domain, r1.namespace: reverb, r1.arg1: those plants, r1.rel_exact: is, r1.arg2_exact: kudzu--a common weed pest, r1.num_extrs_i: 2, r1.id: reverb-46708352, r0.arg1_exact: Plant, r1.arg1_exact: those plants, r1.corpora_ss: List(cw)),$x: (plant, domain, $x) ($x, is, kudzu))),AnswerState(Plants))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.45045262575149536, minimum join key similarity -> 0.5555555555555556, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.498380321791074)
What kind of plant is kudzu?	isoflavones	-5.4986185363076086	Derivation(What kind of plant is kudzu?,isoflavones,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,be the type of,false,1172321.0,2045.0,110.0,0.47196346521377563),QueryState($x: ($x, be the type of, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be the type of, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0670q7, r0.arg1: isoflavones, r0.rel_exact: are the most potent type of, r1.arg1_fbid_s: 0670q7, r0.id: reverb-142888177, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: plant estrogens, r1.conf_f: 0.693, r1.arg2: likely kudzu, r0.arg2: plant estrogens, r0.rel: are the most potent type of, r1.namespace: reverb, r1.arg1: isoflavones, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: likely kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.795, r1.id: reverb-74432539, r0.arg1_exact: isoflavones, r1.arg1_exact: isoflavones, r1.corpora_ss: List(cw)),$x: ($x, be the type of, plant) ($x, is, kudzu))),AnswerState(isoflavones))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.47196346521377563, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.4986185363076086)
What kind of plant is kudzu?	chemicals	-5.518224116582316	Derivation(What kind of plant is kudzu?,chemicals,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,find naturally in,false,1172321.0,176.0,3.0,0.43605101108551025),QueryState($x: ($x, find naturally in, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, find naturally in, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: chemicals, r0.rel_exact: found naturally in, r0.id: openie4-40858615, r1.rel: are extracted from, r0.namespace: openie4, r0.arg2_exact: plants, r1.conf_f: 0.887, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: plants, r0.rel: found naturally in, r1.namespace: reverb, r1.arg1: These chemicals, r0.corpora_ss: List(cw), r1.rel_exact: are extracted from, r0.num_extrs_i: 6, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.8942434, r1.id: reverb-345526555, r0.arg1_exact: chemicals, r1.arg1_exact: These chemicals, r1.corpora_ss: List(cw)),$x: ($x, find naturally in, plant) ($x, is, kudzu))),AnswerState(chemicals))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.43605101108551025, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.518224116582316)
What kind of plant is kudzu?	the problem	-5.526008187799352	Derivation(What kind of plant is kudzu?,the problem,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,google,false,4.087548E7,388.0,33.0,0.37529563903808594),QueryState($x: ($x, google, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, google, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the problem, r0.rel_exact: is to Google, r0.id: reverb-21757141, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: the plant name, r1.conf_f: 0.8, r1.arg2: that kudzu, r0.arg2: the plant name, r0.rel: is to Google, r1.namespace: reverb, r1.arg1: The problem, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: that kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.599, r1.id: reverb-120211207, r0.arg1_exact: the problem, r1.arg1_exact: The problem, r1.corpora_ss: List(cw)),$x: ($x, google, plant) ($x, is, kudzu))),AnswerState(the problem))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37529563903808594, minimum join key similarity -> 0.9090909090909091, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.526008187799352)
What kind of plant is kudzu?	The park	-5.587129865429633	Derivation(What kind of plant is kudzu?,The park,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: The park, r0.rel_exact: is a treasure trove of, r0.id: reverb-229638706, r1.rel: are, r0.namespace: reverb, r0.arg2_exact: tropical plants, r1.conf_f: 0.89, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: tropical plants, r0.rel: is a treasure trove of, r1.namespace: reverb, r1.arg1: the park, r0.corpora_ss: List(cw), r1.rel_exact: are, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.939, r1.id: reverb-30198165, r0.arg1_exact: The park, r1.arg1_exact: the park, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(The park))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.587129865429633)
What kind of plant is kudzu?	areas	-5.901937627471101	Derivation(What kind of plant is kudzu?,areas,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,to locate in,true,1172321.0,173.0,3.0,0.4365882873535156),QueryState($x: (plant, to locate in, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, to locate in, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: The biogas plants, r0.rel_exact: also have to be located in, r0.id: reverb-147147028, r1.rel: is very choked up with, r0.namespace: reverb, r0.arg2_exact: areas, r1.conf_f: 0.902, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: areas, r0.rel: also have to be located in, r1.namespace: reverb, r1.arg1: the area, r0.corpora_ss: List(cw), r1.rel_exact: is very choked up with, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.837, r1.id: reverb-385291218, r0.arg1_exact: The biogas plants, r1.arg1_exact: the area, r1.corpora_ss: List(cw)),$x: (plant, to locate in, $x) ($x, is, kudzu))),AnswerState(areas))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4365882873535156, minimum join key similarity -> 0.6153846153846154, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-5.901937627471101)
What kind of plant is kudzu?	a town	-5.922897052117832	Derivation(What kind of plant is kudzu?,a town,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (plant, building, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, building, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: a nuclear power plant, r0.rel_exact: was being built in, r0.id: reverb-6622897, r1.rel: is growing like, r0.namespace: reverb, r0.arg2_exact: a town, r1.conf_f: 0.543, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: a town, r0.rel: was being built in, r1.namespace: reverb, r1.arg1: town, r0.corpora_ss: List(cw), r1.rel_exact: is growing like, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.574, r1.id: reverb-260125385, r0.arg1_exact: a nuclear power plant, r1.arg1_exact: town, r1.corpora_ss: List(cw)),$x: (plant, building, $x) ($x, is, kudzu))),AnswerState(a town))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),-5.922897052117832)
What kind of plant is kudzu?	Starch	-6.096078970059283	Derivation(What kind of plant is kudzu?,Starch,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 06x3w, r0.arg1: Starch, r0.rel_exact: is a large constituent of, r1.arg1_fbid_s: 06x3w, r0.id: reverb-221146148, r1.rel: is extracted commercially from, r0.namespace: reverb, r0.arg2_exact: some plants, r1.conf_f: 0.905, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: some plants, r0.rel: is a large constituent of, r1.namespace: reverb, r1.arg1: Starch, r0.corpora_ss: List(cw), r1.rel_exact: is extracted commercially from, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.935, r1.id: reverb-171080654, r0.arg1_exact: Starch, r1.arg1_exact: Starch, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(Starch))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.096078970059283)
What kind of plant is kudzu?	the rest	-6.130834831683841	Derivation(What kind of plant is kudzu?,the rest,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (plant, setting, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, setting, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the trial plants, r0.rel_exact: were set apart from, r0.id: reverb-304405098, r1.rel: have been found on, r0.namespace: reverb, r0.arg2_exact: the rest, r1.conf_f: 0.943, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: the rest, r0.rel: were set apart from, r1.namespace: reverb, r1.arg1: the rest, r0.corpora_ss: List(cw), r1.rel_exact: have been found on, r0.num_extrs_i: 4, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.882, r1.id: reverb-242954788, r0.arg1_exact: the trial plants, r1.arg1_exact: the rest, r1.corpora_ss: List(cw)),$x: (plant, setting, $x) ($x, is, kudzu))),AnswerState(the rest))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.130834831683841)
What kind of plant is kudzu?	Winter	-6.272033496511948	Derivation(What kind of plant is kudzu?,Winter,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,flowering,false,1172321.0,137.0,3.0,0.44387924671173096),QueryState($x: ($x, flowering, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, flowering, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 086mh, r0.arg1: Winter, r0.rel_exact: flowering, r0.id: openie4-35051184, r1.rel: is, r0.namespace: openie4, r0.arg2_exact: plants, r1.conf_f: 0.513, r1.arg2: the kudzu bug, r0.arg2: plants, r0.rel: flowering, r1.namespace: reverb, r1.arg1: this winter, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: the kudzu bug, r1.num_extrs_i: 2, r0.conf_f: 0.8942434, r1.id: reverb-159217738, r0.arg1_exact: Winter, r1.arg1_exact: this winter, r1.corpora_ss: List(cw)),$x: ($x, flowering, plant) ($x, is, kudzu))),AnswerState(Winter))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44387924671173096, minimum join key similarity -> 0.5882352941176471, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.272033496511948)
What kind of plant is kudzu?	the forest	-6.278725684371578	Derivation(What kind of plant is kudzu?,the forest,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the forest, r0.rel_exact: is a long way from, r0.id: reverb-221912789, r1.rel: were abundant growths of, r0.namespace: reverb, r0.arg2_exact: a biomass plant, r1.conf_f: 0.775, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: a biomass plant, r0.rel: is a long way from, r1.namespace: reverb, r1.arg1: the forests, r0.corpora_ss: List(cw), r1.rel_exact: were abundant growths of, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.694, r1.id: reverb-356118126, r0.arg1_exact: the forest, r1.arg1_exact: the forests, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(the forest))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9523809523809523, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.278725684371578)
What kind of plant is kudzu?	the goal	-6.29257265745766	Derivation(What kind of plant is kudzu?,the goal,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (plant, setting, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, setting, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01f2sl, r0.arg1: power plants, r0.rel_exact: was set with, r1.arg1_fbid_s: 01sy_2, r0.id: reverb-367716122, r1.rel: was to raise funds for, r0.namespace: reverb, r0.arg2_exact: the goal, r0.arg2_fbid_s: 01sy_2, r1.conf_f: 0.977, r1.arg2: Kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: the goal, r0.rel: was set with, r1.namespace: reverb, r1.arg1: The goal, r0.corpora_ss: List(cw), r1.rel_exact: was to raise funds for, r0.num_extrs_i: 2, r1.arg2_exact: Kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.867, r1.id: reverb-121948610, r0.arg1_exact: power plants, r1.arg1_exact: The goal, r1.corpora_ss: List(cw)),$x: (plant, setting, $x) ($x, is, kudzu))),AnswerState(the goal))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.875, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.29257265745766)
What kind of plant is kudzu?	God	-6.363281945694434	Derivation(What kind of plant is kudzu?,God,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d05l6, r0.arg1: God, r0.rel_exact: is beginning a movement of, r1.arg1_fbid_s: 0d05l6, r0.id: reverb-260417564, r1.rel: is like, r0.namespace: reverb, r0.arg2_exact: church planting, r0.arg2_fbid_s: 039c9l, r1.conf_f: 0.732, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: church planting, r0.rel: is beginning a movement of, r1.namespace: reverb, r1.arg1: God, r0.corpora_ss: List(cw), r1.rel_exact: is like, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 4, r0.conf_f: 0.823, r1.id: reverb-246903302, r0.arg1_exact: God, r1.arg1_exact: God, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(God))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.363281945694434)
What kind of plant is kudzu?	the edge	-6.380621223698363	Derivation(What kind of plant is kudzu?,the edge,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (plant, building, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, building, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: the solar-thermal plant, r0.rel_exact: is built on, r1.arg1_fbid_s: 01vswx5, r0.id: reverb-357778170, r1.rel: is covered in, r0.namespace: reverb, r0.arg2_exact: the edge, r0.arg2_fbid_s: 01vswx5, r1.conf_f: 0.818, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: the edge, r0.rel: is built on, r1.namespace: reverb, r1.arg1: the edge, r0.corpora_ss: List(cw), r1.rel_exact: is covered in, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 20, r0.conf_f: 0.943, r1.id: reverb-376569726, r0.arg1_exact: the solar-thermal plant, r1.arg1_exact: the edge, r1.corpora_ss: List(cw)),$x: (plant, building, $x) ($x, is, kudzu))),AnswerState(the edge))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.380621223698363)
What kind of plant is kudzu?	winter	-6.415628282841601	Derivation(What kind of plant is kudzu?,winter,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,can type,false,4.087548E7,204.0,26.0,0.38793545961380005),QueryState($x: ($x, can type, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, can type, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 086mh, r0.arg1: winter, r0.rel_exact: as can other types of, r0.id: reverb-276751372, r1.rel: is, r0.namespace: reverb, r0.arg2_exact: herbaceous plants, r1.conf_f: 0.513, r1.arg2: the kudzu bug, r0.arg2: herbaceous plants, r0.rel: as can other types of, r1.namespace: reverb, r1.arg1: this winter, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: the kudzu bug, r1.num_extrs_i: 2, r0.conf_f: 0.754, r1.id: reverb-159217738, r0.arg1_exact: winter, r1.arg1_exact: this winter, r1.corpora_ss: List(cw)),$x: ($x, can type, plant) ($x, is, kudzu))),AnswerState(winter))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.38793545961380005, minimum join key similarity -> 0.7058823529411765, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.4, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.415628282841601)
What kind of plant is kudzu?	the town	-6.439390632989497	Derivation(What kind of plant is kudzu?,the town,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (plant, setting, $x) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: (plant, setting, $x) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1: ?This plant, r0.rel_exact: could have been set up by, r0.id: reverb-358147381, r1.rel: is growing like, r0.namespace: reverb, r0.arg2_exact: the town, r0.arg2_fbid_s: 07kh6f3, r1.conf_f: 0.543, r1.arg2: kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: the town, r0.rel: could have been set up by, r1.namespace: reverb, r1.arg1: town, r0.corpora_ss: List(cw), r1.rel_exact: is growing like, r0.num_extrs_i: 2, r1.arg2_exact: kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.796, r1.id: reverb-260125385, r0.arg1_exact: ?This plant, r1.arg1_exact: town, r1.corpora_ss: List(cw)),$x: (plant, setting, $x) ($x, is, kudzu))),AnswerState(the town))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.6666666666666666, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.439390632989497)
What kind of plant is kudzu?	Isoflavones	-6.544287400524649	Derivation(What kind of plant is kudzu?,Isoflavones,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "is a", plant) ($x, is, kudzu),false),RelSynRule(be a,be a class of,false,1172321.0,625.0,37.0,0.4749584197998047),QueryState($x: ($x, be a class of, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a class of, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0670q7, r0.arg1: Isoflavones, r0.rel_exact: are a unique class of, r1.arg1_fbid_s: 0670q7, r0.id: openie4-1012998, r1.rel: is, r0.namespace: openie4, r0.arg2_exact: plant flavonoids, r1.conf_f: 0.693, r1.arg2: likely kudzu, r0.arg2: plant flavonoids, r0.rel: are a unique class of, r1.namespace: reverb, r1.arg1: isoflavones, r0.corpora_ss: List(cw), r1.rel_exact: is, r0.num_extrs_i: 2, r1.arg2_exact: likely kudzu, r1.num_extrs_i: 3, r0.conf_f: 0.8, r1.id: reverb-74432539, r0.arg1_exact: Isoflavones, r1.arg1_exact: isoflavones, r1.corpora_ss: List(cw)),$x: ($x, be a class of, plant) ($x, is, kudzu))),AnswerState(Isoflavones))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4749584197998047, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.5, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.544287400524649)
What kind of plant is kudzu?	The tea	-7.018713357543161	Derivation(What kind of plant is kudzu?,The tea,Vector(QaStep(What kind of plant is kudzu?,QuestionStateImpl(What kind of plant is kudzu?,Sentence(What kind of plant is kudzu?),false),RegexQuestionPattern(List(ent1, ent2, rel),<lemma='what' | lemma='which'> <lemma='type' | lemma='kind' | lemma='class' | lemma='sort'> <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>? (<ent1>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent2>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, "type" | "is a" | "is a kind of" | "is an example of", $ent1) ($x, $rel, $ent2))),QueryState($x: ($x, "type", plant) ($x, is, kudzu),false)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, "type", plant) ($x, is, kudzu),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, plant) ($x, is, kudzu),true)), QaStep(What kind of plant is kudzu?,QueryState($x: ($x, be a, plant) ($x, is, kudzu),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07clx, r0.arg1: The tea, r0.rel_exact: is a product of, r1.arg1_fbid_s: 07clx, r0.id: openie4-51941428, r1.rel: is made from, r0.namespace: openie4, r0.arg2_exact: a plant, r1.conf_f: 0.91808045, r1.arg2: Kudzu, r1.arg2_fbid_s: 0fw3y, r0.arg2: a plant, r0.rel: is a product of, r1.namespace: openie4, r1.arg1: The tea, r0.corpora_ss: List(cw), r1.rel_exact: is made from, r0.num_extrs_i: 3, r1.arg2_exact: Kudzu, r1.num_extrs_i: 2, r0.conf_f: 0.8, r1.id: openie4-51944041, r0.arg1_exact: The tea, r1.arg1_exact: The tea, r1.corpora_ss: List(cw)),$x: ($x, be a, plant) ($x, is, kudzu))),AnswerState(The tea))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 2.0, query relation is light verb -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what' and answer shape = Aaa aaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-7.018713357543161)
What year was Wal-Mart founded?	1962	2.708157579118529	Derivation(What year was Wal-Mart founded?,1962,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5h4d0, r0.arg1: 1962, r0.rel_exact: Type, r1.arg1_fbid_s: 0841v, r0.id: fb-87713, r1.rel: was founded in, r0.namespace: freebase, r0.arg2_exact: years, r0.arg2_fbid_s: 0g5h44z, r1.conf_f: 0.972, r1.arg2: 1962, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wal-Mart, r1.rel_exact: was founded in, r1.arg2_exact: 1962, r1.num_extrs_i: 4, r1.id: reverb-91679604, r0.arg1_exact: 1962, r1.arg1_exact: Wal-Mart, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Wal-Mart, founded, $x))),AnswerState(1962))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.708157579118529)
What year was Wal-Mart founded?	c.1958	1.7768916382053506	Derivation(What year was Wal-Mart founded?,c.1958,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1958, r0.rel_exact: is a, r0.id: nell-272253, r1.rel: was founded in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.847, r1.arg2: 1958, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wal-Mart de Mexico, r1.rel_exact: was founded in, r1.arg2_exact: 1958, r1.num_extrs_i: 2, r1.id: reverb-187809771, r0.arg1_exact: c.1958, r1.arg1_exact: Wal-Mart de Mexico, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Wal-Mart, founded, $x))),AnswerState(c.1958))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7768916382053506)
What year was Wal-Mart founded?	1970	1.6558967596039342	Derivation(What year was Wal-Mart founded?,1970,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false),RelSynRule(found,go public,false,30357.0,182.0,12.0,0.5925036668777466),QueryState($x: ($x, "type", year) (Wal-Mart, go public, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "type", year) (Wal-Mart, go public, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 03grmsw, r0.arg1: 1970, r0.rel_exact: Type, r1.arg1_fbid_s: 0841v, r0.id: fb-150359474, r1.rel: went public in, r0.namespace: freebase, r0.arg2_exact: Year, r1.conf_f: 0.959, r1.arg2: 1970, r0.arg2: Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wal-Mart, r1.rel_exact: went public in, r1.arg2_exact: 1970, r1.num_extrs_i: 3, r1.id: reverb-343733658, r0.arg1_exact: 1970, r1.arg1_exact: Wal-Mart, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Wal-Mart, go public, $x))),AnswerState(1970))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5925036668777466, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.6558967596039342)
What year was Wal-Mart founded?	c.1970	1.4350588084921445	Derivation(What year was Wal-Mart founded?,c.1970,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false),RelSynRule(found,go public,false,30357.0,182.0,12.0,0.5925036668777466),QueryState($x: ($x, "is a", year) (Wal-Mart, go public, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is a", year) (Wal-Mart, go public, $x),true),ExecutionAction(ExecTuple((r0.arg1: c.1970, r0.rel_exact: is a, r1.arg1_fbid_s: 0841v, r0.id: nell-272258, r1.rel: went public in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.959, r1.arg2: 1970, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wal-Mart, r1.rel_exact: went public in, r1.arg2_exact: 1970, r1.num_extrs_i: 3, r1.id: reverb-343733658, r0.arg1_exact: c.1970, r1.arg1_exact: Wal-Mart, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Wal-Mart, go public, $x))),AnswerState(c.1970))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5925036668777466, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.375, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.4350588084921445)
What year was Wal-Mart founded?	1958	0.23175047397868376	Derivation(What year was Wal-Mart founded?,1958,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Wal-Mart, founded, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: (year, building, $x) (Wal-Mart, founded, $x),true),ExecutionAction(ExecTuple((r0.arg1: Year, r0.rel_exact: built, r0.id: reverb-151377567, r1.rel: was founded in, r0.namespace: reverb, r0.arg2_exact: 1958, r1.conf_f: 0.847, r1.arg2: 1958, r0.arg2: 1958, r0.rel: built, r1.namespace: reverb, r1.arg1: Wal-Mart de Mexico, r0.corpora_ss: List(cw), r1.rel_exact: was founded in, r0.num_extrs_i: 6, r1.arg2_exact: 1958, r1.num_extrs_i: 2, r0.conf_f: 0.939, r1.id: reverb-187809771, r0.arg1_exact: Year, r1.arg1_exact: Wal-Mart de Mexico, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Wal-Mart, founded, $x))),AnswerState(1958))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.23175047397868376)
What year was Wal-Mart founded?	the LC1962	-2.2529093179998982	Derivation(What year was Wal-Mart founded?,the LC1962,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Wal-Mart, founded, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, be a, year) (Wal-Mart, founded, $x),true),ExecutionAction(ExecTuple((r0.arg1: the LC1962, r0.rel_exact: are planning a reunion for, r1.arg1_fbid_s: 0841v, r0.id: reverb-265754135, r1.rel: was founded in, r0.namespace: reverb, r0.arg2_exact: this year, r1.conf_f: 0.972, r1.arg2: 1962, r0.arg2: this year, r0.rel: are planning a reunion for, r1.namespace: reverb, r1.arg1: Wal-Mart, r0.corpora_ss: List(cw), r1.rel_exact: was founded in, r0.num_extrs_i: 2, r1.arg2_exact: 1962, r1.num_extrs_i: 4, r0.conf_f: 0.805, r1.id: reverb-91679604, r0.arg1_exact: the LC1962, r1.arg1_exact: Wal-Mart, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Wal-Mart, founded, $x))),AnswerState(the LC1962))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5714285714285714, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa AA1111 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.2529093179998982)
What year was Wal-Mart founded?	a part	-2.817307609006943	Derivation(What year was Wal-Mart founded?,a part,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "type", year) (Wal-Mart, founded, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Wal-Mart, founded, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, be an, year) (Wal-Mart, founded, $x),true),ExecutionAction(ExecTuple((r0.arg1: a part, r0.rel_exact: has been an independent country for only, r0.id: reverb-336218779, r1.rel: was founded in, r0.namespace: reverb, r0.arg2_exact: 16 years, r1.conf_f: 0.678, r1.arg2: part, r0.arg2: 16 years, r0.rel: has been an independent country for only, r1.namespace: reverb, r1.arg1: Wal-Mart Watch, r0.corpora_ss: List(cw), r1.rel_exact: was founded in, r0.num_extrs_i: 2, r1.arg2_exact: part, r1.num_extrs_i: 2, r0.conf_f: 0.844, r1.id: reverb-977503, r0.arg1_exact: a part, r1.arg1_exact: Wal-Mart Watch, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Wal-Mart, founded, $x))),AnswerState(a part))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.42857142857142855, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.817307609006943)
What year was Wal-Mart founded?	part	-3.0166029419936367	Derivation(What year was Wal-Mart founded?,part,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is an example of", year) (Wal-Mart, founded, $x),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (year, would be as, $x) (Wal-Mart, founded, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: (year, would be as, $x) (Wal-Mart, founded, $x),true),ExecutionAction(ExecTuple((r0.arg1: A few years, r0.rel_exact: would be allowed as, r0.id: reverb-366665014, r1.rel: was founded in, r0.namespace: reverb, r0.arg2_exact: part, r1.conf_f: 0.678, r1.arg2: part, r0.arg2: part, r0.rel: would be allowed as, r1.namespace: reverb, r1.arg1: Wal-Mart Watch, r0.corpora_ss: List(cw), r1.rel_exact: was founded in, r0.num_extrs_i: 3, r1.arg2_exact: part, r1.num_extrs_i: 2, r0.conf_f: 0.502, r1.id: reverb-977503, r0.arg1_exact: A few years, r1.arg1_exact: Wal-Mart Watch, r1.corpora_ss: List(cw)),$x: (year, would be as, $x) (Wal-Mart, founded, $x))),AnswerState(part))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.375, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.0166029419936367)
What year was Wal-Mart founded?	parts	-4.064289282988957	Derivation(What year was Wal-Mart founded?,parts,Vector(QaStep(What year was Wal-Mart founded?,QuestionStateImpl(What year was Wal-Mart founded?,Sentence(What year was Wal-Mart founded?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false)), QaStep(What year was Wal-Mart founded?,QueryState($x: ($x, "is a", year) (Wal-Mart, founded, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Wal-Mart, founded, $x),true)), QaStep(What year was Wal-Mart founded?,QueryState($x: (year, setting, $x) (Wal-Mart, founded, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02wpm_, r0.arg1: light years, r0.rel_exact: can set your eyes on, r0.id: reverb-40393861, r1.rel: was founded in, r0.namespace: reverb, r0.arg2_exact: parts, r1.conf_f: 0.678, r1.arg2: part, r0.arg2: parts, r0.rel: can set your eyes on, r1.namespace: reverb, r1.arg1: Wal-Mart Watch, r0.corpora_ss: List(cw), r1.rel_exact: was founded in, r0.num_extrs_i: 2, r1.arg2_exact: part, r1.num_extrs_i: 2, r0.conf_f: 0.911, r1.id: reverb-977503, r0.arg1_exact: light years, r1.arg1_exact: Wal-Mart Watch, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Wal-Mart, founded, $x))),AnswerState(parts))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.064289282988957)
What is naproxen?	RA	2.387861881690508	Derivation(What is naproxen?,RA,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: RA, r0.rel_exact: is, r0.id: reverb-51672146, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.75, r0.arg1_exact: RA),$x: ($x, is, naproxen))),AnswerState(RA))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what' and answer shape = AA -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.387861881690508)
What is naproxen?	The key product	1.7517883277886346	Derivation(What is naproxen?,The key product,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: The key product, r0.rel_exact: was, r0.id: reverb-387387384, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.852, r0.arg1_exact: The key product),$x: ($x, is, naproxen))),AnswerState(The key product))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa aaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.7517883277886346)
What is naproxen?	Generic Naprosyn	1.4827040249552492	Derivation(What is naproxen?,Generic Naprosyn,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Generic Naprosyn, r0.rel_exact: is, r0.id: reverb-194019908, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.75, r0.arg1_exact: Generic Naprosyn),$x: ($x, is, naproxen))),AnswerState(Generic Naprosyn))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4827040249552492)
What is naproxen?	Aleve	1.047704199639943	Derivation(What is naproxen?,Aleve,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Aleve, r0.rel_exact: is, r0.id: reverb-134933961, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.857, r0.arg1_exact: Aleve),$x: ($x, is, naproxen))),AnswerState(Aleve))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.047704199639943)
What is naproxen?	EC-Naprosyn	0.9699362300842507	Derivation(What is naproxen?,EC-Naprosyn,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: EC-Naprosyn, r0.rel_exact: is a slower-acting form of, r0.id: reverb-218124311, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is a slower-acting form of, r0.corpora_ss: List(cw), r0.num_extrs_i: 15, r0.conf_f: 0.837, r0.arg1_exact: EC-Naprosyn),$x: ($x, is, naproxen))),AnswerState(EC-Naprosyn))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = AA-Aaaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9699362300842507)
What is naproxen?	Active comparators	0.8683030187714109	Derivation(What is naproxen?,Active comparators,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Active comparators, r0.rel_exact: were, r0.id: reverb-108264814, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: were, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.762, r0.arg1_exact: Active comparators),$x: ($x, is, naproxen))),AnswerState(Active comparators))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8683030187714109)
What is naproxen?	Drug	0.5490259804921711	Derivation(What is naproxen?,Drug,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Drug, r0.rel_exact: Is, r0.id: reverb-103180481, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.804, r0.arg1_exact: Drug),$x: ($x, is, naproxen))),AnswerState(Drug))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5490259804921711)
What is naproxen?	CYTOMEL CYTOMEL	0.3649865004573385	Derivation(What is naproxen?,CYTOMEL CYTOMEL,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: CYTOMEL CYTOMEL, r0.rel_exact: was on, r0.id: reverb-94794831, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.881, r0.arg1_exact: CYTOMEL CYTOMEL),$x: ($x, is, naproxen))),AnswerState(CYTOMEL CYTOMEL))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAAA AAAA -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3649865004573385)
What is naproxen?	VERMOX	0.29075715109959543	Derivation(What is naproxen?,VERMOX,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: VERMOX, r0.rel_exact: was prescribed, r0.id: reverb-277838491, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was prescribed, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.78, r0.arg1_exact: VERMOX),$x: ($x, is, naproxen))),AnswerState(VERMOX))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.29075715109959543)
What is naproxen?	The active ingredient	0.2690762896840797	Derivation(What is naproxen?,The active ingredient,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: The active ingredient, r0.rel_exact: is, r0.id: reverb-213564975, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.638, r0.arg1_exact: The active ingredient),$x: ($x, is, naproxen))),AnswerState(The active ingredient))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.2690762896840797)
What is naproxen?	only 29 years	0.18405973992676272	Derivation(What is naproxen?,only 29 years,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: only 29 years, r0.rel_exact: was taking, r0.id: reverb-67025969, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was taking, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.914, r0.arg1_exact: only 29 years),$x: ($x, is, naproxen))),AnswerState(only 29 years))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = aaaa 11 aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.18405973992676272)
What is naproxen?	500mg	0.17748259138073919	Derivation(What is naproxen?,500mg,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 500mg, r0.rel_exact: Is, r0.id: reverb-13490641, r0.namespace: reverb, r0.arg2_exact: Naproxen Used, r0.arg2: Naproxen Used, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.767, r0.arg1_exact: 500mg),$x: ($x, is, naproxen))),AnswerState(500mg))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = 111aa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.17748259138073919)
What is naproxen?	a healthy mix	0.17748259138073919	Derivation(What is naproxen?,a healthy mix,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: a healthy mix, r0.rel_exact: is, r0.id: reverb-381764373, r0.namespace: reverb, r0.arg2_exact: the Naproxen, r0.arg2: the Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.502, r0.arg1_exact: a healthy mix),$x: ($x, is, naproxen))),AnswerState(a healthy mix))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = a aaaa aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.17748259138073919)
What is naproxen?	Baby Names eMedTV Articles A-Z	0.17748259138073919	Derivation(What is naproxen?,Baby Names eMedTV Articles A-Z,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Baby Names eMedTV Articles A-Z, r0.rel_exact: Is, r0.id: reverb-287443269, r0.namespace: reverb, r0.arg2_exact: Naproxen Used, r0.arg2: Naproxen Used, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.857, r0.arg1_exact: Baby Names eMedTV Articles A-Z),$x: ($x, is, naproxen))),AnswerState(Baby Names eMedTV Articles A-Z))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa aAaaAA Aaaaa A-A -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.17748259138073919)
What is naproxen?	2006 approvable NAPROXEN	-0.13478438593876363	Derivation(What is naproxen?,2006 approvable NAPROXEN,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 2006 approvable NAPROXEN, r0.rel_exact: was, r0.id: reverb-30098075, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.889, r0.arg1_exact: 2006 approvable NAPROXEN),$x: ($x, is, naproxen))),AnswerState(2006 approvable NAPROXEN))),SparseVector(question prefix = 'what' and isDate -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = 1111 aaaa AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.13478438593876363)
What is naproxen?	Toothaches	-0.16605232808961667	Derivation(What is naproxen?,Toothaches,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Toothaches, r0.rel_exact: Is, r0.id: reverb-363324989, r0.namespace: reverb, r0.arg2_exact: Naproxen Good, r0.arg2: Naproxen Good, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.752, r0.arg1_exact: Toothaches),$x: ($x, is, naproxen))),AnswerState(Toothaches))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.16605232808961667)
What is naproxen?	A prescription	-0.2183333864677497	Derivation(What is naproxen?,A prescription,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: A prescription, r0.rel_exact: is required for, r0.id: reverb-371393165, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is required for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.937, r0.arg1_exact: A prescription),$x: ($x, is, naproxen))),AnswerState(A prescription))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	the approximately 2,400 participants	-0.2183333864677497	Derivation(What is naproxen?,the approximately 2,400 participants,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the approximately 2,400 participants, r0.rel_exact: have been taking, r0.id: reverb-379769947, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: have been taking, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.864, r0.arg1_exact: the approximately 2,400 participants),$x: ($x, is, naproxen))),AnswerState(the approximately 2,400 participants))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa 1,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	Acetaminophen. . Aleve	-0.2183333864677497	Derivation(What is naproxen?,Acetaminophen. . Aleve,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Acetaminophen. . Aleve, r0.rel_exact: is also called, r0.id: reverb-118198271, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is also called, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.848, r0.arg1_exact: Acetaminophen. . Aleve),$x: ($x, is, naproxen))),AnswerState(Acetaminophen. . Aleve))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa. . Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	1,000 mg/day	-0.2183333864677497	Derivation(What is naproxen?,1,000 mg/day,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 1,000 mg/day, r0.rel_exact: was comparable to, r0.id: reverb-262618572, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was comparable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.755, r0.arg1_exact: 1,000 mg/day),$x: ($x, is, naproxen))),AnswerState(1,000 mg/day))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = 1,111 aa/aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	116,429 patients	-0.2183333864677497	Derivation(What is naproxen?,116,429 patients,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 116,429 patients, r0.rel_exact: were allocated to, r0.id: reverb-255025848, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: were allocated to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.851, r0.arg1_exact: 116,429 patients),$x: ($x, is, naproxen))),AnswerState(116,429 patients))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 111,111 aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	the current FDA recommendation	-0.2183333864677497	Derivation(What is naproxen?,the current FDA recommendation,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the current FDA recommendation, r0.rel_exact: is ?not take, r0.id: reverb-228974610, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is ?not take, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.508, r0.arg1_exact: the current FDA recommendation),$x: ($x, is, naproxen))),AnswerState(the current FDA recommendation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = aaa aaaa AAA aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	Valdecoxib 10 mg/day	-0.2183333864677497	Derivation(What is naproxen?,Valdecoxib 10 mg/day,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Valdecoxib 10 mg/day, r0.rel_exact: was as effective as, r0.id: reverb-251919184, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was as effective as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.898, r0.arg1_exact: Valdecoxib 10 mg/day),$x: ($x, is, naproxen))),AnswerState(Valdecoxib 10 mg/day))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaaa 11 aa/aaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	7/1/11 11:17	-0.2183333864677497	Derivation(What is naproxen?,7/1/11 11:17,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 7/1/11 11:17, r0.rel_exact: AM Tracked by, r0.id: reverb-158057904, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: AM Tracked by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.88, r0.arg1_exact: 7/1/11 11:17),$x: ($x, is, naproxen))),AnswerState(7/1/11 11:17))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = 1/1/11 11:11 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.2183333864677497)
What is naproxen?	the two best options	-0.22710291786244707	Derivation(What is naproxen?,the two best options,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the two best options, r0.rel_exact: are, r0.id: reverb-1461925, r0.namespace: reverb, r0.arg2_exact: Naproxen and Vicoden, r0.arg2: Naproxen and Vicoden, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.766, r0.arg1_exact: the two best options),$x: ($x, is, naproxen))),AnswerState(the two best options))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaa aaa aaaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.22710291786244707)
What is naproxen?	CODEINE	-0.23921165770617425	Derivation(What is naproxen?,CODEINE,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0256v, r0.arg1: CODEINE, r0.rel_exact: was on, r0.id: reverb-230643298, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: was on, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.971, r0.arg1_exact: CODEINE),$x: ($x, is, naproxen))),AnswerState(CODEINE))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.23921165770617425)
What is naproxen?	ARTHRITIS	-0.24578880625219734	Derivation(What is naproxen?,ARTHRITIS,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0t1t, r0.arg1: ARTHRITIS, r0.rel_exact: is, r0.id: reverb-175302257, r0.namespace: reverb, r0.arg2_exact: Naproxen Sodium, r0.arg2: Naproxen Sodium, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.662, r0.arg1_exact: ARTHRITIS),$x: ($x, is, naproxen))),AnswerState(ARTHRITIS))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.24578880625219734)
What is naproxen?	47	-0.28215152805551713	Derivation(What is naproxen?,47,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 47, r0.rel_exact: were randomised to, r0.id: reverb-66313493, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: were randomised to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.792, r0.arg1_exact: 47),$x: ($x, is, naproxen))),AnswerState(47))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = 11 -> 1.0, action type = ExecutionAction -> 1.0),-0.28215152805551713)
What is naproxen?	letter	-0.33544989880780385	Derivation(What is naproxen?,letter,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: letter, r0.rel_exact: Is, r0.id: reverb-214198053, r0.namespace: reverb, r0.arg2_exact: Naproxen Used, r0.arg2: Naproxen Used, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.767, r0.arg1_exact: letter),$x: ($x, is, naproxen))),AnswerState(letter))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.33544989880780385)
What is naproxen?	subjects	-0.33544989880780385	Derivation(What is naproxen?,subjects,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: subjects, r0.rel_exact: Is, r0.id: reverb-175355933, r0.namespace: reverb, r0.arg2_exact: Naproxen Used, r0.arg2: Naproxen Used, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.767, r0.arg1_exact: subjects),$x: ($x, is, naproxen))),AnswerState(subjects))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.33544989880780385)
What is naproxen?	Aleve and Naprosyn	-0.4382320262131325	Derivation(What is naproxen?,Aleve and Naprosyn,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Aleve and Naprosyn, r0.rel_exact: are common brand names for, r0.id: reverb-194366689, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: are common brand names for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.926, r0.arg1_exact: Aleve and Naprosyn),$x: ($x, is, naproxen))),AnswerState(Aleve and Naprosyn))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa aaa Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.4382320262131325)
What is naproxen?	the hospital	-0.45365585009990594	Derivation(What is naproxen?,the hospital,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the hospital, r0.rel_exact: was given, r0.id: reverb-273777753, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was given, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.796, r0.arg1_exact: the hospital),$x: ($x, is, naproxen))),AnswerState(the hospital))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.45365585009990594)
What is naproxen?	the delay--I	-0.5402478875833594	Derivation(What is naproxen?,the delay--I,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the delay--I, r0.rel_exact: 've been living off of, r0.id: reverb-304695237, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: 've been living off of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.855, r0.arg1_exact: the delay--I),$x: ($x, is, naproxen))),AnswerState(the delay--I))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = aaa aaaa--A -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5402478875833594)
What is naproxen?	Naprox?ne	-0.5402478875833594	Derivation(What is naproxen?,Naprox?ne,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Naprox?ne, r0.rel_exact: is an alternate name for, r0.id: reverb-261455264, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is an alternate name for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.976, r0.arg1_exact: Naprox?ne),$x: ($x, is, naproxen))),AnswerState(Naprox?ne))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaaa?aa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5402478875833594)
What is naproxen?	The Counter	-0.5472725589063256	Derivation(What is naproxen?,The Counter,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: The Counter, r0.rel_exact: Is, r0.id: reverb-156229507, r0.namespace: reverb, r0.arg2_exact: Naproxen Available, r0.arg2: Naproxen Available, r0.rel: Is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.767, r0.arg1_exact: The Counter),$x: ($x, is, naproxen))),AnswerState(The Counter))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = Aaa Aaaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5472725589063256)
What is naproxen?	OTC NSAIDs	-0.5507713252569963	Derivation(What is naproxen?,OTC NSAIDs,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: OTC NSAIDs, r0.rel_exact: are, r0.id: reverb-19407150, r0.namespace: reverb, r0.arg2_exact: aspirin , ibuprofen , naproxen sodium, r0.arg2: aspirin , ibuprofen , naproxen sodium, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.69, r0.arg1_exact: OTC NSAIDs),$x: ($x, is, naproxen))),AnswerState(OTC NSAIDs))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AAA AAAAa -> 1.0, evidence similarity with query (args only) -> 0.2, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5507713252569963)
What is naproxen?	Flavocoxid	-0.5618683059381058	Derivation(What is naproxen?,Flavocoxid,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Flavocoxid, r0.rel_exact: was as effective as, r0.id: reverb-282949515, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was as effective as, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.874, r0.arg1_exact: Flavocoxid),$x: ($x, is, naproxen))),AnswerState(Flavocoxid))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5618683059381058)
What is naproxen?	PAIN RELIEF	-0.5673754347429438	Derivation(What is naproxen?,PAIN RELIEF,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 025whv, r0.arg1: PAIN RELIEF, r0.rel_exact: was comparable to, r0.id: reverb-250124857, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was comparable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.897, r0.arg1_exact: PAIN RELIEF),$x: ($x, is, naproxen))),AnswerState(PAIN RELIEF))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = AAAA AAAA -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5673754347429438)
What is naproxen?	Anaprox	-0.5706378373328032	Derivation(What is naproxen?,Anaprox,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Anaprox, r0.rel_exact: is, r0.id: reverb-264265824, r0.namespace: reverb, r0.arg2_exact: naproxen sodium or naproxen, r0.arg2: naproxen sodium or naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.64, r0.arg1_exact: Anaprox),$x: ($x, is, naproxen))),AnswerState(Anaprox))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5706378373328032)
What is naproxen?	night	-0.7312658766562927	Derivation(What is naproxen?,night,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: night, r0.rel_exact: was comparable to, r0.id: reverb-239927147, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was comparable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.755, r0.arg1_exact: night),$x: ($x, is, naproxen))),AnswerState(night))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7312658766562927)
What is naproxen?	guidelines	-0.7312658766562927	Derivation(What is naproxen?,guidelines,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: guidelines, r0.rel_exact: are based on, r0.id: reverb-145816545, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: are based on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: guidelines),$x: ($x, is, naproxen))),AnswerState(guidelines))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7312658766562927)
What is naproxen?	Naproxen sodium	-0.7412694868066378	Derivation(What is naproxen?,Naproxen sodium,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Naproxen sodium, r0.rel_exact: is preferred over, r0.id: reverb-30682585, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is preferred over, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.85, r0.arg1_exact: Naproxen sodium),$x: ($x, is, naproxen))),AnswerState(Naproxen sodium))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7412694868066378)
What is naproxen?	UK,	-0.757071726668217	Derivation(What is naproxen?,UK,,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07ssc, r0.arg1: UK,, r0.rel_exact: are, r0.id: reverb-331650229, r0.namespace: reverb, r0.arg2_exact: Naproxen and Diclofenac., r0.arg2: Naproxen and Diclofenac., r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.756, r0.arg1_exact: UK,),$x: ($x, is, naproxen))),AnswerState(UK,))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AA, -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.757071726668217)
What is naproxen?	VIOXX	-0.8428013472979423	Derivation(What is naproxen?,VIOXX,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_fpz, r0.arg1: VIOXX, r0.rel_exact: was less than with, r0.id: reverb-328977595, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was less than with, r0.corpora_ss: List(cw), r0.num_extrs_i: 9, r0.conf_f: 0.699, r0.arg1_exact: VIOXX),$x: ($x, is, naproxen))),AnswerState(VIOXX))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8428013472979423)
What is naproxen?	Naproxene	-0.8837828070537153	Derivation(What is naproxen?,Naproxene,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Naproxene, r0.rel_exact: is an alternate name for, r0.id: reverb-134381589, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is an alternate name for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.976, r0.arg1_exact: Naproxene),$x: ($x, is, naproxen))),AnswerState(Naproxene))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8837828070537153)
What is naproxen?	Naproxeno	-0.8837828070537153	Derivation(What is naproxen?,Naproxeno,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Naproxeno, r0.rel_exact: is an alternate name for, r0.id: reverb-391305007, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is an alternate name for, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.976, r0.arg1_exact: Naproxeno),$x: ($x, is, naproxen))),AnswerState(Naproxeno))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8837828070537153)
What is naproxen?	Stevens-Johnson syndrome	-0.9494987584707755	Derivation(What is naproxen?,Stevens-Johnson syndrome,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 072zr, r0.arg1: Stevens-Johnson syndrome, r0.rel_exact: have been associated with, r0.id: reverb-211877125, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: have been associated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.829, r0.arg1_exact: Stevens-Johnson syndrome),$x: ($x, is, naproxen))),AnswerState(Stevens-Johnson syndrome))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, question prefix = 'what' and answer shape = Aaaaa-Aaaaa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9494987584707755)
What is naproxen?	NSAIDs	-0.9593644812898103	Derivation(What is naproxen?,NSAIDs,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 05jqy, r0.arg1: NSAIDs, r0.rel_exact: are, r0.id: reverb-259882499, r0.namespace: reverb, r0.arg2_exact: aspirin , ibuprofen , naproxen, r0.arg2: aspirin , ibuprofen , naproxen, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.619, r0.arg1_exact: NSAIDs),$x: ($x, is, naproxen))),AnswerState(NSAIDs))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AAAAa -> 1.0, evidence similarity with query (args only) -> 0.25, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.9593644812898103)
What is naproxen?	Naprelan	-0.964261432332618	Derivation(What is naproxen?,Naprelan,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Naprelan, r0.rel_exact: is an outstanding long-acting form of, r0.id: reverb-199518439, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: is an outstanding long-acting form of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: Naprelan),$x: ($x, is, naproxen))),AnswerState(Naprelan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.16666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.964261432332618)
What is naproxen?	Jean	-1.0605465250858772	Derivation(What is naproxen?,Jean,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Jean, r0.rel_exact: has been taking, r0.id: reverb-141107406, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: has been taking, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.935, r0.arg1_exact: Jean),$x: ($x, is, naproxen))),AnswerState(Jean))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0605465250858772)
What is naproxen?	drugs	-1.0637038154455394	Derivation(What is naproxen?,drugs,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: drugs, r0.rel_exact: are, r0.id: reverb-146120310, r0.namespace: reverb, r0.arg2_exact: aspirin , ibuprofen , and naproxen, r0.arg2: aspirin , ibuprofen , and naproxen, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.638, r0.arg1_exact: drugs),$x: ($x, is, naproxen))),AnswerState(drugs))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.2, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0637038154455394)
What is naproxen?	Vioxx	-1.0918371147438757	Derivation(What is naproxen?,Vioxx,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_fpz, r0.arg1: Vioxx, r0.rel_exact: was safer than, r0.id: reverb-110915656, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was safer than, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.672, r0.arg1_exact: Vioxx),$x: ($x, is, naproxen))),AnswerState(Vioxx))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	Patients	-1.0918371147438757	Derivation(What is naproxen?,Patients,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 028hfb, r0.arg1: Patients, r0.rel_exact: were allocated to, r0.id: reverb-224274286, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: were allocated to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.977, r0.arg1_exact: Patients),$x: ($x, is, naproxen))),AnswerState(Patients))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	Celebrex	-1.0918371147438757	Derivation(What is naproxen?,Celebrex,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_frj, r0.arg1: Celebrex, r0.rel_exact: is as effective as, r0.id: reverb-163539774, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is as effective as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.572, r0.arg1_exact: Celebrex),$x: ($x, is, naproxen))),AnswerState(Celebrex))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	Celecoxib	-1.0918371147438757	Derivation(What is naproxen?,Celecoxib,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_frj, r0.arg1: Celecoxib, r0.rel_exact: is as effective as, r0.id: reverb-92162559, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is as effective as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.773, r0.arg1_exact: Celecoxib),$x: ($x, is, naproxen))),AnswerState(Celecoxib))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	Prednisolone	-1.0918371147438757	Derivation(What is naproxen?,Prednisolone,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02yzx9, r0.arg1: Prednisolone, r0.rel_exact: Is as Effective as, r0.id: reverb-206217120, r0.namespace: reverb, r0.arg2_exact: Naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: Naproxen, r0.rel: Is as Effective as, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.919, r0.arg1_exact: Prednisolone),$x: ($x, is, naproxen))),AnswerState(Prednisolone))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	Valdecoxib	-1.0918371147438757	Derivation(What is naproxen?,Valdecoxib,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02_fsl, r0.arg1: Valdecoxib, r0.rel_exact: was comparable to, r0.id: reverb-233408364, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: was comparable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.897, r0.arg1_exact: Valdecoxib),$x: ($x, is, naproxen))),AnswerState(Valdecoxib))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.0918371147438757)
What is naproxen?	hemolytic anemia	-1.1729787104907128	Derivation(What is naproxen?,hemolytic anemia,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02skgx, r0.arg1: hemolytic anemia, r0.rel_exact: have been associated with, r0.id: reverb-129558390, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: have been associated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.879, r0.arg1_exact: hemolytic anemia),$x: ($x, is, naproxen))),AnswerState(hemolytic anemia))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1729787104907128)
What is naproxen?	The next step	-1.1982895804674112	Derivation(What is naproxen?,The next step,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: The next step, r0.rel_exact: is, r0.id: openie4-41475054, r0.namespace: openie4, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.82752204, r0.arg1_exact: The next step),$x: ($x, is, naproxen))),AnswerState(The next step))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),-1.1982895804674112)
What is naproxen?	iontophoresis	-1.27000421685676	Derivation(What is naproxen?,iontophoresis,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 032r3k, r0.arg1: iontophoresis, r0.rel_exact: are, r0.id: reverb-164383745, r0.namespace: reverb, r0.arg2_exact: Diclofenac and Naproxen, r0.arg2: Diclofenac and Naproxen, r0.rel: are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.739, r0.arg1_exact: iontophoresis),$x: ($x, is, naproxen))),AnswerState(iontophoresis))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.27000421685676)
What is naproxen?	cerebrovascular disease	-1.2936966484090664	Derivation(What is naproxen?,cerebrovascular disease,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01l2lr, r0.arg1: cerebrovascular disease, r0.rel_exact: should only be treated with, r0.id: reverb-139977189, r0.namespace: reverb, r0.arg2_exact: naproxen, r0.arg2_fbid_s: 02hx9d, r0.arg2: naproxen, r0.rel: should only be treated with, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.78, r0.arg1_exact: cerebrovascular disease),$x: ($x, is, naproxen))),AnswerState(cerebrovascular disease))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2936966484090664)
What is naproxen?	BEXTRA 20 mg	-1.4320899141973091	Derivation(What is naproxen?,BEXTRA 20 mg,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: BEXTRA 20 mg, r0.rel_exact: were comparable to, r0.id: reverb-306031842, r0.namespace: reverb, r0.arg2_exact: naproxen sodium, r0.arg2: naproxen sodium, r0.rel: were comparable to, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.739, r0.arg1_exact: BEXTRA 20 mg),$x: ($x, is, naproxen))),AnswerState(BEXTRA 20 mg))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = AAAA 11 aa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4320899141973091)
What is naproxen?	2,500 elderly volunteers	-1.4342822970459834	Derivation(What is naproxen?,2,500 elderly volunteers,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 2,500 elderly volunteers, r0.rel_exact: were given, r0.id: reverb-338583708, r0.namespace: reverb, r0.arg2_exact: Celebrex , naproxen, r0.arg2: Celebrex , naproxen, r0.rel: were given, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.606, r0.arg1_exact: 2,500 elderly volunteers),$x: ($x, is, naproxen))),AnswerState(2,500 elderly volunteers))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what' and answer shape = 1,111 aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4342822970459834)
What is naproxen?	22	-1.817822556900686	Derivation(What is naproxen?,22,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: 22, r0.rel_exact: have just been taken off, r0.id: reverb-330708112, r0.namespace: reverb, r0.arg2_exact: Naproxen due, r0.arg2: Naproxen due, r0.rel: have just been taken off, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.594, r0.arg1_exact: 22),$x: ($x, is, naproxen))),AnswerState(22))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = 11 -> 1.0, action type = ExecutionAction -> 1.0),-1.817822556900686)
What is naproxen?	the magical combination	-1.984636795590167	Derivation(What is naproxen?,the magical combination,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: the magical combination, r0.rel_exact: is, r0.id: reverb-79152673, r0.namespace: reverb, r0.arg2_exact: Purple Rub & Naproxen, r0.arg2: Purple Rub & Naproxen, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.636, r0.arg1_exact: the magical combination),$x: ($x, is, naproxen))),AnswerState(the magical combination))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.25, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.984636795590167)
What is naproxen?	Arthritis / Generic Naprelan	-2.2368761669863333	Derivation(What is naproxen?,Arthritis / Generic Naprelan,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Arthritis / Generic Naprelan, r0.rel_exact: is/are, r0.id: reverb-33204878, r0.namespace: reverb, r0.arg2_exact: Naproxen Tablets, r0.arg2: Naproxen Tablets, r0.rel: is/are, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.891, r0.arg1_exact: Arthritis / Generic Naprelan),$x: ($x, is, naproxen))),AnswerState(Arthritis / Generic Naprelan))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.0, question prefix = 'what' and answer shape = Aaaaa / Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2368761669863333)
What is naproxen?	Dort	-2.2743030528154367	Derivation(What is naproxen?,Dort,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: Dort, r0.rel_exact: are brought from, r0.id: reverb-282096020, r0.namespace: reverb, r0.arg2_exact: Naproxen interior, r0.arg2: Naproxen interior, r0.rel: are brought from, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.872, r0.arg1_exact: Dort),$x: ($x, is, naproxen))),AnswerState(Dort))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, question prefix = 'what' and answer shape = Aaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2743030528154367)
What is naproxen?	The NAPROXEN	-2.2839732241186885	Derivation(What is naproxen?,The NAPROXEN,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02hx9d, r0.arg1: The NAPROXEN, r0.rel_exact: is also now archived at, r0.id: reverb-332372945, r0.namespace: reverb, r0.arg2_exact: MIT NAPROXEN, r0.arg2: MIT NAPROXEN, r0.rel: is also now archived at, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.743, r0.arg1_exact: The NAPROXEN),$x: ($x, is, naproxen))),AnswerState(The NAPROXEN))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaa AAAA -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-2.2839732241186885)
What is naproxen?	dose	-3.6135848377345994	Derivation(What is naproxen?,dose,Vector(QaStep(What is naproxen?,QuestionStateImpl(What is naproxen?,Sentence(What is naproxen?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, naproxen),false)), QaStep(What is naproxen?,QueryState($x: ($x, is, naproxen),false),ExecutionAction(ExecTuple((r0.arg1: dose, r0.rel_exact: is 825 mg of, r0.id: openie4-62076692, r0.namespace: openie4, r0.arg2_exact: naproxen sodium, r0.arg2: naproxen sodium, r0.rel: is 825 mg of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.8, r0.arg1_exact: dose),$x: ($x, is, naproxen))),AnswerState(dose))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.5, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-3.6135848377345994)
What monarch signed the Magna Carta?	John X	3.6124216655309045	Derivation(What monarch signed the Magna Carta?,John X,Vector(QaStep(What monarch signed the Magna Carta?,QuestionStateImpl(What monarch signed the Magna Carta?,Sentence(What monarch signed the Magna Carta?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false),ExecutionAction(ExecTuple((r0.arg1: John X, r0.rel_exact: is a, r0.id: nell-874349, r1.rel: signed, r0.namespace: nell, r0.arg2_exact: monarch, r1.conf_f: 0.88, r1.arg2: the Magna Carta, r0.arg2: monarch, r0.rel: is a, r1.namespace: reverb, r1.arg1: John, r1.rel_exact: signed, r1.arg2_exact: the Magna Carta, r1.num_extrs_i: 15, r1.id: reverb-219984163, r0.arg1_exact: John X, r1.arg1_exact: John, r1.corpora_ss: List(cw)),$x: ($x, "is a", monarch) ($x, signed, the Magna Carta))),AnswerState(John X))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaa A -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.6124216655309045)
What monarch signed the Magna Carta?	John I	3.6124216655309045	Derivation(What monarch signed the Magna Carta?,John I,Vector(QaStep(What monarch signed the Magna Carta?,QuestionStateImpl(What monarch signed the Magna Carta?,Sentence(What monarch signed the Magna Carta?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false),ExecutionAction(ExecTuple((r0.arg1: John I, r0.rel_exact: is a, r0.id: nell-862293, r1.rel: signed, r0.namespace: nell, r0.arg2_exact: monarch, r1.conf_f: 0.88, r1.arg2: the Magna Carta, r0.arg2: monarch, r0.rel: is a, r1.namespace: reverb, r1.arg1: John, r1.rel_exact: signed, r1.arg2_exact: the Magna Carta, r1.num_extrs_i: 15, r1.id: reverb-219984163, r0.arg1_exact: John I, r1.arg1_exact: John, r1.corpora_ss: List(cw)),$x: ($x, "is a", monarch) ($x, signed, the Magna Carta))),AnswerState(John I))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaa A -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.6124216655309045)
What monarch signed the Magna Carta?	John V	3.6124216655309045	Derivation(What monarch signed the Magna Carta?,John V,Vector(QaStep(What monarch signed the Magna Carta?,QuestionStateImpl(What monarch signed the Magna Carta?,Sentence(What monarch signed the Magna Carta?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, "is a", monarch) ($x, signed, the Magna Carta),false),ExecutionAction(ExecTuple((r0.arg1: John V, r0.rel_exact: is a, r0.id: nell-873157, r1.rel: signed, r0.namespace: nell, r0.arg2_exact: monarch, r1.conf_f: 0.88, r1.arg2: the Magna Carta, r0.arg2: monarch, r0.rel: is a, r1.namespace: reverb, r1.arg1: John, r1.rel_exact: signed, r1.arg2_exact: the Magna Carta, r1.num_extrs_i: 15, r1.id: reverb-219984163, r0.arg1_exact: John V, r1.arg1_exact: John, r1.corpora_ss: List(cw)),$x: ($x, "is a", monarch) ($x, signed, the Magna Carta))),AnswerState(John V))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = Aaaa A -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.6124216655309045)
What monarch signed the Magna Carta?	England	-2.4874625419839336	Derivation(What monarch signed the Magna Carta?,England,Vector(QaStep(What monarch signed the Magna Carta?,QuestionStateImpl(What monarch signed the Magna Carta?,Sentence(What monarch signed the Magna Carta?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", monarch) ($x, signed, the Magna Carta),false)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, "type", monarch) ($x, signed, the Magna Carta),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, monarch) ($x, signed, the Magna Carta),true)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, be a, monarch) ($x, signed, the Magna Carta),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02jx1, r0.arg1: England, r0.rel_exact: is a title held by, r1.arg1_fbid_s: 02jx1, r0.id: reverb-329844196, r1.rel: signed, r0.namespace: reverb, r0.arg2_exact: the British monarchs, r1.conf_f: 0.863, r1.arg2: the Magna Carta, r0.arg2: the British monarchs, r0.rel: is a title held by, r1.namespace: reverb, r1.arg1: England, r0.corpora_ss: List(cw), r1.rel_exact: signed, r0.num_extrs_i: 3, r1.arg2_exact: the Magna Carta, r1.num_extrs_i: 38, r0.conf_f: 0.834, r1.id: reverb-295307397, r0.arg1_exact: England, r1.arg1_exact: England, r1.corpora_ss: List(cw)),$x: ($x, be a, monarch) ($x, signed, the Magna Carta))),AnswerState(England))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.8, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.4874625419839336)
What monarch signed the Magna Carta?	years	-2.8318013163228635	Derivation(What monarch signed the Magna Carta?,years,Vector(QaStep(What monarch signed the Magna Carta?,QuestionStateImpl(What monarch signed the Magna Carta?,Sentence(What monarch signed the Magna Carta?),false),RegexQuestionPattern(List(type, rel, ent),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($x, $rel, $ent))),QueryState($x: ($x, "type", monarch) ($x, signed, the Magna Carta),false)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, "type", monarch) ($x, signed, the Magna Carta),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, monarch) ($x, signed, the Magna Carta),true)), QaStep(What monarch signed the Magna Carta?,QueryState($x: ($x, be an, monarch) ($x, signed, the Magna Carta),true),ExecutionAction(ExecTuple((r0.arg1: years, r0.rel_exact: was merely an extension of, r0.id: reverb-135757564, r1.rel: saw the signing of, r0.namespace: reverb, r0.arg2_exact: my Monarch programming, r1.conf_f: 0.917, r1.arg2: the Magna Carta, r0.arg2: my Monarch programming, r0.rel: was merely an extension of, r1.namespace: reverb, r1.arg1: This year, r0.corpora_ss: List(cw), r1.rel_exact: saw the signing of, r0.num_extrs_i: 2, r1.arg2_exact: the Magna Carta, r1.num_extrs_i: 2, r0.conf_f: 0.932, r1.id: reverb-14231590, r0.arg1_exact: years, r1.arg1_exact: This year, r1.corpora_ss: List(cw)),$x: ($x, be an, monarch) ($x, signed, the Magna Carta))),AnswerState(years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.7142857142857143, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.4444444444444444, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.8318013163228635)
Who supervised the transplant?	Dr. Good	1.3358716196433977	Derivation(Who supervised the transplant?,Dr. Good,Vector(QaStep(Who supervised the transplant?,QuestionStateImpl(Who supervised the transplant?,Sentence(Who supervised the transplant?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, supervised, the transplant),false)), QaStep(Who supervised the transplant?,QueryState($x: ($x, supervised, the transplant),false),ExecutionAction(ExecTuple((r0.arg1: Dr. Good, r0.rel_exact: supervised, r0.id: reverb-102244654, r0.namespace: reverb, r0.arg2_exact: the first bone marrow transplant, r0.arg2: the first bone marrow transplant, r0.rel: supervised, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.821, r0.arg1_exact: Dr. Good),$x: ($x, supervised, the transplant))),AnswerState(Dr. Good))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'who' and answer shape = Aa. Aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.3358716196433977)
Who supervised the transplant?	a cadaver donor	0.3555603180511966	Derivation(Who supervised the transplant?,a cadaver donor,Vector(QaStep(Who supervised the transplant?,QuestionStateImpl(Who supervised the transplant?,Sentence(Who supervised the transplant?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, supervised, the transplant),false)), QaStep(Who supervised the transplant?,QueryState($x: ($x, supervised, the transplant),false),RelSynRule(supervise,will refer,false,2871.0,230.0,7.0,0.6420442163944244),QueryState($x: ($x, will refer, the transplant),true)), QaStep(Who supervised the transplant?,QueryState($x: ($x, will refer, the transplant),true),ExecutionAction(ExecTuple((r0.arg1: a cadaver donor, r0.rel_exact: will be referred to, r0.id: reverb-379287022, r0.namespace: reverb, r0.arg2_exact: the transplant center, r0.arg2: the transplant center, r0.rel: will be referred to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.795, r0.arg1_exact: a cadaver donor),$x: ($x, will refer, the transplant))),AnswerState(a cadaver donor))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6420442163944244, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'who' and answer shape = a aaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),0.3555603180511966)
Who supervised the transplant?	Coach Woody Hayes	0.10359368167755223	Derivation(Who supervised the transplant?,Coach Woody Hayes,Vector(QaStep(Who supervised the transplant?,QuestionStateImpl(Who supervised the transplant?,Sentence(Who supervised the transplant?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, supervised, the transplant),false)), QaStep(Who supervised the transplant?,QueryState($x: ($x, supervised, the transplant),false),ExecutionAction(ExecTuple((r0.arg1: Coach Woody Hayes, r0.rel_exact: also supervised, r0.id: reverb-93762996, r0.namespace: reverb, r0.arg2_exact: the first heart transplants, r0.arg2: the first heart transplants, r0.rel: also supervised, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.712, r0.arg1_exact: Coach Woody Hayes),$x: ($x, supervised, the transplant))),AnswerState(Coach Woody Hayes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'who' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.10359368167755223)
Who painted the ceiling of the Sistine Chapel?	Michael Angelo	3.4574310544388354	Derivation(Who painted the ceiling of the Sistine Chapel?,Michael Angelo,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 058w5, r0.arg1: Michael Angelo, r0.rel_exact: painted the Ceiling of, r0.id: reverb-302094535, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel, r0.rel: painted the Ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.741, r0.arg1_exact: Michael Angelo),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(Michael Angelo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.4574310544388354)
Who painted the ceiling of the Sistine Chapel?	the famed artist	3.0501349597287852	Derivation(Who painted the ceiling of the Sistine Chapel?,the famed artist,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1: the famed artist, r0.rel_exact: painted the ceiling of, r0.id: reverb-306414432, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel, r0.rel: painted the ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.861, r0.arg1_exact: the famed artist),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(the famed artist))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'who' and answer shape = aaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.0501349597287852)
Who painted the ceiling of the Sistine Chapel?	the artist	2.465302249437528	Derivation(Who painted the ceiling of the Sistine Chapel?,the artist,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1: the artist, r0.rel_exact: painted the ceiling of, r0.id: reverb-221389911, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel, r0.rel: painted the ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.785, r0.arg1_exact: the artist),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(the artist))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'who' and answer shape = aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.465302249437528)
Who painted the ceiling of the Sistine Chapel?	Michaelangelo	1.3411609220278378	Derivation(Who painted the ceiling of the Sistine Chapel?,Michaelangelo,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 058w5, r0.arg1: Michaelangelo, r0.rel_exact: paint the ceiling of, r0.id: reverb-132677483, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel, r0.rel: paint the ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.716, r0.arg1_exact: Michaelangelo),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(Michaelangelo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3411609220278378)
Who painted the ceiling of the Sistine Chapel?	Michelangelo	1.3411609220278378	Derivation(Who painted the ceiling of the Sistine Chapel?,Michelangelo,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 058w5, r0.arg1: Michelangelo, r0.rel_exact: painted the ceiling of, r0.id: reverb-289256280, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel, r0.rel: painted the ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 49, r0.conf_f: 0.967, r0.arg1_exact: Michelangelo),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(Michelangelo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'who' and answer shape = Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3411609220278378)
Who painted the ceiling of the Sistine Chapel?	?Michelangelo	1.306409623193456	Derivation(Who painted the ceiling of the Sistine Chapel?,?Michelangelo,Vector(QaStep(Who painted the ceiling of the Sistine Chapel?,QuestionStateImpl(Who painted the ceiling of the Sistine Chapel?,Sentence(Who painted the ceiling of the Sistine Chapel?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false)), QaStep(Who painted the ceiling of the Sistine Chapel?,QueryState($x: ($x, painted the ceiling of, the Sistine Chapel),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 058w5, r0.arg1: ?Michelangelo, r0.rel_exact: painted the ceiling of, r0.id: reverb-355712545, r0.namespace: reverb, r0.arg2_exact: the Sistine Chapel?, r0.arg2_fbid_s: 0kbls, r0.arg2: the Sistine Chapel?, r0.rel: painted the ceiling of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.815, r0.arg1_exact: ?Michelangelo),$x: ($x, painted the ceiling of, the Sistine Chapel))),AnswerState(?Michelangelo))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'who' and answer shape = ?Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.5, query similarity with question -> 0.625, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.306409623193456)
What is an earthquake?	the 11th	2.5445013178413944	Derivation(What is an earthquake?,the 11th,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the 11th, r0.rel_exact: was, r0.id: reverb-380870166, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.715, r0.arg1_exact: the 11th),$x: ($x, is, an earthquake))),AnswerState(the 11th))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa 11aa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.5445013178413944)
What is an earthquake?	the most common triggering event	2.5053253637718225	Derivation(What is an earthquake?,the most common triggering event,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the most common triggering event, r0.rel_exact: is, r0.id: reverb-344727866, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: the most common triggering event),$x: ($x, is, an earthquake))),AnswerState(the most common triggering event))),SparseVector(question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.5053253637718225)
What is an earthquake?	The most likely explanation	2.3652864673132648	Derivation(What is an earthquake?,The most likely explanation,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The most likely explanation, r0.rel_exact: is, r0.id: reverb-67328713, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.903, r0.arg1_exact: The most likely explanation),$x: ($x, is, an earthquake))),AnswerState(The most likely explanation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3652864673132648)
What is an earthquake?	The only logical explanation	2.3652864673132648	Derivation(What is an earthquake?,The only logical explanation,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The only logical explanation, r0.rel_exact: was, r0.id: reverb-247393396, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.928, r0.arg1_exact: The only logical explanation),$x: ($x, is, an earthquake))),AnswerState(The only logical explanation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.3652864673132648)
What is an earthquake?	More likely	1.9355038915292215	Derivation(What is an earthquake?,More likely,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: More likely, r0.rel_exact: was, r0.id: reverb-17908597, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.833, r0.arg1_exact: More likely),$x: ($x, is, an earthquake))),AnswerState(More likely))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9355038915292215)
What is an earthquake?	Pastor Chuck Baldwin	1.85925984536588	Derivation(What is an earthquake?,Pastor Chuck Baldwin,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Pastor Chuck Baldwin, r0.rel_exact: was, r0.id: reverb-77185870, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.66, r0.arg1_exact: Pastor Chuck Baldwin),$x: ($x, is, an earthquake))),AnswerState(Pastor Chuck Baldwin))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa Aaaaa -> 1.0, action type = ExecutionAction -> 1.0),1.85925984536588)
What is an earthquake?	Pleasant Hill	1.631552523748067	Derivation(What is an earthquake?,Pleasant Hill,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Pleasant Hill, r0.rel_exact: is, r0.id: reverb-96705205, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.659, r0.arg1_exact: Pleasant Hill),$x: ($x, is, an earthquake))),AnswerState(Pleasant Hill))),SparseVector(question prefix = 'what' and answer shape = Aaaaa Aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.631552523748067)
What is an earthquake?	an earquake	1.6152486189628712	Derivation(What is an earthquake?,an earquake,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: an earquake, r0.rel_exact: is, r0.id: reverb-376771121, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.662, r0.arg1_exact: an earquake),$x: ($x, is, an earthquake))),AnswerState(an earquake))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.6152486189628712)
What is an earthquake?	the next big one	1.5630761236502433	Derivation(What is an earthquake?,the next big one,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the next big one, r0.rel_exact: is, r0.id: reverb-163230153, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.677, r0.arg1_exact: the next big one),$x: ($x, is, an earthquake))),AnswerState(the next big one))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aaa aaaa aaa aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	bad	1.5630761236502433	Derivation(What is an earthquake?,bad,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: bad, r0.rel_exact: is, r0.id: reverb-340937330, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.679, r0.arg1_exact: bad),$x: ($x, is, an earthquake))),AnswerState(bad))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	the most dreadful and destructive	1.5630761236502433	Derivation(What is an earthquake?,the most dreadful and destructive,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the most dreadful and destructive, r0.rel_exact: is, r0.id: reverb-150579304, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.78, r0.arg1_exact: the most dreadful and destructive),$x: ($x, is, an earthquake))),AnswerState(the most dreadful and destructive))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa aaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	A foreshock	1.5630761236502433	Derivation(What is an earthquake?,A foreshock,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: A foreshock, r0.rel_exact: is, r0.id: reverb-277685982, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.7, r0.arg1_exact: A foreshock),$x: ($x, is, an earthquake))),AnswerState(A foreshock))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	Southwest BC !?	1.5630761236502433	Derivation(What is an earthquake?,Southwest BC !?,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Southwest BC !?, r0.rel_exact: is, r0.id: reverb-67587774, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.71, r0.arg1_exact: Southwest BC !?),$x: ($x, is, an earthquake))),AnswerState(Southwest BC !?))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what' and answer shape = Aaaaa AA !? -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	The coup de gr?ce	1.5630761236502433	Derivation(What is an earthquake?,The coup de gr?ce,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The coup de gr?ce, r0.rel_exact: was, r0.id: reverb-380204183, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.746, r0.arg1_exact: The coup de gr?ce),$x: ($x, is, an earthquake))),AnswerState(The coup de gr?ce))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aa aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	n?t	1.5630761236502433	Derivation(What is an earthquake?,n?t,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: n?t, r0.rel_exact: was, r0.id: reverb-294405526, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.742, r0.arg1_exact: n?t),$x: ($x, is, an earthquake))),AnswerState(n?t))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = a?a -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	rel=shortlink	1.5630761236502433	Derivation(What is an earthquake?,rel=shortlink,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: rel=shortlink, r0.rel_exact: is, r0.id: reverb-334286790, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.742, r0.arg1_exact: rel=shortlink),$x: ($x, is, an earthquake))),AnswerState(rel=shortlink))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaa=aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	4 months	1.5630761236502433	Derivation(What is an earthquake?,4 months,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: 4 months, r0.rel_exact: is, r0.id: reverb-382570437, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.742, r0.arg1_exact: 4 months),$x: ($x, is, an earthquake))),AnswerState(4 months))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = 1 aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	the alleged impending ?disaster ?	1.5630761236502433	Derivation(What is an earthquake?,the alleged impending ?disaster ?,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the alleged impending ?disaster ?, r0.rel_exact: is, r0.id: reverb-100910253, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.662, r0.arg1_exact: the alleged impending ?disaster ?),$x: ($x, is, an earthquake))),AnswerState(the alleged impending ?disaster ?))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa ?aaaa ? -> 1.0),1.5630761236502433)
What is an earthquake?	75 published 3 months	1.5630761236502433	Derivation(What is an earthquake?,75 published 3 months,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: 75 published 3 months, r0.rel_exact: is, r0.id: reverb-141325906, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.831, r0.arg1_exact: 75 published 3 months),$x: ($x, is, an earthquake))),AnswerState(75 published 3 months))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = 11 aaaa 1 aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	A seaquake	1.5630761236502433	Derivation(What is an earthquake?,A seaquake,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: A seaquake, r0.rel_exact: is, r0.id: reverb-291413720, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.66, r0.arg1_exact: A seaquake),$x: ($x, is, an earthquake))),AnswerState(A seaquake))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	each red dot	1.5630761236502433	Derivation(What is an earthquake?,each red dot,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: each red dot, r0.rel_exact: is, r0.id: reverb-91483375, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.78, r0.arg1_exact: each red dot),$x: ($x, is, an earthquake))),AnswerState(each red dot))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaa aaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	A temblor	1.5630761236502433	Derivation(What is an earthquake?,A temblor,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: A temblor, r0.rel_exact: is, r0.id: reverb-190526320, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.918, r0.arg1_exact: A temblor),$x: ($x, is, an earthquake))),AnswerState(A temblor))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = A aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	The American occupation	1.5630761236502433	Derivation(What is an earthquake?,The American occupation,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The American occupation, r0.rel_exact: was, r0.id: reverb-215563241, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.928, r0.arg1_exact: The American occupation),$x: ($x, is, an earthquake))),AnswerState(The American occupation))),SparseVector(question prefix = 'what' and answer shape = Aaa Aaaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	?The unexpected divorce	1.5630761236502433	Derivation(What is an earthquake?,?The unexpected divorce,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: ?The unexpected divorce, r0.rel_exact: was, r0.id: reverb-89715331, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.793, r0.arg1_exact: ?The unexpected divorce),$x: ($x, is, an earthquake))),AnswerState(?The unexpected divorce))),SparseVector(question prefix = 'what' and answer shape = ?Aaa aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	6:15 pm	1.5630761236502433	Derivation(What is an earthquake?,6:15 pm,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: 6:15 pm, r0.rel_exact: was, r0.id: reverb-166357473, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.708, r0.arg1_exact: 6:15 pm),$x: ($x, is, an earthquake))),AnswerState(6:15 pm))),SparseVector(question prefix = 'what' and answer shape = 1:11 aa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	Each mountain building event	1.5630761236502433	Derivation(What is an earthquake?,Each mountain building event,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Each mountain building event, r0.rel_exact: is, r0.id: reverb-319071339, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.831, r0.arg1_exact: Each mountain building event),$x: ($x, is, an earthquake))),AnswerState(Each mountain building event))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = Aaaa aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	me--this	1.5630761236502433	Derivation(What is an earthquake?,me--this,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: me--this, r0.rel_exact: was, r0.id: reverb-12120326, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: me--this),$x: ($x, is, an earthquake))),AnswerState(me--this))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = aa--aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	The Nox Golgoth?s voice	1.5630761236502433	Derivation(What is an earthquake?,The Nox Golgoth?s voice,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The Nox Golgoth?s voice, r0.rel_exact: was, r0.id: reverb-207626478, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.934, r0.arg1_exact: The Nox Golgoth?s voice),$x: ($x, is, an earthquake))),AnswerState(The Nox Golgoth?s voice))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaa Aaa Aaaaa?a aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	Sooo? that	1.5630761236502433	Derivation(What is an earthquake?,Sooo? that,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Sooo? that, r0.rel_exact: was, r0.id: reverb-273140043, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.52, r0.arg1_exact: Sooo? that),$x: ($x, is, an earthquake))),AnswerState(Sooo? that))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, question prefix = 'what' and answer shape = Aaaa? aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	An example	1.5630761236502433	Derivation(What is an earthquake?,An example,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: An example, r0.rel_exact: is, r0.id: reverb-82917792, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.8, r0.arg1_exact: An example),$x: ($x, is, an earthquake))),AnswerState(An example))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, question prefix = 'what' and answer shape = Aa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5630761236502433)
What is an earthquake?	last night	1.3395961716303064	Derivation(What is an earthquake?,last night,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: last night, r0.rel_exact: was, r0.id: reverb-64382198, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.632, r0.arg1_exact: last night),$x: ($x, is, an earthquake))),AnswerState(last night))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3395961716303064)
What is an earthquake?	each experience	1.3395961716303064	Derivation(What is an earthquake?,each experience,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: each experience, r0.rel_exact: is, r0.id: reverb-148866942, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.638, r0.arg1_exact: each experience),$x: ($x, is, an earthquake))),AnswerState(each experience))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.3395961716303064)
What is an earthquake?	Dawn Perkins	1.2881457063867374	Derivation(What is an earthquake?,Dawn Perkins,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Dawn Perkins, r0.rel_exact: was, r0.id: reverb-275391494, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.501, r0.arg1_exact: Dawn Perkins),$x: ($x, is, an earthquake))),AnswerState(Dawn Perkins))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2881457063867374)
What is an earthquake?	Second	1.2195412041798874	Derivation(What is an earthquake?,Second,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Second, r0.rel_exact: is, r0.id: reverb-228724040, r0.namespace: reverb, r0.arg2_exact: an Earthquake, r0.arg2: an Earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.911, r0.arg1_exact: Second),$x: ($x, is, an earthquake))),AnswerState(Second))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2195412041798874)
What is an earthquake?	Concepcion	1.2195412041798874	Derivation(What is an earthquake?,Concepcion,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Concepcion, r0.rel_exact: was, r0.id: reverb-212522667, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.939, r0.arg1_exact: Concepcion),$x: ($x, is, an earthquake))),AnswerState(Concepcion))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2195412041798874)
What is an earthquake?	a rainbow	1.1540344438822248	Derivation(What is an earthquake?,a rainbow,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: a rainbow, r0.rel_exact: is, r0.id: reverb-160355566, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.583, r0.arg1_exact: a rainbow),$x: ($x, is, an earthquake))),AnswerState(a rainbow))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.1540344438822248)
What is an earthquake?	a mouse	1.1540344438822248	Derivation(What is an earthquake?,a mouse,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: a mouse, r0.rel_exact: is, r0.id: reverb-167742049, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 7, r0.conf_f: 0.547, r0.arg1_exact: a mouse),$x: ($x, is, an earthquake))),AnswerState(a mouse))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, question prefix = 'what' and answer shape = a aaaa -> 1.0, action type = ExecutionAction -> 1.0),1.1540344438822248)
What is an earthquake?	GRAPEFRUIT	1.1398047260173063	Derivation(What is an earthquake?,GRAPEFRUIT,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0hqkz, r0.arg1: GRAPEFRUIT, r0.rel_exact: is, r0.id: reverb-246676149, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.657, r0.arg1_exact: GRAPEFRUIT),$x: ($x, is, an earthquake))),AnswerState(GRAPEFRUIT))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'what' and answer shape = AAAA -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1398047260173063)
What is an earthquake?	Clean Elections	1.1245722206894235	Derivation(What is an earthquake?,Clean Elections,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04kbbg, r0.arg1: Clean Elections, r0.rel_exact: was, r0.id: reverb-248988276, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.66, r0.arg1_exact: Clean Elections),$x: ($x, is, an earthquake))),AnswerState(Clean Elections))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1245722206894235)
What is an earthquake?	Northern California	1.1245722206894235	Derivation(What is an earthquake?,Northern California,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 012x2r, r0.arg1: Northern California, r0.rel_exact: is, r0.id: reverb-49525785, r0.namespace: reverb, r0.arg2_exact: an Earthquake, r0.arg2: an Earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.696, r0.arg1_exact: Northern California),$x: ($x, is, an earthquake))),AnswerState(Northern California))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1245722206894235)
What is an earthquake?	a small business	1.065352847497033	Derivation(What is an earthquake?,a small business,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: a small business, r0.rel_exact: is, r0.id: reverb-219671529, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.659, r0.arg1_exact: a small business),$x: ($x, is, an earthquake))),AnswerState(a small business))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.065352847497033)
What is an earthquake?	a seabed slide	1.065352847497033	Derivation(What is an earthquake?,a seabed slide,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: a seabed slide, r0.rel_exact: is, r0.id: reverb-316781831, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.677, r0.arg1_exact: a seabed slide),$x: ($x, is, an earthquake))),AnswerState(a seabed slide))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, question prefix = 'what' and answer shape = a aaaa aaaa -> 1.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.065352847497033)
What is an earthquake?	likely	1.0501436334617	Derivation(What is an earthquake?,likely,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: likely, r0.rel_exact: is, r0.id: reverb-177660188, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.763, r0.arg1_exact: likely),$x: ($x, is, an earthquake))),AnswerState(likely))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0501436334617)
What is an earthquake?	strong	1.0501436334617	Derivation(What is an earthquake?,strong,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: strong, r0.rel_exact: is, r0.id: reverb-330943796, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.742, r0.arg1_exact: strong),$x: ($x, is, an earthquake))),AnswerState(strong))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0501436334617)
What is an earthquake?	private	1.0501436334617	Derivation(What is an earthquake?,private,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: private, r0.rel_exact: is, r0.id: reverb-39937526, r0.namespace: reverb, r0.arg2_exact: an Earthquake, r0.arg2: an Earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.742, r0.arg1_exact: private),$x: ($x, is, an earthquake))),AnswerState(private))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0501436334617)
What is an earthquake?	the most likely event here	1.0379594936203327	Derivation(What is an earthquake?,the most likely event here,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the most likely event here, r0.rel_exact: is, r0.id: openie4-21034827, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.94289446, r0.arg1_exact: the most likely event here),$x: ($x, is, an earthquake))),AnswerState(the most likely event here))),SparseVector(question prefix = 'what' and answer shape = aaa aaaa aaaa aaaa aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.0379594936203327)
What is an earthquake?	any time	0.9253605336235748	Derivation(What is an earthquake?,any time,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: any time, r0.rel_exact: be, r0.id: reverb-287820036, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: be, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.85, r0.arg1_exact: any time),$x: ($x, is, an earthquake))),AnswerState(any time))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the explanation	0.9253605336235748	Derivation(What is an earthquake?,the explanation,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the explanation, r0.rel_exact: was, r0.id: reverb-185140133, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.583, r0.arg1_exact: the explanation),$x: ($x, is, an earthquake))),AnswerState(the explanation))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the landslide	0.9253605336235748	Derivation(What is an earthquake?,the landslide,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the landslide, r0.rel_exact: was, r0.id: reverb-48893650, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.793, r0.arg1_exact: the landslide),$x: ($x, is, an earthquake))),AnswerState(the landslide))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the race	0.9253605336235748	Derivation(What is an earthquake?,the race,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the race, r0.rel_exact: is, r0.id: reverb-320581074, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.63, r0.arg1_exact: the race),$x: ($x, is, an earthquake))),AnswerState(the race))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the rocking	0.9253605336235748	Derivation(What is an earthquake?,the rocking,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the rocking, r0.rel_exact: was, r0.id: reverb-112255921, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.744, r0.arg1_exact: the rocking),$x: ($x, is, an earthquake))),AnswerState(the rocking))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the figure	0.9253605336235748	Derivation(What is an earthquake?,the figure,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the figure, r0.rel_exact: is, r0.id: reverb-336424687, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.541, r0.arg1_exact: the figure),$x: ($x, is, an earthquake))),AnswerState(the figure))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	the topics	0.9253605336235748	Derivation(What is an earthquake?,the topics,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the topics, r0.rel_exact: is, r0.id: reverb-228561096, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.713, r0.arg1_exact: the topics),$x: ($x, is, an earthquake))),AnswerState(the topics))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9253605336235748)
What is an earthquake?	The prologue	0.8727222124599423	Derivation(What is an earthquake?,The prologue,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The prologue, r0.rel_exact: was, r0.id: reverb-14600343, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.727, r0.arg1_exact: The prologue),$x: ($x, is, an earthquake))),AnswerState(The prologue))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8727222124599423)
What is an earthquake?	The cause	0.8727222124599423	Derivation(What is an earthquake?,The cause,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The cause, r0.rel_exact: was, r0.id: reverb-346641387, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 12, r0.conf_f: 0.892, r0.arg1_exact: The cause),$x: ($x, is, an earthquake))),AnswerState(The cause))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8727222124599423)
What is an earthquake?	three major sections	0.8652922901364029	Derivation(What is an earthquake?,three major sections,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: three major sections, r0.rel_exact: is, r0.id: reverb-95834862, r0.namespace: reverb, r0.arg2_exact: an Earthquake, r0.arg2: an Earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.736, r0.arg1_exact: three major sections),$x: ($x, is, an earthquake))),AnswerState(three major sections))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.8652922901364029)
What is an earthquake?	Earthquakes	0.6895723953741173	Derivation(What is an earthquake?,Earthquakes,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02r97, r0.arg1: Earthquakes, r0.rel_exact: is, r0.id: reverb-12979645, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.742, r0.arg1_exact: Earthquakes),$x: ($x, is, an earthquake))),AnswerState(Earthquakes))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6895723953741173)
What is an earthquake?	Easter	0.6895723953741173	Derivation(What is an earthquake?,Easter,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02j_4, r0.arg1: Easter, r0.rel_exact: was, r0.id: reverb-288019881, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.818, r0.arg1_exact: Easter),$x: ($x, is, an earthquake))),AnswerState(Easter))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6895723953741173)
What is an earthquake?	Armenia	0.6895723953741173	Derivation(What is an earthquake?,Armenia,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0jgx, r0.arg1: Armenia, r0.rel_exact: is, r0.id: reverb-12511165, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.835, r0.arg1_exact: Armenia),$x: ($x, is, an earthquake))),AnswerState(Armenia))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6895723953741173)
What is an earthquake?	Reuters	0.6895723953741173	Derivation(What is an earthquake?,Reuters,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0ps53, r0.arg1: Reuters, r0.rel_exact: is, r0.id: reverb-315439510, r0.namespace: reverb, r0.arg2_exact: an Earthquake, r0.arg2: an Earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.748, r0.arg1_exact: Reuters),$x: ($x, is, an earthquake))),AnswerState(Reuters))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.6895723953741173)
What is an earthquake?	mutation	0.5201748246559299	Derivation(What is an earthquake?,mutation,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04zls, r0.arg1: mutation, r0.rel_exact: is, r0.id: reverb-169041005, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: mutation),$x: ($x, is, an earthquake))),AnswerState(mutation))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.5201748246559299)
What is an earthquake?	The social change	0.44091329422402414	Derivation(What is an earthquake?,The social change,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The social change, r0.rel_exact: was, r0.id: reverb-192351202, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.928, r0.arg1_exact: The social change),$x: ($x, is, an earthquake))),AnswerState(The social change))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.44091329422402414)
What is an earthquake?	The happiest event	0.44091329422402414	Derivation(What is an earthquake?,The happiest event,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: The happiest event, r0.rel_exact: is, r0.id: reverb-340196987, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.8, r0.arg1_exact: The happiest event),$x: ($x, is, an earthquake))),AnswerState(The happiest event))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa -> 1.0),0.44091329422402414)
What is an earthquake?	the wind	0.3953917248178047	Derivation(What is an earthquake?,the wind,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01kphkl, r0.arg1: the wind, r0.rel_exact: was, r0.id: reverb-247385121, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 8, r0.conf_f: 0.793, r0.arg1_exact: the wind),$x: ($x, is, an earthquake))),AnswerState(the wind))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3953917248178047)
What is an earthquake?	the fall	0.3953917248178047	Derivation(What is an earthquake?,the fall,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 07rnh, r0.arg1: the fall, r0.rel_exact: is, r0.id: reverb-122458314, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.599, r0.arg1_exact: the fall),$x: ($x, is, an earthquake))),AnswerState(the fall))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3953917248178047)
What is an earthquake?	The most common cause	0.3679517883560035	Derivation(What is an earthquake?,The most common cause,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 033crg, r0.arg1: The most common cause, r0.rel_exact: is, r0.id: openie4-57179551, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9374631, r0.arg1_exact: The most common cause),$x: ($x, is, an earthquake))),AnswerState(The most common cause))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaa aaaa aaaa aaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.3679517883560035)
What is an earthquake?	God	0.22117285654170993	Derivation(What is an earthquake?,God,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0d05l6, r0.arg1: God, r0.rel_exact: is, r0.id: reverb-118091208, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.748, r0.arg1_exact: God),$x: ($x, is, an earthquake))),AnswerState(God))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.22117285654170993)
What is an earthquake?	the biggest threat	0.007835000544116566	Derivation(What is an earthquake?,the biggest threat,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the biggest threat, r0.rel_exact: was, r0.id: reverb-7406881, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.657, r0.arg1_exact: the biggest threat),$x: ($x, is, an earthquake))),AnswerState(the biggest threat))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is an earthquake?	the stress release	0.007835000544116566	Derivation(What is an earthquake?,the stress release,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the stress release, r0.rel_exact: is, r0.id: reverb-175440403, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.78, r0.arg1_exact: the stress release),$x: ($x, is, an earthquake))),AnswerState(the stress release))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is an earthquake?	one working hypothesis	0.007835000544116566	Derivation(What is an earthquake?,one working hypothesis,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: one working hypothesis, r0.rel_exact: is, r0.id: reverb-205561963, r0.namespace: reverb, r0.arg2_exact: an earthquake, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.644, r0.arg1_exact: one working hypothesis),$x: ($x, is, an earthquake))),AnswerState(one working hypothesis))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.007835000544116566)
What is an earthquake?	Phil Hammer	-0.17922016376475347	Derivation(What is an earthquake?,Phil Hammer,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: Phil Hammer, r0.rel_exact: is, r0.id: openie4-8687566, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9340464, r0.arg1_exact: Phil Hammer),$x: ($x, is, an earthquake))),AnswerState(Phil Hammer))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.17922016376475347)
What is an earthquake?	gonna	-0.41722223668979086	Derivation(What is an earthquake?,gonna,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: gonna, r0.rel_exact: be, r0.id: openie4-44102721, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: be, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9181538, r0.arg1_exact: gonna),$x: ($x, is, an earthquake))),AnswerState(gonna))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.41722223668979086)
What is an earthquake?	Psalm 46 :8 Of all the judgments	-0.43425855530701774	Derivation(What is an earthquake?,Psalm 46 :8 Of all the judgments,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 015h9n, r0.arg1: Psalm 46 :8 Of all the judgments, r0.rel_exact: is, r0.id: openie4-10172372, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9442371, r0.arg1_exact: Psalm 46 :8 Of all the judgments),$x: ($x, is, an earthquake))),AnswerState(Psalm 46 :8 Of all the judgments))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, question prefix = 'what' and answer shape = Aaaaa 11 :1 Aa aaa aaa aaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.43425855530701774)
What is an earthquake?	the disaster	-0.542005336527916	Derivation(What is an earthquake?,the disaster,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the disaster, r0.rel_exact: is, r0.id: openie4-35144317, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.9251283, r0.arg1_exact: the disaster),$x: ($x, is, an earthquake))),AnswerState(the disaster))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.542005336527916)
What is an earthquake?	the cause	-0.542005336527916	Derivation(What is an earthquake?,the cause,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the cause, r0.rel_exact: was, r0.id: openie4-680259, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 6, r0.conf_f: 0.90820295, r0.arg1_exact: the cause),$x: ($x, is, an earthquake))),AnswerState(the cause))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.542005336527916)
What is an earthquake?	the event	-0.542005336527916	Derivation(What is an earthquake?,the event,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1: the event, r0.rel_exact: was, r0.id: openie4-60732172, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.9251283, r0.arg1_exact: the event),$x: ($x, is, an earthquake))),AnswerState(the event))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.542005336527916)
What is an earthquake?	what they felt	-1.1320423888208588	Derivation(What is an earthquake?,what they felt,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0158y_, r0.arg1: what they felt, r0.rel_exact: was, r0.id: openie4-47704031, r0.namespace: openie4, r0.arg2_exact: an earthquake, r0.arg2_fbid_s: 02r97, r0.arg2: an earthquake, r0.rel: was, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.7204007, r0.arg1_exact: what they felt),$x: ($x, is, an earthquake))),AnswerState(what they felt))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaaa aaaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.4, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1320423888208588)
What is an earthquake?	power	-2.4311948044067258	Derivation(What is an earthquake?,power,Vector(QaStep(What is an earthquake?,QuestionStateImpl(What is an earthquake?,Sentence(What is an earthquake?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, an earthquake),false)), QaStep(What is an earthquake?,QueryState($x: ($x, is, an earthquake),false),RelSynRule(be,be other kind of,true,1.3235778E7,432.0,316.0,0.4777776002883911),QueryState($x: (an earthquake, be other kind of, $x),true)), QaStep(What is an earthquake?,QueryState($x: (an earthquake, be other kind of, $x),true),ExecutionAction(ExecTuple((r0.arg1: an earthquake imaginary, r0.rel_exact: is there any other kind of, r0.id: reverb-52728712, r0.namespace: reverb, r0.arg2_exact: power, r0.arg2: power, r0.rel: is there any other kind of, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.693, r0.arg1_exact: an earthquake imaginary),$x: (an earthquake, be other kind of, $x))),AnswerState(power))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4777776002883911, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what' and answer shape = aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.4311948044067258)
When was JFK born?	1917	5.121132626721388	Derivation(When was JFK born?,1917,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was born in, r0.id: reverb-328375975, r0.namespace: reverb, r0.arg2_exact: 1917, r0.arg2: 1917, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.968, r0.arg1_exact: JFK),$x: (JFK, was born in, $x))),AnswerState(1917))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),5.121132626721388)
When was JFK born?	YORK	3.6177844584778907	Derivation(When was JFK born?,YORK,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: Jfk, r0.rel_exact: was born in the location, r0.prob_f: 0.9375, r0.id: nell-842258, r0.namespace: nell, r0.arg2_exact: YORK, r0.arg2: YORK, r0.rel: was born in the location, r0.arg1_exact: Jfk),$x: (JFK, was born in, $x))),AnswerState(YORK))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'when' and answer shape = AAAA -> 1.0, num conjuncts -> 1.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.6177844584778907)
When was JFK born?	1963	3.5164243035574945	Derivation(When was JFK born?,1963,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: is killed in, r0.id: reverb-234124644, r0.namespace: reverb, r0.arg2_exact: 1963, r0.arg2: 1963, r0.rel: is killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.962, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(1963))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.5164243035574945)
When was JFK born?	1964	3.5164243035574945	Derivation(When was JFK born?,1964,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-344744187, r0.namespace: reverb, r0.arg2_exact: 1964, r0.arg2: 1964, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.711, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(1964))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, question prefix = 'when' and answer shape = 1111 -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.5164243035574945)
When was JFK born?	Nov. 22 , 1963	2.820888059098242	Derivation(When was JFK born?,Nov. 22 , 1963,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,be murder on,false,1733.0,189.0,3.0,0.6374767422676086),QueryState($x: (JFK, be murder on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be murder on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was murdered on, r0.id: reverb-135280733, r0.namespace: reverb, r0.arg2_exact: Nov. 22 , 1963, r0.arg2: Nov. 22 , 1963, r0.rel: was murdered on, r0.corpora_ss: List(cw), r0.num_extrs_i: 21, r0.conf_f: 0.88, r0.arg1_exact: JFK),$x: (JFK, be murder on, $x))),AnswerState(Nov. 22 , 1963))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6374767422676086, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = Aaa. 11 , 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),2.820888059098242)
When was JFK born?	May 29 , 1917	1.9767135865646484	Derivation(When was JFK born?,May 29 , 1917,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),ExecutionAction(ExecTuple((r0.arg1: ?JFK John F. Kennedy, r0.rel_exact: was born on, r0.id: reverb-342355175, r0.namespace: reverb, r0.arg2_exact: May 29 , 1917, r0.arg2: May 29 , 1917, r0.rel: was born on, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.987, r0.arg1_exact: ?JFK John F. Kennedy),$x: (JFK, was born on, $x))),AnswerState(May 29 , 1917))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, question prefix = 'when' and answer shape = Aaa 11 , 1111 -> 1.0, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.9767135865646484)
When was JFK born?	November	1.552643525356483	Derivation(When was JFK born?,November,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-110586813, r0.namespace: reverb, r0.arg2_exact: November, r0.arg2_fbid_s: 05cw8, r0.arg2: November, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.953, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(November))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.552643525356483)
When was JFK born?	the 20th century	1.5088280717175795	Derivation(When was JFK born?,the 20th century,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was the first President born in, r0.id: reverb-308378784, r0.namespace: reverb, r0.arg2_exact: the 20th century, r0.arg2: the 20th century, r0.rel: was the first President born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.967, r0.arg1_exact: JFK),$x: (JFK, was born in, $x))),AnswerState(the 20th century))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'when' and answer shape = aaa 11aa aaaa -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.5088280717175795)
When was JFK born?	Brookline	1.469132657397725	Derivation(When was JFK born?,Brookline,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was born in, r0.id: reverb-136547027, r0.namespace: reverb, r0.arg2_exact: Brookline, r0.arg2_fbid_s: 0p9z5, r0.arg2: Brookline, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.984, r0.arg1_exact: JFK),$x: (JFK, was born in, $x))),AnswerState(Brookline))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.469132657397725)
When was JFK born?	a vacation	1.1306714480460047	Derivation(When was JFK born?,a vacation,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,there be on,false,1733.0,138.0,2.0,0.634633868932724),QueryState($x: (JFK, there be on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, there be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was there on, r0.id: reverb-4088805, r0.namespace: reverb, r0.arg2_exact: a vacation, r0.arg2: a vacation, r0.rel: was there on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.963, r0.arg1_exact: JFK),$x: (JFK, there be on, $x))),AnswerState(a vacation))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.634633868932724, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.1306714480460047)
When was JFK born?	the past	1.111299127737222	Derivation(When was JFK born?,the past,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-198729297, r0.namespace: reverb, r0.arg2_exact: the past, r0.arg2: the past, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.74, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(the past))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.111299127737222)
When was JFK born?	a conspiracy	1.111299127737222	Derivation(When was JFK born?,a conspiracy,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-155350163, r0.namespace: reverb, r0.arg2_exact: a conspiracy, r0.arg2: a conspiracy, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 16, r0.conf_f: 0.723, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(a conspiracy))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.111299127737222)
When was JFK born?	a coup d'etat	1.111299127737222	Derivation(When was JFK born?,a coup d'etat,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-9967518, r0.namespace: reverb, r0.arg2_exact: a coup d'etat, r0.arg2: a coup d'etat, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.967, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(a coup d'etat))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = a aaaa a'aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.111299127737222)
When was JFK born?	29th September	0.9540807019881452	Derivation(When was JFK born?,29th September,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,get marry on,false,11629.0,149.0,4.0,0.5944090783596039),QueryState($x: (JFK, get marry on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, get marry on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK and Rudo, r0.rel_exact: got married on, r0.id: reverb-36963731, r0.namespace: reverb, r0.arg2_exact: 29th September, r0.arg2: 29th September, r0.rel: got married on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.979, r0.arg1_exact: JFK and Rudo),$x: (JFK, get marry on, $x))),AnswerState(29th September))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5944090783596039, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, question prefix = 'when' and answer shape = 11aa Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9540807019881452)
When was JFK born?	the shirts	0.9417388629312073	Derivation(When was JFK born?,the shirts,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,mean on,false,1733.0,126.0,2.0,0.6374767422676086),QueryState($x: (JFK, mean on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, mean on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: meant on, r0.id: reverb-140819693, r0.namespace: reverb, r0.arg2_exact: the shirts, r0.arg2: the shirts, r0.rel: meant on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.829, r0.arg1_exact: JFK),$x: (JFK, mean on, $x))),AnswerState(the shirts))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6374767422676086, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.9417388629312073)
When was JFK born?	the House floor	0.927591084237577	Derivation(When was JFK born?,the House floor,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,declare on,false,1733.0,240.0,2.0,0.6173405945301056),QueryState($x: (JFK, declare on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, declare on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: declared on, r0.id: reverb-54644663, r0.namespace: reverb, r0.arg2_exact: the House floor, r0.arg2: the House floor, r0.rel: declared on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.897, r0.arg1_exact: JFK),$x: (JFK, declare on, $x))),AnswerState(the House floor))),SparseVector(question prefix = 'when' and answer shape = aaa Aaaaa aaaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6173405945301056, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.927591084237577)
When was JFK born?	25 Nov 1963	0.3868345028627975	Derivation(When was JFK born?,25 Nov 1963,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,be here on,false,1733.0,458.0,4.0,0.6188067495822906),QueryState($x: (JFK, be here on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be here on, $x),true),ExecutionAction(ExecTuple((r0.arg1: Source JFK, r0.rel_exact: was laid to rest here on, r0.id: reverb-175281989, r0.namespace: reverb, r0.arg2_exact: 25 Nov 1963, r0.arg2: 25 Nov 1963, r0.rel: was laid to rest here on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.991, r0.arg1_exact: Source JFK),$x: (JFK, be here on, $x))),AnswerState(25 Nov 1963))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6188067495822906, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = 11 Aaa 1111 -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.3868345028627975)
When was JFK born?	the grassy knoll	0.16492794469917582	Derivation(When was JFK born?,the grassy knoll,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,there be on,false,1733.0,138.0,2.0,0.634633868932724),QueryState($x: (JFK, there be on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, there be on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was there another shooter on, r0.id: reverb-164511245, r0.namespace: reverb, r0.arg2_exact: the grassy knoll, r0.arg2: the grassy knoll, r0.rel: was there another shooter on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.962, r0.arg1_exact: JFK),$x: (JFK, there be on, $x))),AnswerState(the grassy knoll))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.634633868932724, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),0.16492794469917582)
When was JFK born?	the Presidential Suite	0.10158824118623011	Derivation(When was JFK born?,the Presidential Suite,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,wake in,false,11629.0,188.0,4.0,0.58714359998703),QueryState($x: (JFK, wake in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, wake in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: woke up in, r0.id: reverb-171650251, r0.namespace: reverb, r0.arg2_exact: the Presidential Suite, r0.arg2: the Presidential Suite, r0.rel: woke up in, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.695, r0.arg1_exact: JFK),$x: (JFK, wake in, $x))),AnswerState(the Presidential Suite))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.58714359998703, minimum join key similarity -> 0.0, question prefix = 'when' and answer shape = aaa Aaaaa Aaaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.10158824118623011)
When was JFK born?	the CIA	0.09626913773188939	Derivation(When was JFK born?,the CIA,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),RelSynRule(be bear in,remove to,false,62700.0,833.0,75.0,0.5795730650424957),QueryState($x: (JFK, remove to, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, remove to, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: seek to remove, r0.id: reverb-243035569, r0.namespace: reverb, r0.arg2_exact: the CIA, r0.arg2: the CIA, r0.rel: seek to remove, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.708, r0.arg1_exact: JFK),$x: (JFK, remove to, $x))),AnswerState(the CIA))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5795730650424957, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'when' and answer shape = aaa AAA -> 1.0, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.09626913773188939)
When was JFK born?	the plane crash	-0.10245739999233772	Derivation(When was JFK born?,the plane crash,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK Jr., r0.rel_exact: was killed in, r0.id: reverb-383676952, r0.namespace: reverb, r0.arg2_exact: the plane crash, r0.arg2: the plane crash, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.842, r0.arg1_exact: JFK Jr.),$x: (JFK, be be kill in, $x))),AnswerState(the plane crash))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'when' and answer shape = aaa aaaa aaaa -> 1.0),-0.10245739999233772)
When was JFK born?	Dallas	-0.13557566576616864	Derivation(When was JFK born?,Dallas,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-222501270, r0.namespace: reverb, r0.arg2_exact: Dallas, r0.arg2_fbid_s: 0f2rq, r0.arg2: Dallas, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 13, r0.conf_f: 0.94, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(Dallas))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.13557566576616864)
When was JFK born?	Texas	-0.13557566576616864	Derivation(When was JFK born?,Texas,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,be be kill in,false,16053.0,108.0,6.0,0.6070617735385895),QueryState($x: (JFK, be be kill in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be be kill in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was killed in, r0.id: reverb-73999963, r0.namespace: reverb, r0.arg2_exact: Texas, r0.arg2_fbid_s: 07b_l, r0.arg2: Texas, r0.rel: was killed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.948, r0.arg1_exact: JFK),$x: (JFK, be be kill in, $x))),AnswerState(Texas))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6070617735385895, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.13557566576616864)
When was JFK born?	Florida	-0.3258501872379318	Derivation(When was JFK born?,Florida,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born in, $x),false),RelSynRule(bear in,to travel to,false,16053.0,1188.0,68.0,0.6079947054386139),QueryState($x: (JFK, to travel to, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, to travel to, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: traveled to, r0.id: reverb-330513272, r0.namespace: reverb, r0.arg2_exact: Florida, r0.arg2_fbid_s: 02xry, r0.arg2: Florida, r0.rel: traveled to, r0.corpora_ss: List(cw), r0.num_extrs_i: 4, r0.conf_f: 0.848, r0.arg1_exact: JFK),$x: (JFK, to travel to, $x))),AnswerState(Florida))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6079947054386139, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3258501872379318)
When was JFK born?	the steps	-0.3267981105054536	Derivation(When was JFK born?,the steps,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,have make on,false,11629.0,133.0,3.0,0.5889689326286316),QueryState($x: (JFK, have make on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, have make on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: may have made a speech on, r0.id: reverb-207575959, r0.namespace: reverb, r0.arg2_exact: the steps, r0.arg2: the steps, r0.rel: may have made a speech on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.908, r0.arg1_exact: JFK),$x: (JFK, have make on, $x))),AnswerState(the steps))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5889689326286316, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3267981105054536)
When was JFK born?	August 11	-0.3510734411611176	Derivation(When was JFK born?,August 11,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,have die on,false,1733.0,319.0,6.0,0.6427799761295319),QueryState($x: (JFK, have die on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, have die on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK?s younger sister, r0.rel_exact: had died on, r0.id: reverb-284939655, r0.namespace: reverb, r0.arg2_exact: August 11, r0.arg2_fbid_s: 0xh3, r0.arg2: August 11, r0.rel: had died on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.881, r0.arg1_exact: JFK?s younger sister),$x: (JFK, have die on, $x))),AnswerState(August 11))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6427799761295319, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and isDate -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, question prefix = 'when' and answer shape = Aaaaa 11 -> 1.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.3510734411611176)
When was JFK born?	Lincoln	-0.42841158925562406	Derivation(When was JFK born?,Lincoln,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),ExecutionAction(ExecTuple((r0.arg1: JFK?s legendary speechwriter, r0.rel_exact: was born in, r0.id: reverb-202212828, r0.namespace: reverb, r0.arg2_exact: Lincoln, r0.arg2: Lincoln, r0.rel: was born in, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.948, r0.arg1_exact: JFK?s legendary speechwriter),$x: (JFK, was born in, $x))),AnswerState(Lincoln))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.0, steps -> 0.5, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.42841158925562406)
When was JFK born?	a White House tape	-0.5259680919194119	Derivation(When was JFK born?,a White House tape,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,be bury on,false,11629.0,353.0,6.0,0.5801260769367218),QueryState($x: (JFK, be bury on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be bury on, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK assassination secrets, r0.rel_exact: was buried on, r0.id: reverb-359285779, r0.namespace: reverb, r0.arg2_exact: a White House tape, r0.arg2: a White House tape, r0.rel: was buried on, r0.corpora_ss: List(cw), r0.num_extrs_i: 5, r0.conf_f: 0.976, r0.arg1_exact: JFK assassination secrets),$x: (JFK, be bury on, $x))),AnswerState(a White House tape))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5801260769367218, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'when' and answer shape = a Aaaaa Aaaaa aaaa -> 1.0, action type = ExecutionAction -> 1.0),-0.5259680919194119)
When was JFK born?	Miami	-0.6220877304549597	Derivation(When was JFK born?,Miami,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born in, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born in, $x),false),RelSynRule(be bear in,marry in,false,62700.0,2468.0,208.0,0.5775080621242523),QueryState($x: (JFK, marry in, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, marry in, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK, r0.rel_exact: was married in, r0.id: reverb-381211933, r0.namespace: reverb, r0.arg2_exact: Miami, r0.arg2: Miami, r0.rel: was married in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.887, r0.arg1_exact: JFK),$x: (JFK, marry in, $x))),AnswerState(Miami))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5775080621242523, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = Aaaaa -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.6220877304549597)
When was JFK born?	an enormous outcry	-1.4813297062214885	Derivation(When was JFK born?,an enormous outcry,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,be to come to,false,11629.0,110.0,3.0,0.5949023365974426),QueryState($x: (JFK, be to come to, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: The JFK Act, r0.rel_exact: came into being due to, r0.id: reverb-257587777, r0.namespace: reverb, r0.arg2_exact: an enormous outcry, r0.arg2: an enormous outcry, r0.rel: came into being due to, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.803, r0.arg1_exact: The JFK Act),$x: (JFK, be to come to, $x))),AnswerState(an enormous outcry))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949023365974426, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.6, question prefix = 'when' and answer shape = aa aaaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.4813297062214885)
When was JFK born?	the show	-1.4990935765277054	Derivation(When was JFK born?,the show,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,be really for,true,1733.0,160.0,2.0,0.6300113797187805),QueryState($x: ($x, be really for, JFK),true)), QaStep(When was JFK born?,QueryState($x: ($x, be really for, JFK),true),ExecutionAction(ExecTuple((r0.arg1: the show, r0.rel_exact: were really looking for, r0.id: reverb-299718779, r0.namespace: reverb, r0.arg2_exact: the next Billy Graham or JFK, r0.arg2: the next Billy Graham or JFK, r0.rel: were really looking for, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.658, r0.arg1_exact: the show),$x: ($x, be really for, JFK))),AnswerState(the show))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6300113797187805, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.16666666666666666, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.4990935765277054)
When was JFK born?	a kingdom	-1.8952197790844152	Derivation(When was JFK born?,a kingdom,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(rel1, rel2, ent),<lemma='when'> (<rel1>:<lemma='be' | lemma='have' | lemma='do'>) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel2>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel1 $rel2 in, $x), ($ent, $rel1 $rel2 on, $x))),QueryState($x: (JFK, was born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, was born on, $x),false),RelSynRule(be bear on,be to come to,false,11629.0,110.0,3.0,0.5949023365974426),QueryState($x: (JFK, be to come to, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, be to come to, $x),true),ExecutionAction(ExecTuple((r0.arg1: the JFK presidency, r0.rel_exact: was an attempt to come up with, r0.id: reverb-279477150, r0.namespace: reverb, r0.arg2_exact: a kingdom, r0.arg2: a kingdom, r0.rel: was an attempt to come up with, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.711, r0.arg1_exact: the JFK presidency),$x: (JFK, be to come to, $x))),AnswerState(a kingdom))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.5949023365974426, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'when' and answer shape = a aaaa -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.3333333333333333, steps -> 0.75, query similarity with question -> 0.3333333333333333, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.8952197790844152)
When was JFK born?	the question	-2.085510470465777	Derivation(When was JFK born?,the question,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,shed on,false,1733.0,307.0,5.0,0.6382806599140167),QueryState($x: (JFK, shed on, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, shed on, $x),true),ExecutionAction(ExecTuple((r0.arg1: The new JFK files, r0.rel_exact: might shed light on, r0.id: reverb-32081634, r0.namespace: reverb, r0.arg2_exact: the question, r0.arg2: the question, r0.rel: might shed light on, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.976, r0.arg1_exact: The new JFK files),$x: (JFK, shed on, $x))),AnswerState(the question))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6382806599140167, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.25, question prefix = 'when' and answer shape = aaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.16666666666666666, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.085510470465777)
When was JFK born?	D&M	-2.7301532753419537	Derivation(When was JFK born?,D&M,Vector(QaStep(When was JFK born?,QuestionStateImpl(When was JFK born?,Sentence(When was JFK born?),false),RegexQuestionPattern(List(ent, rel),<lemma='when'> <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List(($ent, $rel in, $x), ($ent, $rel on, $x))),QueryState($x: (JFK, born on, $x),false)), QaStep(When was JFK born?,QueryState($x: (JFK, born on, $x),false),RelSynRule(bear on,could return to,false,1733.0,198.0,2.0,0.6233521997928619),QueryState($x: (JFK, could return to, $x),true)), QaStep(When was JFK born?,QueryState($x: (JFK, could return to, $x),true),ExecutionAction(ExecTuple((r0.arg1: JFK-FM, r0.rel_exact: sure could use a return to, r0.id: reverb-224560354, r0.namespace: reverb, r0.arg2_exact: D&M, r0.arg2: D&M, r0.rel: sure could use a return to, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.734, r0.arg1_exact: JFK-FM),$x: (JFK, could return to, $x))),AnswerState(D&M))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6233521997928619, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'when' and answer shape = A&A -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.0, steps -> 0.75, query similarity with question -> 0.14285714285714285, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7301532753419537)
What year did Hitler die?	b 1960	4.737025274477168	Derivation(What year did Hitler die?,b 1960,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: b 1960, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-155338, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.824, r1.arg2: 1960, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: died in, r1.arg2_exact: 1960, r1.num_extrs_i: 5, r1.id: reverb-309697444, r0.arg1_exact: b 1960, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(b 1960))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0, question prefix = 'what year' and answer shape = a 1111 -> 1.0),4.737025274477168)
What year did Hitler die?	1907	3.727343945692133	Derivation(What year did Hitler die?,1907,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1907, r0.rel_exact: is a, r0.id: nell-3563, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.824, r1.arg2: 1907, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler?s mother, r1.rel_exact: died in, r1.arg2_exact: 1907, r1.num_extrs_i: 2, r1.id: reverb-123237810, r0.arg1_exact: 1907, r1.arg1_exact: Hitler?s mother, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(1907))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.25, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.25, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.727343945692133)
What year did Hitler die?	May 1	3.50712135289286	Derivation(What year did Hitler die?,May 1,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(die,do the same thing,false,79358.0,173.0,49.0,0.6080251336097717),QueryState($x: ($x, "is a", year) (Hitler, do the same thing, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, do the same thing, $x),true),ExecutionAction(ExecTuple((r0.arg1: May 1, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-1102342, r1.rel: did the same thing on, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.978, r1.arg2: May 1, r1.arg2_fbid_s: 04x0r, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: did the same thing on, r1.arg2_exact: May 1, r1.num_extrs_i: 3, r1.id: reverb-259619301, r0.arg1_exact: May 1, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, do the same thing, $x))),AnswerState(May 1))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6080251336097717, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = Aaa 1 -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8571428571428571, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.3, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.50712135289286)
What year did Hitler die?	April 1945	3.287125614337584	Derivation(What year did Hitler die?,April 1945,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(die,commit suicide,false,79358.0,174.0,68.0,0.6180852353572845),QueryState($x: ($x, "is a", year) (Hitler, commit suicide, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, commit suicide, $x),true),ExecutionAction(ExecTuple((r0.arg1: April 1945, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-118457, r1.rel: committed suicide in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.914, r1.arg2: April 1945, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: committed suicide in, r1.arg2_exact: April 1945, r1.num_extrs_i: 3, r1.id: reverb-245194026, r0.arg1_exact: April 1945, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, commit suicide, $x))),AnswerState(April 1945))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6180852353572845, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = Aaaaa 1111 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2222222222222222, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),3.287125614337584)
What year did Hitler die?	1964	3.1105507055130417	Derivation(What year did Hitler die?,1964,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5h4f1, r0.arg1: 1964, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-270107558, r1.rel: Died in, r0.namespace: freebase, r0.arg2_exact: years, r0.arg2_fbid_s: 0g5h44z, r1.conf_f: 0.806, r1.arg2: 1964, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: Died in, r1.arg2_exact: 1964, r1.num_extrs_i: 2, r1.id: reverb-266893715, r0.arg1_exact: 1964, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, die, $x))),AnswerState(1964))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.1105507055130417)
What year did Hitler die?	1960	3.1105507055130417	Derivation(What year did Hitler die?,1960,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5h4ds, r0.arg1: 1960, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-210232378, r1.rel: died in, r0.namespace: freebase, r0.arg2_exact: years, r0.arg2_fbid_s: 0g5h44z, r1.conf_f: 0.824, r1.arg2: 1960, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: died in, r1.arg2_exact: 1960, r1.num_extrs_i: 5, r1.id: reverb-309697444, r0.arg1_exact: 1960, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, die, $x))),AnswerState(1960))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),3.1105507055130417)
What year did Hitler die?	1960?s	2.786080303387357	Derivation(What year did Hitler die?,1960?s,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1960?s, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-6107, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.824, r1.arg2: 1960, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: died in, r1.arg2_exact: 1960, r1.num_extrs_i: 5, r1.id: reverb-309697444, r0.arg1_exact: 1960?s, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(1960?s))),SparseVector(question prefix = 'what year' and answer shape = 1111?a -> 1.0, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.786080303387357)
What year did Hitler die?	c.1960	2.786080303387357	Derivation(What year did Hitler die?,c.1960,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1960, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-272255, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.824, r1.arg2: 1960, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: died in, r1.arg2_exact: 1960, r1.num_extrs_i: 5, r1.id: reverb-309697444, r0.arg1_exact: c.1960, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(c.1960))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, steps -> 0.5, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.786080303387357)
What year did Hitler die?	1944	2.466721703281822	Derivation(What year did Hitler die?,1944,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5htq2, r0.arg1: 1944, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-239591111, r1.rel: would have died in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.7, r1.arg2: 1944, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: would have died in, r1.arg2_exact: 1944, r1.num_extrs_i: 7, r1.id: reverb-387802418, r0.arg1_exact: 1944, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, die, $x))),AnswerState(1944))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),2.466721703281822)
What year did Hitler die?	1945	1.8479001281027543	Derivation(What year did Hitler die?,1945,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Year, r0.rel_exact: built, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-106350793, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: 1945, r1.conf_f: 0.935, r1.arg2: 1945, r0.arg2: 1945, r0.rel: built, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 5, r1.arg2_exact: 1945, r1.num_extrs_i: 29, r0.conf_f: 0.939, r1.id: reverb-57360838, r0.arg1_exact: Year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(1945))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.8479001281027543)
What year did Hitler die?	c.1933	1.4980091398650708	Derivation(What year did Hitler die?,c.1933,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(die,do the same thing,false,79358.0,173.0,49.0,0.6080251336097717),QueryState($x: ($x, "is a", year) (Hitler, do the same thing, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, do the same thing, $x),true),ExecutionAction(ExecTuple((r0.arg1: c.1933, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-272238, r1.rel: did the same thing in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.894, r1.arg2: 1933, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: did the same thing in, r1.arg2_exact: 1933, r1.num_extrs_i: 2, r1.id: reverb-87394278, r0.arg1_exact: c.1933, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, do the same thing, $x))),AnswerState(c.1933))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6080251336097717, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8571428571428571, evidence similarity with query (args only) -> 1.0, steps -> 0.75, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.3, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.4980091398650708)
What year did Hitler die?	1938	1.2407917089670382	Derivation(What year did Hitler die?,1938,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 04ljmwf, r0.arg1: 1938, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-210229721, r1.rel: had died in, r0.namespace: freebase, r0.arg2_exact: Year, r0.arg2_fbid_s: 0fpy7_9, r1.conf_f: 0.8016573, r1.arg2: 1938, r1.arg2_fbid_s: 04ljmwf, r0.arg2: Year, r0.rel: Type, r1.namespace: openie4, r1.arg1: Hitler, r1.rel_exact: had died in, r1.arg2_exact: 1938, r1.num_extrs_i: 4, r1.id: openie4-39101998, r0.arg1_exact: 1938, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, die, $x))),AnswerState(1938))),SparseVector(minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.2407917089670382)
What year did Hitler die?	1984	1.0431138753137308	Derivation(What year did Hitler die?,1984,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Year, r0.rel_exact: built, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-97505821, r1.rel: could have died as late as, r0.namespace: reverb, r0.arg2_exact: 1984, r1.conf_f: 0.935, r1.arg2: 1984, r0.arg2: 1984, r0.rel: built, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: could have died as late as, r0.num_extrs_i: 4, r1.arg2_exact: 1984, r1.num_extrs_i: 9, r0.conf_f: 0.959, r1.id: reverb-108937521, r0.arg1_exact: Year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(1984))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),1.0431138753137308)
What year did Hitler die?	1938.	0.9824127270087948	Derivation(What year did Hitler die?,1938.,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1938., r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-4724, r1.rel: had died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.8016573, r1.arg2: 1938, r1.arg2_fbid_s: 04ljmwf, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: Hitler, r1.rel_exact: had died in, r1.arg2_exact: 1938, r1.num_extrs_i: 4, r1.id: openie4-39101998, r0.arg1_exact: 1938., r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(1938.))),SparseVector(minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = 1111. -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9824127270087948)
What year did Hitler die?	1907-8	0.9654455117930179	Derivation(What year did Hitler die?,1907-8,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: 1907-8, r0.rel_exact: is a, r0.id: nell-3556, r1.rel: died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.824, r1.arg2: 1907, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Hitler?s mother, r1.rel_exact: died in, r1.arg2_exact: 1907, r1.num_extrs_i: 2, r1.id: reverb-123237810, r0.arg1_exact: 1907-8, r1.arg1_exact: Hitler?s mother, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(1907-8))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = 1111-1 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.25, steps -> 0.5, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9654455117930179)
What year did Hitler die?	c.1938	0.9565606194808052	Derivation(What year did Hitler die?,c.1938,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),ExecutionAction(ExecTuple((r0.arg1: c.1938, r0.rel_exact: is a, r1.arg1_fbid_s: 07_m9_, r0.id: nell-272240, r1.rel: had died in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.8016573, r1.arg2: 1938, r1.arg2_fbid_s: 04ljmwf, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: Hitler, r1.rel_exact: had died in, r1.arg2_exact: 1938, r1.num_extrs_i: 4, r1.id: openie4-39101998, r0.arg1_exact: c.1938, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, die, $x))),AnswerState(c.1938))),SparseVector(minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, steps -> 0.5, answer from namespace 'openie4' -> 1.0, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.9565606194808052)
What year did Hitler die?	1939	0.20976343545468135	Derivation(What year did Hitler die?,1939,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(die,be be kill,false,79358.0,150.0,68.0,0.6227233707904816),QueryState($x: ($x, "type", year) (Hitler, be be kill, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, be be kill, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5ht31, r0.arg1: 1939, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-210229844, r1.rel: was killed in, r0.namespace: freebase, r0.arg2_exact: Years, r1.conf_f: 0.8016573, r1.arg2: 1939, r0.arg2: Years, r0.rel: Type, r1.namespace: openie4, r1.arg1: Hitler, r1.rel_exact: was killed in, r1.arg2_exact: 1939, r1.num_extrs_i: 2, r1.id: openie4-40207343, r0.arg1_exact: 1939, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, be be kill, $x))),AnswerState(1939))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6227233707904816, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = 1111 -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.20976343545468135)
What year did Hitler die?	c.1947	0.06827055880151267	Derivation(What year did Hitler die?,c.1947,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(die,pass away,false,79358.0,6735.0,3160.0,0.6237978041172028),QueryState($x: ($x, "is a", year) (Hitler, pass away, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, pass away, $x),true),ExecutionAction(ExecTuple((r0.arg1: c.1947, r0.rel_exact: is a, r0.id: nell-272245, r1.rel: passes away in, r0.namespace: nell, r0.arg2_exact: year, r1.conf_f: 0.832, r1.arg2: 1947, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: a sick Hitler, r1.rel_exact: passes away in, r1.arg2_exact: 1947, r1.num_extrs_i: 27, r1.id: reverb-57368586, r0.arg1_exact: c.1947, r1.arg1_exact: a sick Hitler, r1.corpora_ss: List(cw)),$x: ($x, "is a", year) (Hitler, pass away, $x))),AnswerState(c.1947))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6237978041172028, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'nell' -> 1.0, evidence similarity with query (rels only) -> 0.8, evidence similarity with query (args only) -> 0.5, steps -> 0.75, question prefix = 'what year' and answer shape = a.1111 -> 1.0, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),0.06827055880151267)
What year did Hitler die?	April 30	-0.2926722248886182	Derivation(What year did Hitler die?,April 30,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(die,commit suicide,false,79358.0,174.0,68.0,0.6180852353572845),QueryState($x: ($x, "type", year) (Hitler, commit suicide, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, commit suicide, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0lp1, r0.arg1: April 30, r0.rel_exact: Type, r1.arg1_fbid_s: 07_m9_, r0.id: fb-106344923, r1.rel: committed suicide on, r0.namespace: freebase, r0.arg2_exact: Day Of Year, r1.conf_f: 0.992, r1.arg2: April 30, r1.arg2_fbid_s: 0lp1, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: committed suicide on, r1.arg2_exact: April 30, r1.num_extrs_i: 10, r1.id: reverb-304470329, r0.arg1_exact: April 30, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, "type", year) (Hitler, commit suicide, $x))),AnswerState(April 30))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6180852353572845, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what year' and answer shape = Aaaaa 11 -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.75, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'what year' and isDate -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-0.2926722248886182)
What year did Hitler die?	the day	-0.9880293409901508	Derivation(What year did Hitler die?,the day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: year, r0.rel_exact: built, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-126529039, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: the day, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: the day, r0.rel: built, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 4, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.565, r1.id: reverb-293800050, r0.arg1_exact: year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(the day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = aaa aaa -> 1.0, action type = ExecutionAction -> 1.0),-0.9880293409901508)
What year did Hitler die?	each day	-1.0055048702526248	Derivation(What year did Hitler die?,each day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Years, r0.rel_exact: sets, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-364856910, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: each day, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: each day, r0.rel: sets, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 2, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.538, r1.id: reverb-293800050, r0.arg1_exact: Years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(each day))),SparseVector(question prefix = 'what year' and answer shape = aaaa aaa -> 1.0, action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.5, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.0055048702526248)
What year did Hitler die?	Day	-1.475851965034859	Derivation(What year did Hitler die?,Day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Day, r0.rel_exact: is a time of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-203818752, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: year, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: year, r0.rel: is a time of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 5, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.722, r1.id: reverb-293800050, r0.arg1_exact: Day, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(Day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.5714285714285714, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.475851965034859)
What year did Hitler die?	Forty years	-1.5464524279450196	Derivation(What year did Hitler die?,Forty years,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be an, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Forty years, r0.rel_exact: is an intriguing number of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-155176737, r1.rel: died almost, r0.namespace: reverb, r0.arg2_exact: year, r1.conf_f: 0.556, r1.arg2: forty years, r0.arg2: year, r0.rel: is an intriguing number of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died almost, r0.num_extrs_i: 2, r1.arg2_exact: forty years, r1.num_extrs_i: 3, r0.conf_f: 0.939, r1.id: reverb-249803147, r0.arg1_exact: Forty years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Hitler, die, $x))),AnswerState(Forty years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.9090909090909091, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.5464524279450196)
What year did Hitler die?	a day	-1.620607475423946	Derivation(What year did Hitler die?,a day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: a day, r0.rel_exact: is a given number of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-251917514, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: years, r0.rel: is a given number of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 4, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.815, r1.id: reverb-293800050, r0.arg1_exact: a day, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(a day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, question prefix = 'what year' and answer shape = a aaa -> 1.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.620607475423946)
What year did Hitler die?	Years	-1.6634513192073077	Derivation(What year did Hitler die?,Years,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,related domain,true,4.087548E7,27060.0,9595.0,0.4199107885360718),QueryState($x: (year, related domain, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, related domain, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0g5h64t, r0.arg1: Years, r0.rel_exact: Related Domain, r1.arg1_fbid_s: 07_m9_, r0.id: fb-209777896, r1.rel: died little under, r0.namespace: freebase, r0.arg2_exact: Years, r0.arg2_fbid_s: 0g5h5q3, r1.conf_f: 0.838, r1.arg2: a year, r0.arg2: Years, r0.rel: Related Domain, r1.namespace: reverb, r1.arg1: Hitler, r1.rel_exact: died little under, r1.arg2_exact: a year, r1.num_extrs_i: 2, r1.id: reverb-339477493, r0.arg1_exact: Years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, related domain, $x) (Hitler, die, $x))),AnswerState(Years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4199107885360718, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, answer from namespace 'freebase' -> 1.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 1.0, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.6634513192073077)
What year did Hitler die?	A decade	-1.9771102597554073	Derivation(What year did Hitler die?,A decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: A decade, r0.rel_exact: is a period of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-328405031, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: 10 years, r0.arg2_fbid_s: 07l0br, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: 10 years, r0.rel: is a period of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 17, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.939, r1.id: reverb-354128535, r0.arg1_exact: A decade, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(A decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = A aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9771102597554073)
What year did Hitler die?	a decade	-1.9771102597554073	Derivation(What year did Hitler die?,a decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: a decade, r0.rel_exact: is a century in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-39724703, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: fashion years, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: fashion years, r0.rel: is a century in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 3, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.742, r1.id: reverb-354128535, r0.arg1_exact: a decade, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(a decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-1.9771102597554073)
What year did Hitler die?	the decade	-2.004483079490926	Derivation(What year did Hitler die?,the decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the decade, r0.rel_exact: was a runner-up in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-118735873, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: back-to-back years, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: back-to-back years, r0.rel: was a runner-up in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.863, r1.id: reverb-354128535, r0.arg1_exact: the decade, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7058823529411765, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.004483079490926)
What year did Hitler die?	a Decade	-2.0145049759432236	Derivation(What year did Hitler die?,a Decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is an example of", year) (Hitler, die, $x),false),RelSynRule(be an example of,would be as,true,2809.0,162.0,7.0,0.6536790728569031),QueryState($x: (year, would be as, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, would be as, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The next ten years, r0.rel_exact: would be dedicated as, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-283259322, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: a Decade, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: a Decade, r0.rel: would be dedicated as, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 4, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.916, r1.id: reverb-354128535, r0.arg1_exact: The next ten years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, would be as, $x) (Hitler, die, $x))),AnswerState(a Decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6536790728569031, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.8, question prefix = 'what year' and answer shape = a Aaaaa -> 1.0, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.0145049759432236)
What year did Hitler die?	10 days	-2.113198940244264	Derivation(What year did Hitler die?,10 days,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: next year, r0.rel_exact: have set within, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-294941994, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: 10 days, r1.conf_f: 0.712, r1.arg2: 18 days, r0.arg2: 10 days, r0.rel: have set within, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: 18 days, r1.num_extrs_i: 8, r0.conf_f: 0.827, r1.id: reverb-330645658, r0.arg1_exact: next year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(10 days))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.113198940244264)
What year did Hitler die?	day	-2.113198940244264	Derivation(What year did Hitler die?,day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: This year, r0.rel_exact: set up, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-27223532, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: day, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: day, r0.rel: set up, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 3, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.855, r1.id: reverb-293800050, r0.arg1_exact: This year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.113198940244264)
What year did Hitler die?	the 1960s	-2.1792552893892254	Derivation(What year did Hitler die?,the 1960s,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: many years, r0.rel_exact: were built in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-236882949, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: the 1960s, r1.conf_f: 0.824, r1.arg2: 1960, r0.arg2: the 1960s, r0.rel: were built in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 6, r1.arg2_exact: 1960, r1.num_extrs_i: 5, r0.conf_f: 0.873, r1.id: reverb-309697444, r0.arg1_exact: many years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(the 1960s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 0.6153846153846154, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = aaa 1111a -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.1792552893892254)
What year did Hitler die?	The day	-2.288927871110587	Derivation(What year did Hitler die?,The day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be an, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The day, r0.rel_exact: is an epitome of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-139695881, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: the year, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: the year, r0.rel: is an epitome of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 14, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.928, r1.id: reverb-293800050, r0.arg1_exact: The day, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Hitler, die, $x))),AnswerState(The day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.5454545454545454, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = Aaa aaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.288927871110587)
What year did Hitler die?	a year	-2.332833090680356	Derivation(What year did Hitler die?,a year,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: a year, r0.rel_exact: is a milestone of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-68973298, r1.rel: died little under, r0.namespace: reverb, r0.arg2_exact: 50 years, r1.conf_f: 0.838, r1.arg2: a year, r0.arg2: 50 years, r0.rel: is a milestone of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died little under, r0.num_extrs_i: 3, r1.arg2_exact: a year, r1.num_extrs_i: 2, r0.conf_f: 0.653, r1.id: reverb-339477493, r0.arg1_exact: a year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(a year))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.332833090680356)
What year did Hitler die?	the city	-2.3728613833129413	Derivation(What year did Hitler die?,the city,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: thirty years, r0.rel_exact: builded, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-335484994, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: the city, r1.conf_f: 0.94465774, r1.arg2: the city, r0.arg2: the city, r0.rel: builded, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 15, r1.arg2_exact: the city, r1.num_extrs_i: 2, r0.conf_f: 0.793, r1.id: openie4-41318537, r0.arg1_exact: thirty years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(the city))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.3728613833129413)
What year did Hitler die?	the war	-2.4621737384500206	Derivation(What year did Hitler die?,the war,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the war, r0.rel_exact: was a secret for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-381165189, r1.rel: might have died in, r0.namespace: reverb, r0.arg2_exact: many years, r1.conf_f: 0.775, r1.arg2: the war, r0.arg2: many years, r0.rel: was a secret for, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: might have died in, r0.num_extrs_i: 3, r1.arg2_exact: the war, r1.num_extrs_i: 7, r0.conf_f: 0.874, r1.id: reverb-179646274, r0.arg1_exact: the war, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the war))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = aaa aaa -> 1.0, action type = ExecutionAction -> 1.0),-2.4621737384500206)
What year did Hitler die?	the ?60s	-2.4956255001777445	Derivation(What year did Hitler die?,the ?60s,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 01209x, r0.arg1: The Wonder Years, r0.rel_exact: was set in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-172415939, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: the ?60s, r1.conf_f: 0.644, r1.arg2: the 60s, r0.arg2: the ?60s, r0.rel: was set in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 2, r1.arg2_exact: the 60s, r1.num_extrs_i: 5, r0.conf_f: 0.832, r1.id: reverb-283599790, r0.arg1_exact: The Wonder Years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(the ?60s))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.9333333333333333, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, question prefix = 'what year' and answer shape = aaa ?11a -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.4956255001777445)
What year did Hitler die?	37 years	-2.5649644028973233	Derivation(What year did Hitler die?,37 years,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: 37 years, r0.rel_exact: had been a Trooper for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-333400588, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: seven years, r1.conf_f: 0.69, r1.arg2: 37 years, r0.arg2: seven years, r0.rel: had been a Trooper for, r1.namespace: reverb, r1.arg1: Adolf Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: 37 years, r1.num_extrs_i: 2, r0.conf_f: 0.947, r1.id: reverb-141691636, r0.arg1_exact: 37 years, r1.arg1_exact: Adolf Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(37 years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = 11 aaaa -> 1.0, action type = ExecutionAction -> 1.0),-2.5649644028973233)
What year did Hitler die?	Munich	-2.6016197190943355	Derivation(What year did Hitler die?,Munich,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: this year, r0.rel_exact: set up in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-35814910, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: Munich, r0.arg2_fbid_s: 02h6_6p, r1.conf_f: 0.854, r1.arg2: Munich, r1.arg2_fbid_s: 02h6_6p, r0.arg2: Munich, r0.rel: set up in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 2, r1.arg2_exact: Munich, r1.num_extrs_i: 2, r0.conf_f: 0.79, r1.id: reverb-299981759, r0.arg1_exact: this year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(Munich))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.6016197190943355)
What year did Hitler die?	decades	-2.617150121800206	Derivation(What year did Hitler die?,decades,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,building,true,1172321.0,9169.0,218.0,0.44645047187805176),QueryState($x: (year, building, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, building, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: fifty years, r0.rel_exact: built upon, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-239644047, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: decades, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: decades, r0.rel: built upon, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.787, r1.id: reverb-354128535, r0.arg1_exact: fifty years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, building, $x) (Hitler, die, $x))),AnswerState(decades))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44645047187805176, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.6666666666666666, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.617150121800206)
What year did Hitler die?	a battle	-2.6305615313229223	Derivation(What year did Hitler die?,a battle,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: This year, r0.rel_exact: is setting up for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-126724737, r1.rel: had died in, r0.namespace: reverb, r0.arg2_exact: a battle, r1.conf_f: 0.814, r1.arg2: battle, r0.arg2: a battle, r0.rel: is setting up for, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died in, r0.num_extrs_i: 3, r1.arg2_exact: battle, r1.num_extrs_i: 2, r0.conf_f: 0.905, r1.id: reverb-96859327, r0.arg1_exact: This year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(a battle))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.8571428571428571, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what year' and answer shape = a aaaa -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.6305615313229223)
What year did Hitler die?	the Day	-2.6591216246675526	Derivation(What year did Hitler die?,the Day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: every year, r0.rel_exact: is set aside as, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-261947439, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: the Day, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: the Day, r0.rel: is set aside as, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 5, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.57, r1.id: reverb-293800050, r0.arg1_exact: every year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(the Day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.36363636363636365, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, question prefix = 'what year' and answer shape = aaa Aaa -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.6591216246675526)
What year did Hitler die?	the days	-2.685958904597187	Derivation(What year did Hitler die?,the days,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: ten years, r0.rel_exact: is set way back in, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-299699507, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: the days, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: the days, r0.rel: is set way back in, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 2, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.882, r1.id: reverb-293800050, r0.arg1_exact: ten years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(the days))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.6666666666666666, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.685958904597187)
What year did Hitler die?	two decades	-2.7176722953684593	Derivation(What year did Hitler die?,two decades,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The year 1959, r0.rel_exact: set the stage for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-389638315, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: two decades, r1.conf_f: 0.698, r1.arg2: two decades, r0.arg2: two decades, r0.rel: set the stage for, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: two decades, r1.num_extrs_i: 19, r0.conf_f: 0.928, r1.id: reverb-255121618, r0.arg1_exact: The year 1959, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(two decades))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.7176722953684593)
What year did Hitler die?	age 56	-2.7374185999235428	Derivation(What year did Hitler die?,age 56,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: age 56, r0.rel_exact: has now been a vegan for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-361657669, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: twenty-eight years, r1.conf_f: 0.874, r1.arg2: age 56, r0.arg2: twenty-eight years, r0.rel: has now been a vegan for, r1.namespace: reverb, r1.arg1: Adolf Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: age 56, r1.num_extrs_i: 9, r0.conf_f: 0.875, r1.id: reverb-30105200, r0.arg1_exact: age 56, r1.arg1_exact: Adolf Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(age 56))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0, question prefix = 'what year' and answer shape = aaa 11 -> 1.0),-2.7374185999235428)
What year did Hitler die?	days	-2.833324723428983	Derivation(What year did Hitler die?,days,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02bbq, r0.arg1: days, r0.rel_exact: are a result of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-372584564, r1.rel: had died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.803, r1.arg2: days, r1.arg2_fbid_s: 02bbq, r0.arg2: years, r0.rel: are a result of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died, r0.num_extrs_i: 2, r1.arg2_exact: days, r1.num_extrs_i: 2, r0.conf_f: 0.719, r1.id: reverb-293800050, r0.arg1_exact: days, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(days))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 1.0, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.833324723428983)
What year did Hitler die?	the age	-2.8628018994861257	Derivation(What year did Hitler die?,the age,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0175y2, r0.arg1: the age, r0.rel_exact: have been a resident for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-226972766, r1.rel: has died at, r0.namespace: reverb, r0.arg2_exact: five years, r1.conf_f: 0.835, r1.arg2: the age, r1.arg2_fbid_s: 0175y2, r0.arg2: five years, r0.rel: have been a resident for, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: has died at, r0.num_extrs_i: 3, r1.arg2_exact: the age, r1.num_extrs_i: 3, r0.conf_f: 0.884, r1.id: reverb-107052344, r0.arg1_exact: the age, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the age))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = aaa aaa -> 1.0, action type = ExecutionAction -> 1.0),-2.8628018994861257)
What year did Hitler die?	forty years	-2.9673575292918355	Derivation(What year did Hitler die?,forty years,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: forty years, r0.rel_exact: must have been a Member for at, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-7314319, r1.rel: died almost, r0.namespace: reverb, r0.arg2_exact: least ten years, r1.conf_f: 0.556, r1.arg2: forty years, r0.arg2: least ten years, r0.rel: must have been a Member for at, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died almost, r0.num_extrs_i: 2, r1.arg2_exact: forty years, r1.num_extrs_i: 3, r0.conf_f: 0.824, r1.id: reverb-249803147, r0.arg1_exact: forty years, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(forty years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, question prefix = 'what year' and answer shape = aaaa aaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-2.9673575292918355)
What year did Hitler die?	the City	-3.0726621521624287	Derivation(What year did Hitler die?,the City,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the City, r0.rel_exact: has been a controversial issue for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-59761538, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.94465774, r1.arg2: the city, r0.arg2: years, r0.rel: has been a controversial issue for, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: the city, r1.num_extrs_i: 2, r0.conf_f: 0.893, r1.id: openie4-41318537, r0.arg1_exact: the City, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the City))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa Aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.0726621521624287)
What year did Hitler die?	The city	-3.0726621521624287	Derivation(What year did Hitler die?,The city,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The city, r0.rel_exact: has been a top destination for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-43404038, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.94465774, r1.arg2: the city, r0.arg2: years, r0.rel: has been a top destination for, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: the city, r1.num_extrs_i: 2, r0.conf_f: 0.939, r1.id: openie4-41318537, r0.arg1_exact: The city, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(The city))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.875, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.0726621521624287)
What year did Hitler die?	the Nazis	-3.105861253563802	Derivation(What year did Hitler die?,the Nazis,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be an, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the Nazis, r0.rel_exact: is given an automatic sentence of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-101994915, r1.rel: died under, r0.namespace: reverb, r0.arg2_exact: one or two years, r1.conf_f: 0.532, r1.arg2: the Nazis, r0.arg2: one or two years, r0.rel: is given an automatic sentence of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died under, r0.num_extrs_i: 2, r1.arg2_exact: the Nazis, r1.num_extrs_i: 2, r0.conf_f: 0.604, r1.id: reverb-349401112, r0.arg1_exact: the Nazis, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Hitler, die, $x))),AnswerState(the Nazis))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.4, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.105861253563802)
What year did Hitler die?	The Day	-3.119403685862589	Derivation(What year did Hitler die?,The Day,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The Day, r0.rel_exact: was just published a couple of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-289591767, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.94465774, r1.arg2: the day, r0.arg2: years, r0.rel: was just published a couple of, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 6, r1.arg2_exact: the day, r1.num_extrs_i: 6, r0.conf_f: 0.739, r1.id: openie4-39101941, r0.arg1_exact: The Day, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(The Day))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7142857142857143, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, question prefix = 'what year' and answer shape = Aaa Aaa -> 1.0, action type = ExecutionAction -> 1.0),-3.119403685862589)
What year did Hitler die?	Argentina	-3.205534588543309	Derivation(What year did Hitler die?,Argentina,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0jgd, r0.arg1: Argentina, r0.rel_exact: have been a shambles for, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-370072689, r1.rel: died an old man in, r0.namespace: reverb, r0.arg2_exact: years, r1.conf_f: 0.912, r1.arg2: argentina, r1.arg2_fbid_s: 0jgd, r0.arg2: years, r0.rel: have been a shambles for, r1.namespace: reverb, r1.arg1: *** Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died an old man in, r0.num_extrs_i: 3, r1.arg2_exact: argentina, r1.num_extrs_i: 2, r0.conf_f: 0.925, r1.id: reverb-49342708, r0.arg1_exact: Argentina, r1.arg1_exact: *** Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(Argentina))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8888888888888888, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.205534588543309)
What year did Hitler die?	the action	-3.3203501565967013	Derivation(What year did Hitler die?,the action,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the first year, r0.rel_exact: decide to set, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-257998319, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: the action, r0.arg2_fbid_s: 0181f8, r1.conf_f: 0.701, r1.arg2: action, r0.arg2: the action, r0.rel: decide to set, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 2, r1.arg2_exact: action, r1.num_extrs_i: 2, r0.conf_f: 0.644, r1.id: reverb-368095465, r0.arg1_exact: the first year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(the action))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.4, evidence similarity with query (args only) -> 0.5, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.3203501565967013)
What year did Hitler die?	?Today	-3.3688879861388026	Derivation(What year did Hitler die?,?Today,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be an, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: ?Today, r0.rel_exact: was an incredible start to, r0.id: reverb-264754502, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: the year, r1.conf_f: 0.7, r1.arg2: today, r0.arg2: the year, r0.rel: was an incredible start to, r1.namespace: reverb, r1.arg1: happy ..Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: today, r1.num_extrs_i: 3, r0.conf_f: 0.962, r1.id: reverb-90682353, r0.arg1_exact: ?Today, r1.arg1_exact: happy ..Hitler, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Hitler, die, $x))),AnswerState(?Today))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.7272727272727273, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, evidence similarity with query (args only) -> 0.2, question prefix = 'what year' and answer shape = ?Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.3688879861388026)
What year did Hitler die?	a few years	-3.3741354213836963	Derivation(What year did Hitler die?,a few years,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: a few years, r0.rel_exact: then was a professional for, r0.id: reverb-97092856, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: two years, r1.conf_f: 0.517, r1.arg2: a few years, r0.arg2: two years, r0.rel: then was a professional for, r1.namespace: reverb, r1.arg1: Hitler?s private secretaries, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: a few years, r1.num_extrs_i: 3, r0.conf_f: 0.866, r1.id: reverb-153422279, r0.arg1_exact: a few years, r1.arg1_exact: Hitler?s private secretaries, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(a few years))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5, question prefix = 'what year' and answer shape = a aaa aaaa -> 1.0, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.3741354213836963)
What year did Hitler die?	the battle	-3.4553355476979517	Derivation(What year did Hitler die?,the battle,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is an example of", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is an example of", year) (Hitler, die, $x),false),RelSynRule(be an example of,first become,false,2809.0,122.0,4.0,0.6450527906417847),QueryState($x: ($x, first become, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, first become, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the battle, r0.rel_exact: became the first corporate sponsor of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-210613747, r1.rel: had died in, r0.namespace: reverb, r0.arg2_exact: the ?Year, r1.conf_f: 0.814, r1.arg2: battle, r0.arg2: the ?Year, r0.rel: became the first corporate sponsor of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died in, r0.num_extrs_i: 3, r1.arg2_exact: battle, r1.num_extrs_i: 2, r0.conf_f: 0.788, r1.id: reverb-96859327, r0.arg1_exact: the battle, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, first become, year) (Hitler, die, $x))),AnswerState(the battle))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.6450527906417847, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.25, steps -> 0.75, query similarity with question -> 0.25, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.4553355476979517)
What year did Hitler die?	Action	-3.488797387887576	Derivation(What year did Hitler die?,Action,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,be in motion,false,1172321.0,214.0,4.0,0.438931941986084),QueryState($x: ($x, be in motion, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be in motion, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: Action, r0.rel_exact: was in response to a motion, r1.arg1_fbid_s: 07_m9_, r0.id: openie4-40140467, r1.rel: died in, r0.namespace: openie4, r0.arg2_exact: last year, r1.conf_f: 0.91977596, r1.arg2: action, r0.arg2: last year, r0.rel: was in response to a motion, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 3, r1.arg2_exact: action, r1.num_extrs_i: 2, r0.conf_f: 0.91977596, r1.id: openie4-39101812, r0.arg1_exact: Action, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be in motion, year) (Hitler, die, $x))),AnswerState(Action))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.438931941986084, minimum join key similarity -> 0.8333333333333334, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5714285714285714, evidence similarity with query (args only) -> 0.6666666666666666, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.2222222222222222, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.488797387887576)
What year did Hitler die?	The action	-3.5347322693084333	Derivation(What year did Hitler die?,The action,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be an,false,4.087548E7,201558.0,18416.0,0.3775344491004944),QueryState($x: ($x, be an, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be an, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The action, r0.rel_exact: is an expected part of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-112478628, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: the four-year review, r1.conf_f: 0.701, r1.arg2: action, r0.arg2: the four-year review, r0.rel: is an expected part of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 3, r1.arg2_exact: action, r1.num_extrs_i: 2, r0.conf_f: 0.784, r1.id: reverb-368095465, r0.arg1_exact: The action, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be an, year) (Hitler, die, $x))),AnswerState(The action))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.3775344491004944, minimum join key similarity -> 0.75, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.42857142857142855, evidence similarity with query (args only) -> 0.2, steps -> 0.75, question prefix = 'what year' and answer shape = Aaa aaaa -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.5347322693084333)
What year did Hitler die?	battle	-3.541161540822674	Derivation(What year did Hitler die?,battle,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: this year, r0.rel_exact: is set to do, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-223967166, r1.rel: had died in, r0.namespace: reverb, r0.arg2_exact: battle, r1.conf_f: 0.814, r1.arg2: battle, r0.arg2: battle, r0.rel: is set to do, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: had died in, r0.num_extrs_i: 2, r1.arg2_exact: battle, r1.num_extrs_i: 2, r0.conf_f: 0.636, r1.id: reverb-96859327, r0.arg1_exact: this year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(battle))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.541161540822674)
What year did Hitler die?	Decade	-3.5644423864875794	Derivation(What year did Hitler die?,Decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 033g_h, r0.arg1: Decade, r0.rel_exact: is a nice way to get a handle on, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-346337937, r1.rel: died, r0.namespace: reverb, r0.arg2_exact: the 10 years, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: the 10 years, r0.rel: is a nice way to get a handle on, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.821, r1.id: reverb-354128535, r0.arg1_exact: Decade, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(Decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.7692307692307693, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.5, question prefix = 'what year' and answer shape = Aaaaa -> 1.0, steps -> 0.75, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.5644423864875794)
What year did Hitler die?	the capital	-3.97481929220723	Derivation(What year did Hitler die?,the capital,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the capital, r0.rel_exact: was just a hair under, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-181189228, r1.rel: to die in, r0.namespace: reverb, r0.arg2_exact: two years, r1.conf_f: 0.8635294, r1.arg2: the capital, r0.arg2: two years, r0.rel: was just a hair under, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: to die in, r0.num_extrs_i: 2, r1.arg2_exact: the capital, r1.num_extrs_i: 2, r0.conf_f: 0.829, r1.id: openie4-39097684, r0.arg1_exact: the capital, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the capital))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.375, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, question prefix = 'what year' and answer shape = aaa aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-3.97481929220723)
What year did Hitler die?	the Capitals	-4.193831356870398	Derivation(What year did Hitler die?,the Capitals,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: the Capitals, r0.rel_exact: will be a very hard team to beat, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-167892211, r1.rel: to die in, r0.namespace: reverb, r0.arg2_exact: this year, r1.conf_f: 0.8635294, r1.arg2: the capital, r0.arg2: this year, r0.rel: will be a very hard team to beat, r1.namespace: openie4, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: to die in, r0.num_extrs_i: 8, r1.arg2_exact: the capital, r1.num_extrs_i: 2, r0.conf_f: 0.538, r1.id: openie4-39097684, r0.arg1_exact: the Capitals, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(the Capitals))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.8695652173913043, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what year' and answer shape = aaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3, evidence similarity with query (args only) -> 0.6666666666666666, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.193831356870398)
What year did Hitler die?	year	-4.277289833798628	Derivation(What year did Hitler die?,year,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,so be sure to,false,4.087548E7,104.0,32.0,0.4154782295227051),QueryState($x: ($x, so be sure to, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, so be sure to, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: year, r0.rel_exact: so be sure to look at, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-381616653, r1.rel: died little under, r0.namespace: reverb, r0.arg2_exact: this year?s Seminar Descriptions, r1.conf_f: 0.838, r1.arg2: a year, r0.arg2: this year?s Seminar Descriptions, r0.rel: so be sure to look at, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died little under, r0.num_extrs_i: 2, r1.arg2_exact: a year, r1.num_extrs_i: 2, r0.conf_f: 0.672, r1.id: reverb-339477493, r0.arg1_exact: year, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, so be sure to, year) (Hitler, die, $x))),AnswerState(year))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.4154782295227051, minimum join key similarity -> 0.8, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.5555555555555556, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.2, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.277289833798628)
What year did Hitler die?	action	-4.754918068552233	Derivation(What year did Hitler die?,action,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "is a", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "is a", year) (Hitler, die, $x),false),RelSynRule(be a,setting,true,1172321.0,919.0,18.0,0.44039344787597656),QueryState($x: (year, setting, $x) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: (year, setting, $x) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1: The first Five-Year Program, r0.rel_exact: sets a solid course of, r1.arg1_fbid_s: 07_m9_, r0.id: reverb-114137315, r1.rel: died in, r0.namespace: reverb, r0.arg2_exact: action, r1.conf_f: 0.701, r1.arg2: action, r0.arg2: action, r0.rel: sets a solid course of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died in, r0.num_extrs_i: 2, r1.arg2_exact: action, r1.num_extrs_i: 2, r0.conf_f: 0.543, r1.id: reverb-368095465, r0.arg1_exact: The first Five-Year Program, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: (year, setting, $x) (Hitler, die, $x))),AnswerState(action))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.44039344787597656, minimum join key similarity -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.2857142857142857, evidence similarity with query (args only) -> 0.16666666666666666, steps -> 0.75, query similarity with question -> 0.2857142857142857, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-4.754918068552233)
What year did Hitler die?	decade	-6.591370211305035	Derivation(What year did Hitler die?,decade,Vector(QaStep(What year did Hitler die?,QuestionStateImpl(What year did Hitler die?,Sentence(What year did Hitler die?),false),RegexQuestionPattern(List(ent, type, rel),<lemma='what' | lemma='which'> (<type>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <lemma='be' | lemma='have' | lemma='do'> (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)? (?:<pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) <pos='.'>?,List($x: ($x, "type" | "is a" | "is a kind of" | "is an example of", $type) ($ent, $rel, $x))),QueryState($x: ($x, "type", year) (Hitler, die, $x),false)), QaStep(What year did Hitler die?,QueryState($x: ($x, "type", year) (Hitler, die, $x),false),RelSynRule(type,be a,false,4.087548E7,1172321.0,90711.0,0.37234050035476685),QueryState($x: ($x, be a, year) (Hitler, die, $x),true)), QaStep(What year did Hitler die?,QueryState($x: ($x, be a, year) (Hitler, die, $x),true),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 033g_h, r0.arg1: decade, r0.rel_exact: is ?a period of, r1.arg1_fbid_s: 07_m9_, r0.id: openie4-4608177, r1.rel: died, r0.namespace: openie4, r0.arg2_exact: ten years?, r1.conf_f: 0.517, r1.arg2: decades, r0.arg2: ten years?, r0.rel: is ?a period of, r1.namespace: reverb, r1.arg1: Hitler, r0.corpora_ss: List(cw), r1.rel_exact: died, r0.num_extrs_i: 2, r1.arg2_exact: decades, r1.num_extrs_i: 2, r0.conf_f: 0.8, r1.id: reverb-354128535, r0.arg1_exact: decade, r1.arg1_exact: Hitler, r1.corpora_ss: List(cw)),$x: ($x, be a, year) (Hitler, die, $x))),AnswerState(decade))),SparseVector(action type = RelSynRule -> 1.0, relSynRule pmi -> 0.37234050035476685, minimum join key similarity -> 0.9230769230769231, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 2.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.25, steps -> 0.75, answer from namespace 'openie4' -> 1.0, query similarity with question -> 0.25, question prefix = 'what year' and answer shape = aaaa -> 1.0, action type = RegexQuestionPattern -> 1.0, relSynRule passivized -> 0.0, action type = ExecutionAction -> 1.0),-6.591370211305035)
What is its popular name?	Fort Pilar	1.4027037094133668	Derivation(What is its popular name?,Fort Pilar,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: Fort Pilar, r0.rel_exact: is, r0.id: reverb-243291958, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.644, r0.arg1_exact: Fort Pilar),$x: ($x, is, its popular name))),AnswerState(Fort Pilar))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.4027037094133668)
What is its popular name?	Raja Yoga	1.1476653178711025	Derivation(What is its popular name?,Raja Yoga,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 02y9x4, r0.arg1: Raja Yoga, r0.rel_exact: is, r0.id: reverb-32786160, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: is, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.879, r0.arg1_exact: Raja Yoga),$x: ($x, is, its popular name))),AnswerState(Raja Yoga))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, question prefix = 'what' and answer shape = Aaaa Aaaa -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 1.0, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),1.1476653178711025)
What is its popular name?	Great Fleabane	0.15952652694377423	Derivation(What is its popular name?,Great Fleabane,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: Great Fleabane, r0.rel_exact: is one of, r0.id: reverb-3112605, r0.namespace: reverb, r0.arg2_exact: its popular names, r0.arg2: its popular names, r0.rel: is one of, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.945, r0.arg1_exact: Great Fleabane),$x: ($x, is, its popular name))),AnswerState(Great Fleabane))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaaaa Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.15952652694377423)
What is its popular name?	an animal	0.12023411641145176	Derivation(What is its popular name?,an animal,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: an animal, r0.rel_exact: is mentioned by, r0.id: reverb-57333466, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: is mentioned by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.731, r0.arg1_exact: an animal),$x: ($x, is, its popular name))),AnswerState(an animal))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = aa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),0.12023411641145176)
What is its popular name?	eastern Kyoto	-0.13313494209843157	Derivation(What is its popular name?,eastern Kyoto,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: eastern Kyoto, r0.rel_exact: is better known by, r0.id: reverb-277265589, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: is better known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.766, r0.arg1_exact: eastern Kyoto),$x: ($x, is, its popular name))),AnswerState(eastern Kyoto))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, question prefix = 'what' and answer shape = aaaa Aaaaa -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.13313494209843157)
What is its popular name?	the toxin	-0.5696539689278441	Derivation(What is its popular name?,the toxin,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: the toxin, r0.rel_exact: are characterized by, r0.id: reverb-138631769, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: are characterized by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.856, r0.arg1_exact: the toxin),$x: ($x, is, its popular name))),AnswerState(the toxin))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.5696539689278441)
What is its popular name?	Simbang Gabi	-0.6715368058653877	Derivation(What is its popular name?,Simbang Gabi,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: Simbang Gabi, r0.rel_exact: is also known by, r0.id: reverb-192569591, r0.namespace: reverb, r0.arg2_exact: its popular Spanish name, r0.arg2: its popular Spanish name, r0.rel: is also known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.858, r0.arg1_exact: Simbang Gabi),$x: ($x, is, its popular name))),AnswerState(Simbang Gabi))),SparseVector(question prefix = 'what' and answer shape = Aaaaa Aaaa -> 1.0, minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.6715368058653877)
What is its popular name?	the building	-0.7708505321251	Derivation(What is its popular name?,the building,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: the building, r0.rel_exact: was officially recognized by, r0.id: reverb-325495849, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: was officially recognized by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.798, r0.arg1_exact: the building),$x: ($x, is, its popular name))),AnswerState(the building))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.7708505321251)
What is its popular name?	Apple	-0.8054421071773017	Derivation(What is its popular name?,Apple,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0k8z, r0.arg1: Apple, r0.rel_exact: is certainly making, r0.id: reverb-117966781, r0.namespace: reverb, r0.arg2_exact: its name popular, r0.arg2: its name popular, r0.rel: is certainly making, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.835, r0.arg1_exact: Apple),$x: ($x, is, its popular name))),AnswerState(Apple))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8054421071773017)
What is its popular name?	Chalcedony	-0.8054421071773017	Derivation(What is its popular name?,Chalcedony,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1_fbid_s: 0c4n7, r0.arg1: Chalcedony, r0.rel_exact: is known by, r0.id: reverb-225250945, r0.namespace: reverb, r0.arg2_exact: its popular names, r0.arg2: its popular names, r0.rel: is known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.797, r0.arg1_exact: Chalcedony),$x: ($x, is, its popular name))),AnswerState(Chalcedony))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 1.0, question prefix = 'what' and answer shape = Aaaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8054421071773017)
What is its popular name?	The palace	-0.8234888532887331	Derivation(What is its popular name?,The palace,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: The palace, r0.rel_exact: is also known by, r0.id: reverb-144495754, r0.namespace: reverb, r0.arg2_exact: its popular name, r0.arg2: its popular name, r0.rel: is also known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 3, r0.conf_f: 0.843, r0.arg1_exact: The palace),$x: ($x, is, its popular name))),AnswerState(The palace))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-0.8234888532887331)
What is its popular name?	The Red Drum	-1.1041401642820792	Derivation(What is its popular name?,The Red Drum,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: The Red Drum, r0.rel_exact: is commonly called by, r0.id: reverb-183440013, r0.namespace: reverb, r0.arg2_exact: its more popular nick name, r0.arg2: its more popular nick name, r0.rel: is commonly called by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.65, r0.arg1_exact: The Red Drum),$x: ($x, is, its popular name))),AnswerState(The Red Drum))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.6, question prefix = 'what' and answer shape = Aaa Aaa Aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.1041401642820792)
What is its popular name?	The company	-1.2291705539562567	Derivation(What is its popular name?,The company,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: The company, r0.rel_exact: is known by, r0.id: reverb-99280008, r0.namespace: reverb, r0.arg2_exact: its popular brand name, r0.arg2: its popular brand name, r0.rel: is known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.809, r0.arg1_exact: The company),$x: ($x, is, its popular name))),AnswerState(The company))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, question prefix = 'what' and answer shape = Aaa aaaa -> 1.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.3333333333333333, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.2291705539562567)
What is its popular name?	the temple	-1.37772879598988	Derivation(What is its popular name?,the temple,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: the temple, r0.rel_exact: is better known by, r0.id: reverb-385435808, r0.namespace: reverb, r0.arg2_exact: its popular name Kinkakuji, r0.arg2: its popular name Kinkakuji, r0.rel: is better known by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.865, r0.arg1_exact: the temple),$x: ($x, is, its popular name))),AnswerState(the temple))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.37772879598988)
What is its popular name?	the company	-1.4984467339082337	Derivation(What is its popular name?,the company,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: the company, r0.rel_exact: is usually referred to by, r0.id: reverb-1087486, r0.namespace: reverb, r0.arg2_exact: its popular brand name, r0.arg2: its popular brand name, r0.rel: is usually referred to by, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.836, r0.arg1_exact: the company),$x: ($x, is, its popular name))),AnswerState(the company))),SparseVector(minimum join key similarity -> 0.0, question prefix = 'what' and answer shape = aaa aaaa -> 1.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.2, evidence similarity with query (args only) -> 0.75, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.4984467339082337)
What is its popular name?	the night heron	-1.6883760652045585	Derivation(What is its popular name?,the night heron,Vector(QaStep(What is its popular name?,QuestionStateImpl(What is its popular name?,Sentence(What is its popular name?),false),RegexQuestionPattern(List(rel, ent),<lemma='what' | lemma='who'> (<rel>:<pos='RB'>? <pos='VB' | pos='VBP' | pos='VBD' | pos='VBZ' | pos='VBG' | pos='VBN'> <pos='RP'>? <pos='RB'>?+ (?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>* <pos='RB'>? <pos='IN' | pos='TO' | pos='RP'> <pos='RB'>?)?) (<ent>:(?:<pos='$' | pos='PRP$' | pos='DT' | pos='JJ' | pos='JJS' | pos='JJR' | pos='POS' | pos='PRP' | pos='RB' | pos='RBR' | pos='RBS' | pos='VBN' | pos='VBG' | pos='CC'>* < pos='CD' | pos='DT' | pos='NN' | pos='NNS' | pos='NNP' | pos='NNPS' | pos='POS' | pos='VBN' | pos='VBG'>+)+) <pos='.'>?,List(($x, $rel, $ent))),QueryState($x: ($x, is, its popular name),false)), QaStep(What is its popular name?,QueryState($x: ($x, is, its popular name),false),ExecutionAction(ExecTuple((r0.arg1: the night heron, r0.rel_exact: is well expressed in, r0.id: reverb-207158790, r0.namespace: reverb, r0.arg2_exact: its popular names, r0.arg2: its popular names, r0.rel: is well expressed in, r0.corpora_ss: List(cw), r0.num_extrs_i: 2, r0.conf_f: 0.759, r0.arg1_exact: the night heron),$x: ($x, is, its popular name))),AnswerState(the night heron))),SparseVector(minimum join key similarity -> 0.0, fbid join key violation -> 0.0, answer is linked to freebase -> 0.0, answer from namespace 'reverb' -> 1.0, num conjuncts -> 1.0, query relation is light verb -> 1.0, evidence similarity with query (rels only) -> 0.25, evidence similarity with query (args only) -> 1.0, question prefix = 'what' and answer shape = aaa aaaa aaaa -> 1.0, steps -> 0.5, query similarity with question -> 0.5, action type = RegexQuestionPattern -> 1.0, action type = ExecutionAction -> 1.0),-1.6883760652045585)
