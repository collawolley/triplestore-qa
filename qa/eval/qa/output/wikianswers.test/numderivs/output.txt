How common is the bipolar disorder?	lithium	6.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: lithium, r0.namespace: openie4, r0.arg2: the medication for bipolar disorder, r0.rel: was) => lithium; what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Lithium, r0.namespace: openie4, r0.arg2: the treatment of Bipolar Disorder, r0.rel: is used in) => Lithium; what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Lithium, r0.namespace: openie4, r0.arg2: the treatment of bipolar disorder, r0.rel: is widely used in) => Lithium; what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Lithium, r0.namespace: openie4, r0.arg2: the treatment of bipolar disorders, r0.rel: is used in) => Lithium; what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Lithium, r0.namespace: openie4, r0.arg2: the treatment of choice for bipolar disorder, r0.rel: is) => Lithium; what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Lithium, r0.namespace: openie4, r0.arg2: the treatment of choice for bipolar disorder, r0.rel: has been) => Lithium
How common is the bipolar disorder?	to?	1.0	what do the bipolar disorder ? => $x: ($x, do, the bipolar disorder) => $x: ($x, do, the bipolar disorder) => (r0.arg1: to?, r0.namespace: reverb, r0.arg2: the Bipolar Spectrum Disorders, r0.rel: do with) => to?
How common is the bipolar disorder?	bipolar i. dual diagnosis	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: bipolar I. Dual diagnosis, r0.namespace: reverb, r0.arg2: the bipolar disorders, r0.rel: is another of) => bipolar I. Dual diagnosis
How common is the bipolar disorder?	friends	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: friends, r0.namespace: reverb, r0.arg2: the bipolar disorder sufferer, r0.rel: is ideal to help) => friends
How common is the bipolar disorder?	bipolar bipolar disorder	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: BIPOLAR BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: the bogus BIPOLAR DISORDER, r0.rel: was on) => BIPOLAR BIPOLAR DISORDER
How common is the bipolar disorder?	psychosis	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: psychosis, r0.namespace: reverb, r0.arg2: the Manic-Depressive or Bipolar Disorder, r0.rel: are) => psychosis
How common is the bipolar disorder?	55 years	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: 55 years, r0.namespace: reverb, r0.arg2: the bipolar disorder, r0.rel: are more likely to have) => 55 years
How common is the bipolar disorder?	anxiety	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: anxiety, r0.namespace: reverb, r0.arg2: the bipolar disorder symptoms, r0.rel: is part of) => anxiety
How common is the bipolar disorder?	common strategy	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: A common strategy, r0.namespace: reverb, r0.arg2: the bipolar disorder, r0.rel: is to first treat) => A common strategy
How common is the bipolar disorder?	dr. frye	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Dr. Frye, r0.namespace: reverb, r0.arg2: the Bipolar Disorder Research Program, r0.rel: was director of) => Dr. Frye
How common is the bipolar disorder?	disorder	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: disorder, r0.namespace: reverb, r0.arg2: the bipolar disorders, r0.rel: is the most serious of) => disorder
How common is the bipolar disorder?	mental gymnastics	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: mental gymnastics, r0.namespace: reverb, r0.arg2: the bipolar disorder, r0.rel: are just) => mental gymnastics
How common is the bipolar disorder?	kids	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: kids, r0.namespace: reverb, r0.arg2: the Bipolar Disorder, r0.rel: is) => kids
How common is the bipolar disorder?	flux	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Flux, r0.namespace: openie4, r0.arg2: the fundamental nature of bipolar disorder, r0.rel: is) => Flux
How common is the bipolar disorder?	dr. torrey	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Dr. Torrey, r0.namespace: reverb, r0.arg2: the Bipolar Disorder research field, r0.rel: is a leader in) => Dr. Torrey
How common is the bipolar disorder?	hypomania	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: hypomania, r0.namespace: reverb, r0.arg2: the bipolar disorder category, r0.rel: is included in) => hypomania
How common is the bipolar disorder?	mania	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: mania, r0.namespace: openie4, r0.arg2: the hallmark of bipolar disorder, r0.rel: is) => mania
How common is the bipolar disorder?	child	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: The child, r0.namespace: reverb, r0.arg2: the bipolar disorder and most, r0.rel: is potentially get) => The child
How common is the bipolar disorder?	decades	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: decades, r0.namespace: openie4, r0.arg2: the treatment bipolar disorder, r0.rel: has been prescribed for) => decades
How common is the bipolar disorder?	depression	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: Depression, r0.namespace: reverb, r0.arg2: the Coin Bipolar disorder, r0.rel: is Just One Side of) => Depression
How common is the bipolar disorder?	genetic tendency	1.0	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, the bipolar disorder) => (r0.arg1: genetic tendency, r0.namespace: reverb, r0.arg2: the most possible Bipolar Disorder cause, r0.rel: is) => genetic tendency
What is a job for a lawyer?	municipal real estate	6.0	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is a job for, a lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is a job for, a lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, a lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, a lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be a job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be a job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate
What is a job for a lawyer?	explosion	4.0	the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, a lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion
What is a job for a lawyer?	cases	4.0	the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases
What is a job for a lawyer?	doctors	4.0	the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, a lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors
What is a job for a lawyer?	cameron kate	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Cameron and Kate, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: were looking for) => Cameron and Kate; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Cameron and Kate, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: were looking for) => Cameron and Kate
What is a job for a lawyer?	lawyer leader task	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a lawyer Leader Task, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: will be useful for) => a lawyer Leader Task; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a lawyer Leader Task, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: will be useful for) => a lawyer Leader Task
What is a job for a lawyer?	business owner	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a business owner, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => a business owner; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a business owner, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => a business owner
What is a job for a lawyer?	clients	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: clients, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are billed for) => clients; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: clients, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are billed for) => clients
What is a job for a lawyer?	more ? ralli	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: more ? Ralli, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => more ? Ralli; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: more ? Ralli, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => more ? Ralli
What is a job for a lawyer?	actress	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an actress, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is now looking for) => an actress; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an actress, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is now looking for) => an actress
What is a job for a lawyer?	11:57 ralli	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 11:57 Ralli, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => 11:57 Ralli; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 11:57 Ralli, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => 11:57 Ralli
What is a job for a lawyer?	former georgia state student	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a former Georgia State student, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was looking for) => a former Georgia State student; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a former Georgia State student, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was looking for) => a former Georgia State student
What is a job for a lawyer?	professional life	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: professional life, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are more frustrating for) => professional life; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: professional life, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are more frustrating for) => professional life
What is a job for a lawyer?	daytime television commercial	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Every daytime television commercial, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is for) => Every daytime television commercial; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Every daytime television commercial, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is for) => Every daytime television commercial
What is a job for a lawyer?	subpoenas	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Subpoenas, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are absurdly easy for) => Subpoenas; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Subpoenas, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are absurdly easy for) => Subpoenas
What is a job for a lawyer?	absence	2.0	what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be a job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be a job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence
What is a job for a lawyer?	article	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The article, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is fascinating for) => The article; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The article, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is fascinating for) => The article
What is a job for a lawyer?	reasons someone	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: reasons someone, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be searching for) => reasons someone; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: reasons someone, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be searching for) => reasons someone
What is a job for a lawyer?	surrender	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: surrender, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was to ask for) => surrender; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: surrender, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was to ask for) => surrender
What is a job for a lawyer?	movement	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The movement, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is currently looking for) => The movement; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The movement, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is currently looking for) => The movement
What is a job for a lawyer?	9/11	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is asking for) => 9/11; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is asking for) => 9/11
What is a job for a lawyer?	business	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: business, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is so difficult for) => business; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: business, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is so difficult for) => business
What is a job for a lawyer?	legal advice	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: legal advice, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => legal advice; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: legal advice, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => legal advice
What is a job for a lawyer?	message	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: A message, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was left for) => A message; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: A message, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was left for) => A message
What is a job for a lawyer?	statistics	2.0	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is an increasingly important part of) => statistics; what be a lawyer a job ? => $x: ($x, be, a lawyer a job) => $x: ($x, be, a lawyer a job) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is an increasingly important part of) => statistics
What is a job for a lawyer?	analysis	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the analysis, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are important tasks for) => the analysis; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the analysis, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are important tasks for) => the analysis
What is a job for a lawyer?	individual	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an individual, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => an individual; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an individual, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => an individual
What is a job for a lawyer?	switzerland	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Switzerland, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is looking for) => Switzerland; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Switzerland, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is looking for) => Switzerland
What is a job for a lawyer?	spousal support	2.0	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: Spousal Support, r0.namespace: reverb, r0.arg2: a Family Lawyer?s job, r0.rel: are Enforced Part of) => Spousal Support; what be a lawyer a job ? => $x: ($x, be, a lawyer a job) => $x: ($x, be, a lawyer a job) => (r0.arg1: Spousal Support, r0.namespace: reverb, r0.arg2: a Family Lawyer?s job, r0.rel: are Enforced Part of) => Spousal Support
What is a job for a lawyer?	time	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is long for) => time; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is long for) => time
What is a job for a lawyer?	universities	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: universities, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are good for becoming) => universities; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: universities, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are good for becoming) => universities
What is a job for a lawyer?	you?ll	2.0	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll
What is a job for a lawyer?	firm	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => The firm; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => The firm
What is a job for a lawyer?	role	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The role, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is ideally looking for) => The role; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The role, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is ideally looking for) => The role
What is a job for a lawyer?	sirius	2.0	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius
What is a job for a lawyer?	yorkshire	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Yorkshire, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are now looking for) => Yorkshire; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Yorkshire, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are now looking for) => Yorkshire
What is a job for a lawyer?	middle	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: middle, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => middle; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: middle, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => middle
What is a job for a lawyer?	larry hope	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Larry Hope, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was looking for) => Larry Hope; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Larry Hope, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was looking for) => Larry Hope
What is a job for a lawyer?	public	2.0	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is often a necessary part of) => the public; what be a lawyer a job ? => $x: ($x, be, a lawyer a job) => $x: ($x, be, a lawyer a job) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is often a necessary part of) => the public
What is a job for a lawyer?	world wide web services	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: world wide web services, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are searching for) => world wide web services; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: world wide web services, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are searching for) => world wide web services
What is a job for a lawyer?	children	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: THE CHILDREN, r0.namespace: reverb, r0.arg2: A LAWYER, r0.rel: ARE LOOKING FOR) => THE CHILDREN; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: THE CHILDREN, r0.namespace: reverb, r0.arg2: A LAWYER, r0.rel: ARE LOOKING FOR) => THE CHILDREN
What is a job for a lawyer?	former	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the former, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is studying for) => the former; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the former, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is studying for) => the former
What is a job for a lawyer?	position	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The position, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is designed for) => The position; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The position, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is designed for) => The position
What is a job for a lawyer?	lot	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a lot, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: were looking for) => a lot; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: a lot, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: were looking for) => a lot
What is a job for a lawyer?	portland	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Portland, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are for) => Portland; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Portland, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are for) => Portland
What is a job for a lawyer?	pct	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: PCT, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => PCT; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: PCT, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => PCT
What is a job for a lawyer?	14 years	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 14 years, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was babysitting for) => 14 years; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: 14 years, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was babysitting for) => 14 years
What is a job for a lawyer?	first position	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The first position, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is for) => The first position; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: The first position, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is for) => The first position
What is a job for a lawyer?	robert e. lee	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Robert E. Lee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Robert E. Lee; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Robert E. Lee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Robert E. Lee
What is a job for a lawyer?	communications products	2.0	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: communications products, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are available for) => communications products; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: communications products, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are available for) => communications products
Where can you sell books?	question	3.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The question, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: is) => The question; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: Is) => the question; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: Old Books Worth, r0.rel: Much are) => the question
Where can you sell books?	ebooks	2.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ebooks, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => ebooks; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: eBooks, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => eBooks
Where can you sell books?	drift	2.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Drift, r0.namespace: openie4, r0.arg2: a book worth reading, r0.rel: is) => Drift; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Drift, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Drift
Where can you sell books?	any book worth banning	2.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Any Book Worth Banning, r0.namespace: reverb, r0.arg2: A Book Worth, r0.rel: Is) => Any Book Worth Banning; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Any book worth banning, r0.namespace: openie4, r0.arg2: a book worth reading, r0.rel: is) => Any book worth banning
Where can you sell books?	marked	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Marked, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: here is) => Marked
Where can you sell books?	waters	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Waters, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is definitely) => Waters
Where can you sell books?	ellen hopkins	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Ellen Hopkins, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => Ellen Hopkins
Where can you sell books?	one line	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: One line, r0.namespace: reverb, r0.arg2: worth the entire book, r0.rel: alone was) => One line
Where can you sell books?	careerists	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Careerists, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => Careerists
Where can you sell books?	status	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Status, r0.namespace: reverb, r0.arg2: that book worth, r0.rel: Is) => Status
Where can you sell books?	book royalties work	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Book Royalties Work, r0.namespace: reverb, r0.arg2: Your Book Worth, r0.rel: Is) => Book Royalties Work
Where can you sell books?	friendship	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Friendship, r0.namespace: reverb, r0.arg2: worth one book, r0.rel: is) => Friendship
Where can you sell books?	car	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the their car, r0.namespace: reverb, r0.arg2: worth blue book, r0.rel: was) => the their car
Where can you sell books?	chris bowers	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Chris Bowers, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: is) => Chris Bowers
Where can you sell books?	last song	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Last Song, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is definitely) => The Last Song
Where can you sell books?	adventure	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Adventure, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Adventure
Where can you sell books?	one brave deed	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: One brave deed, r0.namespace: openie4, r0.arg2: worth a thousand books, r0.rel: is) => One brave deed
Where can you sell books?	hugo question	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the Hugo question, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: is) => the Hugo question
Where can you sell books?	$ 64,000 question	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The $ 64,000 question, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => The $ 64,000 question
Where can you sell books?	?drift ?	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ?Drift ?, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => ?Drift ?
Where can you sell books?	free overview	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a free overview, r0.namespace: reverb, r0.arg2: Google Books and worth, r0.rel: is on) => a free overview
Where can you sell books?	sellers	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Sellers, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => Sellers
Where can you sell books?	declaration	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Declaration, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is definitely) => The Declaration
Where can you sell books?	entire benchmarking efforts	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: entire benchmarking efforts, r0.namespace: reverb, r0.arg2: worth one large book, r0.rel: are) => entire benchmarking efforts
Where can you sell books?	followup question	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a followup question, r0.namespace: reverb, r0.arg2: that book worth buying, r0.rel: is) => a followup question
Where can you sell books?	columbus	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Columbus, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => Columbus
Where can you sell books?	book	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a book, r0.namespace: openie4, r0.arg2: worth a book, r0.rel: is) => a book
Where can you sell books?	charcoal foundry	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Charcoal Foundry, r0.namespace: reverb, r0.arg2: a small book worth, r0.rel: is) => The Charcoal Foundry
Where can you sell books?	silicon snake oil	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Silicon Snake Oil, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Silicon Snake Oil
Where can you sell books?	less than $ 5m	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: less than $ 5M, r0.namespace: reverb, r0.arg2: FaceBook worth, r0.rel: Is) => less than $ 5M
Where can you sell books?	french bistro	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: French Bistro, r0.namespace: openie4, r0.arg2: a book worth owning, r0.rel: is) => French Bistro
Where can you sell books?	person	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a person, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => a person
Where can you sell books?	edwarda comment # 56	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: edwarda Comment # 56, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: Is) => edwarda Comment # 56
Where can you sell books?	bible	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Bible, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => The Bible
Where can you sell books?	special lectures seminars	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: special lectures and seminars, r0.namespace: reverb, r0.arg2: this Book Worth, r0.rel: is) => special lectures and seminars
Where can you sell books?	elizabeth	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Elizabeth, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: was) => Elizabeth
Where can you sell books?	mary shelley	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Mary Shelley, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Mary Shelley
Where can you sell books?	4/4/2011	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: 4/4/2011, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => 4/4/2011
Where can you sell books?	king?s	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: King?s, r0.namespace: reverb, r0.arg2: worth writing books, r0.rel: are) => King?s
Where can you sell books?	daniel boone	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: DANIEL BOONE, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => DANIEL BOONE
Where can you sell books?	man versus himself	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Man Versus Himself, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Man Versus Himself
Where can you sell books?	rev. rob gieselmann	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the Rev. Rob Gieselmann, r0.namespace: reverb, r0.arg2: an online book worth, r0.rel: is) => the Rev. Rob Gieselmann
Where can you sell books?	rural literacies	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Rural Literacies, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Rural Literacies
Where can you sell books?	anastasia young	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Anastasia Young, r0.namespace: reverb, r0.arg2: a book worth space, r0.rel: is) => Anastasia Young
Where can you sell books?	13 car	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: 13 car, r0.namespace: reverb, r0.arg2: worth blue book, r0.rel: was) => 13 car
Where can you sell books?	fitness	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Fitness, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Fitness
Where can you sell books?	annual	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Annual, r0.namespace: reverb, r0.arg2: a book worth buying, r0.rel: is) => Annual
Where can you sell books?	so many issues	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: so many issues, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: is) => so many issues
Where can you sell books?	value	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Value, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: is) => Value
Where can you sell books?	arnold snyder re	1.0	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Arnold Snyder Re, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: Is) => Arnold Snyder Re
What is Capitol of lansing?	michigan	6.0	what be the capital of lanse ? => $x: ($x, be the capital of, lanse) => $x: ($x, be the capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capital of lanse ? => $x: ($x, be the capital of, lanse) => $x: ($x, be the capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the state capital of lanse ? => $x: ($x, be the state capital of, lanse) => $x: ($x, be the state capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the state capital of lanse ? => $x: ($x, be the state capital of, lanse) => $x: ($x, be the state capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be capital of lanse ? => $x: ($x, be capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be capital of lanse ? => $x: ($x, be capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan
What is Capitol of lansing?	rental cars	2.0	what be the capitol lanse ? => $x: ($x, be, the capitol lanse) => $x: ($x, be, the capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars
What is Capitol of lansing?	first stop	1.0	what be the capital lanse ? => $x: ($x, be, the capital lanse) => $x: ($x, be, the capital lanse) => (r0.arg1: first stop, r0.namespace: reverb, r0.arg2: the capital , lansing, r0.rel: was) => first stop
What is not required of a thesis?	program	6.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may require the preparation of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the submission of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may require the preparation of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the submission of) => program
What is not required of a thesis?	master?s degrees	4.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: A master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the preparation of) => A master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: often require completion of) => Master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: A master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the preparation of) => A master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: often require completion of) => Master?s degrees
What is not required of a thesis?	science degree	4.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => science degree
What is not required of a thesis?	degree	4.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => The degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => The degree
What is not required of a thesis?	option	4.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Option A This, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Option A This; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires a report instead of) => The option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Option A This, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Option A This; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires a report instead of) => The option
What is not required of a thesis?	supervisors	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Supervisors, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may still require a bound copy of) => Supervisors; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Supervisors, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may still require a bound copy of) => Supervisors
What is not required of a thesis?	msbs	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: the MSBS, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the completion of) => the MSBS; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: the MSBS, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the completion of) => the MSBS
What is not required of a thesis?	graduate degrees	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Graduate degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually require the completion of) => Graduate degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Graduate degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually require the completion of) => Graduate degrees
What is not required of a thesis?	ma programs	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: MA programs, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => MA programs; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: MA programs, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => MA programs
What is not required of a thesis?	ms degree	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The MS degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The MS degree
What is not required of a thesis?	law	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Law, r0.namespace: reverb, r0.arg2: a major thesis, r0.rel: requires the completion of) => Law; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Law, r0.namespace: reverb, r0.arg2: a major thesis, r0.rel: requires the completion of) => Law
What is not required of a thesis?	one option	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: One option, r0.namespace: reverb, r0.arg2: a scholarly thesis, r0.rel: requires the writing of) => One option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: One option, r0.namespace: reverb, r0.arg2: a scholarly thesis, r0.rel: requires the writing of) => One option
What is not required of a thesis?	statistics	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a senior thesis, r0.rel: requires the completion of) => statistics; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a senior thesis, r0.rel: requires the completion of) => statistics
What is not required of a thesis?	ms-a option	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MS-A option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The MS-A option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MS-A option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The MS-A option
What is not required of a thesis?	philosophy	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Philosophy, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Philosophy; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Philosophy, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Philosophy
What is not required of a thesis?	education	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Education, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => Education; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Education, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => Education
What is not required of a thesis?	ma degree	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MA degree, r0.namespace: reverb, r0.arg2: a Master?s thesis, r0.rel: requires the completion of) => The MA degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The MA degree, r0.namespace: reverb, r0.arg2: a Master?s thesis, r0.rel: requires the completion of) => The MA degree
What is not required of a thesis?	m.a.	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The M.A., r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => The M.A.; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The M.A., r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => The M.A.
What is not required of a thesis?	curriculum	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The curriculum, r0.namespace: reverb, r0.arg2: a thesis and completion, r0.rel: requires preparation of) => The curriculum; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The curriculum, r0.namespace: reverb, r0.arg2: a thesis and completion, r0.rel: requires preparation of) => The curriculum
What is not required of a thesis?	elective mms degree	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The elective MMS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the submission of) => The elective MMS degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The elective MMS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the submission of) => The elective MMS degree
What is not required of a thesis?	academic track	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The academic track, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The academic track; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The academic track, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The academic track
What is not required of a thesis?	moral realism	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: moral realism, r0.namespace: reverb, r0.arg2: a further thesis, r0.rel: has required the denial of) => moral realism; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: moral realism, r0.namespace: reverb, r0.arg2: a further thesis, r0.rel: has required the denial of) => moral realism
What is not required of a thesis?	concentration	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Each concentration, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: also requires completion of) => Each concentration; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Each concentration, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: also requires completion of) => Each concentration
What is not required of a thesis?	honors degree	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The honors degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The honors degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The honors degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The honors degree
What is not required of a thesis?	illinois graduate students	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Illinois graduate students, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Illinois graduate students; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Illinois graduate students, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Illinois graduate students
What is not required of a thesis?	turn	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: a mini-thesis, r0.rel: will require the completion of) => turn; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: a mini-thesis, r0.rel: will require the completion of) => turn
What is not required of a thesis?	research paper	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: A research paper, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually requires the development of) => A research paper; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: A research paper, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually requires the development of) => A research paper
What is not required of a thesis?	thesis option	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The thesis option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The thesis option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: The thesis option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The thesis option
What is not required of a thesis?	science	2.0	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Science, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Science; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, a thesis) => (r0.arg1: Science, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Science
What is something that is white and orange?	colors	3.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The colors, r0.namespace: openie4, r0.arg2: blue , white and orange, r0.rel: are) => The colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The colors, r0.namespace: openie4, r0.arg2: Orange and White, r0.rel: are) => The colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Colors, r0.namespace: reverb, r0.arg2: White , Yellow , Orange and Silver, r0.rel: are) => Colors
What is something that is white and orange?	national flag	2.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The National Flag, r0.namespace: openie4, r0.arg2: green , white and orange, r0.rel: is) => The National Flag; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The national flag, r0.namespace: openie4, r0.arg2: green , white and orange, r0.rel: is the tricolour of) => The national flag
What is something that is white and orange?	irish flag	2.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The Irish flag, r0.namespace: openie4, r0.arg2: green , white and orange, r0.rel: is) => The Irish flag; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the Irish flag, r0.namespace: openie4, r0.arg2: green , white , and orange, r0.rel: is) => the Irish flag
What is something that is white and orange?	team colors	2.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: openie4, r0.arg2: black , orange and white, r0.rel: are) => The team colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: are) => The team colors
What is something that is white and orange?	cat	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The cat, r0.namespace: openie4, r0.arg2: orange and white, r0.rel: is) => The cat
What is something that is white and orange?	philadelphia flyers	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the Philadelphia Flyers, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are getting back to) => the Philadelphia Flyers
What is something that is white and orange?	wedding colours	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The wedding colours, r0.namespace: reverb, r0.arg2: White and Orange, r0.rel: will apparently be) => The wedding colours
What is something that is white and orange?	62 heads	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The 62 heads, r0.namespace: reverb, r0.arg2: green , white and orange, r0.rel: were dyed) => The 62 heads
What is something that is white and orange?	brittany spaniel	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The Brittany Spaniel, r0.namespace: openie4, r0.arg2: orange and white, r0.rel: can be) => The Brittany Spaniel
What is something that is white and orange?	gazebo	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the gazebo, r0.namespace: reverb, r0.arg2: white and orange roses, r0.rel: was draped in) => the gazebo
What is something that is white and orange?	walter	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Walter, r0.namespace: reverb, r0.arg2: orange tabby and white, r0.rel: is) => Walter
What is something that is white and orange?	creamy	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Creamy, r0.namespace: reverb, r0.arg2: an orange and white color, r0.rel: was) => Creamy
What is something that is white and orange?	6 ? inches	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: 6 ? inches, r0.namespace: reverb, r0.arg2: orange , white and black, r0.rel: were sold in) => 6 ? inches
What is something that is white and orange?	ship 's-mast light fixtures	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the ship 's-mast light fixtures, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are in) => the ship 's-mast light fixtures
What is something that is white and orange?	amazing skirt	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The amazing skirt, r0.namespace: reverb, r0.arg2: white and orange tie, r0.rel: is designed with) => The amazing skirt
What is something that is white and orange?	bo	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Bo, r0.namespace: reverb, r0.arg2: an orange and white Corgi, r0.rel: is) => Bo
What is something that is white and orange?	canvas blue strap	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Canvas blue strap, r0.namespace: reverb, r0.arg2: white and orange accents, r0.rel: is preppy with) => Canvas blue strap
What is something that is white and orange?	562	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: 562, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: were for) => 562
What is something that is white and orange?	obo 2006 model year	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: OBO 2006 model year, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: is) => OBO 2006 model year
What is something that is white and orange?	wire 1	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wire 1, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: needs to be matched to) => Wire 1
What is something that is white and orange?	estes	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Estes, r0.namespace: openie4, r0.arg2: orange and white, r0.rel: are) => Estes
What is something that is white and orange?	?florida?	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	ground	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the ground, r0.namespace: reverb, r0.arg2: red , white and orange, r0.rel: was a sea of) => the ground
What is something that is white and orange?	wings	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wings, r0.namespace: reverb, r0.arg2: white and orange bars, r0.rel: are black with) => Wings
What is something that is white and orange?	stick	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: stick, r0.namespace: reverb, r0.arg2: yellow , orange and white, r0.rel: is wrapped in) => stick
What is something that is white and orange?	lettering	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The lettering, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: is in) => The lettering
What is something that is white and orange?	ambient lighting	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The ambient lighting, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: can be switched between) => The ambient lighting
What is something that is white and orange?	older taxis	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The older taxis, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: are painted) => The older taxis
What is something that is white and orange?	fake halloween teeth	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The fake Halloween teeth, r0.namespace: reverb, r0.arg2: white , black and orange, r0.rel: are painted) => The fake Halloween teeth
What is something that is white and orange?	6 1/2 inches	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: 6 1/2 inches, r0.namespace: reverb, r0.arg2: orange , white and black, r0.rel: were sold in) => 6 1/2 inches
What is something that is white and orange?	school colors	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: School colors, r0.namespace: openie4, r0.arg2: orange and white, r0.rel: were) => School colors
What is something that is white and orange?	bloggers	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The bloggers, r0.namespace: reverb, r0.arg2: pink , white and orange, r0.rel: was group into) => The bloggers
What is something that is white and orange?	flames	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the flames, r0.namespace: reverb, r0.arg2: Orange , White and Green, r0.rel: were) => the flames
What is something that is white and orange?	jersey	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The jersey, r0.namespace: reverb, r0.arg2: orange , white and black, r0.rel: is coloured in) => The jersey
What is something that is white and orange?	lanterns	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The lanterns, r0.namespace: openie4, r0.arg2: orange , white and black, r0.rel: were sold in) => The lanterns
What is something that is white and orange?	mooren	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Mooren, r0.namespace: reverb, r0.arg2: black/orange and white/orange, r0.rel: is available in) => Mooren
What is something that is white and orange?	dustjacket	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The dustjacket, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: was) => The dustjacket
What is something that is white and orange?	high elevations	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: high elevations, r0.namespace: reverb, r0.arg2: orange , red and white, r0.rel: are) => high elevations
What is something that is white and orange?	saltwater	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: saltwater, r0.namespace: reverb, r0.arg2: distinctive orange and white makings, r0.rel: are) => saltwater
What is something that is white and orange?	chicago bears jerseys	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Chicago Bears jerseys, r0.namespace: reverb, r0.arg2: blue white and orange, r0.rel: are) => Chicago Bears jerseys
What is something that is white and orange?	chest	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the chest, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is black outlined by) => the chest
What is something that is white and orange?	sandman	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Sandman, r0.namespace: reverb, r0.arg2: orange and white patches, r0.rel: is a boy with) => Sandman
What is something that is white and orange?	?florida?	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	lucky colors	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Lucky colors, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: are) => Lucky colors
What is something that is white and orange?	new york city	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: New York City, r0.namespace: reverb, r0.arg2: orange and white lights, r0.rel: is lit up with) => New York City
What is something that is white and orange?	thompson-boling arena	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Thompson-Boling Arena, r0.namespace: reverb, r0.arg2: the Orange and White, r0.rel: was ruined by) => Thompson-Boling Arena
What is something that is white and orange?	route	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The route, r0.namespace: reverb, r0.arg2: orange and white streamers, r0.rel: will be marked with) => The route
What is something that is white and orange?	prince	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the prince, r0.namespace: reverb, r0.arg2: orange , white and blue, r0.rel: was) => the prince
What is something that is white and orange?	victor	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Victor, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: is) => Victor
What is something that is white and orange?	dutch team	1.0	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The Dutch Team, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: is looking red hot in) => The Dutch Team
What countries were involved in the Spanish war?	spain	36.0	which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Spain, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was defeated in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Spain, r0.namespace: openie4, r0.arg2: the midst of the brutal Spanish Civil War, r0.rel: is in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Spain, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was defeated in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Spain, r0.namespace: openie4, r0.arg2: the midst of the brutal Spanish Civil War, r0.rel: is in) => Spain
What countries were involved in the Spanish war?	united states	14.0	What countries were involved in the Spanish war? => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, the spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, the spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was involved in) => the United States; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was involved in) => the United States
What countries were involved in the Spanish war?	uncle	4.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an Uncle, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was also in) => an Uncle; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an uncle, r0.namespace: reverb, r0.arg2: the Spanish-American war, r0.rel: had been killed in) => an uncle; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an Uncle, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was also in) => an Uncle; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an uncle, r0.namespace: reverb, r0.arg2: the Spanish-American war, r0.rel: had been killed in) => an uncle
What countries were involved in the Spanish war?	fighter	4.0	who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: the fighter, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sent to fight in) => the fighter; who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: the fighter, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sent to fight in) => the fighter; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fighter, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sent to fight in) => the fighter; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fighter, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sent to fight in) => the fighter
What countries were involved in the Spanish war?	fort	4.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fort, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was useful in) => the fort; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fort, r0.namespace: reverb, r0.arg2: the Civil and Spanish-American wars, r0.rel: was used in) => the fort; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fort, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was useful in) => the fort; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the fort, r0.namespace: reverb, r0.arg2: the Civil and Spanish-American wars, r0.rel: was used in) => the fort
What countries were involved in the Spanish war?	twelve	4.0	who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: twelve, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were sent to fight in) => twelve; who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: twelve, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were sent to fight in) => twelve; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: twelve, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were sent to fight in) => twelve; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: twelve, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were sent to fight in) => twelve
What countries were involved in the Spanish war?	italian fascist	4.0	who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: an Italian fascist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was fighting in) => an Italian fascist; who be fight in the spanish war ? => $x: ($x, be fight in, the spanish war) => $x: ($x, be fight in, the spanish war) => (r0.arg1: an Italian fascist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was fighting in) => an Italian fascist; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an Italian fascist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was fighting in) => an Italian fascist; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: an Italian fascist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was fighting in) => an Italian fascist
What countries were involved in the Spanish war?	finisterre	4.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Finisterre, r0.namespace: openie4, r0.arg2: the Spanish Civil War, r0.rel: was injured in) => Finisterre; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Finisterre, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was injured in) => Finisterre; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Finisterre, r0.namespace: openie4, r0.arg2: the Spanish Civil War, r0.rel: was injured in) => Finisterre; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Finisterre, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was injured in) => Finisterre
What countries were involved in the Spanish war?	bielsa	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Bielsa, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was heavily bombed in) => Bielsa; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Bielsa, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was heavily bombed in) => Bielsa
What countries were involved in the Spanish war?	committed socialist	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a committed socialist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: would be killed in) => a committed socialist; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a committed socialist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: would be killed in) => a committed socialist
What countries were involved in the Spanish war?	orwell	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Orwell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was in) => Orwell; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Orwell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was in) => Orwell
What countries were involved in the Spanish war?	jean	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Jean, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => Jean; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Jean, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => Jean
What countries were involved in the Spanish war?	colonel sanford parker	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Colonel Sanford Parker, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: had been in) => Colonel Sanford Parker; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Colonel Sanford Parker, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: had been in) => Colonel Sanford Parker
What countries were involved in the Spanish war?	thomas	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Thomas, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was in) => Thomas; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Thomas, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was in) => Thomas
What countries were involved in the Spanish war?	power	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: power, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was finally ushered in by) => power; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: power, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was finally ushered in by) => power
What countries were involved in the Spanish war?	prelude	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the prelude, r0.namespace: reverb, r0.arg2: The Spanish Civil War, r0.rel: is now simulated in) => the prelude; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the prelude, r0.namespace: reverb, r0.arg2: The Spanish Civil War, r0.rel: is now simulated in) => the prelude
What countries were involved in the Spanish war?	art	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Art, r0.namespace: reverb, r0.arg2: the Spanish Civil War ! Sane people, r0.rel: was misused in) => Art; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Art, r0.namespace: reverb, r0.arg2: the Spanish Civil War ! Sane people, r0.rel: was misused in) => Art
What countries were involved in the Spanish war?	ju-87	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: The Ju-87, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was proven in) => The Ju-87; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: The Ju-87, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was proven in) => The Ju-87
What countries were involved in the Spanish war?	william e. taylor	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: William E. Taylor, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was a soldier in) => William E. Taylor; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: William E. Taylor, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was a soldier in) => William E. Taylor
What countries were involved in the Spanish war?	descendants	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: descendants, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: were Veterans In) => descendants; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: descendants, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: were Veterans In) => descendants
What countries were involved in the Spanish war?	remaining stories	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the remaining stories, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were lost in) => the remaining stories; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the remaining stories, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were lost in) => the remaining stories
What countries were involved in the Spanish war?	oehler negrete	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Oehler and Negrete, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were active in) => Oehler and Negrete; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Oehler and Negrete, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were active in) => Oehler and Negrete
What countries were involved in the Spanish war?	location	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the location, r0.namespace: reverb, r0.arg2: the Spanish-American War*, r0.rel: was also used in) => the location; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the location, r0.namespace: reverb, r0.arg2: the Spanish-American War*, r0.rel: was also used in) => the location
What countries were involved in the Spanish war?	soldier	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a soldier, r0.namespace: openie4, r0.arg2: the Spanish Civil War, r0.rel: being shot in) => a soldier; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a soldier, r0.namespace: openie4, r0.arg2: the Spanish Civil War, r0.rel: being shot in) => a soldier
What countries were involved in the Spanish war?	battleships	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: battleships, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => battleships; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: battleships, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => battleships
What countries were involved in the Spanish war?	80 american women	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the 80 American women, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were volunteers in) => the 80 American women; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the 80 American women, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were volunteers in) => the 80 American women
What countries were involved in the Spanish war?	old theater	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: The old theater, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was bombed in) => The old theater; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: The old theater, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was bombed in) => The old theater
What countries were involved in the Spanish war?	state naval militias	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the state naval militias, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: were in) => the state naval militias; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the state naval militias, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: were in) => the state naval militias
What countries were involved in the Spanish war?	soviet union	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the Soviet Union, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is its role in) => the Soviet Union; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the Soviet Union, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is its role in) => the Soviet Union
What countries were involved in the Spanish war?	incendiary device	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: incendiary device, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was first used in) => incendiary device; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: incendiary device, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was first used in) => incendiary device
What countries were involved in the Spanish war?	julian bell	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Julian Bell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => Julian Bell; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Julian Bell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => Julian Bell
What countries were involved in the Spanish war?	communist party	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the Communist party, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => the Communist party; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the Communist party, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => the Communist party
What countries were involved in the Spanish war?	lt . col . andrew d.	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Lt . Col . Andrew D., r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: Were in) => Lt . Col . Andrew D.; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Lt . Col . Andrew D., r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: Were in) => Lt . Col . Andrew D.
What countries were involved in the Spanish war?	american red cross	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the American Red Cross, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => the American Red Cross; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the American Red Cross, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => the American Red Cross
What countries were involved in the Spanish war?	10	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 10, r0.namespace: reverb, r0.arg2: the Spanish civil war, r0.rel: was used in) => 10; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 10, r0.namespace: reverb, r0.arg2: the Spanish civil war, r0.rel: was used in) => 10
What countries were involved in the Spanish war?	71st	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the 71st, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => the 71st; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the 71st, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => the 71st
What countries were involved in the Spanish war?	san juan	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: San Juan, r0.namespace: reverb, r0.arg2: the Spanish-American war, r0.rel: was a central point in) => San Juan; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: San Juan, r0.namespace: reverb, r0.arg2: the Spanish-American war, r0.rel: was a central point in) => San Juan
What countries were involved in the Spanish war?	typhoid	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Typhoid, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was a major problem in) => Typhoid; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Typhoid, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was a major problem in) => Typhoid
What countries were involved in the Spanish war?	valencia	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: VALENCIA, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was heavily damaged in) => VALENCIA; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: VALENCIA, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was heavily damaged in) => VALENCIA
What countries were involved in the Spanish war?	three	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: three, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were killed in) => three; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: three, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were killed in) => three
What countries were involved in the Spanish war?	new york jew	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: A New York Jew, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sightseeing in) => A New York Jew; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: A New York Jew, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was sightseeing in) => A New York Jew
What countries were involved in the Spanish war?	federico garc?a lorca	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Federico Garc?a Lorca, r0.namespace: reverb, r0.arg2: the Spanish Civil war, r0.rel: was killed in) => Federico Garc?a Lorca; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Federico Garc?a Lorca, r0.namespace: reverb, r0.arg2: the Spanish Civil war, r0.rel: was killed in) => Federico Garc?a Lorca
What countries were involved in the Spanish war?	time period	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the time period, r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: was reflected in) => the time period; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the time period, r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: was reflected in) => the time period
What countries were involved in the Spanish war?	unit	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the unit, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was engaged in) => the unit; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: the unit, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was engaged in) => the unit
What countries were involved in the Spanish war?	more than 500 000 people	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: More than 500 000 people, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were killed in) => More than 500 000 people; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: More than 500 000 people, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were killed in) => More than 500 000 people
What countries were involved in the Spanish war?	col . eddy	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Col . Eddy, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: was in) => Col . Eddy; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: Col . Eddy, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: was in) => Col . Eddy
What countries were involved in the Spanish war?	1936	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 1936, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was a memorable event in) => 1936; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 1936, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was a memorable event in) => 1936
What countries were involved in the Spanish war?	george orwell	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: George Orwell, r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: was a key figure in) => George Orwell; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: George Orwell, r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: was a key figure in) => George Orwell
What countries were involved in the Spanish war?	high school	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a high school, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: were lost in) => a high school; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: a high school, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: were lost in) => a high school
What countries were involved in the Spanish war?	1898 country	2.0	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 1898 our Country, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was embroiled in) => 1898 our Country; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, the spanish war) => (r0.arg1: 1898 our Country, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was embroiled in) => 1898 our Country
What is another word of sand hills?	ghrood	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood
What is another word of sand hills?	tidwell	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell
What is another word of sand hills?	life dr. medicine crow	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow
What is another word of sand hills?	ghost crab	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab
What is another word of sand hills?	?there ?	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?
What is another word of sand hills?	henry	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry
What is another word of sand hills?	coastal plain	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain
What is another word of sand hills?	deceased	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased
What is another word of sand hills?	one way	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way
What is another word of sand hills?	nolte	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte
What is another word of sand hills?	mike smith	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith
What is another word of sand hills?	?d rounds	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds
What is another word of sand hills?	nina	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina
What is another word of sand hills?	rock	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock
What is another word of sand hills?	anurag	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag
What is another word of sand hills?	last respondent	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent
What is another word of sand hills?	western shore	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore
What is another word of sand hills?	hill	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill
What is another word of sand hills?	southwest	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest
What is another word of sand hills?	firm	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm
What is another word of sand hills?	town	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town
What is another word of sand hills?	it?s terrain	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain
What is another word of sand hills?	main land	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land
What is another word of sand hills?	slac	2.0	what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC
What is new south wales slogan?	place	4.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The place, r0.namespace: reverb, r0.arg2: coastal New South Wales, r0.rel: is) => The place; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => place; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The place, r0.namespace: reverb, r0.arg2: coastal New South Wales, r0.rel: is) => The place; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => place
What is new south wales slogan?	sydney	4.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => Sydney; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => Sydney
What is new south wales slogan?	workshops	4.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Workshops, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are being held across) => Workshops; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: workshops, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: is being held across) => workshops; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Workshops, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are being held across) => Workshops; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: workshops, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: is being held across) => workshops
What is new south wales slogan?	hmong	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Hmong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => the Hmong; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Hmong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => the Hmong
What is new south wales slogan?	tickets	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: tickets, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were being sold in) => tickets; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: tickets, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were being sold in) => tickets
What is new south wales slogan?	ointment	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the ointment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the ointment; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the ointment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the ointment
What is new south wales slogan?	registrations	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: registrations, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are from) => registrations; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: registrations, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are from) => registrations
What is new south wales slogan?	northernmost part	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the northernmost part, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was then) => the northernmost part; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the northernmost part, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was then) => the northernmost part
What is new south wales slogan?	country	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the country; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the country
What is new south wales slogan?	nearest town	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Nearest town, r0.namespace: reverb, r0.arg2: Waterfall New South Wales, r0.rel: was) => Nearest town; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Nearest town, r0.namespace: reverb, r0.arg2: Waterfall New South Wales, r0.rel: was) => Nearest town
What is new south wales slogan?	class 457 visa applicants	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: class 457 visa applicants, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => class 457 visa applicants; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: class 457 visa applicants, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => class 457 visa applicants
What is new south wales slogan?	pbcs	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: PBCs, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => PBCs; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: PBCs, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => PBCs
What is new south wales slogan?	biggest shortages	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the biggest shortages, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were in) => the biggest shortages; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the biggest shortages, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were in) => the biggest shortages
What is new south wales slogan?	nsw	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: NSW, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => NSW; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: NSW, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => NSW
What is new south wales slogan?	state	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The state, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is) => The state; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The state, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is) => The state
What is new south wales slogan?	jurisdiction	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The jurisdiction, r0.namespace: reverb, r0.arg2: either New South Wales, r0.rel: is) => The jurisdiction; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The jurisdiction, r0.namespace: reverb, r0.arg2: either New South Wales, r0.rel: is) => The jurisdiction
What is new south wales slogan?	australia holiday	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: an Australia holiday, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => an Australia holiday; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: an Australia holiday, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => an Australia holiday
What is new south wales slogan?	?racing	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: ?Racing, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => ?Racing; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: ?Racing, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => ?Racing
What is new south wales slogan?	hotel	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The hotel, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => The hotel; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The hotel, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => The hotel
What is new south wales slogan?	occupational health safety laws	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the occupational health and safety laws, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => the occupational health and safety laws; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the occupational health and safety laws, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => the occupational health and safety laws
What is new south wales slogan?	five first-class matches	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The other five first-class matches, r0.namespace: reverb, r0.arg2: versus New South Wales, r0.rel: were) => The other five first-class matches; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The other five first-class matches, r0.namespace: reverb, r0.arg2: versus New South Wales, r0.rel: were) => The other five first-class matches
What is new south wales slogan?	river	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the river, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the river; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the river, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the river
What is new south wales slogan?	states	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The states
What is new south wales slogan?	teachers	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the teachers, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: was from) => the teachers; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the teachers, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: was from) => the teachers
What is new south wales slogan?	exception	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The exception, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: was) => The exception; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The exception, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: was) => The exception
What is new south wales slogan?	gap	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gap, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was paid was) => gap; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gap, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was paid was) => gap
What is new south wales slogan?	legislation	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: New South Wales New South Wales, r0.rel: was necessary in) => legislation; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: New South Wales New South Wales, r0.rel: was necessary in) => legislation
What is new south wales slogan?	australia newcastle	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia Newcastle, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Australia Newcastle; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia Newcastle, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Australia Newcastle
What is new south wales slogan?	most populous states	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The most populous states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The most populous states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The most populous states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The most populous states
What is new south wales slogan?	aboriginal descent today	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Aboriginal descent today, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are in) => Aboriginal descent today; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Aboriginal descent today, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are in) => Aboriginal descent today
What is new south wales slogan?	popular contemporaries	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: popular contemporaries, r0.namespace: reverb, r0.arg2: homegrown New South Wales, r0.rel: is) => popular contemporaries; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: popular contemporaries, r0.namespace: reverb, r0.arg2: homegrown New South Wales, r0.rel: is) => popular contemporaries
What is new south wales slogan?	zone	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Zone, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Zone; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Zone, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Zone
What is new south wales slogan?	juvenile justice	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: juvenile justice, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was being reviewed in) => juvenile justice; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: juvenile justice, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was being reviewed in) => juvenile justice
What is new south wales slogan?	gambling	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gambling, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => gambling; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gambling, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => gambling
What is new south wales slogan?	interstate migration	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: interstate migration, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => interstate migration; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: interstate migration, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => interstate migration
What is new south wales slogan?	divisions	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The other Divisions, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are in) => The other Divisions; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The other Divisions, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are in) => The other Divisions
What is new south wales slogan?	big changes	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Big changes, r0.namespace: reverb, r0.arg2: the New South Wales, r0.rel: are being forecast for) => Big changes; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Big changes, r0.namespace: reverb, r0.arg2: the New South Wales, r0.rel: are being forecast for) => Big changes
What is new south wales slogan?	wagga wagga wagga wagga	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga Wagga Wagga; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga Wagga Wagga
What is new south wales slogan?	mystery	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: MYSTERY, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => MYSTERY; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: MYSTERY, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => MYSTERY
What is new south wales slogan?	material	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Material, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the Material; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Material, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the Material
What is new south wales slogan?	original states	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The original states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => The original states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The original states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => The original states
What is new south wales slogan?	product	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the product, r0.namespace: reverb, r0.arg2: New South Wales Traders, r0.rel: was sold) => the product; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the product, r0.namespace: reverb, r0.arg2: New South Wales Traders, r0.rel: was sold) => the product
What is new south wales slogan?	sydney film festival	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney Film Festival, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney Film Festival; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney Film Festival, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney Film Festival
What is new south wales slogan?	australia	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => Australia; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => Australia
What is new south wales slogan?	6 states	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The 6 states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The 6 states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The 6 states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The 6 states
What is new south wales slogan?	upper murray area	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the upper Murray area, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is now) => the upper Murray area; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the upper Murray area, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is now) => the upper Murray area
What is new south wales slogan?	winning horse	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the winning horse, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was from) => the winning horse; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the winning horse, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was from) => the winning horse
What is new south wales slogan?	civil judicature	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Civil Judicature, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were to be established in) => Civil Judicature; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Civil Judicature, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were to be established in) => Civil Judicature
What is new south wales slogan?	main concentration hmong	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the main concentration of the Hmong, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => the main concentration of the Hmong; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the main concentration of the Hmong, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => the main concentration of the Hmong
What is new south wales slogan?	new colony	2.0	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the new colony, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was being administered from) => the new colony; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the new colony, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was being administered from) => the new colony
What occurs in prokaryotic cells?	host cell	8.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => A host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => The host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell
What occurs in prokaryotic cells?	bacteria	7.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The Bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => The Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are still) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are the common name for) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is very simple--that of) => bacteria
What occurs in prokaryotic cells?	eukaryotic cells	6.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are more complex than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are generally larger than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: more complex than prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: generally larger than prokaryotic cells, r0.rel: are) => Eukaryotic cells
What occurs in prokaryotic cells?	labor	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor
What occurs in prokaryotic cells?	rna	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA
What occurs in prokaryotic cells?	eukaryotic dna	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA
What occurs in prokaryotic cells?	polyribosomes	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes
What occurs in prokaryotic cells?	left	3.0	what be example of prokaryotic cell ? => $x: ($x, be example of, prokaryotic cell) => $x: ($x, be example of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be example of prokaryotic cell ? => $x: ($x, be example of, prokaryotic cell) => $x: ($x, be example of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left
What occurs in prokaryotic cells?	ribosomes	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes
What occurs in prokaryotic cells?	precrp	3.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP
What occurs in prokaryotic cells?	cytoplasm	2.0	when do prokaryotic cell occur ? => $x: (prokaryotic cell, occur in, $x) => $x: (prokaryotic cell, occur in, $x) => (r0.arg1: the prokaryotic cells DNA, r0.namespace: reverb, r0.arg2: the cytoplasm, r0.rel: occurs in) => the cytoplasm; where do prokaryotic cell occur ? => $x: (prokaryotic cell, occur in, $x) => $x: (prokaryotic cell, occur in, $x) => (r0.arg1: the prokaryotic cells DNA, r0.namespace: reverb, r0.arg2: the cytoplasm, r0.rel: occurs in) => the cytoplasm
What occurs in prokaryotic cells?	eukaryotic cell	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The eukaryotic cell, r0.namespace: openie4, r0.arg2: much larger than the prokaryotic cell, r0.rel: is) => The eukaryotic cell
What occurs in prokaryotic cells?	biology	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: biology, r0.namespace: reverb, r0.arg2: eukaryotic and prokaryotic cells, r0.rel: is the one between) => biology
What occurs in prokaryotic cells?	lysosome	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Lysosome, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => Lysosome
What occurs in prokaryotic cells?	microbiology	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Microbiology, r0.namespace: reverb, r0.arg2: prokaryotic cells and organisms, r0.rel: is the study of) => Microbiology
What occurs in prokaryotic cells?	cell	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => the cell
What occurs in prokaryotic cells?	aerobic respiration	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: aerobic respiration, r0.namespace: reverb, r0.arg2: other prokaryotic cells, r0.rel: were engulfed by) => aerobic respiration
What occurs in prokaryotic cells?	general , eukaryotic cells	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: general , eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => general , eukaryotic cells
What occurs in prokaryotic cells?	cyanobacteria	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cyanobacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Cyanobacteria
What occurs in prokaryotic cells?	23 chromosomes	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: 23 chromosomes, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is probably more ours than) => 23 chromosomes
What occurs in prokaryotic cells?	cells	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: were) => cells
What occurs in prokaryotic cells?	introns	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Introns, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are rare within) => Introns
What occurs in prokaryotic cells?	most complex being	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the most complex being, r0.namespace: reverb, r0.arg2: the prokaryotic cell, r0.rel: was) => the most complex being
What occurs in prokaryotic cells?	life	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: life, r0.namespace: reverb, r0.arg2: simple prokaryotic cells, r0.rel: were) => life
What occurs in prokaryotic cells?	pl	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: pl, r0.namespace: reverb, r0.arg2: a single prokaryotic cell, r0.rel: is) => pl
What occurs in prokaryotic cells?	silver	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: prokaryotic cells and viruses, r0.rel: is toxic only to) => silver
What occurs in prokaryotic cells?	mammalian cells	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: mammalian cells, r0.namespace: reverb, r0.arg2: most prokaryotic cells, r0.rel: is absent from) => mammalian cells
What occurs in prokaryotic cells?	cholesterol	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cholesterol, r0.namespace: openie4, r0.arg2: absent from most prokaryotic cells, r0.rel: is) => Cholesterol
What occurs in prokaryotic cells?	students	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: will be studying the structures of) => Students
What occurs in prokaryotic cells?	vivo	1.0	what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: vivo and, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: may be) => vivo and
What celebrities have naked pictures?	tweety	4.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Tweety, r0.namespace: openie4, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Tweety, r0.namespace: reverb, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Tweety, r0.namespace: openie4, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Tweety, r0.namespace: reverb, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety
What celebrities have naked pictures?	up	3.0	what person have naked picture ? => $x: ($x, "type", person) ($x, have, naked picture) => $x: ($x, "type", person) ($x, have, naked picture) => (r0.arg1: The Up, r1.rel: is essentially like having, r0.namespace: freebase, r1.arg2: naked pictures, r0.arg2: Person, r0.rel: Type, r1.namespace: reverb, r1.arg1: up) => The Up; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is essentially like having) => up; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is essentially like having) => up
What celebrities have naked pictures?	teenagers	2.0	what person have naked picture ? => $x: ($x, "type", person) ($x, have, naked picture) => $x: ($x, "type", person) ($x, have, naked picture) => (r0.arg1: Teenagers, r1.rel: have texted, r0.namespace: freebase, r1.arg2: naked pictures, r0.arg2: Person, r0.rel: Type, r1.namespace: reverb, r1.arg1: teenagers) => Teenagers; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: teenagers, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: have texted) => teenagers
What celebrities have naked pictures?	woman	2.0	what person have naked picture ? => $x: ($x, "is a kind of", person) ($x, have, naked picture) => $x: ($x, "is a kind of", person) ($x, have, naked picture) => (r0.arg1: a woman, r1.rel: has over, r0.namespace: reverb, r1.arg2: 20 half naked pictures, r0.arg2: person, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: A woman) => a woman; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: A woman, r0.namespace: reverb, r0.arg2: 20 half naked pictures, r0.rel: has over) => A woman
What celebrities have naked pictures?	investigators	2.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: investigators, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was found to have) => investigators; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: investigators, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was found to have) => investigators
What celebrities have naked pictures?	facebook	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Facebook, r0.namespace: openie4, r0.arg2: a naked picture of my back, r0.rel: is showing) => Facebook
What celebrities have naked pictures?	naked couple	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: naked couple, r0.namespace: reverb, r0.arg2: naked picture galleries, r0.rel: be) => naked couple
What celebrities have naked pictures?	cache	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: the cache, r0.namespace: reverb, r0.arg2: that naked kegstand picture, r0.rel: was scrubbed on) => the cache
What celebrities have naked pictures?	ebay	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Ebay, r0.namespace: reverb, r0.arg2: 125 naked ex-girlfriend pictures, r0.rel: has things like) => Ebay
What celebrities have naked pictures?	boy	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: The boy, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: had texted) => The boy
What celebrities have naked pictures?	14-year old boy	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a 14-year old boy, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was showing off) => a 14-year old boy
What celebrities have naked pictures?	king	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The king, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was n?t talking about) => The king
What celebrities have naked pictures?	hearing	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The hearing, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: was also told about) => The hearing
What celebrities have naked pictures?	trace	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Trace, r0.namespace: reverb, r0.arg2: a little naked bootie picture, r0.rel: has thrown) => Trace
What celebrities have naked pictures?	endorsement	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: an endorsement, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: has more impact than) => an endorsement
What celebrities have naked pictures?	tsa	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The TSA, r0.namespace: reverb, r0.arg2: naked-equivalent pictures, r0.rel: is looking at) => The TSA
What celebrities have naked pictures?	drake	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Naked Pictures, r0.rel: Is Addicted To) => Drake
What celebrities have naked pictures?	teenage boy	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a teenage boy, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: be ridiculed as much for) => a teenage boy
What celebrities have naked pictures?	21 percent	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: 21 percent, r0.namespace: reverb, r0.arg2: naked pictures or videos, r0.rel: have received) => 21 percent
What celebrities have naked pictures?	2009	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: 2009, r0.namespace: reverb, r0.arg2: my naked picture scandal, r0.rel: was successful with) => 2009
What celebrities have naked pictures?	ch-ai	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Ch-Ai, r0.namespace: reverb, r0.arg2: drunk naked pictures, r0.rel: is a far cry from) => Ch-Ai
What celebrities have naked pictures?	television	1.0	what celebrity have naked picture be on ? => $x: ($x, "type", celebrity) (naked picture, be on, $x) => $x: ($x, "type", celebrity) (naked picture, be on, $x) => (r0.arg1: Television, r1.rel: would be broadcast on, r0.namespace: freebase, r1.arg2: television, r0.arg2: Celebrity Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: their semi-naked pictures) => Television
What celebrities have naked pictures?	20 %	1.0	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: 20 %, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: have sent) => 20 %
What celebrities have naked pictures?	heck	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: the heck, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is looking for) => the heck
What celebrities have naked pictures?	metrolink	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Metrolink, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: is almost as bad as) => Metrolink
What celebrities have naked pictures?	young men	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: young men, r0.namespace: openie4, r0.arg2: naked pictures, r0.rel: are getting) => young men
What celebrities have naked pictures?	strange phone call	1.0	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a strange phone call, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was asked for) => a strange phone call
Why was the patriot act created?	patriotic	10.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic
Why was the patriot act created?	bush	6.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot acts, r0.rel: did with) => Bush; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act question, r0.rel: did a fairly good job with) => Bush; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush
Why was the patriot act created?	u.s. banks	4.0	what be the patriot act create ? => $x: (the patriot act, create, $x) => $x: (the patriot act, create, $x) => (r0.arg1: The USA Patriot Act, r0.namespace: reverb, r0.arg2: U.S. Banks, r0.rel: has created many new rules for) => U.S. Banks; what be the patriot act create ? => $x: (the patriot act, create, $x) => $x: (the patriot act, create, $x) => (r0.arg1: the 2001 USA Patriot Act, r0.namespace: reverb, r0.arg2: U.S. Banks, r0.rel: created many new rules for) => U.S. Banks; what be the patriot act create for ? => $x: (the patriot act, create for, $x) => $x: (the patriot act, create for, $x) => (r0.arg1: The USA Patriot Act, r0.namespace: reverb, r0.arg2: U.S. Banks, r0.rel: has created many new rules for) => U.S. Banks; what be the patriot act create for ? => $x: (the patriot act, create for, $x) => $x: (the patriot act, create for, $x) => (r0.arg1: the 2001 USA Patriot Act, r0.namespace: reverb, r0.arg2: U.S. Banks, r0.rel: created many new rules for) => U.S. Banks
Why was the patriot act created?	american people	4.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people
Why was the patriot act created?	9/11	4.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: 9/11, r0.rel: needed to be done after) => 9/11; who lead the patriot act ? => $x: ($x, lead, the patriot act) => $x: ($x, lead, the patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: led to) => 9/11; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11
Why was the patriot act created?	question	4.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question
Why was the patriot act created?	terror	3.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: as do) => terror; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror
Why was the patriot act created?	1918	3.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918; what year be the patriot act ? => $x: ($x, "is a", year) ($x, be, the patriot act) => $x: ($x, "is a", year) ($x, be, the patriot act) => (r0.arg1: 1918, r1.rel: were, r0.namespace: nell, r1.arg2: the Patriot Acts, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1918) => 1918; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918
Why was the patriot act created?	congress	3.0	what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Congress, r0.namespace: openie4, r0.arg2: passing the Patriot Act, r0.rel: did in) => Congress; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Congress, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: did in passing) => Congress; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Congress, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: did n?t even bother to read) => Congress
Why was the patriot act created?	terrorism	3.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the USA PATRIOT Act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: has nothing to do with) => terrorism; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism
Why was the patriot act created?	even obama	3.0	what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Even Obama, r0.namespace: openie4, r0.arg2: repeal the Patriot Act, r0.rel: does want to) => Even Obama; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Even Obama, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: does want to repeal) => Even Obama; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Even Obama, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: does n?t want to repeal) => Even Obama
Why was the patriot act created?	rights	3.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the rights, r0.rel: actually does infringe on) => the rights; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights
Why was the patriot act created?	larger sign	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: a larger sign, r0.namespace: reverb, r0.arg2: the ' Patriot ' Act Patriotic, r0.rel: Is) => a larger sign; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: a larger sign, r0.namespace: reverb, r0.arg2: the ' Patriot ' Act Patriotic, r0.rel: Is) => a larger sign
Why was the patriot act created?	much scrutiny	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: much scrutiny, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => much scrutiny; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: much scrutiny, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => much scrutiny
Why was the patriot act created?	related concern	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern
Why was the patriot act created?	constitution	2.0	what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the Constitution, r0.rel: has done to) => the Constitution; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, the patriot act) => (r0.arg1: Constitution, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act conflict, r0.rel: Does) => Constitution
Why was the patriot act created?	main issue	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue
Why was the patriot act created?	most significant	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant
Why was the patriot act created?	democrats	2.0	what happen to the patriot act ? => $x: ($x, happen to, the patriot act) => $x: ($x, happen to, the patriot act) => (r0.arg1: Democrats, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: so happened to be vocal against) => Democrats; what happen to the patriot act ? => $x: ($x, happen to, the patriot act) => $x: ($x, happen to, the patriot act) => (r0.arg1: Democrats, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: so happened to be vocal against) => Democrats
Why was the patriot act created?	individual liberty	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: individual liberty, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => individual liberty; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: individual liberty, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => individual liberty
Why was the patriot act created?	same?..uh	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh
Why was the patriot act created?	democracy	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy
Why was the patriot act created?	population	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population
Why was the patriot act created?	recently enacted regulations	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations
Why was the patriot act created?	reference	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference
Why was the patriot act created?	first	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First
Why was the patriot act created?	authoritarianism	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism
Why was the patriot act created?	h.r. 811	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811
Why was the patriot act created?	cloudcommons 2011	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011
Why was the patriot act created?	security measures	2.0	what be the patriot act create ? => $x: (the patriot act, create, $x) => $x: (the patriot act, create, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: security measures, r0.rel: creates a need for) => security measures; what be the patriot act create for ? => $x: (the patriot act, create for, $x) => $x: (the patriot act, create for, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: security measures, r0.rel: creates a need for) => security measures
Why was the patriot act created?	ndaa	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA
Why was the patriot act created?	globe	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe
Why was the patriot act created?	schlagheck?s talk	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Schlagheck?s talk, r0.namespace: reverb, r0.arg2: ?The Patriot Act, r0.rel: is) => Schlagheck?s talk; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Schlagheck?s talk, r0.namespace: reverb, r0.arg2: ?The Patriot Act, r0.rel: is) => Schlagheck?s talk
Why was the patriot act created?	fear	2.0	what be the patriot act create ? => $x: (the patriot act, create, $x) => $x: (the patriot act, create, $x) => (r0.arg1: The PATRIOT Act, r0.namespace: reverb, r0.arg2: fear, r0.rel: creates a climate of) => fear; who lead the patriot act ? => $x: ($x, lead, the patriot act) => $x: ($x, lead, the patriot act) => (r0.arg1: Fear, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: led to) => Fear
Why was the patriot act created?	works	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works
Why was the patriot act created?	issue	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue
Why was the patriot act created?	suggested title	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: A suggested title, r0.namespace: reverb, r0.arg2: ?The USA PATRIOT Act, r0.rel: is) => A suggested title; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: A suggested title, r0.namespace: reverb, r0.arg2: ?The USA PATRIOT Act, r0.rel: is) => A suggested title
Why was the patriot act created?	founders revolution	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution
Why was the patriot act created?	liberty	2.0	what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: liberty, r0.rel: has to do with) => liberty; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: liberty, r0.rel: has to do with) => liberty
Why was the patriot act created?	?fema	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA
Why was the patriot act created?	patriot act	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act
Why was the patriot act created?	position	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position
Why was the patriot act created?	cheney?s trimester mirabilis	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis
Why was the patriot act created?	least	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least
Why was the patriot act created?	one law	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law
Why was the patriot act created?	cointelpro	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO
Why was the patriot act created?	4th	2.0	what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: the 4th, r0.rel: does to) => the 4th; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (the patriot act, do, $x) => (r0.arg1: the PATRIOT Act, r0.namespace: reverb, r0.arg2: the 4th, r0.rel: does to) => the 4th
Why was the patriot act created?	greatest publicity	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the greatest publicity, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => the greatest publicity; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: the greatest publicity, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => the greatest publicity
Why was the patriot act created?	free , searchable database versions	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions
Why was the patriot act created?	america	2.0	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, the patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America
What kind of music did the romans have?	language	56.0	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, the roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language
What kind of music did the romans have?	past	13.0	What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (the romans, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (the romans, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past
What kind of music did the romans have?	chant	7.0	what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, the roman music) => (r0.arg1: Chant, r0.namespace: openie4, r0.arg2: the music of the Roman Rite, r0.rel: is) => Chant
What kind of music did the romans have?	gregorian chant	5.0	what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be the music of, the roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, the roman music) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the music of the Roman Rite, r0.rel: is) => Gregorian chant
What kind of music did the romans have?	champion	4.0	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion
What kind of music did the romans have?	faith	3.0	what music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Faith, r1.rel: are prescribed in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith; what kind of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Faith, r1.rel: are prescribed in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith; what type of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Faith, r1.rel: are prescribed in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith
What kind of music did the romans have?	salvation	3.0	what music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Salvation, r1.rel: is in, r0.namespace: freebase, r1.arg2: The Roman Church, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: salvation) => Salvation; what kind of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Salvation, r1.rel: is in, r0.namespace: freebase, r1.arg2: The Roman Church, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: salvation) => Salvation; what type of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Salvation, r1.rel: is in, r0.namespace: freebase, r1.arg2: The Roman Church, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: salvation) => Salvation
What kind of music did the romans have?	cato	3.0	what kind of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (the roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato; what type of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (the roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato; what music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (the roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato
What kind of music did the romans have?	planets	3.0	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets
What kind of music did the romans have?	fact	3.0	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact
What kind of music did the romans have?	rock	3.0	what music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, the roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what kind of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, the roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what type of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, the roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock
What kind of music did the romans have?	my head	3.0	what music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: In My Head, r1.rel: was in, r0.namespace: freebase, r1.arg2: the Roman Republic, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: My head) => In My Head; what kind of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: In My Head, r1.rel: was in, r0.namespace: freebase, r1.arg2: the Roman Republic, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: My head) => In My Head; what type of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: In My Head, r1.rel: was in, r0.namespace: freebase, r1.arg2: the Roman Republic, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: My head) => In My Head
What kind of music did the romans have?	school	3.0	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: school, r1.rel: were big names in, r0.namespace: reverb, r1.arg2: the later Roman Empire, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: schools) => school; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: school, r1.rel: are the violent events in, r0.namespace: reverb, r1.arg2: the Roman Colosseum, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: school) => school; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: school, r1.rel: is almost unique in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the school) => school
What kind of music did the romans have?	god	3.0	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: god, r1.rel: was far spread in, r0.namespace: reverb, r1.arg2: the Roman world, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: god, r1.rel: was present in, r0.namespace: reverb, r1.arg2: the Roman catacombs, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: god, r1.rel: were worshipped in, r0.namespace: reverb, r1.arg2: the Roman curia, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god
What kind of music did the romans have?	europe	3.0	what type of music be from the roman ? => $x: ($x, "type", music) ($x, be from, the roman) => $x: ($x, "type", music) ($x, be from, the roman) => (r0.arg1: Europe, r1.rel: were keen to make money from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what kind of music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, the roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, the roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe
What kind of music did the romans have?	heaven 17	3.0	what music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Heaven 17, r1.rel: was referred to differently in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: heaven) => Heaven 17; what kind of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Heaven 17, r1.rel: was referred to differently in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: heaven) => Heaven 17; what type of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, the roman) => (r0.arg1: Heaven 17, r1.rel: was referred to differently in, r0.namespace: freebase, r1.arg2: the Roman, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: heaven) => Heaven 17
What kind of music did the romans have?	latin	3.0	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: Latin, r1.rel: came from, r0.namespace: freebase, r1.arg2: the Ancient Romans, r0.arg2: Music Genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Latin) => Latin; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: Latin, r1.rel: came from, r0.namespace: freebase, r1.arg2: the Ancient Romans, r0.arg2: Music Genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Latin) => Latin; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, the roman) => (r0.arg1: Latin, r1.rel: came from, r0.namespace: freebase, r1.arg2: the Ancient Romans, r0.arg2: Music Genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Latin) => Latin
What kind of music did the romans have?	graduale romanum	1.0	what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, the roman music) => (r0.arg1: the Graduale Romanum, r0.namespace: openie4, r0.arg2: the music book of the Roman Rite, r0.rel: is) => the Graduale Romanum
What kind of music did the romans have?	formula	1.0	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => (r0.arg1: the formula, r1.rel: is given in, r0.namespace: reverb, r1.arg2: the Roman Catholic, r0.arg2: punishment function, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The formula) => the formula
What kind of music did the romans have?	harvest festival	1.0	what kind of music do roman have ? => $x: ($x, "is a", music) (roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival
What kind of music did the romans have?	mod	1.0	what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD
What kind of music did the romans have?	article	1.0	what type of punishment be in the roman ? => $x: ($x, "is an example of", punishment) ($x, be in, the roman) => $x: ($x, "is an example of", punishment) ($x, be in, the roman) => (r0.arg1: the article, r1.rel: should be submitted in, r0.namespace: reverb, r1.arg2: the font Times New Roman, r0.arg2: negative punishment, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The article) => the article
Why does frogs burp?	yellow tadpole	1.0	what make frog burp ? => $x: ($x, make, frog burp) => $x: ($x, make, frog burp) => (r0.arg1: Each yellow tadpole, r0.namespace: reverb, r0.arg2: the frog burp, r0.rel: makes) => Each yellow tadpole
Why does frogs burp?	frog	1.0	what make frog burp ? => $x: ($x, make, frog burp) => $x: ($x, make, frog burp) => (r0.arg1: the frog, r0.namespace: reverb, r0.arg2: the frog burp, r0.rel: made) => the frog
What responsibilities did john jay have?	first chief justice	3.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: openie4, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay?one, r0.rel: was) => The first chief justice
What responsibilities did john jay have?	federalist papers	3.0	what be john jay be responsible for ? => $x: (john jay, be responsible for, $x) => $x: (john jay, be responsible for, $x) => (r0.arg1: John Jay, r0.namespace: reverb, r0.arg2: the Federalist Papers, r0.rel: were responsible for writing) => the Federalist Papers; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Federalist Papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => the Federalist Papers; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Federalist papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were written by) => The Federalist papers
What responsibilities did john jay have?	rye	2.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was home to) => Rye; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye
What responsibilities did john jay have?	united states	2.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the United States; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was organized with) => the United States
What responsibilities did john jay have?	presentation	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The presentation, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was made by) => The presentation
What responsibilities did john jay have?	child	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the child, r0.namespace: reverb, r0.arg2: John Jay Melendez, r0.rel: is) => the child
What responsibilities did john jay have?	chief currao	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Chief Currao, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is a graduate of) => Chief Currao
What responsibilities did john jay have?	columbia university	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Columbia University, r0.namespace: reverb, r0.arg2: John Jay Scholars, r0.rel: are designated) => Columbia University
What responsibilities did john jay have?	chomsky	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky
What responsibilities did john jay have?	abdul-aziz hassan	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Abdul-Aziz Hassan, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is student at) => Abdul-Aziz Hassan
What responsibilities did john jay have?	tx	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: TX, r0.namespace: reverb, r0.arg2: John , Jay & Jill Wilson, r0.rel: are) => TX
What responsibilities did john jay have?	form c documentation	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Form C documentation, r0.namespace: reverb, r0.arg2: Inside John Jay, r0.rel: can be found on) => Form C documentation
What responsibilities did john jay have?	thurgood marshall	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall
What responsibilities did john jay have?	show	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the show, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the show
What responsibilities did john jay have?	obama	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Obama, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was anticipated by) => Obama
What responsibilities did john jay have?	ralph	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph
What responsibilities did john jay have?	jeremy travis	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis
What responsibilities did john jay have?	mr. mahoney	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney
What responsibilities did john jay have?	program	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: are held at) => the program
What responsibilities did john jay have?	edmonds	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Edmonds, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is waiting for) => Edmonds
What responsibilities did john jay have?	southern states	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Southern states, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was over whether) => Southern states
What responsibilities did john jay have?	open house	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Open House, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: will be held at) => the Open House
What responsibilities did john jay have?	john	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: John, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is a graduate of) => John
What responsibilities did john jay have?	conspiracies	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: conspiracies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => conspiracies
What responsibilities did john jay have?	treaty	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The treaty, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was signed by) => The treaty
What responsibilities did john jay have?	george clinton	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton
What responsibilities did john jay have?	town	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is named after) => The town
What responsibilities did john jay have?	prayer	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: prayer, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was opposed by) => prayer
What responsibilities did john jay have?	pbs documentary	1.0	what do john jay ? => $x: ($x, do, john jay) => $x: ($x, do, john jay) => (r0.arg1: The PBS documentary, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: does n?t even mention) => The PBS documentary
What responsibilities did john jay have?	dude ranch	1.0	what do john jay ? => $x: ($x, do, john jay) => $x: ($x, do, john jay) => (r0.arg1: a dude ranch, r0.namespace: reverb, r0.arg2: John Jay High School, r0.rel: did an important show at) => a dude ranch
What responsibilities did john jay have?	institute	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Institute, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was named for) => The Institute
What responsibilities did john jay have?	throws	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Throws, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Throws
What responsibilities did john jay have?	scholarship service award	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Scholarship and Service Award, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the Scholarship and Service Award
What responsibilities did john jay have?	luis barrios	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Luis Barrios, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is a professor at) => Luis Barrios
What responsibilities did john jay have?	survey	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The survey, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is being conducted by) => The survey
What responsibilities did john jay have?	annotations	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the annotations, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: are really those of) => the annotations
What responsibilities did john jay have?	alice?s father	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Alice?s father, r0.namespace: reverb, r0.arg2: John Jay?s grandson, r0.rel: was) => Alice?s father
What responsibilities did john jay have?	vikings	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Vikings, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => The Vikings
What responsibilities did john jay have?	karthik venkatraj	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Karthik Venkatraj, r0.namespace: reverb, r0.arg2: a John Jay Fellowship, r0.rel: is completing) => Karthik Venkatraj
What responsibilities did john jay have?	wac	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: WAC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: has been designed at) => WAC
What responsibilities did john jay have?	foregoing	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the foregoing, r0.namespace: reverb, r0.arg2: John Jay Fossett, r0.rel: was served upon) => the foregoing
What responsibilities did john jay have?	better teaching seminars	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Better Teaching Seminars, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: are knowledgeable about) => the Better Teaching Seminars
What responsibilities did john jay have?	failures	1.0	what do john jay do ? => $x: (john jay, do, $x) => $x: (john jay, do, $x) => (r0.arg1: The John Jay report, r0.namespace: reverb, r0.arg2: the failures, r0.rel: does mention) => the failures
What responsibilities did john jay have?	criminologist	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the other criminologist, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is) => the other criminologist
What responsibilities did john jay have?	conference sessions	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The conference sessions, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: will be held at) => The conference sessions
What responsibilities did john jay have?	work study students	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Work Study Students, r0.namespace: reverb, r0.arg2: John Jay students, r0.rel: are) => Work Study Students
What responsibilities did john jay have?	new ad hoc	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the new ad hoc, r0.namespace: reverb, r0.arg2: lerner and john jay, r0.rel: is in) => the new ad hoc
What responsibilities did john jay have?	szendro?s home college	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Szendro?s home college, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Szendro?s home college
What responsibilities did john jay have?	sale	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the sale, r0.namespace: reverb, r0.arg2: John Jay Pittman, r0.rel: were) => the sale
What responsibilities did john jay have?	new york	1.0	what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: New York, r0.namespace: reverb, r0.arg2: JOHN JAY, r0.rel: is) => New York
Is a ostrich a vertebrates?	deal ostriches	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: A Deal in Ostriches, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/A%20Deal%20in%20Ostriches, r0.rel: can be found on Wikipedia at) => A Deal in Ostriches; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: A Deal in Ostriches, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/A%20Deal%20in%20Ostriches, r0.rel: can be found on Wikipedia at) => A Deal in Ostriches
Is a ostrich a vertebrates?	final touch	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The final touch, r0.namespace: reverb, r0.arg2: a black partial quill ostrich seat, r0.rel: is) => The final touch; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The final touch, r0.namespace: reverb, r0.arg2: a black partial quill ostrich seat, r0.rel: is) => The final touch
Is a ostrich a vertebrates?	animal	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The animal, r0.namespace: reverb, r0.arg2: a small ostrich or emu, r0.rel: is very similar to) => The animal; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The animal, r0.namespace: reverb, r0.arg2: a small ostrich or emu, r0.rel: is very similar to) => The animal
Is a ostrich a vertebrates?	covetous man first kind	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The covetous man of the first kind, r0.namespace: openie4, r0.arg2: a greedy ostrich, r0.rel: is like) => The covetous man of the first kind; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The covetous man of the first kind, r0.namespace: openie4, r0.arg2: a greedy ostrich, r0.rel: is like) => The covetous man of the first kind
Is a ostrich a vertebrates?	latter	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The latter, r0.namespace: reverb, r0.arg2: a large , speedy , ostrich-like dinosaur, r0.rel: was) => The latter; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The latter, r0.namespace: reverb, r0.arg2: a large , speedy , ostrich-like dinosaur, r0.rel: was) => The latter
Is a ostrich a vertebrates?	marcel	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: MARCEL, r0.namespace: reverb, r0.arg2: a comical , French-Canadian ostrich, r0.rel: is) => MARCEL; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: MARCEL, r0.namespace: reverb, r0.arg2: a comical , French-Canadian ostrich, r0.rel: is) => MARCEL
Is a ostrich a vertebrates?	leather boot	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: Leather This boot, r0.namespace: reverb, r0.arg2: a Smooth Ostrich, r0.rel: is) => Leather This boot; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: Leather This boot, r0.namespace: reverb, r0.arg2: a Smooth Ostrich, r0.rel: is) => Leather This boot
Is a ostrich a vertebrates?	fewer feathers	2.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: A full-grown ostrich, r0.namespace: reverb, r0.arg2: fewer feathers, r0.rel: has) => fewer feathers; what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: 241.A full-grown ostrich, r0.namespace: reverb, r0.arg2: fewer feathers, r0.rel: has) => fewer feathers
Is a ostrich a vertebrates?	sides	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The sides, r0.namespace: reverb, r0.arg2: a smooth ostrich leather, r0.rel: are made with) => The sides; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The sides, r0.namespace: reverb, r0.arg2: a smooth ostrich leather, r0.rel: are made with) => The sides
Is a ostrich a vertebrates?	almost 100 years	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: almost 100 years, r0.namespace: reverb, r0.arg2: a large Ostrich Farming concern, r0.rel: is) => almost 100 years; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: almost 100 years, r0.namespace: reverb, r0.arg2: a large Ostrich Farming concern, r0.rel: is) => almost 100 years
Is a ostrich a vertebrates?	oudtshoorn old mill lodge	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: Oudtshoorn Old Mill Lodge, r0.namespace: reverb, r0.arg2: a working ostrich farm, r0.rel: is) => Oudtshoorn Old Mill Lodge; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: Oudtshoorn Old Mill Lodge, r0.namespace: reverb, r0.arg2: a working ostrich farm, r0.rel: is) => Oudtshoorn Old Mill Lodge
Is a ostrich a vertebrates?	singer	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The singer, r0.namespace: reverb, r0.arg2: a white ostrich version, r0.rel: will be toting) => The singer; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The singer, r0.namespace: reverb, r0.arg2: a white ostrich version, r0.rel: will be toting) => The singer
Is a ostrich a vertebrates?	first kind	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the first kind, r0.namespace: reverb, r0.arg2: a greedy ostrich, r0.rel: is like) => the first kind; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the first kind, r0.namespace: reverb, r0.arg2: a greedy ostrich, r0.rel: is like) => the first kind
Is a ostrich a vertebrates?	round bell shade	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The round bell shade, r0.namespace: reverb, r0.arg2: a brown ostrich texture, r0.rel: is finished in) => The round bell shade; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The round bell shade, r0.namespace: reverb, r0.arg2: a brown ostrich texture, r0.rel: is finished in) => The round bell shade
Is a ostrich a vertebrates?	savannah tails	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: Savannah Tails, r0.namespace: openie4, r0.arg2: a game of Ostrich racing, r0.rel: is) => Savannah Tails; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: Savannah Tails, r0.namespace: openie4, r0.arg2: a game of Ostrich racing, r0.rel: is) => Savannah Tails
Is a ostrich a vertebrates?	trim	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: trim, r0.namespace: reverb, r0.arg2: a rich light Chocolate Brown Ostrich leather, r0.rel: is set as) => trim; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: trim, r0.namespace: reverb, r0.arg2: a rich light Chocolate Brown Ostrich leather, r0.rel: is set as) => trim
Is a ostrich a vertebrates?	master control series reverso	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: a Master Control series or Reverso, r0.namespace: reverb, r0.arg2: a tan ostrich, r0.rel: is) => a Master Control series or Reverso; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: a Master Control series or Reverso, r0.namespace: reverb, r0.arg2: a tan ostrich, r0.rel: is) => a Master Control series or Reverso
Is a ostrich a vertebrates?	foot	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The foot, r0.namespace: reverb, r0.arg2: a pink leather ostrich print, r0.rel: is) => The foot; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The foot, r0.namespace: reverb, r0.arg2: a pink leather ostrich print, r0.rel: is) => The foot
Is a ostrich a vertebrates?	tree	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: a tree, r0.namespace: reverb, r0.arg2: a Somali Ostrich, r0.rel: was) => a tree; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: a tree, r0.namespace: reverb, r0.arg2: a Somali Ostrich, r0.rel: was) => a tree
Is a ostrich a vertebrates?	popular press	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The popular press, r0.namespace: openie4, r0.arg2: a few ostriches, r0.rel: being misled by) => The popular press; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The popular press, r0.namespace: openie4, r0.arg2: a few ostriches, r0.rel: being misled by) => The popular press
Is a ostrich a vertebrates?	scarf	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the scarf, r0.namespace: reverb, r0.arg2: a self-designed , simple ostrich plume affair, r0.rel: was) => the scarf; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the scarf, r0.namespace: reverb, r0.arg2: a self-designed , simple ostrich plume affair, r0.rel: was) => the scarf
Is a ostrich a vertebrates?	feather	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: The feather, r0.namespace: reverb, r0.arg2: a small ostrich plume, r0.rel: is actually) => The feather; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: The feather, r0.namespace: reverb, r0.arg2: a small ostrich plume, r0.rel: is actually) => The feather
Is a ostrich a vertebrates?	ma'at	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: Ma'at, r0.namespace: reverb, r0.arg2: a white ostrich feather, r0.rel: is symbolized as) => Ma'at; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: Ma'at, r0.namespace: reverb, r0.arg2: a white ostrich feather, r0.rel: is symbolized as) => Ma'at
Is a ostrich a vertebrates?	?the government	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: ?The government, r0.namespace: reverb, r0.arg2: a blind ostrich, r0.rel: has been like) => ?The government; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: ?The government, r0.namespace: reverb, r0.arg2: a blind ostrich, r0.rel: has been like) => ?The government
Is a ostrich a vertebrates?	government	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the government, r0.namespace: reverb, r0.arg2: a classic ostrich policy, r0.rel: seems to be following) => the government; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the government, r0.namespace: reverb, r0.arg2: a classic ostrich policy, r0.rel: seems to be following) => the government
Is a ostrich a vertebrates?	universe	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the universe, r0.namespace: openie4, r0.arg2: a giant ostrich egg, r0.rel: can be) => the universe; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the universe, r0.namespace: openie4, r0.arg2: a giant ostrich egg, r0.rel: can be) => the universe
Is a ostrich a vertebrates?	east	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the East, r0.namespace: reverb, r0.arg2: a foolish , ostrich option, r0.rel: is simply) => the East; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the East, r0.namespace: reverb, r0.arg2: a foolish , ostrich option, r0.rel: is simply) => the East
Is a ostrich a vertebrates?	south africa old mill lodge	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: South Africa Old Mill Lodge, r0.namespace: reverb, r0.arg2: a working ostrich farm, r0.rel: is) => South Africa Old Mill Lodge; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: South Africa Old Mill Lodge, r0.namespace: reverb, r0.arg2: a working ostrich farm, r0.rel: is) => South Africa Old Mill Lodge
Is a ostrich a vertebrates?	bird	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: the bird, r0.namespace: reverb, r0.arg2: a Kokarian Ostrich, r0.rel: is known as) => the bird; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: the bird, r0.namespace: reverb, r0.arg2: a Kokarian Ostrich, r0.rel: is known as) => the bird
Is a ostrich a vertebrates?	man	2.0	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, a ostrich) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: a large Ostrich horse, r0.rel: appeared to be) => a man; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, a ostrich a) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: a large Ostrich horse, r0.rel: appeared to be) => a man
Is a ostrich a vertebrates?	wings	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: a vestige?ostriches, r0.namespace: reverb, r0.arg2: wings, r0.rel: have) => wings
Is a ostrich a vertebrates?	inseparable pals	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: a 10-year-old ostrich ?, r0.namespace: reverb, r0.arg2: inseparable pals, r0.rel: have become) => inseparable pals
Is a ostrich a vertebrates?	fewer feathers than cowboy hat	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: A full-grown ostrich, r0.namespace: openie4, r0.arg2: fewer feathers than your cowboy hat, r0.rel: has) => fewer feathers than your cowboy hat
Is a ostrich a vertebrates?	two tails	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: a ostrich/frog hybrid, r0.namespace: reverb, r0.arg2: two tails, r0.rel: has) => two tails
Is a ostrich a vertebrates?	vain	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: a very rare ostrich Darwin, r0.namespace: reverb, r0.arg2: vain, r0.rel: had been searching for in) => vain
Is a ostrich a vertebrates?	thangsgiving hoss style	1.0	what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (a ostrich a, have, $x) => (r0.arg1: a 3-legged ostrich, r0.namespace: reverb, r0.arg2: Thangsgiving Hoss style, r0.rel: will have to do for) => Thangsgiving Hoss style
Who started the bear flag revolution?	bennett	2.0	what be the bear flag revolution ? => $x: ($x, be, the bear flag revolution) => $x: ($x, be, the bear flag revolution) => (r0.arg1: Bennett, r0.namespace: reverb, r0.arg2: the bear Flag Revolution, r0.rel: was involved in) => Bennett; who be the bear flag revolution ? => $x: ($x, be, the bear flag revolution) => $x: ($x, be, the bear flag revolution) => (r0.arg1: Bennett, r0.namespace: reverb, r0.arg2: the bear Flag Revolution, r0.rel: was involved in) => Bennett
What are the scopes and limitations of physics?	emphasis	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: the emphasis, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is to evaluate) => the emphasis
What are the scopes and limitations of physics?	students	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: The students, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are required to list) => The students
What are the scopes and limitations of physics?	ftc	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: The FTC, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is familiar with) => The FTC
What are the scopes and limitations of physics?	scholars network email	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: Scholars Network Email, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is) => Scholars Network Email
What are the scopes and limitations of physics?	critical areas	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: The critical areas, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is) => The critical areas
What are the scopes and limitations of physics?	subsequent runtime errors	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: subsequent runtime errors, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are) => subsequent runtime errors
What are the scopes and limitations of physics?	public	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are aware of) => the public
What are the scopes and limitations of physics?	principle	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: the principle, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are considered within) => the principle
What are the scopes and limitations of physics?	common good	1.0	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, the scope and limitation) => (r0.arg1: the common good, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are) => the common good
What were the names of famous highwayman?	desk	5.0	who be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, the famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk; who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk; what be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, the famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk
What were the names of famous highwayman?	holloway	5.0	who be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, the famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway; who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway; what be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, the famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway
What were the names of famous highwayman?	two riniers	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers
What were the names of famous highwayman?	dick turpin	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin
What were the names of famous highwayman?	gamaliel ratsey	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey
What were the names of famous highwayman?	lady katherine ferrers	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers
What were the names of famous highwayman?	willie brennan	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan
What were the names of famous highwayman?	services	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services
What were the names of famous highwayman?	dublin	4.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, a famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin
What were the names of famous highwayman?	dick dunsdon	3.0	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon
What were the names of famous highwayman?	jews	2.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Jews, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: had been killed by) => the Jews; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Jews, r0.namespace: reverb, r0.arg2: any highwaymen, r0.rel: are more savage than) => the Jews
What were the names of famous highwayman?	walton	2.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton
What were the names of famous highwayman?	knot	2.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot
What were the names of famous highwayman?	clumsy lady	2.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady
What were the names of famous highwayman?	jack audley	2.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley
What were the names of famous highwayman?	tus	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus
What were the names of famous highwayman?	small paddocks	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks
What were the names of famous highwayman?	father	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father
What were the names of famous highwayman?	finchley common	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Finchley Common, r0.namespace: openie4, r0.arg2: its highwaymen, r0.rel: was noted for) => Finchley Common
What were the names of famous highwayman?	denis moore	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore
What were the names of famous highwayman?	part	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: part, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was once the haunt of) => part
What were the names of famous highwayman?	coach passengers	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the coach passengers, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: are threatened by) => the coach passengers
What were the names of famous highwayman?	kid	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid
What were the names of famous highwayman?	author	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author
What were the names of famous highwayman?	aged woman	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: an aged woman, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: had been held up by) => an aged woman
What were the names of famous highwayman?	savior	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior
What were the names of famous highwayman?	travellers	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the travellers, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: would be ambush by) => the travellers
What were the names of famous highwayman?	kingston	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston
What were the names of famous highwayman?	brigands guild	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Brigands Guild, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is a collective of) => The Brigands Guild
What were the names of famous highwayman?	poem	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The poem, r0.namespace: openie4, r0.arg2: the Highwayman, r0.rel: is about) => The poem
What were the names of famous highwayman?	road	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road
What were the names of famous highwayman?	gary monroe	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gary Monroe, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: is the author of) => Gary Monroe
What were the names of famous highwayman?	coach	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a coach, r0.namespace: reverb, r0.arg2: Highwaymen, r0.rel: is held up by) => a coach
What were the names of famous highwayman?	john townsend	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: John Townsend, r0.namespace: reverb, r0.arg2: highwayman, r0.rel: was an expert on) => John Townsend
What were the names of famous highwayman?	jul 2008 , 22:04 wow	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow
What were the names of famous highwayman?	?business	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business
What were the names of famous highwayman?	tyburn gallows	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows
What were the names of famous highwayman?	kaskans	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Kaskans, r0.namespace: reverb, r0.arg2: highwayman, r0.rel: were now little more than) => the Kaskans
What were the names of famous highwayman?	mountains defiles	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles
What were the names of famous highwayman?	governess	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess
What were the names of famous highwayman?	mr. collingwood	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Mr. Collingwood, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: pretend to be) => Mr. Collingwood
What were the names of famous highwayman?	design	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design
What were the names of famous highwayman?	lone hebrew	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew
What were the names of famous highwayman?	silver	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver
What were the names of famous highwayman?	gabriel	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel
What were the names of famous highwayman?	messenger	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger
What were the names of famous highwayman?	rough paths	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the rough paths, r0.namespace: reverb, r0.arg2: numerous highwaymen, r0.rel: were the haunt of) => the rough paths
What were the names of famous highwayman?	country	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is beset by) => the country
What were the names of famous highwayman?	charlotte	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte
What were the names of famous highwayman?	wood	1.0	who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the wood, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was a sanctuary for) => the wood
How many diffrent types of televisions are there?	works satellite television	10.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite television; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite television, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite television
How many diffrent types of televisions are there?	works satellite tv	10.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite TV; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite TV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite TV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite TV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite TV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite TV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite TV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite TV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television reception, r0.rel: is a type of) => Works Satellite TV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Works Satellite TV, r0.namespace: openie4, r0.arg2: television service, r0.rel: is a type of) => Works Satellite TV
How many diffrent types of televisions are there?	mockumentary	10.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: openie4, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: reverb, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: openie4, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: reverb, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: openie4, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Mockumentary, r0.namespace: reverb, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Mockumentary, r0.namespace: openie4, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Mockumentary, r0.namespace: reverb, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Mockumentary, r0.namespace: openie4, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Mockumentary, r0.namespace: reverb, r0.arg2: film or television show, r0.rel: is a type of) => Mockumentary
How many diffrent types of televisions are there?	matrix display	8.0	what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be two type of television ? => $x: ($x, be two type of, television) => $x: ($x, be two type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be two type of television ? => $x: ($x, be two type of, television) => $x: ($x, be two type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display
How many diffrent types of televisions are there?	lcds	6.0	what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs; what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs; the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCDs, r0.namespace: reverb, r0.arg2: television technology, r0.rel: are the most popular type of) => LCDs
How many diffrent types of televisions are there?	lcd tvs	6.0	what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs; what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs; the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be the type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD TVs, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are the most common types of) => LCD TVs
How many diffrent types of televisions are there?	digital cable	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Digital Cable, r0.namespace: reverb, r0.arg2: television signal, r0.rel: is a type of) => Digital Cable; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Digital Cable, r0.namespace: reverb, r0.arg2: television signal, r0.rel: is a type of) => Digital Cable; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Digital Cable, r0.namespace: reverb, r0.arg2: television signal, r0.rel: is a type of) => Digital Cable; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Digital Cable, r0.namespace: reverb, r0.arg2: television signal, r0.rel: is a type of) => Digital Cable; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Digital Cable, r0.namespace: reverb, r0.arg2: television signal, r0.rel: is a type of) => Digital Cable
How many diffrent types of televisions are there?	oftheworldtv	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: OfTheWorldTV, r0.namespace: reverb, r0.arg2: online television network, r0.rel: is a new type of) => OfTheWorldTV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: OfTheWorldTV, r0.namespace: reverb, r0.arg2: online television network, r0.rel: is a new type of) => OfTheWorldTV; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: OfTheWorldTV, r0.namespace: reverb, r0.arg2: online television network, r0.rel: is a new type of) => OfTheWorldTV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: OfTheWorldTV, r0.namespace: reverb, r0.arg2: online television network, r0.rel: is a new type of) => OfTheWorldTV; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: OfTheWorldTV, r0.namespace: reverb, r0.arg2: online television network, r0.rel: is a new type of) => OfTheWorldTV
How many diffrent types of televisions are there?	secam secam	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: SECAM SECAM, r0.namespace: reverb, r0.arg2: television standard, r0.rel: is a type of) => SECAM SECAM; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: SECAM SECAM, r0.namespace: reverb, r0.arg2: television standard, r0.rel: is a type of) => SECAM SECAM; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: SECAM SECAM, r0.namespace: reverb, r0.arg2: television standard, r0.rel: is a type of) => SECAM SECAM; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: SECAM SECAM, r0.namespace: reverb, r0.arg2: television standard, r0.rel: is a type of) => SECAM SECAM; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: SECAM SECAM, r0.namespace: reverb, r0.arg2: television standard, r0.rel: is a type of) => SECAM SECAM
How many diffrent types of televisions are there?	reality television	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Reality television, r0.namespace: openie4, r0.arg2: television programming, r0.rel: is a type of) => Reality television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Reality television, r0.namespace: openie4, r0.arg2: television programming, r0.rel: is a type of) => Reality television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: Reality television, r0.namespace: openie4, r0.arg2: television programming, r0.rel: is a type of) => Reality television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Reality television, r0.namespace: openie4, r0.arg2: television programming, r0.rel: is a type of) => Reality television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: Reality television, r0.namespace: openie4, r0.arg2: television programming, r0.rel: is a type of) => Reality television
How many diffrent types of televisions are there?	lcd	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD, r0.namespace: reverb, r0.arg2: television screen, r0.rel: is a recent type of) => LCD; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD, r0.namespace: reverb, r0.arg2: television screen, r0.rel: is a recent type of) => LCD; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: LCD, r0.namespace: reverb, r0.arg2: television screen, r0.rel: is a recent type of) => LCD; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: LCD, r0.namespace: reverb, r0.arg2: television screen, r0.rel: is a recent type of) => LCD; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: LCD, r0.namespace: reverb, r0.arg2: television screen, r0.rel: is a recent type of) => LCD
How many diffrent types of televisions are there?	game show	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A game show, r0.namespace: reverb, r0.arg2: radio or television program, r0.rel: is a type of) => A game show; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A game show, r0.namespace: reverb, r0.arg2: radio or television program, r0.rel: is a type of) => A game show; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A game show, r0.namespace: reverb, r0.arg2: radio or television program, r0.rel: is a type of) => A game show; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: A game show, r0.namespace: reverb, r0.arg2: radio or television program, r0.rel: is a type of) => A game show; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: A game show, r0.namespace: reverb, r0.arg2: radio or television program, r0.rel: is a type of) => A game show
How many diffrent types of televisions are there?	3d ready television	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A 3D ready television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a type of) => A 3D ready television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A 3D ready television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a type of) => A 3D ready television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: A 3D ready television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a type of) => A 3D ready television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: A 3D ready television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a type of) => A 3D ready television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: A 3D ready television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a type of) => A 3D ready television
How many diffrent types of televisions are there?	dlp	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: DLP, r0.namespace: reverb, r0.arg2: projection television, r0.rel: is a type of) => DLP; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: DLP, r0.namespace: reverb, r0.arg2: projection television, r0.rel: is a type of) => DLP; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: DLP, r0.namespace: reverb, r0.arg2: projection television, r0.rel: is a type of) => DLP; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: DLP, r0.namespace: reverb, r0.arg2: projection television, r0.rel: is a type of) => DLP; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: DLP, r0.namespace: reverb, r0.arg2: projection television, r0.rel: is a type of) => DLP
How many diffrent types of televisions are there?	drama	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: drama, r0.namespace: reverb, r0.arg2: television show, r0.rel: is a type of) => drama; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: drama, r0.namespace: reverb, r0.arg2: television show, r0.rel: is a type of) => drama; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: drama, r0.namespace: reverb, r0.arg2: television show, r0.rel: is a type of) => drama; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: drama, r0.namespace: reverb, r0.arg2: television show, r0.rel: is a type of) => drama; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: drama, r0.namespace: reverb, r0.arg2: television show, r0.rel: is a type of) => drama
How many diffrent types of televisions are there?	plasma television	5.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: The plasma television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a relatively new type of) => The plasma television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: The plasma television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a relatively new type of) => The plasma television; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: The plasma television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a relatively new type of) => The plasma television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: The plasma television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a relatively new type of) => The plasma television; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be a type of, television) => (r0.arg1: The plasma television, r0.namespace: reverb, r0.arg2: television, r0.rel: is a relatively new type of) => The plasma television
How many diffrent types of televisions are there?	power cell	3.0	what be the type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: this television, r0.namespace: reverb, r0.arg2: power cell, r0.rel: has a whole new type of) => power cell; what be some type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: this television, r0.namespace: reverb, r0.arg2: power cell, r0.rel: has a whole new type of) => power cell; what be a type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: this television, r0.namespace: reverb, r0.arg2: power cell, r0.rel: has a whole new type of) => power cell
How many diffrent types of televisions are there?	privacy screens	3.0	what be the type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: These televisions, r0.namespace: reverb, r0.arg2: privacy screens, r0.rel: have numerous types of) => privacy screens; what be some type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: These televisions, r0.namespace: reverb, r0.arg2: privacy screens, r0.rel: have numerous types of) => privacy screens; what be a type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: These televisions, r0.namespace: reverb, r0.arg2: privacy screens, r0.rel: have numerous types of) => privacy screens
How many diffrent types of televisions are there?	high	3.0	type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: high, r0.namespace: reverb, r0.arg2: High-definition Televisions, r0.rel: are 3 simple types of) => high; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: high, r0.namespace: reverb, r0.arg2: High-definition Televisions, r0.rel: are 3 simple types of) => high; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: high, r0.namespace: reverb, r0.arg2: High-definition Televisions, r0.rel: are 3 simple types of) => high
How many diffrent types of televisions are there?	similar program	3.0	what be the type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: a television station, r0.namespace: reverb, r0.arg2: similar program, r0.rel: had some type of) => similar program; what be some type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: a television station, r0.namespace: reverb, r0.arg2: similar program, r0.rel: had some type of) => similar program; what be a type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: a television station, r0.namespace: reverb, r0.arg2: similar program, r0.rel: had some type of) => similar program
How many diffrent types of televisions are there?	home furniture	3.0	what be the type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: televisions, r0.namespace: reverb, r0.arg2: home furniture, r0.rel: have become a type of) => home furniture; what be some type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: televisions, r0.namespace: reverb, r0.arg2: home furniture, r0.rel: have become a type of) => home furniture; what be a type of television ? => $x: (television, have type of, $x) => $x: (television, have type of, $x) => (r0.arg1: televisions, r0.namespace: reverb, r0.arg2: home furniture, r0.rel: have become a type of) => home furniture
How many diffrent types of televisions are there?	tivo guru guides	1.0	list of television ? => $x: ($x, be list of, television) => $x: ($x, be list of, television) => (r0.arg1: TiVo Guru Guides, r0.namespace: reverb, r0.arg2: the best television programs, r0.rel: are lists of) => TiVo Guru Guides
How many diffrent types of televisions are there?	news source	1.0	what type of television be there in the world ? => $x: ($x, "type", television) ($x, be there in, the world) => $x: ($x, "type", television) ($x, be there in, the world) => (r0.arg1: News Source, r1.rel: are there in, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Television news music package, r0.rel: Type, r1.namespace: reverb, r1.arg1: news sources) => News Source
How many diffrent types of televisions are there?	roberts	1.0	list of television ? => $x: ($x, be list of, television) => $x: ($x, be list of, television) => (r0.arg1: Roberts, r0.namespace: openie4, r0.arg2: broadcast television stations, r0.rel: is a list of) => Roberts
How many diffrent types of televisions are there?	below	1.0	list of television ? => $x: ($x, be list of, television) => $x: ($x, be list of, television) => (r0.arg1: Below, r0.namespace: openie4, r0.arg2: movies and television shows, r0.rel: is a partial list of) => Below
What kind of plants did the ancient Mayans have?	maize	2.0	what type of plant do the mayan have ? => $x: ($x, "type", plant) (the mayan, have, $x) => $x: ($x, "type", plant) (the mayan, have, $x) => (r0.arg1: Maize, r1.rel: had, r0.namespace: freebase, r1.arg2: maize, r0.arg2: Garden Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Mayans) => Maize; what plant do the mayan have ? => $x: ($x, "type", plant) (the mayan, have, $x) => $x: ($x, "type", plant) (the mayan, have, $x) => (r0.arg1: Maize, r1.rel: had, r0.namespace: freebase, r1.arg2: maize, r0.arg2: Garden Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Mayans) => Maize
Is water a raw ingredient?	good raw ingredient	1.0	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, a raw ingredient) => (r0.arg1: A good raw ingredient, r0.namespace: reverb, r0.arg2: a good raw ingredient?period, r0.rel: is) => A good raw ingredient
Is water a raw ingredient?	coconut water	1.0	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, a raw ingredient) => (r0.arg1: coconut water, r0.namespace: reverb, r0.arg2: a wonderful raw food ingredient, r0.rel: is) => coconut water
Is water a raw ingredient?	china	1.0	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, a raw ingredient) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a major supplier of raw supplement ingredients, r0.rel: is) => China
Is water a raw ingredient?	salmon	1.0	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, a raw ingredient) => (r0.arg1: salmon, r0.namespace: reverb, r0.arg2: such a fantastic raw ingredient, r0.rel: was) => salmon
How long did a gold license last for?	site	2.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The site; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a modified licensed GoldCoders script, r0.rel: is run off) => The site
How long did a gold license last for?	dedicated server	2.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server
How long did a gold license last for?	vacationprofit	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: VacationProfit, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VacationProfit
How long did a gold license last for?	lucremaker	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: LucreMaker, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => LucreMaker
How long did a gold license last for?	program	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The program
How long did a gold license last for?	virtualpayments	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: VirtualPayments, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VirtualPayments
How long did a gold license last for?	imakemoneynow	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: IMakeMoneyNow, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => IMakeMoneyNow
How long did a gold license last for?	cfdonline	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: CFDonline, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => CFDonline
How long did a gold license last for?	bruyetteinvestment	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: BruyetteInvestment, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => BruyetteInvestment
How long did a gold license last for?	exceptionalfunds	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: ExceptionalFunds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => ExceptionalFunds
How long did a gold license last for?	roliteincome	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: RoliteIncome, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => RoliteIncome
How long did a gold license last for?	verifonds	1.0	what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, a gold license) => (r0.arg1: Verifonds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => Verifonds
What is the major cities of romania?	bucharest	22.0	what be romanias city ? => $x: ($x, be, romanias city) => $x: ($x, be, romanias city) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania?s main city, r0.rel: is) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest
What is the major cities of romania?	cluj-napoca	9.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca
What is the major cities of romania?	constan?a	6.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a
What is the major cities of romania?	constanta	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA
What is the major cities of romania?	braila	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila
What is the major cities of romania?	1st century	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century
What is the major cities of romania?	resita	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita
What is the major cities of romania?	bacau	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau
What is the major cities of romania?	romania constan?a	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a
What is the major cities of romania?	arad	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad
What is the major cities of romania?	population	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population
What is the major cities of romania?	cluj-napoca cluj-napoca	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca
What is the major cities of romania?	buzau	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau
What is the major cities of romania?	romania bucharest	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest
What is the major cities of romania?	sibiu	3.0	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu
What is the major cities of romania?	buscata	2.0	city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata
Who wins the WWE title?	miz	14.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Miz) => The Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Miz) => The Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: then went on to win, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Miz, r1.rel: then went on to win, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Miz) => The Miz; who win on the wwe title ? => $x: ($x, win on, the wwe title) => $x: ($x, win on, the wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win on the wwe title ? => $x: ($x, win on, the wwe title) => $x: ($x, win on, the wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz
Who wins the WWE title?	edge	12.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Edge) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: would later win, r0.namespace: freebase, r1.arg2: the WWE Tag Team Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Edge, r1.rel: would later win, r0.namespace: freebase, r1.arg2: the WWE Tag Team Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge
Who wins the WWE title?	cena	10.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at the wwe title ? => $x: ($x, win at, the wwe title) => $x: ($x, win at, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at the wwe title ? => $x: ($x, win at, the wwe title) => $x: ($x, win at, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who get the wwe title ? => $x: ($x, get, the wwe title) => $x: ($x, get, the wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: gets) => Cena; who get the wwe title ? => $x: ($x, get, the wwe title) => $x: ($x, get, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: gets) => Cena
Who wins the WWE title?	triple h	6.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; which team have the wwe title ? => $x: ($x, "type", team) ($x, have, the wwe title) => $x: ($x, "type", team) ($x, have, the wwe title) => (r0.arg1: Triple H, r1.rel: has held, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Triple H, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Triple H, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has held) => Triple H
Who wins the WWE title?	bob backlund	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Bob Backlund, r1.rel: wins, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Bob Backlund) => Bob Backlund; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Bob Backlund, r1.rel: wins, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Bob Backlund) => Bob Backlund
Who wins the WWE title?	eddie	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie
Who wins the WWE title?	undertaker	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Undertaker) => The Undertaker; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Undertaker) => The Undertaker
Who wins the WWE title?	cm punk	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: CM Punk, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: CM Punk) => CM Punk; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: CM Punk, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: CM Punk) => CM Punk
Who wins the WWE title?	tony atlas	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Tony Atlas, r1.rel: won, r0.namespace: freebase, r1.arg2: the Wwe Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Tony Atlas) => Tony Atlas; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Tony Atlas, r1.rel: won, r0.namespace: freebase, r1.arg2: the Wwe Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Tony Atlas) => Tony Atlas
Who wins the WWE title?	wade barrett	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Wade Barrett, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wade Barrett) => Wade Barrett; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Wade Barrett, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wade Barrett) => Wade Barrett
Who wins the WWE title?	mark henry	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Mark Henry, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mark Henry) => Mark Henry; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Mark Henry, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mark Henry) => Mark Henry
Who wins the WWE title?	beth phoenix	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Beth Phoenix, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Divas title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Beth Phoenix) => Beth Phoenix; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Beth Phoenix, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Divas title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Beth Phoenix) => Beth Phoenix
Who wins the WWE title?	john cena	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: John Cena, r1.rel: just won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: John Cena, r1.rel: just won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena
Who wins the WWE title?	rob van dam	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Rob Van Dam, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rob Van Dam) => Rob Van Dam; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Rob Van Dam, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rob Van Dam) => Rob Van Dam
Who wins the WWE title?	lex luger	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Lex Luger, r1.rel: was going to win, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Lex Luger) => Lex Luger; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Lex Luger, r1.rel: was going to win, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Lex Luger) => Lex Luger
Who wins the WWE title?	eddie guerrero	4.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Eddie Guerrero, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Eddie Guerrero) => Eddie Guerrero; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, the wwe title) => (r0.arg1: Eddie Guerrero, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Eddie Guerrero) => Eddie Guerrero
Who wins the WWE title?	punk	3.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has hoisted up) => Punk
Who wins the WWE title?	orton	3.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: had) => Orton
Who wins the WWE title?	samoan bulldozer	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer
Who wins the WWE title?	jan 2011	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011
Who wins the WWE title?	jeff	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff
Who wins the WWE title?	monday	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday
Who wins the WWE title?	austin	2.0	who lose the wwe title ? => $x: ($x, lose, the wwe title) => $x: ($x, lose, the wwe title) => (r0.arg1: Austin, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: lost) => Austin; who lose the wwe title ? => $x: ($x, lose, the wwe title) => $x: ($x, lose, the wwe title) => (r0.arg1: Austin, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: lost) => Austin
Who wins the WWE title?	hhh	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH
Who wins the WWE title?	sheamus	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus
Who wins the WWE title?	batista	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista
Who wins the WWE title?	emotional big show	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show
Who wins the WWE title?	taker	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker
Who wins the WWE title?	barrett	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett
Who wins the WWE title?	jericho	2.0	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho
Who wins the WWE title?	entrances celebrations	1.0	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: entrances or celebrations, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: have) => entrances or celebrations
Who wins the WWE title?	flair	1.0	who lose the wwe title ? => $x: ($x, lose, the wwe title) => $x: ($x, lose, the wwe title) => (r0.arg1: Flair, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: lose) => Flair
Who wins the WWE title?	business	1.0	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship title, r0.rel: have held) => the business
Who wins the WWE title?	show	1.0	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Show, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: has held) => Show
Who wins the WWE title?	show kane	1.0	who lose the wwe title ? => $x: ($x, lose, the wwe title) => $x: ($x, lose, the wwe title) => (r0.arg1: Show and Kane, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: lost) => Show and Kane
Who was the first credit card issued to?	new customers	2.0	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (the first credit card, was issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (the first credit card, issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers
Who was the first credit card issued to?	businesses	2.0	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (the first credit card, was issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (the first credit card, issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses
What is a tortoises habitat like?	tank	2.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: a tortoise, r0.namespace: reverb, r0.arg2: a tank, r0.rel: lived in) => a tank; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: openie4, r0.arg2: a tank, r0.rel: lived in) => a tank
What is a tortoises habitat like?	galpagos islands	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: a giant tortoise, r0.namespace: openie4, r0.arg2: the Galpagos  Islands, r0.rel: living in) => the Galpagos  Islands
What is a tortoises habitat like?	lake today	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: a gigantic tortoise, r0.namespace: reverb, r0.arg2: the lake today, r0.rel: still live in) => the lake today
What is a tortoises habitat like?	low-growing shrubs	1.0	what do a tortoise eat ? => $x: (a tortoise, eat, $x) => $x: (a tortoise, eat, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: low-growing shrubs, r0.rel: eats) => low-growing shrubs
What is a tortoises habitat like?	group	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: a group, r0.rel: can live in) => a group
What is a tortoises habitat like?	marshes	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: the marshes, r0.rel: had lived contentedly in) => the marshes
What is a tortoises habitat like?	mountains	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: a tortoise, r0.namespace: openie4, r0.arg2: the mountains, r0.rel: living in) => the mountains
What is a tortoises habitat like?	mouse	1.0	what do a tortoise eat ? => $x: (a tortoise, eat, $x) => $x: (a tortoise, eat, $x) => (r0.arg1: a tortoise, r0.namespace: reverb, r0.arg2: a mouse, r0.rel: eat) => a mouse
What is a tortoises habitat like?	plants	1.0	what do a tortoise eat ? => $x: (a tortoise, eat, $x) => $x: (a tortoise, eat, $x) => (r0.arg1: A desert tortoise, r0.namespace: reverb, r0.arg2: plants, r0.rel: eats) => plants
What is a tortoises habitat like?	side garden	1.0	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (a tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: the side garden, r0.rel: lived in) => the side garden
What is Utah's most famous food?	dog	4.0	what kind of food be in utah ? => $x: ($x, "is a kind of", food) ($x, be in, utah) => $x: ($x, "is a kind of", food) ($x, be in, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Dogs) => dog; what kind of food be in utah ? => $x: ($x, "is a kind of", food) ($x, be in, utah) => $x: ($x, "is a kind of", food) ($x, be in, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Dogs) => dog; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: dog, r1.rel: has hundreds of, r0.namespace: reverb, r1.arg2: dogs, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah) => dog; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: dog, r1.rel: have been bitten by, r0.namespace: reverb, r1.arg2: a dog, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah families) => dog
What is Utah's most famous food?	culture	3.0	what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: culture, r1.rel: has, r0.namespace: reverb, r1.arg2: its own culture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah) => culture; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: culture, r1.rel: has, r0.namespace: reverb, r1.arg2: its own culture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: ?Utah) => culture; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: culture, r1.rel: has changed, r0.namespace: reverb, r1.arg2: our culture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah ?It) => culture
What is Utah's most famous food?	picture	2.0	what kind of food be in utah ? => $x: ($x, "is an example of", food) ($x, be in, utah) => $x: ($x, "is an example of", food) ($x, be in, utah) => (r0.arg1: The picture, r1.rel: were shot in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pictures) => The picture; what kind of food be in utah ? => $x: ($x, "is an example of", food) ($x, be in, utah) => $x: ($x, "is an example of", food) ($x, be in, utah) => (r0.arg1: The picture, r1.rel: was taken in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The picture) => The picture
What is Utah's most famous food?	store	2.0	what kind of food be in utah ? => $x: ($x, "is a kind of", food) ($x, be in, utah) => $x: ($x, "is a kind of", food) ($x, be in, utah) => (r0.arg1: The store, r1.rel: were in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: Japanese fast food chain, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the stores) => The store; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: The store, r1.rel: have closed, r0.namespace: reverb, r1.arg2: the store, r0.arg2: Japanese fast food chain, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah) => The store
What is Utah's most famous food?	woman	2.0	what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: a woman, r1.rel: had met with, r0.namespace: openie4, r1.arg2: a woman, r0.arg2: delicious food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah Stake) => a woman; what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: a woman, r1.rel: had met with, r0.namespace: reverb, r1.arg2: a woman, r0.arg2: delicious food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah Stake) => a woman
What is Utah's most famous food?	celery	1.0	what kind of food be in utah ? => $x: ($x, "is an example of", food) ($x, be in, utah) => $x: ($x, "is an example of", food) ($x, be in, utah) => (r0.arg1: Celery, r1.rel: is grown in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: a fat burning food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: celery) => Celery
What is Utah's most famous food?	learning	1.0	what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: Learning, r1.rel: have a way of connecting, r0.namespace: reverb, r1.arg2: and learning, r0.arg2: natural food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Utah) => Learning
What is Utah's most famous food?	utah	1.0	what be utah s food ? => $x: ($x, be, utah s food) => $x: ($x, be, utah s food) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: a Utah ?s Own food store, r0.rel: may be qualified as) => Utah
What is Utah's most famous food?	egg	1.0	what food do utah have ? => $x: ($x, "is a kind of", food) (utah, have, $x) => $x: ($x, "is a kind of", food) (utah, have, $x) => (r0.arg1: egg, r1.rel: has a clutch of, r0.namespace: reverb, r1.arg2: eggs, r0.arg2: high-calorie food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: southern Utah) => egg
What do fairy tales have in common?	theme	5.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The theme, r0.namespace: openie4, r0.arg2: Fairy Tales, r0.rel: is) => The theme; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The theme, r0.namespace: reverb, r0.arg2: Fairy Tales, r0.rel: was) => The theme; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The theme, r0.namespace: reverb, r0.arg2: 'fairy tale, r0.rel: was) => The theme; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: the theme, r0.namespace: openie4, r0.arg2: Fairy Tale, r0.rel: is) => the theme; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The theme, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: was) => The theme
What do fairy tales have in common?	morals	4.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: openie4, r0.arg2: morals, r0.rel: have) => morals; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: have) => morals; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: usually have) => morals; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: always have) => morals
What do fairy tales have in common?	happy ending	3.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a happy ending, r0.rel: often have) => a happy ending; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a happy ending, r0.rel: do have) => a happy ending; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: a happy ending, r0.rel: DO have) => a happy ending
What do fairy tales have in common?	centuries	3.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: centuries, r0.rel: have been used for) => centuries; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: openie4, r0.arg2: centuries, r0.rel: have demonstrated for) => centuries; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: centuries, r0.rel: have demonstrated for) => centuries
What do fairy tales have in common?	adults	3.0	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: adults, r0.rel: were meant for) => adults; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: this fairy tale, r0.namespace: reverb, r0.arg2: adults, r0.rel: meant for) => adults; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy-tales, r0.namespace: reverb, r0.arg2: adults, r0.rel: were meant for) => adults
What do fairy tales have in common?	truth	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: truth, r0.rel: has a grain of) => truth; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: truth, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is) => truth
What do fairy tales have in common?	happy endings	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: happy endings, r0.rel: should have) => happy endings; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: happy endings, r0.rel: always have) => happy endings
What do fairy tales have in common?	children	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: children, r0.rel: have always attracted) => children; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: all fairy tales, r0.namespace: reverb, r0.arg2: children, r0.rel: are meant for) => children
What do fairy tales have in common?	anthropomorphic motifs	2.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: openie4, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs
What do fairy tales have in common?	sad endings	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: sad endings, r0.rel: have) => sad endings; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: sad endings, r0.rel: often have) => sad endings
What do fairy tales have in common?	prince	2.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: a prince, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: might be common in) => a prince; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a Prince, r0.rel: have) => a Prince
What do fairy tales have in common?	childhood	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: childhood, r0.rel: have followed) => childhood; what be a part of fairy tale ? => $x: (fairy tale, have part of, $x) => $x: (fairy tale, have part of, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: childhood, r0.rel: have become part of) => childhood
What do fairy tales have in common?	ravello	2.0	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: Ravello, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being a part of) => Ravello; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: Ravello, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being a part of) => Ravello
What do fairy tales have in common?	beauty cinderella	2.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Beauty and Cinderella, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => Beauty and Cinderella; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Beauty and Cinderella, r0.namespace: reverb, r0.arg2: fairy tales?, r0.rel: were) => Beauty and Cinderella
What do fairy tales have in common?	story	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy Tale, r0.namespace: reverb, r0.arg2: a story, r0.rel: has) => a story; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The story, r0.namespace: openie4, r0.arg2: fairy tale, r0.rel: was) => The story
What do fairy tales have in common?	uncanny staying power	2.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: openie4, r0.arg2: an uncanny staying power, r0.rel: have) => an uncanny staying power; what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: an uncanny staying power, r0.rel: have) => an uncanny staying power
What do fairy tales have in common?	glass slippers	2.0	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: glass slippers, r0.namespace: reverb, r0.arg2: your fairy tale, r0.rel: can still be a part of) => glass slippers; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: glass slippers, r0.namespace: reverb, r0.arg2: your fairy tale, r0.rel: can still be a part of) => glass slippers
What do fairy tales have in common?	spells	2.0	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: Spells, r0.namespace: reverb, r0.arg2: Fairy Tales, r0.rel: are a part of) => Spells; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be a part of, fairy tale) => (r0.arg1: Spells, r0.namespace: reverb, r0.arg2: Fairy Tales, r0.rel: are a part of) => Spells
What do fairy tales have in common?	born station	1.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: born station, r0.namespace: reverb, r0.arg2: many fairy tales, r0.rel: is a common theme in) => born station
What do fairy tales have in common?	literature	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: literature, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => literature
What do fairy tales have in common?	psyche	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: the psyche, r0.rel: has on) => the psyche
What do fairy tales have in common?	place	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a place, r0.rel: has always been) => a place
What do fairy tales have in common?	scriptures	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: the scriptures, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => the scriptures
What do fairy tales have in common?	prosperity	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: prosperity, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => prosperity
What do fairy tales have in common?	hero?s journey plot	1.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the hero?s journey plot, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is common in) => the hero?s journey plot
What do fairy tales have in common?	american society	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: an American society, r0.rel: have in) => an American society
What do fairy tales have in common?	origin	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: an origin, r0.rel: has) => an origin
What do fairy tales have in common?	life	1.0	what be a part of fairy tale ? => $x: (fairy tale, have part of, $x) => $x: (fairy tale, have part of, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: life, r0.rel: have been part of) => life
What do fairy tales have in common?	dysfunctional families	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: dysfunctional families, r0.rel: have always dealt with) => dysfunctional families
What do fairy tales have in common?	readers thousands	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: ?Fairy tales, r0.namespace: reverb, r0.arg2: readers for thousands, r0.rel: have transfixed) => readers for thousands
What do fairy tales have in common?	ending	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: The ending, r0.namespace: openie4, r0.arg2: fairy tale, r0.rel: is) => The ending
What do fairy tales have in common?	popular motifs	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Popular motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => Popular motifs
What do fairy tales have in common?	real role	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: ?Fairy tales, r0.namespace: reverb, r0.arg2: a real role, r0.rel: have) => a real role
What do fairy tales have in common?	slavic	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Slavic, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => Slavic
What do fairy tales have in common?	occult	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: the occult, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: was) => the occult
What do fairy tales have in common?	sacral purpose	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: sacral purpose, r0.rel: had) => sacral purpose
What do fairy tales have in common?	usually	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: usually, r0.rel: have morals) => usually
What do fairy tales have in common?	sequel	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a sequel, r0.rel: have) => a sequel
What do fairy tales have in common?	word vegetable	1.0	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: the word vegetable, r0.rel: gives new meaning to) => the word vegetable
What do fairy tales have in common?	relationships	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Not all relationships, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => Not all relationships
What do fairy tales have in common?	magic	1.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: magic, r0.namespace: reverb, r0.arg2: fairy tales and fantasy, r0.rel: is a common feature in) => magic
What do fairy tales have in common?	hero	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a hero, r0.rel: usually have) => a hero
What do fairy tales have in common?	real world	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: the real world, r0.rel: have been exiled to) => the real world
What do fairy tales have in common?	farfaria	1.0	what be the common fairy tale ? => $x: ($x, be, the common fairy tale) => $x: ($x, be, the common fairy tale) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria
What do fairy tales have in common?	satiric jabs	1.0	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: The fairy tales, r0.namespace: reverb, r0.arg2: satiric jabs, r0.rel: were originally meant as) => satiric jabs
What do fairy tales have in common?	lot answer	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: a lot to answer for, r0.rel: have) => a lot to answer for
What do fairy tales have in common?	nearly religions	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Nearly all religions, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => Nearly all religions
What do fairy tales have in common?	deathless	1.0	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the Deathless, r0.namespace: reverb, r0.arg2: Russian fairy tales, r0.rel: is a common character in) => the Deathless
What do fairy tales have in common?	similarity	1.0	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a similarity, r0.rel: have) => a similarity
What do fairy tales have in common?	parenting	1.0	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: PARENTING, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: Are) => PARENTING
What kind of experiments did pavlov do?	target response	1.0	what be pavlov s experiment ? => $x: ($x, be, pavlov s experiment) => $x: ($x, be, pavlov s experiment) => (r0.arg1: the target response, r0.namespace: reverb, r0.arg2: Pavlov?s experiment, r0.rel: was the tone in) => the target response
Which is the highest playground in india?	first image	1.0	playground in indium ? => $x: ($x, be playground in, indium) => $x: ($x, be playground in, indium) => (r0.arg1: The first image, r0.namespace: reverb, r0.arg2: India, r0.rel: is a playground in) => The first image
When was Drake born?	tavistock	10.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock
When was Drake born?	new jersey	7.0	what be drake bear ? => $x: ($x, be, drake bear) => $x: ($x, be, drake bear) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: US State, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what date be drake bear ? => $x: ($x, "type", date) ($x, be, drake bear) => $x: ($x, "type", date) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey
When was Drake born?	toronto	7.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; who be drake ? => $x: ($x, be, drake) => $x: ($x, be, drake) => (r0.arg1: Toronto, r0.namespace: reverb, r0.arg2: Drake, r0.rel: is) => Toronto
When was Drake born?	1540	6.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1540, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1540, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Drake) => 1540; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1540, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1540, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: Drake) => 1540
When was Drake born?	new york city	4.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City
When was Drake born?	cape breton	4.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton
When was Drake born?	october 24 , 1986	4.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986
When was Drake born?	october 25	4.0	what be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; what be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; what day be drake birthday ? => $x: ($x, "type", day) ($x, be, drake birthday) => $x: ($x, "type", day) ($x, be, drake birthday) => (r0.arg1: October 25, r1.rel: is, r0.namespace: freebase, r1.arg2: Drake?s 25 birthday, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: October 25) => October 25; what year be drake birthday ? => $x: ($x, "type", year) ($x, be, drake birthday) => $x: ($x, "type", year) ($x, be, drake birthday) => (r0.arg1: October 25, r1.rel: is, r0.namespace: freebase, r1.arg2: Drake?s 25 birthday, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: October 25) => October 25
When was Drake born?	devon	3.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Devon, r0.namespace: reverb, r0.arg2: Sir Frances Drake, r0.rel: is also the birthplace of) => Devon
When was Drake born?	city	3.0	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: a city, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was) => a city; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The city, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was sacked by) => The city; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The city, r0.namespace: openie4, r0.arg2: Sir Francis Drake, r0.rel: was sacked by) => The city
When was Drake born?	hen	3.0	what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Hen, r1.rel: are often larger than, r0.namespace: freebase, r1.arg2: the drakes, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: the hens) => Hen; what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Hen, r1.rel: can be kept for, r0.namespace: freebase, r1.arg2: 3 years and drakes, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hens) => Hen; what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Hen, r1.rel: was provided, r0.namespace: freebase, r1.arg2: some drake photos, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: the hen) => Hen
When was Drake born?	1961	3.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: 1961, r1.rel: was born in, r0.namespace: freebase, r1.arg2: 1961, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nick Drake) => 1961
When was Drake born?	1819	3.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1819, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1819, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Edwin Drake) => 1819
When was Drake born?	1811	3.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1811, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1811, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: William Drake) => 1811
When was Drake born?	oct. 20 , 1785	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785
When was Drake born?	22 mar 1901	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901
When was Drake born?	rockaway	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway
When was Drake born?	english midlands town	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town
When was Drake born?	feb 1889	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889
When was Drake born?	wayne	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne
When was Drake born?	man	2.0	what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Man, r1.rel: was, r0.namespace: freebase, r1.arg2: Francis Drake, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: This man) => Man; what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Man, r1.rel: was attacked by, r0.namespace: freebase, r1.arg2: Lord Drake, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: man) => Man
When was Drake born?	socorro	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro
When was Drake born?	chicago	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago
When was Drake born?	seneca county	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County
When was Drake born?	plaque	2.0	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The plaque, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was originally made by) => The plaque; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The plaque, r0.namespace: openie4, r0.arg2: Sir Francis Drake, r0.rel: was made by) => The plaque
When was Drake born?	14 feb 1921	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921
When was Drake born?	marathon county	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county
When was Drake born?	natchez	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez
When was Drake born?	artist	2.0	who be drake ? => $x: ($x, be, drake) => $x: ($x, be, drake) => (r0.arg1: Artist, r0.namespace: reverb, r0.arg2: Drake, r0.rel: is) => Artist; who be drake ? => $x: ($x, be, drake) => $x: ($x, be, drake) => (r0.arg1: the artist, r0.namespace: openie4, r0.arg2: Drake, r0.rel: is) => the artist
When was Drake born?	august	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August
When was Drake born?	maine	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine
When was Drake born?	scotland	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland
When was Drake born?	march 29 , 1819	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819
When was Drake born?	1948	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948
When was Drake born?	wilkes-barre	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre
When was Drake born?	24 october 1986	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986
When was Drake born?	mar 1921	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921
When was Drake born?	passage	2.0	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The passage, r0.namespace: openie4, r0.arg2: Sir Francis Drake, r0.rel: is named for) => The passage; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: The passage, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: is named for) => The passage
When was Drake born?	nearby town	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town
When was Drake born?	birmingham	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham
When was Drake born?	1 jul 1922	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922
When was Drake born?	pitka?s point	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point
When was Drake born?	february 12	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12
When was Drake born?	cadiz	2.0	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Cadiz, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was later raided by) => Cadiz; who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Cadiz, r0.namespace: openie4, r0.arg2: Sir Francis Drake, r0.rel: was raided by) => Cadiz
When was Drake born?	yesterday	2.0	what be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday; what be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday
When was Drake born?	august 2008	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008
When was Drake born?	june 19th	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th
When was Drake born?	may 1879	2.0	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879
When was Drake born?	december 8 , 1923	2.0	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923
When was Drake born?	girl	2.0	what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Girl, r1.rel: is glaring at, r0.namespace: freebase, r1.arg2: Drake, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: girl) => Girl; what age be drake ? => $x: ($x, "type", age) ($x, be, drake) => $x: ($x, "type", age) ($x, be, drake) => (r0.arg1: Girl, r1.rel: is, r0.namespace: freebase, r1.arg2: Maeve Drake, r0.arg2: Gender or age specific animal name, r0.rel: Type, r1.namespace: reverb, r1.arg1: the girl) => Girl
What are the leading producers of WHEAT?	india	40.0	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat and rice, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat and rice, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India
What are the leading producers of WHEAT?	china	30.0	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: CHina, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: China) => CHina; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: CHina, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: China) => CHina; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: United Nations member state, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China
What are the leading producers of WHEAT?	iran	12.0	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iran) => Iran; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Iran
What are the leading producers of WHEAT?	australia	12.0	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia
What are the leading producers of WHEAT?	france	10.0	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: France) => France
What are the leading producers of WHEAT?	sonora	7.0	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r1.rel: is the nation?s leading producer of, r0.namespace: freebase, r1.arg2: cotton and wheat, r0.arg2: Mexican state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sonora) => Sonora; which state be the lead producer of wheat ? => $x: ($x, "is a", state) ($x, be the lead producer of, wheat) => $x: ($x, "is a", state) ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r1.rel: is the nation?s leading producer of, r0.namespace: nell, r1.arg2: cotton and wheat, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sonora) => Sonora
What are the leading producers of WHEAT?	canada	7.0	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada
What are the leading producers of WHEAT?	italy	6.0	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r1.rel: is the world 's leading producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Italy) => Italy
What are the leading producers of WHEAT?	state	6.0	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state
What are the leading producers of WHEAT?	morocco	5.0	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco
What are the leading producers of WHEAT?	india-2	4.0	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: India) => india-2
What are the leading producers of WHEAT?	india /	4.0	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: India) => India /
What are the leading producers of WHEAT?	united states	4.0	which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: the United States, r1.rel: is the third largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r1.rel: is the third largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: the United States, r1.rel: is the third largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The United States) => the United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r1.rel: is the third largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The United States) => The United States
What are the leading producers of WHEAT?	 china	2.0	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1:   china, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: China) =>   china; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1:   china, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: China) =>   china
What are the leading producers of WHEAT?	india 4	2.0	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India 4, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India 4; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => (r0.arg1: India 4, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: India) => India 4
Do hotels have room service?	hotel	7.0	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: Also Has, r0.namespace: nell, r1.arg2: Room Service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: will have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: might have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has limited, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has such facilities as, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel
Do hotels have room service?	z hotel	2.0	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: had, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: your hotel) => A to Z hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: Hotel A) => A to Z hotel
Do hotels have room service?	sol melia	1.0	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: sol melia, r1.rel: has established, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sol Melia) => sol melia
Do hotels have room service?	westin	1.0	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Westin, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Westin) => The Westin
Do hotels have room service?	inn	1.0	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Inn, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The inn) => The Inn
What do scientists classify?	life	25.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the way scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Advertised thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Advertised thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: started to classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: In This Our Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => In This Our Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: In This Our Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => In This Our Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: started to classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: started to classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life
What do scientists classify?	cat	12.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: My Favorite Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Animals, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Domestic animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Domesticated animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Roleplaying Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Video Game Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Cat
What do scientists classify?	volcano	10.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Musical Game Song, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Musical Game Song, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano
What do scientists classify?	species	10.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: each species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Species
What do scientists classify?	bird	7.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Animal Disease Host, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Bird, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Bird
What do scientists classify?	fruit	7.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game Engine, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit
What do scientists classify?	star	6.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Celestial object category, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => The Star; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star
What do scientists classify?	animal	6.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Thing Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Thing Type, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal
What do scientists classify?	pluto	6.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: trying to classify) => Pluto; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Pluto, r1.rel: classify, r0.namespace: freebase, r1.arg2: Pluto, r0.arg2: Celestial Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Pluto; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Pluto, r1.rel: classify, r0.namespace: freebase, r1.arg2: Pluto, r0.arg2: Trans-Neptunian Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Pluto; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Pluto, r1.rel: classify, r0.namespace: freebase, r1.arg2: Pluto, r0.arg2: Celestial object extra, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Pluto; what system do scientist classify ? => $x: ($x, "type", system) (scientist, classify, $x) => $x: ($x, "type", system) (scientist, classify, $x) => (r0.arg1: Pluto, r1.rel: classify, r0.namespace: freebase, r1.arg2: Pluto, r0.arg2: Star system body, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Pluto
What do scientists classify?	hobbit	5.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: ZX Spectrum game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit
What do scientists classify?	animals	5.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: animals, r0.rel: classify) => animals; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: animals, r0.rel: classify) => animals; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the animals, r0.rel: classify) => the animals; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Animals, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Barcoded item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animals; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Animals, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Barcoded item, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animals
What do scientists classify?	organisms	5.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the way scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms
What do scientists classify?	creatures	5.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Series, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures
What do scientists classify?	bat	5.0	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bat, r1.rel: classify, r0.namespace: freebase, r1.arg2: bats, r0.arg2: Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Bat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bat, r1.rel: classify, r0.namespace: freebase, r1.arg2: bats, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Bat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Bat, r1.rel: classify, r0.namespace: freebase, r1.arg2: bats, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Bat; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Bat, r1.rel: classify, r0.namespace: freebase, r1.arg2: bats, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Bat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Bat, r1.rel: classify, r0.namespace: freebase, r1.arg2: bats, r0.arg2: Animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Bat
What do scientists classify?	brain	4.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Most scientists, r0.namespace: reverb, r0.arg2: the brain, r0.rel: classify) => the brain; what object do scientist classify ? => $x: ($x, "is a kind of", object) (scientist, classify, $x) => $x: ($x, "is a kind of", object) (scientist, classify, $x) => (r0.arg1: the brain, r1.rel: classify, r0.namespace: reverb, r1.arg2: the brain, r0.arg2: object, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Most scientists) => the brain; what type of instrument do scientist classify ? => $x: ($x, "is a kind of", instrument) (scientist, classify, $x) => $x: ($x, "is a kind of", instrument) (scientist, classify, $x) => (r0.arg1: the brain, r1.rel: classify, r0.namespace: openie4, r1.arg2: the brain, r0.arg2: instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Most scientists) => the brain; what system do scientist classify ? => $x: ($x, "is an example of", system) (scientist, classify, $x) => $x: ($x, "is an example of", system) (scientist, classify, $x) => (r0.arg1: the brain, r1.rel: classify, r0.namespace: reverb, r1.arg2: the brain, r0.arg2: such a complex adaptive system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Most scientists) => the brain
What do scientists classify?	fruits	4.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruits, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruits; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruits, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruits
What do scientists classify?	ngc 4945	4.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: NGC 4945, r1.rel: classify, r0.namespace: freebase, r1.arg2: NGC 4945, r0.arg2: Celestial Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => NGC 4945; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: NGC 4945, r1.rel: classify, r0.namespace: freebase, r1.arg2: NGC 4945, r0.arg2: Celestial Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => NGC 4945
What do scientists classify?	two organisms	4.0	what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: openie4, r1.arg1: scientists) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: openie4, r1.arg1: Scientists) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientist) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => two organisms
What do scientists classify?	matter	4.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; what machine do scientist classify ? => $x: ($x, "is a", machine) (scientist, classify, $x) => $x: ($x, "is a", machine) (scientist, classify, $x) => (r0.arg1: MATTER, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: dataset used within the scientific field of machine learning, r0.rel: is a, r1.namespace: openie4, r1.arg1: Scientists) => MATTER; what machine do scientist classify ? => $x: ($x, "is a", machine) (scientist, classify, $x) => $x: ($x, "is a", machine) (scientist, classify, $x) => (r0.arg1: MATTER, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: dataset used within the scientific field of machine learning, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => MATTER
What do scientists classify?	photon	4.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon
What do scientists classify?	indian	3.0	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Indian; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Indian; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Playing card game, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Indian
What do scientists classify?	bats	3.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Bats, r1.rel: classify, r0.namespace: nell, r1.arg2: bats, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Scientists) => Bats; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Bats, r1.rel: classify, r0.namespace: nell, r1.arg2: all bats, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Bats
What do scientists classify?	birds	3.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Birds, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => The Birds; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Birds, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Birds
What do scientists classify?	dung beetles	3.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dung Beetles, r1.rel: classify, r0.namespace: freebase, r1.arg2: dung beetles, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Dung Beetles; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dung Beetles, r1.rel: classify, r0.namespace: freebase, r1.arg2: dung beetles, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Dung Beetles
What do scientists classify?	bacteria	3.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria
What do scientists classify?	system	3.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The System, r1.rel: classify, r0.namespace: freebase, r1.arg2: systems, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => The System
What do scientists classify?	soils	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils
What do scientists classify?	human race	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Human Race, r1.rel: classify, r0.namespace: freebase, r1.arg2: the human race, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientist) => The Human Race
What do scientists classify?	total	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: The scientists, r0.namespace: reverb, r0.arg2: a total, r0.rel: classified) => a total; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: reverb, r0.arg2: a total, r0.rel: classified) => a total
What do scientists classify?	matters	2.0	what kind of clothing do scientist classify ? => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => (r0.arg1: Matters, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Scientists) => Matters; what kind of clothing do scientist classify ? => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => (r0.arg1: Matters, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Scientists) => Matters
What do scientists classify?	stars	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: citizen scientists, r0.namespace: reverb, r0.arg2: stars, r0.rel: classify) => stars; what machine do scientist classify ? => $x: ($x, "is a", machine) (scientist, classify, $x) => $x: ($x, "is a", machine) (scientist, classify, $x) => (r0.arg1: STARS, r1.rel: classify, r0.namespace: nell, r1.arg2: stars, r0.arg2: dataset used within the scientific field of machine learning, r0.rel: is a, r1.namespace: reverb, r1.arg1: citizen scientists) => STARS
What do scientists classify?	nature	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what medicine do scientist classify ? => $x: ($x, "is a kind of", medicine) (scientist, classify, $x) => $x: ($x, "is a kind of", medicine) (scientist, classify, $x) => (r0.arg1: Nature, r1.rel: classify, r0.namespace: reverb, r1.arg2: nature, r0.arg2: medicine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Nature
What do scientists classify?	group	2.0	what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Group, r1.rel: classify, r0.namespace: freebase, r1.arg2: groups, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Group; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: GROUP, r1.rel: classify, r0.namespace: nell, r1.arg2: groups, r0.arg2: sports game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => GROUP
What do scientists classify?	dinosaur	2.0	what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Dinosaur, r1.rel: classify, r0.namespace: freebase, r1.arg2: dinosaurs, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Dinosaur; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dinosaur, r1.rel: classify, r0.namespace: freebase, r1.arg2: dinosaurs, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Dinosaur
What do scientists classify?	groups	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what machine do scientist classify ? => $x: ($x, "is a", machine) (scientist, classify, $x) => $x: ($x, "is a", machine) (scientist, classify, $x) => (r0.arg1: Groups, r1.rel: classify, r0.namespace: nell, r1.arg2: groups, r0.arg2: dataset used within the scientific field of machine learning, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => Groups
What do scientists classify?	volcanoes	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes
What do scientists classify?	work	2.0	what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: work, r1.rel: classify, r0.namespace: reverb, r1.arg2: their work, r0.arg2: Blakean system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => work; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: work, r1.rel: classify, r0.namespace: reverb, r1.arg2: his works, r0.arg2: Blakean system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Most scientists) => work
What do scientists classify?	creature shock	2.0	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature Shock, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature Shock; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: Creature Shock, r1.rel: classify, r0.namespace: nell, r1.arg2: creatures, r0.arg2: video game, r0.rel: is a, r1.namespace: reverb, r1.arg1: scientists) => Creature Shock
What do scientists classify?	insects	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects
What do scientists classify?	occupation	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation
What do scientists classify?	plant animal species	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: plant and animal species, r0.rel: classify) => plant and animal species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: plant and animal species, r0.rel: classify) => plant and animal species
What do scientists classify?	dinosaurs	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Dinosaurs, r1.rel: classify, r0.namespace: nell, r1.arg2: dinosaurs, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Dinosaurs
What do scientists classify?	plant life	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life
What do scientists classify?	object	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: the object, r0.rel: classify) => the object; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (the scientist, classify, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: the object, r0.rel: classify) => the object
What do scientists classify?	indians	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians
What do scientists classify?	creature	2.0	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature
What do scientists classify?	systems	2.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what system do scientist classify ? => $x: ($x, "is a", system) (scientist, classify, $x) => $x: ($x, "is a", system) (scientist, classify, $x) => (r0.arg1: systems, r1.rel: classify, r0.namespace: nell, r1.arg2: systems, r0.arg2: transportation system, r0.rel: is a, r1.namespace: reverb, r1.arg1: scientists) => systems
What do scientists classify?	landscape	1.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape
What do scientists classify?	emr	1.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR
What do scientists classify?	precipitation types	1.0	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types
Name the temperature measuring instrument?	thermometer	2.0	what be the temperature measure instrument ? => $x: ($x, be, the temperature measure instrument) => $x: ($x, be, the temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; who be the temperature measure instrument ? => $x: ($x, be, the temperature measure instrument) => $x: ($x, be, the temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer
What is Heidi Montag's birthday?	beck	4.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: the contestants Heidi Montag, r0.rel: has been named) => Beck; who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: a and contestants Heidi Montag, r0.rel: has been) => Beck; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: the contestants Heidi Montag, r0.rel: has been named) => Beck; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: a and contestants Heidi Montag, r0.rel: has been) => Beck
What is Heidi Montag's birthday?	spencer pratt	4.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was convinced) => Spencer Pratt; who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag Pratt, r0.rel: is) => Spencer Pratt; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was convinced) => Spencer Pratt; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag Pratt, r0.rel: is) => Spencer Pratt
What is Heidi Montag's birthday?	public	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the Heidi Montags, r0.rel: is well over) => the public; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the Heidi Montags, r0.rel: is well over) => the public
What is Heidi Montag's birthday?	jun 23 , 2009	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Jun 23 , 2009 i, r0.namespace: reverb, r0.arg2: heidi montag, r0.rel: would be ashamed of) => Jun 23 , 2009 i; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Jun 23 , 2009 i, r0.namespace: reverb, r0.arg2: heidi montag, r0.rel: would be ashamed of) => Jun 23 , 2009 i
What is Heidi Montag's birthday?	y2k	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Y2K, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: turned out to be about as real as) => Y2K; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Y2K, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: turned out to be about as real as) => Y2K
What is Heidi Montag's birthday?	opening	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The opening, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was hosted by) => The opening; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The opening, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was hosted by) => The opening
What is Heidi Montag's birthday?	herve leger dress	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the Herve Leger dress, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: has been worn by) => the Herve Leger dress; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the Herve Leger dress, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: has been worn by) => the Herve Leger dress
What is Heidi Montag's birthday?	most important question ?	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most important question ?, r0.namespace: reverb, r0.arg2: the Heidi Montag, r0.rel: is) => the most important question ?; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most important question ?, r0.namespace: reverb, r0.arg2: the Heidi Montag, r0.rel: is) => the most important question ?
What is Heidi Montag's birthday?	course	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: course, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is going on with) => course; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: course, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is going on with) => course
What is Heidi Montag's birthday?	job security	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: job security, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is as improbable as) => job security; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: job security, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is as improbable as) => job security
What is Heidi Montag's birthday?	kristin cavallari	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Kristin Cavallari, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was) => Kristin Cavallari; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Kristin Cavallari, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was) => Kristin Cavallari
What is Heidi Montag's birthday?	bonus	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: a bonus, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: there is) => a bonus; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: a bonus, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: there is) => a bonus
What is Heidi Montag's birthday?	blonde	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the blonde, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: happens to be) => the blonde; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the blonde, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: happens to be) => the blonde
What is Heidi Montag's birthday?	tina brown	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Tina Brown, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is talking to) => Tina Brown; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Tina Brown, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is talking to) => Tina Brown
What is Heidi Montag's birthday?	fame	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an addictive thing for) => Fame; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an addictive thing for) => Fame
What is Heidi Montag's birthday?	mischa	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Mischa, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an undergrad compared to) => Mischa; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Mischa, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an undergrad compared to) => Mischa
What is Heidi Montag's birthday?	screen	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the screen, r0.namespace: reverb, r0.arg2: the show?s resident villains Heidi Montag, r0.rel: are) => the screen; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the screen, r0.namespace: reverb, r0.arg2: the show?s resident villains Heidi Montag, r0.rel: are) => the screen
What is Heidi Montag's birthday?	same	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The same, r0.namespace: reverb, r0.arg2: Heidi Montag?s single, r0.rel: can be said about) => The same; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The same, r0.namespace: reverb, r0.arg2: Heidi Montag?s single, r0.rel: can be said about) => The same
What is Heidi Montag's birthday?	most disastrous fashion line	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most disastrous fashion line, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is) => the most disastrous fashion line; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most disastrous fashion line, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is) => the most disastrous fashion line
What is Heidi Montag's birthday?	audzo	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Audzo, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is worse than) => Audzo; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Audzo, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is worse than) => Audzo
What is Heidi Montag's birthday?	anonymous	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Anonymous It, r0.namespace: reverb, r0.arg2: Heidi Montag?s blood sacrifice, r0.rel: may be) => Anonymous It; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Anonymous It, r0.namespace: reverb, r0.arg2: Heidi Montag?s blood sacrifice, r0.rel: may be) => Anonymous It
What is Heidi Montag's birthday?	world cup	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The World Cup, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: could easily be confused for) => The World Cup; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The World Cup, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: could easily be confused for) => The World Cup
What is Heidi Montag's birthday?	april 12th	2.0	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: April 12th, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is filed under) => April 12th; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: April 12th, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is filed under) => April 12th
Where is mayans country?	guatemala	22.0	what be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: openie4, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: openie4, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: openie4, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: reverb, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: reverb, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: reverb, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: openie4, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: openie4, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: openie4, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: reverb, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: reverb, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: reverb, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala
Where is mayans country?	belize	20.0	which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: nell, r1.arg2: Mayan occupation, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: nell, r1.arg2: Mayan sites, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: nell, r1.arg2: Mayan occupation, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: nell, r1.arg2: Mayan sites, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize
Where is mayans country?	mexico	7.0	what be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan country, r0.rel: is) => Mexico; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: openie4, r1.arg2: the Mayan Jungle, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: reverb, r1.arg2: the Mayan Jungle, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: openie4, r1.arg2: the Mayan Jungle, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: reverb, r1.arg2: the Mayan Jungle, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan country, r0.rel: is) => Mexico; what village be mayan country ? => $x: ($x, "type", village) ($x, be, mayan country) => $x: ($x, "type", village) ($x, be, mayan country) => (r0.arg1: Mexico, r1.rel: is, r0.namespace: freebase, r1.arg2: Mayan country, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mexico) => Mexico
Where is mayans country?	hotel	6.0	which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: Mayan inspired architecture, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a Mayan Indian decor, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a spectacular Mayan-inspired spa, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: Mayan inspired architecture, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a Mayan Indian decor, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a spectacular Mayan-inspired spa, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel
Where is mayans country?	kent	2.0	which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Kent, r1.rel: has studied extensively with, r0.namespace: freebase, r1.arg2: Mayan Daykeepers, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Ken) => Kent; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Kent, r1.rel: has studied extensively with, r0.namespace: freebase, r1.arg2: Mayan Daykeepers, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Ken) => Kent
What color are wedding dresses?	white	681.0	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: The wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: All White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is nt, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: must be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: should be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: to be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: white) => WHITE; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "is a", color) ($x, be use for, wedding dress) => $x: ($x, "is a", color) ($x, be use for, wedding dress) => (r0.arg1: WHITE, r1.rel: has been used for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be use for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: The wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: All White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is nt, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: must be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: should be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: to be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional colour of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional colour of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the most common color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is a part of, r0.namespace: nell, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the most common color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what be the most common color of wedding dress ? => $x: ($x, be the most common color of, wedding dress) => $x: ($x, be the most common color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the most common color of wedding dress ? => $x: ($x, be the most common color of, wedding dress) => $x: ($x, be the most common color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: white) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white
What color are wedding dresses?	red	59.0	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the marriage wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the relationship wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the marriage wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => (r0.arg1: red, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: Indian wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: red) => red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, the color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the marriage wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the relationship wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the marriage wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red
What color are wedding dresses?	pink	26.0	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: Pink, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is usually use in) => Pink; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be use in wedding dress ? => $x: ($x, "type", color) ($x, be use in, wedding dress) => $x: ($x, "type", color) ($x, be use in, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be use in wedding dress ? => $x: ($x, "type", color) ($x, be use in, wedding dress) => $x: ($x, "type", color) ($x, be use in, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be use in wedding dress ? => $x: ($x, "type", color) ($x, be use in, wedding dress) => $x: ($x, "type", color) ($x, be use in, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be use in wedding dress ? => $x: ($x, "type", color) ($x, be use in, wedding dress) => $x: ($x, "type", color) ($x, be use in, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be use in wedding dress ? => $x: ($x, "is a", color) ($x, be use in, wedding dress) => $x: ($x, "is a", color) ($x, be use in, wedding dress) => (r0.arg1: PINK, r1.rel: is usually use in, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Pink) => PINK
What color are wedding dresses?	black	24.0	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: Black, r1.rel: was, r0.namespace: openie4, r1.arg2: black, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => Black; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: black, r1.rel: was, r0.namespace: reverb, r1.arg2: black, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: Black, r1.rel: was, r0.namespace: openie4, r1.arg2: black, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => Black; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: black, r1.rel: was, r0.namespace: reverb, r1.arg2: black, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => black; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black
What color are wedding dresses?	materials	13.0	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be wedding dress be ? => $x: ($x, "is an example of", color) (wedding dress, be, $x) => $x: ($x, "is an example of", color) (wedding dress, be, $x) => (r0.arg1: Materials, r1.rel: are normally made of, r0.namespace: reverb, r1.arg2: materials, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indian Wedding Dresses) => Materials; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be your wedding dress ? => $x: ($x, "is an example of", color) ($x, be, your wedding dress) => $x: ($x, "is an example of", color) ($x, be, your wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; wedding dress be what color ? => $x: ($x, "is an example of", color) (wedding dress, be, $x) => $x: ($x, "is an example of", color) (wedding dress, be, $x) => (r0.arg1: Materials, r1.rel: are normally made of, r0.namespace: reverb, r1.arg2: materials, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indian Wedding Dresses) => Materials; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials
What color are wedding dresses?	photo	12.0	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be wedding dress have ? => $x: ($x, "is an example of", color) (wedding dress, have, $x) => $x: ($x, "is an example of", color) (wedding dress, have, $x) => (r0.arg1: Photo, r1.rel: will have a slight green tint in, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: your wedding dress) => Photo; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be of wedding dress ? => $x: ($x, "is an example of", color) ($x, be of, wedding dress) => $x: ($x, "is an example of", color) ($x, be of, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo
What color are wedding dresses?	left	11.0	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color color be wedding dress ? => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => $x: ($x, "is an example of", color color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what kind of color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color be of wedding dress ? => $x: ($x, "is an example of", color) ($x, be of, wedding dress) => $x: ($x, "is an example of", color) ($x, be of, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left
What color are wedding dresses?	western eastern culture	10.0	what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be the coloring of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be the color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture
What color are wedding dresses?	ecru	6.0	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: ecru, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: can be) => ecru; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru
What color are wedding dresses?	bride	5.0	what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: was) => the bride; what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a shorter , less ?wedding ? dress, r0.namespace: reverb, r0.arg2: the bride, r0.rel: still look like) => the bride; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: wedding dress, r0.rel: to be) => the bride; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: was) => the bride; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a shorter , less ?wedding ? dress, r0.namespace: reverb, r0.arg2: the bride, r0.rel: still look like) => the bride
What color are wedding dresses?	reddish	4.0	what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: reddish, r1.rel: is, r0.namespace: nell, r1.arg2: the union wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Reddish) => reddish; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, the color wedding dress) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, the color wedding dress) => (r0.arg1: reddish, r1.rel: is, r0.namespace: nell, r1.arg2: the union wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Reddish) => reddish
What color are wedding dresses?	pearl	4.0	what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Pearl, r1.rel: can be adorned with, r0.namespace: freebase, r1.arg2: pearls, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wedding dresses) => Pearl; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Pearl, r1.rel: is hand beaded with, r0.namespace: freebase, r1.arg2: pearls, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: your wedding dress) => Pearl; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Pearl, r1.rel: can be adorned with, r0.namespace: freebase, r1.arg2: pearls, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wedding dresses) => Pearl; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Pearl, r1.rel: is hand beaded with, r0.namespace: freebase, r1.arg2: pearls, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: your wedding dress) => Pearl
What color are wedding dresses?	dresses	4.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The dresses, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were) => The dresses; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: dresses, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were thought to be) => dresses; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the dresses, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: to be) => the dresses; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the dresses, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are rather bizarre to be) => the dresses
What color are wedding dresses?	royal_blue	2.0	what color be wedding dress be ? => $x: ($x, "is a", color) (wedding dress, be, $x) => $x: ($x, "is a", color) (wedding dress, be, $x) => (r0.arg1: royal_blue, r1.rel: is, r0.namespace: nell, r1.arg2: royal blue, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: your wedding dress) => royal_blue; wedding dress be what color ? => $x: ($x, "is a", color) (wedding dress, be, $x) => $x: ($x, "is a", color) (wedding dress, be, $x) => (r0.arg1: royal_blue, r1.rel: is, r0.namespace: nell, r1.arg2: royal blue, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: your wedding dress) => royal_blue
What color are wedding dresses?	cute princess	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: light pink wedding dress, r0.namespace: reverb, r0.arg2: cute princess, r0.rel: looks like) => cute princess; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: light pink wedding dress, r0.namespace: reverb, r0.arg2: cute princess, r0.rel: looks like) => cute princess
What color are wedding dresses?	fabric	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: wedding dress finder, r0.namespace: reverb, r0.arg2: the fabric, r0.rel: look like) => the fabric; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: wedding dress finder, r0.namespace: reverb, r0.arg2: the fabric, r0.rel: look like) => the fabric
What color are wedding dresses?	win	2.0	what color be wedding dress be ? => $x: ($x, "is an example of", color) (wedding dress, be, $x) => $x: ($x, "is an example of", color) (wedding dress, be, $x) => (r0.arg1: Win, r1.rel: was partially responsible for, r0.namespace: reverb, r1.arg2: the win, r0.arg2: my coloring, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Her wedding dress design) => Win; wedding dress be what color ? => $x: ($x, "is an example of", color) (wedding dress, be, $x) => $x: ($x, "is an example of", color) (wedding dress, be, $x) => (r0.arg1: Win, r1.rel: was partially responsible for, r0.namespace: reverb, r1.arg2: the win, r0.arg2: my coloring, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Her wedding dress design) => Win
What color are wedding dresses?	1886	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: the wedding dresses, r0.namespace: reverb, r0.arg2: 1886, r0.rel: looked like back in) => 1886; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: the wedding dresses, r0.namespace: reverb, r0.arg2: 1886, r0.rel: looked like back in) => 1886
What color are wedding dresses?	guipere lace	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: 60s wedding dress, r0.namespace: reverb, r0.arg2: guipere lace, r0.rel: looks like) => guipere lace; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: 60s wedding dress, r0.namespace: reverb, r0.arg2: guipere lace, r0.rel: looks like) => guipere lace
What color are wedding dresses?	pig	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a white wedding dress, r0.namespace: reverb, r0.arg2: a pig, r0.rel: Looks like) => a pig; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a white wedding dress, r0.namespace: reverb, r0.arg2: a pig, r0.rel: Looks like) => a pig
What color are wedding dresses?	evening gown	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: The evening wedding dress, r0.namespace: reverb, r0.arg2: the evening gown, r0.rel: looks like) => the evening gown; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: The evening wedding dress, r0.namespace: reverb, r0.arg2: the evening gown, r0.rel: looks like) => the evening gown
What color are wedding dresses?	modern brides	2.0	what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: modern brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are choosing) => modern brides; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: modern brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are picking out) => modern brides
What color are wedding dresses?	deep red	2.0	what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Deep Red, r1.rel: is, r0.namespace: freebase, r1.arg2: deep red, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: My wedding dress) => Deep Red; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: Deep Red, r1.rel: is, r0.namespace: freebase, r1.arg2: deep red, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: My wedding dress) => Deep Red
What color are wedding dresses?	goddess	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: wedding dresses, r0.namespace: reverb, r0.arg2: a goddess, r0.rel: look like) => a goddess; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: wedding dresses, r0.namespace: reverb, r0.arg2: a goddess, r0.rel: look like) => a goddess
What color are wedding dresses?	only white	2.0	what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: the only white, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color used for) => the only white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: the only white, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color used for) => the only white
What color are wedding dresses?	pippa?s	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: her wedding dress, r0.namespace: reverb, r0.arg2: Pippa?s, r0.rel: looked a lot like) => Pippa?s; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: her wedding dress, r0.namespace: reverb, r0.arg2: Pippa?s, r0.rel: looked a lot like) => Pippa?s
What color are wedding dresses?	cost fortune	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: an Inexpensive Wedding Dress, r0.namespace: openie4, r0.arg2: it cost you a fortune, r0.rel: looks like) => it cost you a fortune; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: an Inexpensive Wedding Dress, r0.namespace: openie4, r0.arg2: it cost you a fortune, r0.rel: looks like) => it cost you a fortune
What color are wedding dresses?	cupcake	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A Cupcake Wedding Dress Katherine, r0.namespace: reverb, r0.arg2: a cupcake, r0.rel: wants to look like) => a cupcake; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A Cupcake Wedding Dress Katherine, r0.namespace: reverb, r0.arg2: a cupcake, r0.rel: wants to look like) => a cupcake
What color are wedding dresses?	uppercase word	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A-line wedding dresses, r0.namespace: reverb, r0.arg2: the uppercase word, r0.rel: look rather like) => the uppercase word; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A-line wedding dresses, r0.namespace: reverb, r0.arg2: the uppercase word, r0.rel: look rather like) => the uppercase word
What color are wedding dresses?	angel	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a wedding dress, r0.namespace: reverb, r0.arg2: an angel, r0.rel: look like) => an angel; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a wedding dress, r0.namespace: reverb, r0.arg2: an angel, r0.rel: look like) => an angel
What color are wedding dresses?	real lady	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a random pink wedding dress, r0.namespace: reverb, r0.arg2: a real lady, r0.rel: look like) => a real lady; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: a random pink wedding dress, r0.namespace: reverb, r0.arg2: a real lady, r0.rel: look like) => a real lady
What color are wedding dresses?	blue	2.0	what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: Blue, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the favored color for) => Blue; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be the color for, wedding dress) => (r0.arg1: Blue, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the favored color for) => Blue
What color are wedding dresses?	wang?s dresses	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: no wedding dress, r0.namespace: reverb, r0.arg2: Wang?s dresses, r0.rel: would ever look like) => Wang?s dresses; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: no wedding dress, r0.namespace: reverb, r0.arg2: Wang?s dresses, r0.rel: would ever look like) => Wang?s dresses
What color are wedding dresses?	little tmarketing dull	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: The wedding dress, r0.namespace: reverb, r0.arg2: little tmarketing dull, r0.rel: may look like) => little tmarketing dull; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: The wedding dress, r0.namespace: reverb, r0.arg2: little tmarketing dull, r0.rel: may look like) => little tmarketing dull
What color are wedding dresses?	new	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: Second-hand wedding dress es, r0.namespace: reverb, r0.arg2: new, r0.rel: look like) => new; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: Second-hand wedding dress es, r0.namespace: reverb, r0.arg2: new, r0.rel: look like) => new
What color are wedding dresses?	lily opening	2.0	what be wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A-line wedding dress, r0.namespace: reverb, r0.arg2: a lily opening, r0.rel: looks like) => a lily opening; what do wedding dress look like ? => $x: (wedding dress, look like, $x) => $x: (wedding dress, look like, $x) => (r0.arg1: A-line wedding dress, r0.namespace: reverb, r0.arg2: a lily opening, r0.rel: looks like) => a lily opening
What color are wedding dresses?	bride dresses days	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the bride dresses days, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: can be) => the bride dresses days
What color are wedding dresses?	handbag	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a handbag, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: be easily converted into) => a handbag
What color are wedding dresses?	best women outfits	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The best women 's outfits, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were) => The best women 's outfits
What color are wedding dresses?	works	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: Works, r0.namespace: reverb, r0.arg2: Wedding Dress, r0.rel: is your shop for) => Works
What color are wedding dresses?	wedding dress	1.0	what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress
What color are wedding dresses?	site	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the site, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is about) => the site
What color are wedding dresses?	scrapbook	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a scrapbook, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are like) => a scrapbook
What color are wedding dresses?	wedding	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding
What color are wedding dresses?	cake	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the cake, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is meant) => the cake
What color are wedding dresses?	women	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women
What color are wedding dresses?	reality	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the reality, r0.namespace: reverb, r0.arg2: Wedding dresses, r0.rel: is) => the reality
What color are wedding dresses?	?dad	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: ?Dad, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are) => ?Dad
What color are wedding dresses?	fall	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: the fall, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is tiered) => the fall
What color are wedding dresses?	designers	1.0	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: Designers, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are pushing) => Designers
