What sound do wrens make?	life	1.0	What sound do wrens make? => $x: ($x, "is a", sound) (wrens, make, $x) => $x: ($x, "is a", sound) (wrens, make, $x) => (r0.arg1: life, r1.rel: has made, r0.namespace: openie4, r1.arg2: a life, r0.arg2: tale told by an idiot , full of sound and fury, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wren) => life
What is the best speaker in the world?	trio classico	2.0	What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico
What is the best speaker in the world?	americans	2.0	What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans
Who makes seiki?	pattern shirt	1.0	Who makes seiki? => $x: ($x, makes, seiki) => $x: ($x, makes, seiki) => (r0.arg1: no pattern shirt, r0.namespace: reverb, r0.arg2: Shima Seiki, r0.rel: is being made by) => no pattern shirt
What is the second book of law?	exodus	2.0	What is the second book of law? => $x: ($x, is the second book of, law) => $x: ($x, is the second book of, law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus; What is the second book of law? => $x: ($x, is the second book of, law) => $x: ($x, is the second book of, law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus
What was the first year of the 20th century?	1919	4.0	What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: openie4, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: openie4, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919
Where did st peter die?	rome	2.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: dies in) => Rome; Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: openie4, r0.arg2: Rome, r0.rel: died in) => Rome
Where did st peter die?	1072	2.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damien, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damian, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072
Where did st peter die?	1654	1.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Claver, r0.namespace: reverb, r0.arg2: 1654, r0.rel: died in) => 1654
Where did st peter die?	rome?s capital city	1.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome?s capital city, r0.rel: had died in) => Rome?s capital city
Where did st peter die?	car crash	1.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter?s Friendly Skies Three friends, r0.namespace: reverb, r0.arg2: a car crash, r0.rel: die in) => a car crash
What are the earliest land plant?	old	1.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: old, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: are) => old
What are the earliest land plant?	liverworts	1.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: the liverworts, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were) => the liverworts
What are the earliest land plant?	clones	1.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: clones, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were amongst) => clones
Which country has the best water?	united states	7.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: the united states, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
Which country has the best water?	jamaica	7.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: jamaica, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best diving waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jamaica) => jamaica
Which country has the best water?	denmark	6.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => Denmark
Which country has the best water?	panama	5.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama
Which country has the best water?	australia	4.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia
Which country has the best water?	aruba	4.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Dutch constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: aruba, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aruba) => aruba
Which country has the best water?	finland	2.0	Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: reverb, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: openie4, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland
Which country has the best water?	us-new york	2.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best tap water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York
Which country has the best water?	san francisco	1.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco
Which country has the best water?	uk, denmark	1.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: UK, Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => UK, Denmark
Which country has the best water?	us-indiana	1.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-Indiana, r1.rel: has, r0.namespace: nell, r1.arg2: the BEST water park, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Indiana) => US-Indiana
Which country has the best water?	us-washington	1.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-Washington, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => US-Washington
Which country has the best water?	us-south carolina	1.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-South Carolina, r1.rel: had, r0.namespace: nell, r1.arg2: the best water quality, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: South Carolina) => US-South Carolina
When was T. E. Lawrence born?	1888	2.0	When was T. E. Lawrence born? => $x: (T. E. Lawrence, was born in, $x) => $x: (T. E. Lawrence, was born in, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: 1888, r0.rel: was born in) => 1888; When was T. E. Lawrence born? => $x: (T. E. Lawrence, born in, $x) => $x: (T. E. Lawrence, born in, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: 1888, r0.rel: was born in) => 1888
When was T. E. Lawrence born?	aug. 15 , 1888	2.0	When was T. E. Lawrence born? => $x: (T. E. Lawrence, was born on, $x) => $x: (T. E. Lawrence, was born on, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: Aug. 15 , 1888, r0.rel: was born on) => Aug. 15 , 1888; When was T. E. Lawrence born? => $x: (T. E. Lawrence, born on, $x) => $x: (T. E. Lawrence, born on, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: Aug. 15 , 1888, r0.rel: was born on) => Aug. 15 , 1888
Fun games for kids?	dizzywood	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Dizzywood, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun game for) => Dizzywood; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Dizzywood, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Dizzywood
Fun games for kids?	twister	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Twister, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Twister; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Twister, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun game for) => Twister
Fun games for kids?	dragon	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: The Dragon, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a very fun game for) => The Dragon; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: The Dragon, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a very fun game for) => The Dragon
Fun games for kids?	birthday cake memory	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Birthday Cake Memory, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun memory game for) => Birthday Cake Memory
Fun games for kids?	match	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: a Match, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun memory matching game for) => a Match
Fun games for kids?	melissa gastineau popmath	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Melissa Gastineau PopMath, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Melissa Gastineau PopMath
Fun games for kids?	20x10 multibubbles	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: 20x10 MultiBubbles, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => 20x10 MultiBubbles
Fun games for kids?	math critters	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Math Critters, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a cute , fun math game app for) => Math Critters
Fun games for kids?	emergency supply kit	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: an emergency supply kit, r0.namespace: reverb, r0.arg2: kids, r0.rel: can be a fun game for) => an emergency supply kit
Fun games for kids?	halloween pumpkin bowling bowling	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Halloween Pumpkin Bowling Bowling, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Halloween Pumpkin Bowling Bowling
Fun games for kids?	tag	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Tag, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Tag
Fun games for kids?	playhouse	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Playhouse, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun and educational game for) => Playhouse
Fun games for kids?	ben 10 games online	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Ben 10 Games Online, r0.namespace: openie4, r0.arg2: kids, r0.rel: are fun cartoon games for) => Ben 10 Games Online
Fun games for kids?	balls	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Balls, r0.namespace: reverb, r0.arg2: young kids, r0.rel: is a fun game for) => Balls
When did the rev died?	2008	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Marcial Maciel Degollado, r0.namespace: reverb, r0.arg2: 2008, r0.rel: died in) => 2008; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Grave ?The Rev. Marcial Maciel, r0.namespace: reverb, r0.arg2: 2008, r0.rel: died in) => 2008
When did the rev died?	december	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: Jimmy ?The Rev? Sullivan, r0.namespace: reverb, r0.arg2: December, r0.rel: died in) => December; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev' Sullivan, r0.namespace: reverb, r0.arg2: December, r0.rel: died in) => December
When did the rev died?	england	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Daniel Brown, r0.namespace: reverb, r0.arg2: England, r0.rel: died in) => England; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev John Stott, r0.namespace: openie4, r0.arg2: England, r0.rel: died in) => England
When did the rev died?	1998	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Lawrence Murphy, r0.namespace: reverb, r0.arg2: 1998, r0.rel: died in) => 1998; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Dr. D'Orlando, r0.namespace: reverb, r0.arg2: 1998, r0.rel: died in) => 1998
When did the rev died?	wednesday	2.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Don Axford, r0.namespace: reverb, r0.arg2: Wednesday, r0.rel: died on) => Wednesday; When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Monsignor Charles W. Regan, r0.namespace: reverb, r0.arg2: Wednesday, r0.rel: died on) => Wednesday
When did the rev died?	december 15 , 2011	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Wells E. Behee, r0.namespace: reverb, r0.arg2: December 15 , 2011, r0.rel: died on) => December 15 , 2011
When did the rev died?	7th heaven	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the good Rev. Camden, r0.namespace: reverb, r0.arg2: 7th Heaven, r0.rel: will die on) => 7th Heaven
When did the rev died?	abilene hospital	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Danny Johnson, r0.namespace: reverb, r0.arg2: an Abilene hospital, r0.rel: died Wednesday in) => an Abilene hospital
When did the rev died?	1863	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Thomas Henry Fitzpatrick, r0.namespace: reverb, r0.arg2: 1863, r0.rel: died in) => 1863
When did the rev died?	1851	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the late Rev Edward Powys, r0.namespace: reverb, r0.arg2: 1851, r0.rel: died in) => 1851
When did the rev died?	8.4.1944	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev Lawson Marsh, r0.namespace: reverb, r0.arg2: 8.4.1944, r0.rel: died on) => 8.4.1944
When did the rev died?	12th	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: a The Rev. John Pell, r0.namespace: reverb, r0.arg2: the 12th, r0.rel: died on) => the 12th
When did the rev died?	june	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Murphy, r0.namespace: reverb, r0.arg2: June, r0.rel: died in) => June
When did the rev died?	january 17 , 2012	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Dr. Roger Otis Kuhrt, r0.namespace: reverb, r0.arg2: January 17 , 2012, r0.rel: died on) => January 17 , 2012
When did the rev died?	2002	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Lenton Gunn, r0.namespace: reverb, r0.arg2: 2002, r0.rel: died too young in) => 2002
When did the rev died?	december 28th 2009	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev, r0.namespace: reverb, r0.arg2: December 28th 2009, r0.rel: died on) => December 28th 2009
When did the rev died?	ministry	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Benjamin Fessenden, r0.namespace: reverb, r0.arg2: the ministry, r0.rel: died in) => the ministry
When did the rev died?	thursday	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Forrest Church, r0.namespace: reverb, r0.arg2: Thursday, r0.rel: had died on) => Thursday
When did the rev died?	1876	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Most Rev. THOMAS LOUIS CONNOLLY, r0.namespace: reverb, r0.arg2: 1876, r0.rel: died in) => 1876
When did the rev died?	january 31st	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Canon Barry Patrick, r0.namespace: reverb, r0.arg2: January 31st, r0.rel: died on) => January 31st
When did the rev died?	birmingham	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Fred Shuttlesworth, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: died in) => Birmingham
When did the rev died?	15th december 1677	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Petrus Hulsenaar, r0.namespace: reverb, r0.arg2: 15th December 1677, r0.rel: died on) => 15th December 1677
When did the rev died?	october	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Fred L. Shuttlesworth, r0.namespace: reverb, r0.arg2: October, r0.rel: died in) => October
When did the rev died?	mass suicide	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Jim Jones, r0.namespace: reverb, r0.arg2: a mass suicide, r0.rel: died in) => a mass suicide
When did the rev died?	augusta	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Canon Neal Phelps, r0.namespace: reverb, r0.arg2: Augusta, r0.rel: died in) => Augusta
When did the rev died?	1811	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. William Emerson, r0.namespace: reverb, r0.arg2: 1811, r0.rel: died in) => 1811
When did the rev died?	1837	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. George, r0.namespace: reverb, r0.arg2: 1837, r0.rel: died in) => 1837
When did the rev died?	december 30 , 2011	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Donovan E. White, r0.namespace: reverb, r0.arg2: December 30 , 2011, r0.rel: died on) => December 30 , 2011
When did the rev died?	1841	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. F. Foxlowe, r0.namespace: reverb, r0.arg2: 1841, r0.rel: died in) => 1841
When did the rev died?	august 10 , 2011	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Dr. Roger H. Smith, r0.namespace: reverb, r0.arg2: August 10 , 2011, r0.rel: died on) => August 10 , 2011
When did the rev died?	27th july	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the late Rev Dr John R.W. Stott, r0.namespace: reverb, r0.arg2: 27th July, r0.rel: died on) => 27th July
When did the rev died?	march 19th	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Carl McIntire, r0.namespace: reverb, r0.arg2: March 19th, r0.rel: died on) => March 19th
When did the rev died?	may 15	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Jerry Falwell, r0.namespace: reverb, r0.arg2: May 15, r0.rel: died on) => May 15
When did the rev died?	1966	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Very Rev JG Laughton, r0.namespace: reverb, r0.arg2: 1966, r0.rel: died very suddenly in) => 1966
When did the rev died?	elyria	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Mr. Richard Wolff, r0.namespace: reverb, r0.arg2: Elyria, r0.rel: died in) => Elyria
When did the rev died?	1792	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Samuel Kendall, r0.namespace: reverb, r0.arg2: 1792, r0.rel: died in) => 1792
When did the rev died?	1804	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Benjamin Chapman, r0.namespace: reverb, r0.arg2: 1804, r0.rel: died in) => 1804
When did the rev died?	september 17 , 2010	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Arthur Richard Steidemann, r0.namespace: reverb, r0.arg2: September 17 , 2010, r0.rel: died on) => September 17 , 2010
When did the rev died?	1807	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. John Colquhoun, r0.namespace: reverb, r0.arg2: 1807, r0.rel: died in) => 1807
When did the rev died?	2011	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Fred Shuttlesworth, r0.namespace: reverb, r0.arg2: 2011, r0.rel: died in) => 2011
When did the rev died?	1729	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. John Williams, r0.namespace: reverb, r0.arg2: 1729, r0.rel: died in) => 1729
When did the rev died?	prison	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Mr Udall, r0.namespace: reverb, r0.arg2: prison, r0.rel: died in) => prison
When did the rev died?	january 1871	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev Urie, r0.namespace: reverb, r0.arg2: January 1871, r0.rel: died in) => January 1871
When did the rev died?	may 26 , 2009	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Dana Harold Ostdiek, r0.namespace: reverb, r0.arg2: May 26 , 2009, r0.rel: died on) => May 26 , 2009
When did the rev died?	26h day	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Denis Muldowney, r0.namespace: reverb, r0.arg2: the 26h day, r0.rel: died on) => the 26h day
When did the rev died?	june 29 , 2010	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev 'd Robert Hardaway Wright, r0.namespace: reverb, r0.arg2: June 29 , 2010, r0.rel: died on) => June 29 , 2010
When did the rev died?	april 6	1.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: the Rev. Onie Cooper, r0.namespace: reverb, r0.arg2: April 6, r0.rel: died on) => April 6
When did the rev died?	2007	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. John G. Carson, r0.namespace: reverb, r0.arg2: 2007, r0.rel: died in) => 2007
When did the rev died?	1732	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. John Tennent, r0.namespace: reverb, r0.arg2: 1732, r0.rel: died in) => 1732
When did the rev died?	1680	1.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev. Ralph Davenant, r0.namespace: reverb, r0.arg2: 1680, r0.rel: died in) => 1680
What do calvinists teach?	several months	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: This Calvinist teaching, r0.namespace: reverb, r0.arg2: several months, r0.rel: was taught in-depth for) => several months
What do calvinists teach?	sovereign grace	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: the sovereign grace, r0.rel: should still confidently teach) => the sovereign grace
What do calvinists teach?	bible	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: The true Calvinist, r0.namespace: reverb, r0.arg2: the Bible, r0.rel: believes the teaching of) => the Bible
What do calvinists teach?	distinction	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: the distinction, r0.rel: have taught) => the distinction
What do calvinists teach?	princeton	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: the Calvinist principles, r0.namespace: reverb, r0.arg2: Princeton, r0.rel: were taught at) => Princeton
What do calvinists teach?	verses	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Some Calvinists, r0.namespace: reverb, r0.arg2: such verses, r0.rel: reject the plain teaching of) => such verses
What do calvinists teach?	sometimes	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: openie4, r0.arg2: sometimes, r0.rel: are wrongly criticized as teaching) => sometimes
What do calvinists teach?	calvin	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: Calvin, r0.rel: reject this teaching of) => Calvin
What do calvinists teach?	impassibility	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: impassibility, r0.rel: have long taught) => impassibility
What do calvinists teach?	effectual forgiveness	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: effectual forgiveness, r0.rel: teach the false doctrine of) => effectual forgiveness
What do calvinists teach?	different gospel	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: openie4, r0.arg2: a different Gospel, r0.rel: teach) => a different Gospel
When was Arthur Ashe born?	richmond	4.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: Richmond, r0.rel: was born in) => Richmond
When was Arthur Ashe born?	1943	4.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: 1943, r0.rel: was born in) => 1943
When was Arthur Ashe born?	july 10 , 1943	2.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born on, $x) => $x: (Arthur Ashe, was born on, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: July 10 , 1943, r0.rel: was born on) => July 10 , 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born on, $x) => $x: (Arthur Ashe, born on, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: July 10 , 1943, r0.rel: was born on) => July 10 , 1943
When was the first computers developed?	early 1980s	4.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s
When was the first computers developed?	manchester	2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester
When was the first computers developed?		2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then
When was the first computers developed?	1950s	2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s
When was the first computers developed?	1951	2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951
When was the first computers developed?	united states	2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States
When was the first computers developed?	1961	2.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961
When was the first computers developed?	india	1.0	When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first indigenous digital computer, r0.namespace: openie4, r0.arg2: India, r0.rel: developed in) => India
What country developed Pizza?	us-new york	1.0	What country developed Pizza? => $x: ($x, "is a", country) ($x, developed, Pizza) => $x: ($x, "is a", country) ($x, developed, Pizza) => (r0.arg1: US-New York, r1.rel: developed a love of, r0.namespace: nell, r1.arg2: pizza, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York
What is the best stock?	apple	2.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Apple, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => Apple; What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Apple, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is still) => Apple
What is the best stock?	dell computer	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Dell Computer, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => Dell Computer
What is the best stock?	mcdonald?s	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: McDonald?s, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => McDonald?s
What is the best stock?	automaker stocks	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: automaker stocks, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: were) => automaker stocks
What is the best stock?	very high position	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: a very high position, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: are considered to be) => a very high position
What is the best stock?	bac	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: BAC, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: are) => BAC
What is the best stock?	group choices 2007	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Group Choices 2007, r0.namespace: reverb, r0.arg2: the best Stocking Stuffer, r0.rel: is) => Group Choices 2007
What is the best stock?	chrysler	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Chrysler, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was arguably) => Chrysler
What is the best stock?	electrical supply house	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: an electrical supply house, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: were) => an electrical supply house
What is the best stock?	highland gold	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Highland Gold, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was) => Highland Gold
What is the best stock?	reebok	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Reebok, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: was also one of) => Reebok
What is the best stock?	ski higher	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Ski Higher, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: is perhaps) => Ski Higher
What is the best stock?	idea	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The idea, r0.namespace: reverb, r0.arg2: the best stock/s, r0.rel: is to select) => The idea
What is the best stock?	tie	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: TIE, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was virtually) => TIE
What is the best stock?	mee	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: MEE, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: is also) => MEE
What is the best stock?	2008-2010	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: 2008-2010, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: were some of) => 2008-2010
What is the best stock?	home builders	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Home builders, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: have been among) => Home builders
What is the best stock?	cent	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: cent, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => cent
What is the best stock?	cyclicals	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Cyclicals, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: were among) => Cyclicals
What is the best stock?	remaining 5 %	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The remaining 5 %, r0.namespace: reverb, r0.arg2: the best penny stocks, r0.rel: are) => The remaining 5 %
What is the best stock?	12-month period	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: a 12-month period, r0.namespace: reverb, r0.arg2: the Best stock, r0.rel: is) => a 12-month period
What is the best stock?	sector	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the sector, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: are some of) => the sector
What is the best stock?	background	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the background, r0.namespace: reverb, r0.arg2: the best damn stock, r0.rel: is from) => the background
What is the best stock?	fabulous stocks	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: FABULOUS STOCKS, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: here are some of) => FABULOUS STOCKS
What is the best stock?	stock	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: stock, r0.namespace: reverb, r0.arg2: the best tasting stock, r0.rel: is definitely) => stock
What is the best stock?	storm	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the storm, r0.namespace: reverb, r0.arg2: the best stock farms, r0.rel: were some of) => the storm
What is the best stock?	superior	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Superior, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: seems to be) => Superior
What is the best stock?	recent years	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was one of) => recent years
What is the best stock?	corn sugar beets	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: corn and sugar beets, r0.namespace: reverb, r0.arg2: the best feed stocks, r0.rel: are) => corn and sugar beets
What is the best stock?	goal	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the goal, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: was to pick) => the goal
What is the best stock?	natalie	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Natalie, r0.namespace: reverb, r0.arg2: the best stock picker, r0.rel: was) => Natalie
What is the best stock?	green mountain	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Green Mountain, r0.namespace: reverb, r0.arg2: the best battleground stocks, r0.rel: has been one of) => Green Mountain
What is the best stock?	lexg	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: LEXG, r0.namespace: reverb, r0.arg2: the best penny stocks, r0.rel: has been one of) => LEXG
What is the best stock?	alphaclone fund managers	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: AlphaClone fund managers, r0.namespace: reverb, r0.arg2: the best stock pickers, r0.rel: are) => AlphaClone fund managers
What is the best stock?	capgemini	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Capgemini, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => Capgemini
What is the best stock?	fridays	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Fridays, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: is probably one of) => Fridays
What is the best stock?	precious metals	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Precious metals, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: are) => Precious metals
What is the best stock?	rel=shortlink	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: rel=shortlink, r0.namespace: reverb, r0.arg2: the best value stocks, r0.rel: are) => rel=shortlink
What is the best stock?	embarq	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Embarq, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: has been one of) => Embarq
What is the best stock?	bloomberg	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Bloomberg, r0.namespace: reverb, r0.arg2: the best stocks tracker, r0.rel: is) => Bloomberg
What is the best stock?	first internet company	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the first Internet company, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => the first Internet company
What is the best stock?	tradeking	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: TradeKing, r0.namespace: reverb, r0.arg2: the best stock broker, r0.rel: is) => TradeKing
What is the best stock?	cme group	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: CME group, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => CME group
What is the best stock?	brickwork	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The brickwork, r0.namespace: reverb, r0.arg2: the best stock bricks, r0.rel: is of) => The brickwork
What is the best stock?	lobster fishery	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the lobster fishery, r0.namespace: reverb, r0.arg2: the best-stocked, r0.rel: is one of) => the lobster fishery
What is the best stock?	vodafone	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Vodafone, r0.namespace: reverb, r0.arg2: the best dividend stocks, r0.rel: is one of) => Vodafone
What is the best stock?	cochlear limited	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: COCHLEAR LIMITED, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => COCHLEAR LIMITED
What is the best stock?	retailer	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The retailer, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: has been) => The retailer
What is the best stock?	portfolio manager	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: portfolio manager, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: was picking) => portfolio manager
What is the best stock?	group limited	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: GROUP LIMITED, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => GROUP LIMITED
What kind of mixture is soda?	end	1.0	What kind of mixture is soda? => $x: ($x, "is an example of", mixture) ($x, is, soda) => $x: ($x, "is an example of", mixture) ($x, is, soda) => (r0.arg1: the end, r1.rel: is bigger than, r0.namespace: reverb, r1.arg2: a soda, r0.arg2: a mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the end) => the end
What kind of mixture is soda?	soil	1.0	What kind of mixture is soda? => $x: ($x, "is an example of", mixture) ($x, is, soda) => $x: ($x, "is an example of", mixture) ($x, is, soda) => (r0.arg1: soil, r1.rel: was neutralized with, r0.namespace: reverb, r1.arg2: soda ash, r0.arg2: a heterogeneous mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: soil) => soil
What work does princess diana do?	score	4.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Adapted Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Score
What work does princess diana do?	score!	2.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!
What work does princess diana do?	england	2.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England
What work does princess diana do?	aids	2.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aids, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aids; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: AIDS, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => AIDS
What work does princess diana do?	cause	2.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Cause; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The cause
What work does princess diana do?	aid	1.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aid, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aid
What work does princess diana do?	7 years	1.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: 7 Years, r1.rel: has been doing so for, r0.namespace: freebase, r1.arg2: 7 years, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => 7 Years
What work does princess diana do?	scores	1.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Scores, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Scores
Which religion has pillars?	islam	26.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam
Which religion has pillars?	science	9.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science
Which religion has pillars?	work	5.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work
Which religion has pillars?	buddhism	2.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism
Which religion has pillars?	asia	2.0	Which religion has pillars? => $x: ($x, "type", religion) ($x, has, pillars) => $x: ($x, "type", religion) ($x, has, pillars) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; Which religion has pillars? => $x: ($x, "type", religion) ($x, has, pillars) => $x: ($x, "type", religion) ($x, has, pillars) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia
Which religion has pillars?	church	1.0	Which religion has pillars? => $x: ($x, "is a", religion) ($x, has, pillars) => $x: ($x, "is a", religion) ($x, has, pillars) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church
Which religion has pillars?	terrorism	1.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism
Which religion has pillars?	nationalism	1.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism
Where does the term computer come from?	john brunner	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: the term computer, r0.namespace: reverb, r0.arg2: John Brunner, r0.rel: came from) => John Brunner
Where does the term computer come from?	latin meaning computercount	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: The term computer, r0.namespace: openie4, r0.arg2: the Latin meaning computercount, r0.rel: comes from) => the Latin meaning computercount
Where does the term computer come from?	analogy	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: The term computer virus, r0.namespace: reverb, r0.arg2: the analogy, r0.rel: came from) => the analogy
What is the most complex of animals?	humans	1.0	What is the most complex of animals? => $x: ($x, is the most complex of, animals) => $x: ($x, is the most complex of, animals) => (r0.arg1: Humans, r0.namespace: reverb, r0.arg2: animals, r0.rel: are the most complex of) => Humans
What is the most complex of animals?	love song	1.0	What is the most complex of animals? => $x: ($x, is the most complex of, animals) => $x: ($x, is the most complex of, animals) => (r0.arg1: a love song, r0.namespace: reverb, r0.arg2: all animals, r0.rel: is the most complex of perhaps) => a love song
What countrys have geothermal?	new zealand	16.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: openie4, r1.arg2: geothermal powerstations, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: openie4, r1.arg2: geothermal systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: a large geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has developed, r0.namespace: openie4, r1.arg2: more geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand
What countrys have geothermal?	japan	13.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries in Fiction, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: japan, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Japan) => japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal energy, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: three geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: 18 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: now has, r0.namespace: reverb, r1.arg2: 18 geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has built, r0.namespace: reverb, r1.arg2: 20 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan
What countrys have geothermal?	iceland	12.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Iceland) => iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal advisers, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has rich reserves of, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland
What countrys have geothermal?	indonesia	12.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: large undeveloped geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: abundant geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the largest geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the world?s largest geothermal resource, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: large undeveloped geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the largest geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the world?s largest geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia
What countrys have geothermal?	switzerland	9.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Landlocked Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: SWITZERLAND, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => SWITZERLAND; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland
What countrys have geothermal?	united states	7.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: the united states, r1.rel: may have, r0.namespace: nell, r1.arg2: geothermal resources, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The United States) => the united states; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: may have, r0.namespace: openie4, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: may have, r0.namespace: reverb, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => The United States
What countrys have geothermal?	germany	6.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: reverb, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: openie4, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany
What countrys have geothermal?	kenya	3.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: has, r0.namespace: reverb, r1.arg2: substantial geothermal potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: currently has, r0.namespace: reverb, r1.arg2: 3 geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: also has, r0.namespace: reverb, r1.arg2: a geothermal station, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya
What countrys have geothermal?	america	2.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: openie4, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America
What countrys have geothermal?	mexico	2.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: openie4, r1.arg2: 958 MWe geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: reverb, r1.arg2: 958 MWe geothermal, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico
What countrys have geothermal?	new-zealand	2.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has been running, r0.namespace: nell, r1.arg2: geothermal powerstations, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has an array of, r0.namespace: nell, r1.arg2: geothermal systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand
What countrys have geothermal?	colorado	1.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Colorado, r1.rel: have installed, r0.namespace: freebase, r1.arg2: geothermal heating, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Colorado) => Colorado
What countrys have geothermal?	philippines	1.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The Philippines, r1.rel: has, r0.namespace: openie4, r1.arg2: wind and geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Philippines) => The Philippines
What countrys have geothermal?	uk	1.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The UK, r1.rel: has, r0.namespace: reverb, r1.arg2: a good deep geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The UK) => The UK
What countrys have geothermal?	tanzania	1.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Tanzania, r1.rel: have huge potential for, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Tanzania) => Tanzania
What countrys have geothermal?	uk, switzerland	1.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: UK, Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => UK, Switzerland
What countrys have geothermal?	us-colorado	1.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: US-Colorado, r1.rel: have installed, r0.namespace: nell, r1.arg2: geothermal heating, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Colorado) => US-Colorado
What are some fast growing plants?	first area	1.0	What are some fast growing plants? => $x: ($x, are, some fast growing plants) => $x: ($x, are, some fast growing plants) => (r0.arg1: The first area, r0.namespace: reverb, r0.arg2: some fast growing plants, r0.rel: will be planted with) => The first area
What is the population of Muslims?	jama?at-i-islami :? ?q.?	2.0	What is the population of Muslims? => $x: ($x, is the population of, Muslims) => $x: ($x, is the population of, Muslims) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; What is the population of Muslims? => $x: ($x, is the population of, Muslims) => $x: ($x, is the population of, Muslims) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?
What is the population of Muslims?	25,000 persons	1.0	What is the population of Muslims? => $x: (Muslims, have population of, $x) => $x: (Muslims, have population of, $x) => (r0.arg1: Muslim Zaragoza, r0.namespace: reverb, r0.arg2: 25,000 persons, r0.rel: had a population of) => 25,000 persons
What is the population of Muslims?	80-90 % hindus	1.0	What is the population of Muslims? => $x: (Muslims, have population of, $x) => $x: (Muslims, have population of, $x) => (r0.arg1: local Muslim rulers, r0.namespace: reverb, r0.arg2: 80-90 % Hindus, r0.rel: had a population of) => 80-90 % Hindus
