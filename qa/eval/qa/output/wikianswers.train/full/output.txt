What is the food source for amoebas?	water	3.0	what type of food contain amoeba ? => $x: ($x, "type", food) ($x, contain, amoeba) => $x: ($x, "type", food) ($x, contain, amoeba) => (r0.arg1: Water, r1.rel: containing, r0.namespace: freebase, r1.arg2: the amoeba, r0.arg2: Food Product, r0.rel: Type, r1.namespace: openie4, r1.arg1: water) => Water; what type of food contain amoeba ? => $x: ($x, "type", food) ($x, contain, amoeba) => $x: ($x, "type", food) ($x, contain, amoeba) => (r0.arg1: Water, r1.rel: contains, r0.namespace: freebase, r1.arg2: N. fowleri amoebas, r0.arg2: Food Product, r0.rel: Type, r1.namespace: reverb, r1.arg1: water) => Water; what type of food contain amoeba ? => $x: ($x, "type", food) ($x, contain, amoeba) => $x: ($x, "type", food) ($x, contain, amoeba) => (r0.arg1: Water, r1.rel: can also contain, r0.namespace: freebase, r1.arg2: various microbes or amoeba, r0.arg2: Food Product, r0.rel: Type, r1.namespace: reverb, r1.arg1: the water) => Water
What is the food source for amoebas?	bacteria	2.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: amoebae, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: eat) => bacteria; what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: social amoebae, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: eat) => bacteria
What is the food source for amoebas?	fungi root pathogens	2.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: amoebae, r0.namespace: reverb, r0.arg2: fungi and root pathogens, r0.rel: eat) => fungi and root pathogens; what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: One group of amoebae, r0.namespace: openie4, r0.arg2: fungi and root pathogens, r0.rel: eat) => fungi and root pathogens
What is the food source for amoebas?	paramecium	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: an amoeba, r0.namespace: openie4, r0.arg2: a paramecium, r0.rel: eating) => a paramecium
What is the food source for amoebas?	biofilms	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: Amoebas, r0.namespace: reverb, r0.arg2: biofilms, r0.rel: can eat) => biofilms
What is the food source for amoebas?	green ones	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: red amoebas, r0.namespace: reverb, r0.arg2: the green ones, r0.rel: eat) => the green ones
What is the food source for amoebas?		1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: little amoeba creatures, r0.namespace: reverb, r0.arg2: each other, r0.rel: eat) => each other
What is the food source for amoebas?	food particle	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: a green amoeba, r0.namespace: reverb, r0.arg2: a food particle, r0.rel: eats) => a food particle
What is the food source for amoebas?	green amoebas	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: the red amoebas, r0.namespace: reverb, r0.arg2: the green amoebas, r0.rel: eat) => the green amoebas
What is the food source for amoebas?	brain	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: the amoeba, r0.namespace: reverb, r0.arg2: the brain, r0.rel: eat) => the brain
What is the food source for amoebas?	phagocytosis	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: Amoebas, r0.namespace: openie4, r0.arg2: phagocytosis, r0.rel: eat by engulfing smaller organisms by) => phagocytosis
What is the food source for amoebas?	bacterium	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: an amoeba, r0.namespace: openie4, r0.arg2: a bacterium, r0.rel: ate) => a bacterium
What is the food source for amoebas?	sugar-water	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: An amoeba survives, r0.namespace: reverb, r0.arg2: the sugar-water, r0.rel: eat) => the sugar-water
What is the food source for amoebas?	life	1.0	which food have amoeba ? => $x: ($x, "type", food) ($x, have, amoeba) => $x: ($x, "type", food) ($x, have, amoeba) => (r0.arg1: Life, r1.rel: have developed from, r0.namespace: freebase, r1.arg2: the amoeba, r0.arg2: Food, r0.rel: Type, r1.namespace: reverb, r1.arg1: life) => Life
What is the food source for amoebas?	smaller organisms	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: Amoebas, r0.namespace: openie4, r0.arg2: smaller organisms, r0.rel: eat by engulfing) => smaller organisms
What is the food source for amoebas?	picture	1.0	which food have amoeba ? => $x: ($x, "is an example of", food) ($x, have, amoeba) => $x: ($x, "is an example of", food) ($x, have, amoeba) => (r0.arg1: The picture, r1.rel: have all run into, r0.namespace: reverb, r1.arg2: abstract amoebas, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pictures) => The picture
What is the food source for amoebas?	florida	1.0	which food have amoeba ? => $x: ($x, "type", food) ($x, have, amoeba) => $x: ($x, "type", food) ($x, have, amoeba) => (r0.arg1: Florida, r1.rel: have, r0.namespace: freebase, r1.arg2: the pathogenic amoebae, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Florida) => Florida
What is the food source for amoebas?	city	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: an amoeba, r0.namespace: reverb, r0.arg2: the city, r0.rel: is eating) => the city
What is the food source for amoebas?	fungi	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: amoebae, r0.namespace: reverb, r0.arg2: fungi, r0.rel: eat) => fungi
What is the food source for amoebas?	mrsa	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: amoebas, r0.namespace: reverb, r0.arg2: MRSA, r0.rel: eat) => MRSA
What is the food source for amoebas?	wood	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: amoebas, r0.namespace: reverb, r0.arg2: the wood, r0.rel: had been eating) => the wood
What is the food source for amoebas?	ambient food	1.0	what do amoeba eat ? => $x: (amoeba, eat, $x) => $x: (amoeba, eat, $x) => (r0.arg1: Green amoebas, r0.namespace: reverb, r0.arg2: ambient food, r0.rel: eat) => ambient food
Can blue herons fly?	house	15.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew over) => the house; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the house, r0.rel: flew low over) => the house; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW low over) => the house; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW over) => the house; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: always flies over) => the house; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew over) => the house; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the house, r0.rel: flew low over) => the house; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW low over) => the house; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW over) => the house; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: always flies over) => the house; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew over) => the house; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the house, r0.rel: flew low over) => the house; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW low over) => the house; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: flew SW over) => the house; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue heron, r0.namespace: reverb, r0.arg2: the house, r0.rel: always flies over) => the house
Can blue herons fly?	pond	10.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the pond, r0.rel: flew over) => the pond; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flies over) => the pond; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flew over) => the pond; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the pond, r0.namespace: reverb, r0.arg2: Great Blue Heron, r0.rel: were) => the pond; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the pond, r0.rel: flew over) => the pond; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flies over) => the pond; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flew over) => the pond; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the pond, r0.rel: flew over) => the pond; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flies over) => the pond; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the pond, r0.rel: flew over) => the pond
Can blue herons fly?	fish	9.0	what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: Blue Heron, r0.namespace: openie4, r0.arg2: a fish, r0.rel: eats) => a fish; what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: The little blue heron, r0.namespace: reverb, r0.arg2: fish, r0.rel: eats) => fish; what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: Great blue herons, r0.namespace: reverb, r0.arg2: fish, r0.rel: eat) => fish; what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: the Great Blue Heron, r0.namespace: openie4, r0.arg2: fish, r0.rel: eats primarily) => fish; what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: The Great Blue Heron, r0.namespace: reverb, r0.arg2: fish, r0.rel: primarily eats) => fish; what do blue heron eat ? => $x: (blue heron, eat, $x) => $x: (blue heron, eat, $x) => (r0.arg1: The large great blue heron, r0.namespace: reverb, r0.arg2: fish, r0.rel: primarily eats) => fish; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: a fish, r0.rel: flew over with) => a fish; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: a fish, r0.rel: flew over with) => a fish; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: a fish, r0.rel: flew over with) => a fish
Can blue herons fly?	backyard	9.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew over) => the backyard; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyard, r0.rel: flew south over) => the backyard; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew low over) => the backyard; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew over) => the backyard; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyard, r0.rel: flew south over) => the backyard; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew low over) => the backyard; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew over) => the backyard; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyard, r0.rel: flew south over) => the backyard; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: the backyard, r0.rel: flew low over) => the backyard
Can blue herons fly?	head	9.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: head, r0.rel: flew over) => head; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: head, r0.rel: flew over) => head; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Two great blue herons, r0.namespace: reverb, r0.arg2: head, r0.rel: flew right over) => head; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: head, r0.rel: flew over) => head; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: head, r0.rel: flew over) => head; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Two great blue herons, r0.namespace: reverb, r0.arg2: head, r0.rel: flew right over) => head; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: head, r0.rel: flew over) => head; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: head, r0.rel: flew over) => head; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Two great blue herons, r0.namespace: reverb, r0.arg2: head, r0.rel: flew right over) => head
Can blue herons fly?	river	9.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: river, r0.rel: flew) => river; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: a river, r0.rel: flying over) => a river; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: river, r0.rel: flew up) => river; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: river, r0.rel: flew) => river; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: a river, r0.rel: flying over) => a river; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: river, r0.rel: flew up) => river; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: river, r0.rel: flew) => river; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: a river, r0.rel: flying over) => a river; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: river, r0.rel: flew up) => river
Can blue herons fly?	up	9.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: fly) => up; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: fly) => up; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: fly) => up; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: up, r0.rel: flew) => up
Can blue herons fly?	overhead	9.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the Great Blue Herons, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: fly) => overhead; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the Great Blue Herons, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: fly) => overhead; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the Great Blue Herons, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: fly) => overhead; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: overhead, r0.rel: flew) => overhead
Can blue herons fly?	marsh	8.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: three great blue herons, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: flew over) => the marsh; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: fly up from) => the marsh; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: The marsh, r0.namespace: reverb, r0.arg2: blue heron, r0.rel: is also a refuge for) => The marsh; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the marsh, r0.namespace: reverb, r0.arg2: a great blue heron, r0.rel: were) => the marsh; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: three great blue herons, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: flew over) => the marsh; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: fly up from) => the marsh; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: three great blue herons, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: flew over) => the marsh; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: the marsh, r0.rel: fly up from) => the marsh
Can blue herons fly?	front	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew in) => front; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a beautiful Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew out in) => front; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew in) => front; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a beautiful Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew out in) => front; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew in) => front; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a beautiful Great Blue Heron, r0.namespace: reverb, r0.arg2: front, r0.rel: flew out in) => front
Can blue herons fly?	window	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew by) => the window; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: two Great Blue Herons, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew directly toward) => the window; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew by) => the window; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: two Great Blue Herons, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew directly toward) => the window; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew by) => the window; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: two Great Blue Herons, r0.namespace: reverb, r0.arg2: the window, r0.rel: flew directly toward) => the window
Can blue herons fly?	se	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: SE, r0.rel: flew) => SE; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the SE, r0.rel: flew in from) => the SE; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: SE, r0.rel: flew) => SE; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the SE, r0.rel: flew in from) => the SE; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: SE, r0.rel: flew) => SE; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the SE, r0.rel: flew in from) => the SE
Can blue herons fly?	off	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: off, r0.rel: flew) => off
Can blue herons fly?	trees	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: blue herons, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew into) => the trees; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew from) => the trees; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: blue herons, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew into) => the trees; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew from) => the trees; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: blue herons, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew into) => the trees; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: the trees, r0.rel: flew from) => the trees
Can blue herons fly?	over	6.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: over, r0.rel: flew) => over; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: over, r0.rel: fly) => over; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: over, r0.rel: flew) => over; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: over, r0.rel: fly) => over; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: openie4, r0.arg2: over, r0.rel: flew) => over; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: over, r0.rel: fly) => over
Can blue herons fly?	park	4.0	what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the park, r0.namespace: reverb, r0.arg2: blue herons, r0.rel: is alive with) => the park; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the park, r0.namespace: reverb, r0.arg2: blue herons, r0.rel: is home to) => the park; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the park, r0.namespace: reverb, r0.arg2: blue herons, r0.rel: can be found a colony of) => the park; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the park, r0.namespace: reverb, r0.arg2: Great Blue Heron, r0.rel: are) => the park
Can blue herons fly?	air	4.0	what do blue heron fly through ? => $x: (blue heron, fly through, $x) => $x: (blue heron, fly through, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the air, r0.rel: flies through) => the air; who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the air, r0.rel: flies through) => the air; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the air, r0.rel: flies through) => the air; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the air, r0.rel: flies through) => the air
Can blue herons fly?	highlights	4.0	what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: highlights, r0.namespace: reverb, r0.arg2: 1 Great Blue Heron, r0.rel: were) => highlights; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: Highlights, r0.namespace: reverb, r0.arg2: 1 Great Blue Heron, r0.rel: were) => Highlights; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: Highlights, r0.namespace: openie4, r0.arg2: 1 Great Blue Heron, r0.rel: were) => Highlights; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: Highlights, r0.namespace: reverb, r0.arg2: 3+ Great Blue Heron, r0.rel: were) => Highlights
Can blue herons fly?	yesterday	4.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: yesterday, r0.rel: flew over) => yesterday; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: yesterday, r0.namespace: reverb, r0.arg2: LITTLE BLUE HERON, r0.rel: were) => yesterday; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: yesterday, r0.rel: flew over) => yesterday; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: yesterday, r0.rel: flew over) => yesterday
Can blue herons fly?	lake	4.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the lake, r0.rel: has flown in on) => the lake; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the lake, r0.namespace: reverb, r0.arg2: the Blue Heron Caf?, r0.rel: was) => the lake; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the lake, r0.rel: has flown in on) => the lake; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: the lake, r0.rel: has flown in on) => the lake
Can blue herons fly?	high overhead	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Behavior Great Blue Herons, r0.namespace: reverb, r0.arg2: high overhead, r0.rel: are often seen flying) => high overhead; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Behavior Great Blue Herons, r0.namespace: reverb, r0.arg2: high overhead, r0.rel: are often seen flying) => high overhead; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Behavior Great Blue Herons, r0.namespace: reverb, r0.arg2: high overhead, r0.rel: are often seen flying) => high overhead
Can blue herons fly?	retention pond	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: a retention pond, r0.rel: fly up from) => a retention pond; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: a retention pond, r0.rel: fly up from) => a retention pond; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Little Blue Heron, r0.namespace: reverb, r0.arg2: a retention pond, r0.rel: fly up from) => a retention pond
Can blue herons fly?	queen creek canyon	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: Queen Creek canyon, r0.rel: flew over) => Queen Creek canyon; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: Queen Creek canyon, r0.rel: flew over) => Queen Creek canyon; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: Queen Creek canyon, r0.rel: flew over) => Queen Creek canyon
Can blue herons fly?	pond right	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: a pond right, r0.rel: flew into) => a pond right; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: a pond right, r0.rel: flew into) => a pond right; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: a pond right, r0.rel: flew into) => a pond right
Can blue herons fly?	past	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: past, r0.rel: flew) => past; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: past, r0.rel: flew) => past; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: past, r0.rel: flew) => past
Can blue herons fly?	spruce tree	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: a spruce tree, r0.rel: flew into) => a spruce tree; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: a spruce tree, r0.rel: flew into) => a spruce tree; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: a spruce tree, r0.rel: flew into) => a spruce tree
Can blue herons fly?	north	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: to north, r0.rel: flew from south) => to north; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: to north, r0.rel: flew from south) => to north; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a great blue heron, r0.namespace: reverb, r0.arg2: to north, r0.rel: flew from south) => to north
Can blue herons fly?	next cove	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the next cove, r0.rel: flew to) => the next cove; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the next cove, r0.rel: flew to) => the next cove; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: the next cove, r0.rel: flew to) => the next cove
Can blue herons fly?	distance	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: reverb, r0.arg2: the distance, r0.rel: flew off in) => the distance; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: reverb, r0.arg2: the distance, r0.rel: flew off in) => the distance; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Blue Heron, r0.namespace: reverb, r0.arg2: the distance, r0.rel: flew off in) => the distance
Can blue herons fly?	channel	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the Channel, r0.rel: flew in from) => the Channel; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the Channel, r0.rel: flew in from) => the Channel; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the Channel, r0.rel: flew in from) => the Channel
Can blue herons fly?	away	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: away, r0.rel: flew) => away; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: away, r0.rel: flew) => away; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: openie4, r0.arg2: away, r0.rel: flew) => away
Can blue herons fly?	nw. 1250	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW. 1250, r0.rel: flew) => NW. 1250; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW. 1250, r0.rel: flew) => NW. 1250; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW. 1250, r0.rel: flew) => NW. 1250
Can blue herons fly?	last light	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: last light, r0.rel: flew over at) => last light; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: last light, r0.rel: flew over at) => last light; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: last light, r0.rel: flew over at) => last light
Can blue herons fly?	several hours	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: several hours, r0.rel: flew in) => several hours; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: several hours, r0.rel: flew in) => several hours; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Great Blue Heron, r0.namespace: reverb, r0.arg2: several hours, r0.rel: flew in) => several hours
Can blue herons fly?	down	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: down, r0.rel: flew) => down; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: down, r0.rel: flew) => down; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: openie4, r0.arg2: down, r0.rel: flew) => down
Can blue herons fly?	brackish water	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: brackish water, r0.rel: fly low over) => brackish water; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: brackish water, r0.rel: fly low over) => brackish water; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: brackish water, r0.rel: fly low over) => brackish water
Can blue herons fly?	slough	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the slough, r0.rel: flew over) => the slough; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the slough, r0.rel: flew over) => the slough; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: the slough, r0.rel: flew over) => the slough
Can blue herons fly?	circle	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: The great blue heron, r0.namespace: reverb, r0.arg2: a circle, r0.rel: flew) => a circle; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: The great blue heron, r0.namespace: reverb, r0.arg2: a circle, r0.rel: flew) => a circle; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: The great blue heron, r0.namespace: reverb, r0.arg2: a circle, r0.rel: flew) => a circle
Can blue herons fly?	nw	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW, r0.rel: flew) => NW; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW, r0.rel: flew) => NW; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: NW, r0.rel: flew) => NW
Can blue herons fly?	blue hill falls	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: Blue Hill Falls, r0.rel: was flying near) => Blue Hill Falls; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: Blue Hill Falls, r0.rel: was flying near) => Blue Hill Falls; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A great blue heron, r0.namespace: reverb, r0.arg2: Blue Hill Falls, r0.rel: was flying near) => Blue Hill Falls
Can blue herons fly?	backyards	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyards, r0.rel: flew SE low over) => the backyards; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyards, r0.rel: flew SE low over) => the backyards; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A Great Blue Heron, r0.namespace: reverb, r0.arg2: the backyards, r0.rel: flew SE low over) => the backyards
Can blue herons fly?	ponds edge	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: reverb, r0.arg2: ponds edge, r0.rel: flew off from) => ponds edge; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: reverb, r0.arg2: ponds edge, r0.rel: flew off from) => ponds edge; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a Blue Heron, r0.namespace: reverb, r0.arg2: ponds edge, r0.rel: flew off from) => ponds edge
Can blue herons fly?	placid back eddy	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: a placid back eddy, r0.rel: fly out of) => a placid back eddy; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: a placid back eddy, r0.rel: fly out of) => a placid back eddy; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: a blue heron, r0.namespace: reverb, r0.arg2: a placid back eddy, r0.rel: fly out of) => a placid back eddy
Can blue herons fly?	beach	3.0	what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the beach, r0.namespace: openie4, r0.arg2: blue herons, r0.rel: are a good habitat for) => the beach; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the beach, r0.namespace: reverb, r0.arg2: blue herons, r0.rel: are a good habitat for) => the beach; what be blue heron ? => $x: ($x, be, blue heron) => $x: ($x, be, blue heron) => (r0.arg1: the beach, r0.namespace: reverb, r0.arg2: more great blue herons, r0.rel: are) => the beach
Can blue herons fly?	boat dock	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: the boat dock, r0.rel: flew onto) => the boat dock; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: the boat dock, r0.rel: flew onto) => the boat dock; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: A blue heron, r0.namespace: reverb, r0.arg2: the boat dock, r0.rel: flew onto) => the boat dock
Can blue herons fly?	short drive	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Great Blue Herons, r0.namespace: reverb, r0.arg2: the short drive, r0.rel: flew over during) => the short drive; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Great Blue Herons, r0.namespace: reverb, r0.arg2: the short drive, r0.rel: flew over during) => the short drive; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: Great Blue Herons, r0.namespace: reverb, r0.arg2: the short drive, r0.rel: flew over during) => the short drive
Can blue herons fly?	fishing puget sound	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: his 22' sailboat ?Blue Heron ?, r0.namespace: reverb, r0.arg2: fishing Puget Sound, r0.rel: fly) => fishing Puget Sound; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: his 22' sailboat ?Blue Heron ?, r0.namespace: reverb, r0.arg2: fishing Puget Sound, r0.rel: fly) => fishing Puget Sound; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: his 22' sailboat ?Blue Heron ?, r0.namespace: reverb, r0.arg2: fishing Puget Sound, r0.rel: fly) => fishing Puget Sound
Can blue herons fly?	slow wing beats	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: slow wing beats, r0.rel: fly with) => slow wing beats; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: slow wing beats, r0.rel: fly with) => slow wing beats; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: slow wing beats, r0.rel: fly with) => slow wing beats
Can blue herons fly?	stream	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: the stream, r0.rel: flew up from) => the stream; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: the stream, r0.rel: flew up from) => the stream; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: great blue herons, r0.namespace: reverb, r0.arg2: the stream, r0.rel: flew up from) => the stream
Can blue herons fly?	back forth	3.0	who do blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue herons, r0.namespace: openie4, r0.arg2: back and forth, r0.rel: fly) => back and forth; who be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue herons, r0.namespace: openie4, r0.arg2: back and forth, r0.rel: fly) => back and forth; what be blue heron fly ? => $x: (blue heron, fly, $x) => $x: (blue heron, fly, $x) => (r0.arg1: the blue herons, r0.namespace: openie4, r0.arg2: back and forth, r0.rel: fly) => back and forth
What sound do wrens make?	life	2.0	What sound do wrens make? => $x: ($x, "is a", sound) (wrens, make, $x) => $x: ($x, "is a", sound) (wrens, make, $x) => (r0.arg1: life, r1.rel: has made, r0.namespace: openie4, r1.arg2: a life, r0.arg2: tale told by an idiot , full of sound and fury, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wren) => life; what kind of sound do wren make ? => $x: ($x, "is a", sound) (wren, make, $x) => $x: ($x, "is a", sound) (wren, make, $x) => (r0.arg1: life, r1.rel: has made, r0.namespace: openie4, r1.arg2: a life, r0.arg2: tale told by an idiot , full of sound and fury, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wren) => life
What is the best speaker in the world?	americans	9.0	What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; what be best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; what be best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; best speaker in world ? => $x: ($x, be best speaker in, world) => $x: ($x, be best speaker in, world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; what be the best speaker in world ? => $x: ($x, be the best speaker in, world) => $x: ($x, be the best speaker in, world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; what be the best speaker in world ? => $x: ($x, be the best speaker in, world) => $x: ($x, be the best speaker in, world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; the best speaker in the world ? => $x: ($x, be the best speaker in, the world) => $x: ($x, be the best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans; best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best speakers in) => Americans
What is the best speaker in the world?	trio classico	9.0	What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; What is the best speaker in the world? => $x: ($x, is the best speaker in, the world) => $x: ($x, is the best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; what be best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; what be best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; best speaker in world ? => $x: ($x, be best speaker in, world) => $x: ($x, be best speaker in, world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; what be the best speaker in world ? => $x: ($x, be the best speaker in, world) => $x: ($x, be the best speaker in, world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; what be the best speaker in world ? => $x: ($x, be the best speaker in, world) => $x: ($x, be the best speaker in, world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; the best speaker in the world ? => $x: ($x, be the best speaker in, the world) => $x: ($x, be the best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico; best speaker in the world ? => $x: ($x, be best speaker in, the world) => $x: ($x, be best speaker in, the world) => (r0.arg1: the Trio Classico, r0.namespace: reverb, r0.arg2: the world, r0.rel: is likely the best speaker in) => the Trio Classico
What is the best speaker in the world?	steve	1.0	what speaker be the best in the world ? => $x: ($x, "type", speaker) ($x, be the best in, the world) => $x: ($x, "type", speaker) ($x, be the best in, the world) => (r0.arg1: Steve, r1.rel: were the best in, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Speaker, r0.rel: Type, r1.namespace: reverb, r1.arg1: Steve) => Steve
What is the best speaker in the world?	randy	1.0	what speaker be the best in the world ? => $x: ($x, "is an example of", speaker) ($x, be the best in, the world) => $x: ($x, "is an example of", speaker) ($x, be the best in, the world) => (r0.arg1: Randy, r1.rel: was the best guy in, r0.namespace: reverb, r1.arg2: the world, r0.arg2: a writer and speaker, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Randy) => Randy
What is the best speaker in the world?	jeff	1.0	what speaker be the best in the world ? => $x: ($x, "type", speaker) ($x, be the best in, the world) => $x: ($x, "type", speaker) ($x, be the best in, the world) => (r0.arg1: Jeff, r1.rel: is the best in, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Speaker, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jeff) => Jeff
What is the best speaker in the world?	lil wayne	1.0	what speaker be the best in the world ? => $x: ($x, "type", speaker) ($x, be the best in, the world) => $x: ($x, "type", speaker) ($x, be the best in, the world) => (r0.arg1: Lil Wayne, r1.rel: is the best rapper in, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Speaker, r0.rel: Type, r1.namespace: reverb, r1.arg1: Lil Wayne) => Lil Wayne
What is tantalum's origin?	congo	4.0	what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Congo, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Congo, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Congo; what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Congo, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Congo, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Congo; what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Congo, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Congo, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Congo; what country do tantalum come from ? => $x: ($x, "is a", country) (tantalum, come from, $x) => $x: ($x, "is a", country) (tantalum, come from, $x) => (r0.arg1: congo, r1.rel: comes from, r0.namespace: nell, r1.arg2: Congo, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: tantalum) => congo
What is tantalum's origin?	australia	4.0	what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Australia, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Australia, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Australia; what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Australia, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Australia, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Australia; what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Australia, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Australia, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Australia; what country do tantalum come from ? => $x: ($x, "type", country) (tantalum, come from, $x) => $x: ($x, "type", country) (tantalum, come from, $x) => (r0.arg1: Australia, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Australia, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: tantalum) => Australia
What is tantalum's origin?	effect	1.0	who s tantalum ? => $x: ($x, s, tantalum) => $x: ($x, s, tantalum) => (r0.arg1: the effect, r0.namespace: reverb, r0.arg2: tantalum hydrogen embrittlement, r0.rel: s of) => the effect
What is the main goal of psychoanalysis?	common unhappiness ?	1.0	the goal of psychoanalysis ? => $x: ($x, be the goal of, psychoanalysis) => $x: ($x, be the goal of, psychoanalysis) => (r0.arg1: common unhappiness ?, r0.namespace: reverb, r0.arg2: psychoanalysis, r0.rel: was the goal of) => common unhappiness ?
Who makes seiki?	pattern shirt	1.0	Who makes seiki? => $x: ($x, makes, seiki) => $x: ($x, makes, seiki) => (r0.arg1: no pattern shirt, r0.namespace: reverb, r0.arg2: Shima Seiki, r0.rel: is being made by) => no pattern shirt
Which is the urban area in africa?	cape town	9.0	what city be the urban area in africa ? => $x: ($x, "type", city) ($x, be the urban area in, africa) => $x: ($x, "type", city) ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r1.rel: is the first major urban area in, r0.namespace: freebase, r1.arg2: South Africa, r0.arg2: City, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cape Town) => Cape Town; what city be the urban area in africa ? => $x: ($x, "type", city) ($x, be the urban area in, africa) => $x: ($x, "type", city) ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r1.rel: is the first major urban area in, r0.namespace: freebase, r1.arg2: South Africa, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cape Town) => Cape Town; what city be the urban area in africa ? => $x: ($x, "type", city) ($x, be the urban area in, africa) => $x: ($x, "type", city) ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r1.rel: is the first major urban area in, r0.namespace: freebase, r1.arg2: South Africa, r0.arg2: Olympic bidding city, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cape Town) => Cape Town; what city be the urban area in africa ? => $x: ($x, "is a", city) ($x, be the urban area in, africa) => $x: ($x, "is a", city) ($x, be the urban area in, africa) => (r0.arg1: Cape town, r1.rel: is the first major urban area in, r0.namespace: nell, r1.arg2: South Africa, r0.arg2: city, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cape Town) => Cape town; what be the urban area in africa ? => $x: ($x, be the urban area in, africa) => $x: ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r0.namespace: reverb, r0.arg2: South Africa, r0.rel: is the first major urban area in) => Cape Town; what be the urban area in africa ? => $x: ($x, be the urban area in, africa) => $x: ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r0.namespace: reverb, r0.arg2: South Africa, r0.rel: is the first major urban area in) => Cape Town; the urban area in africa ? => $x: ($x, be the urban area in, africa) => $x: ($x, be the urban area in, africa) => (r0.arg1: Cape Town, r0.namespace: reverb, r0.arg2: South Africa, r0.rel: is the first major urban area in) => Cape Town; what be the urban area in south africa ? => $x: ($x, be the urban area in, south africa) => $x: ($x, be the urban area in, south africa) => (r0.arg1: Cape Town, r0.namespace: reverb, r0.arg2: South Africa, r0.rel: is the first major urban area in) => Cape Town; what be the urban area in south africa ? => $x: ($x, be the urban area in, south africa) => $x: ($x, be the urban area in, south africa) => (r0.arg1: Cape Town, r0.namespace: reverb, r0.arg2: South Africa, r0.rel: is the first major urban area in) => Cape Town
What is the second book of law?	exodus	4.0	What is the second book of law? => $x: ($x, is the second book of, law) => $x: ($x, is the second book of, law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus; What is the second book of law? => $x: ($x, is the second book of, law) => $x: ($x, is the second book of, law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus; what be the second book of the law ? => $x: ($x, be the second book of, the law) => $x: ($x, be the second book of, the law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus; what be the second book of the law ? => $x: ($x, be the second book of, the law) => $x: ($x, be the second book of, the law) => (r0.arg1: Exodus, r0.namespace: reverb, r0.arg2: the Law, r0.rel: is the second book of) => Exodus
What was the first year of the 20th century?	more 1999	8.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999; what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: more 1999, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was the a year in) => more 1999
What was the first year of the 20th century?	1919	6.0	What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: openie4, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: openie4, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; What was the first year of the 20th century? => $x: ($x, was the first year of, the 20th century) => $x: ($x, was the first year of, the 20th century) => (r0.arg1: 1919, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; the first year of the 20 th century ? => $x: ($x, be the first year of, the 20 th century) => $x: ($x, be the first year of, the 20 th century) => (r0.arg1: 1919, r0.namespace: openie4, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919; the first year of the 20 th century ? => $x: ($x, be the first year of, the 20 th century) => $x: ($x, be the first year of, the 20 th century) => (r0.arg1: 1919, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is the first year of) => 1919
What was the first year of the 20th century?	1914	6.0	what year do the 20 th century begin ? => $x: ($x, "type", year) (the 20 th century, begin, $x) => $x: ($x, "type", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: began in, r0.namespace: freebase, r1.arg2: 1914, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the 20th century) => 1914; what year do the 20 th century begin ? => $x: ($x, "type", year) (the 20 th century, begin, $x) => $x: ($x, "type", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: actually began in, r0.namespace: freebase, r1.arg2: 1914, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the 20th century) => 1914; what year do the 20 th century begin ? => $x: ($x, "type", year) (the 20 th century, begin, $x) => $x: ($x, "type", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: really began in, r0.namespace: freebase, r1.arg2: 1914, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the 20th century) => 1914; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: began in, r0.namespace: nell, r1.arg2: 1914, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1914; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: actually began in, r0.namespace: nell, r1.arg2: 1914, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1914; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1914, r1.rel: really began in, r0.namespace: nell, r1.arg2: 1914, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1914
What was the first year of the 20th century?	1901	5.0	what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1901, r1.rel: began in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th Century) => 1901; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1901, r1.rel: began with, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1901; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1901, r1.rel: really began in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1901; what year do the 20 th century start ? => $x: ($x, "is a", year) (the 20 th century, start, $x) => $x: ($x, "is a", year) (the 20 th century, start, $x) => (r0.arg1: 1901, r1.rel: starts in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: the 20th century) => 1901; when do the 20 th century start ? => $x: (the 20 th century, start in, $x) => $x: (the 20 th century, start in, $x) => (r0.arg1: the 20th century, r0.namespace: openie4, r0.arg2: 1901, r0.rel: starts in) => 1901
What was the first year of the 20th century?	more 1995	4.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1995, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1995; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1995, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1995; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1995, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1995; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1995, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1995
What was the first year of the 20th century?	baltic sea	4.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the Baltic Sea, r0.rel: have been found in) => the Baltic Sea; when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century ?, r0.namespace: reverb, r0.arg2: the Baltic Sea, r0.rel: have been found in) => the Baltic Sea; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the Baltic Sea, r0.rel: have been found in) => the Baltic Sea; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century ?, r0.namespace: reverb, r0.arg2: the Baltic Sea, r0.rel: have been found in) => the Baltic Sea
What was the first year of the 20th century?	more 1996	4.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1996, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1996; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1996, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1996; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1996, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1996; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1996, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1996
What was the first year of the 20th century?	b-1901	4.0	what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: b-1901, r1.rel: began in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th Century) => b-1901; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: b-1901, r1.rel: began with, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => b-1901; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: b-1901, r1.rel: really began in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => b-1901; what year do the 20 th century start ? => $x: ($x, "is a", year) (the 20 th century, start, $x) => $x: ($x, "is a", year) (the 20 th century, start, $x) => (r0.arg1: b-1901, r1.rel: starts in, r0.namespace: nell, r1.arg2: 1901, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: the 20th century) => b-1901
What was the first year of the 20th century?	more 1997	4.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1997, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1997; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1997, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1997; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1997, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1997; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1997, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1997
What was the first year of the 20th century?	more 1991	4.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1991, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1991; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1991, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1991; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1991, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1991; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1991, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1991
What was the first year of the 20th century?	more 1998	4.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1998, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1998; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1998, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1998; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1998, r0.namespace: openie4, r0.arg2: the 20th century, r0.rel: was a year in) => more 1998; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1998, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1998
What was the first year of the 20th century?	ukraine	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: can be found in) => Ukraine; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: can be found in) => Ukraine
What was the first year of the 20th century?	wikia 1997	2.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: Wikia 1997, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => Wikia 1997; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: Wikia 1997, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => Wikia 1997
What was the first year of the 20th century?	yy	2.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: YY, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: is a year in) => YY; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: YY, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: is a year in) => YY
What was the first year of the 20th century?	more 1958	2.0	what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1958, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1958; what be a year in the 20 th century ? => $x: ($x, be a year in, the 20 th century) => $x: ($x, be a year in, the 20 th century) => (r0.arg1: more 1958, r0.namespace: reverb, r0.arg2: the 20th century, r0.rel: was a year in) => more 1958
What was the first year of the 20th century?	1939	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create in, $x) => $x: (the 20 th century, be create in, $x) => (r0.arg1: The 20th Century cocktail, r0.namespace: reverb, r0.arg2: 1939, r0.rel: was created in) => 1939; when be the 20 th century create ? => $x: (the 20 th century, create in, $x) => $x: (the 20 th century, create in, $x) => (r0.arg1: The 20th Century cocktail, r0.namespace: reverb, r0.arg2: 1939, r0.rel: was created in) => 1939
What was the first year of the 20th century?	poland	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 19th and 20th centuries, r0.namespace: reverb, r0.arg2: Poland, r0.rel: have been found in) => Poland; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 19th and 20th centuries, r0.namespace: reverb, r0.arg2: Poland, r0.rel: have been found in) => Poland
What was the first year of the 20th century?	image	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create on, $x) => $x: (the 20 th century, be create on, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: an image, r0.rel: is based on creating) => an image; when be the 20 th century create ? => $x: (the 20 th century, create on, $x) => $x: (the 20 th century, create on, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: an image, r0.rel: is based on creating) => an image
What was the first year of the 20th century?	21st	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the 21st, r0.rel: can even be found in) => the 21st; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the 21st, r0.rel: can even be found in) => the 21st
What was the first year of the 20th century?	speech	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the early 20th century, r0.namespace: reverb, r0.arg2: the speech, r0.rel: is found in) => the speech; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the early 20th century, r0.namespace: reverb, r0.arg2: the speech, r0.rel: is found in) => the speech
What was the first year of the 20th century?	1932	2.0	what year do the 20 th century begin ? => $x: ($x, "type", year) (the 20 th century, begin, $x) => $x: ($x, "type", year) (the 20 th century, begin, $x) => (r0.arg1: 1932, r1.rel: began in, r0.namespace: freebase, r1.arg2: 1932, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the 20th century) => 1932; what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: 1932, r1.rel: began in, r0.namespace: nell, r1.arg2: 1932, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => 1932
What was the first year of the 20th century?	first	2.0	what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: first, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is arguably the most important year in) => first; what be the year in the 20 th century ? => $x: ($x, be the year in, the 20 th century) => $x: ($x, be the year in, the 20 th century) => (r0.arg1: first, r0.namespace: reverb, r0.arg2: the 20th Century, r0.rel: is arguably the most important year in) => first
What was the first year of the 20th century?	caf?	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create in, $x) => $x: (the 20 th century, be create in, $x) => (r0.arg1: the 20th and 21st Century, r0.namespace: reverb, r0.arg2: a caf?, r0.rel: has been created in) => a caf?; when be the 20 th century create ? => $x: (the 20 th century, create in, $x) => $x: (the 20 th century, create in, $x) => (r0.arg1: the 20th and 21st Century, r0.namespace: reverb, r0.arg2: a caf?, r0.rel: has been created in) => a caf?
What was the first year of the 20th century?	museum	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the early 20th Century, r0.namespace: reverb, r0.arg2: the museum, r0.rel: can be found in) => the museum; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the early 20th Century, r0.namespace: reverb, r0.arg2: the museum, r0.rel: can be found in) => the museum
What was the first year of the 20th century?	fields	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create in, $x) => $x: (the 20 th century, be create in, $x) => (r0.arg1: the 20th century new degrees, r0.namespace: reverb, r0.arg2: the fields, r0.rel: were created in) => the fields; when be the 20 th century create ? => $x: (the 20 th century, create in, $x) => $x: (the 20 th century, create in, $x) => (r0.arg1: the 20th century new degrees, r0.namespace: reverb, r0.arg2: the fields, r0.rel: were created in) => the fields
What was the first year of the 20th century?	chapter 23	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: chapter 23, r0.rel: is nowhere to be found in) => chapter 23; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: chapter 23, r0.rel: is nowhere to be found in) => chapter 23
What was the first year of the 20th century?	60	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: 60, r0.rel: is found in) => 60; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: 60, r0.rel: is found in) => 60
What was the first year of the 20th century?	celluloid	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create on, $x) => $x: (the 20 th century, be create on, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: celluloid, r0.rel: was created on) => celluloid; when be the 20 th century create ? => $x: (the 20 th century, create on, $x) => $x: (the 20 th century, create on, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: celluloid, r0.rel: was created on) => celluloid
What was the first year of the 20th century?	http://en.wikipedia.org/wiki/the%2020th%20century%20fox%20hour	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found on, $x) => $x: (the 20 th century, be found on, $x) => (r0.arg1: The 20th Century Fox Hour, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/The%2020th%20Century%20Fox%20Hour, r0.rel: can be found on Wikipedia at) => http://en.wikipedia.org/wiki/The%2020th%20Century%20Fox%20Hour; when be the 20 th century found ? => $x: (the 20 th century, found on, $x) => $x: (the 20 th century, found on, $x) => (r0.arg1: The 20th Century Fox Hour, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/The%2020th%20Century%20Fox%20Hour, r0.rel: can be found on Wikipedia at) => http://en.wikipedia.org/wiki/The%2020th%20Century%20Fox%20Hour
What was the first year of the 20th century?	response	2.0	when be the 20 th century create ? => $x: (the 20 th century, be create in, $x) => $x: (the 20 th century, be create in, $x) => (r0.arg1: the 20th century facilities, r0.namespace: reverb, r0.arg2: response, r0.rel: were created in) => response; when be the 20 th century create ? => $x: (the 20 th century, create in, $x) => $x: (the 20 th century, create in, $x) => (r0.arg1: the 20th century facilities, r0.namespace: reverb, r0.arg2: response, r0.rel: were created in) => response
What was the first year of the 20th century?	union hymnal	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found in, $x) => $x: (the 20 th century, be found in, $x) => (r0.arg1: the 19th and 20th centuries, r0.namespace: reverb, r0.arg2: the Union Hymnal, r0.rel: were found in) => the Union Hymnal; when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 19th and 20th centuries, r0.namespace: reverb, r0.arg2: the Union Hymnal, r0.rel: were found in) => the Union Hymnal
What was the first year of the 20th century?	november 9 , 1983	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found on, $x) => $x: (the 20 th century, be found on, $x) => (r0.arg1: the 20 th century ?, r0.namespace: reverb, r0.arg2: November 9 , 1983, r0.rel: was found on) => November 9 , 1983; when be the 20 th century found ? => $x: (the 20 th century, found on, $x) => $x: (the 20 th century, found on, $x) => (r0.arg1: the 20 th century ?, r0.namespace: reverb, r0.arg2: November 9 , 1983, r0.rel: was found on) => November 9 , 1983
What was the first year of the 20th century?	http://en.wikipedia.org/wiki/paris%20in%20the%20twentieth%20century	2.0	when be the 20 th century found ? => $x: (the 20 th century, be found on, $x) => $x: (the 20 th century, be found on, $x) => (r0.arg1: paris in the 20th century, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Paris%20in%20the%20Twentieth%20Century, r0.rel: can be found on Wikipedia at) => http://en.wikipedia.org/wiki/Paris%20in%20the%20Twentieth%20Century; when be the 20 th century found ? => $x: (the 20 th century, found on, $x) => $x: (the 20 th century, found on, $x) => (r0.arg1: paris in the 20th century, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Paris%20in%20the%20Twentieth%20Century, r0.rel: can be found on Wikipedia at) => http://en.wikipedia.org/wiki/Paris%20in%20the%20Twentieth%20Century
What was the first year of the 20th century?	bible reasons	1.0	when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century Christians, r0.namespace: reverb, r0.arg2: the Bible reasons, r0.rel: found in) => the Bible reasons
What was the first year of the 20th century?	1700	1.0	what year be the 20 th century ? => $x: ($x, "is a", year) ($x, be, the 20 th century) => $x: ($x, "is a", year) ($x, be, the 20 th century) => (r0.arg1: 1700, r1.rel: are from, r0.namespace: nell, r1.arg2: the 20th century, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1700) => 1700
What was the first year of the 20th century?	main street	1.0	when do the 20 th century start ? => $x: (the 20 th century, start on, $x) => $x: (the 20 th century, start on, $x) => (r0.arg1: the 20th century ?, r0.namespace: reverb, r0.arg2: Main Street, r0.rel: got his start on) => Main Street
What was the first year of the 20th century?	kaua'i hawai'i	1.0	when be the 20 th century found ? => $x: (the 20 th century, found on, $x) => $x: (the 20 th century, found on, $x) => (r0.arg1: the late 20th Century, r0.namespace: reverb, r0.arg2: Kaua'i and Hawai'i, r0.rel: only found on) => Kaua'i and Hawai'i
What was the first year of the 20th century?	c.1918	1.0	what year do the 20 th century begin ? => $x: ($x, "is a", year) (the 20 th century, begin, $x) => $x: ($x, "is a", year) (the 20 th century, begin, $x) => (r0.arg1: C.1918, r1.rel: only begins after, r0.namespace: nell, r1.arg2: 1918, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: the 20th century) => C.1918
What was the first year of the 20th century?	san francisco	1.0	what year be the 20 th century ? => $x: ($x, "is an example of", year) ($x, be, the 20 th century) => $x: ($x, "is an example of", year) ($x, be, the 20 th century) => (r0.arg1: San Francisco, r1.rel: was expanding rapidly in, r0.namespace: reverb, r1.arg2: the early 20th century, r0.arg2: the 30-year tradition, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: San Francisco) => San Francisco
What was the first year of the 20th century?	earnest	1.0	when do the 20 th century start ? => $x: (the 20 th century, start in, $x) => $x: (the 20 th century, start in, $x) => (r0.arg1: The barbarous 20th Century, r0.namespace: reverb, r0.arg2: earnest, r0.rel: had started in) => earnest
What was the first year of the 20th century?	tax evasion	1.0	when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th Century bearer bonds, r0.namespace: reverb, r0.arg2: tax evasion, r0.rel: found great use in) => tax evasion
What was the first year of the 20th century?	c.1700	1.0	what year be the 20 th century ? => $x: ($x, "is a", year) ($x, be, the 20 th century) => $x: ($x, "is a", year) ($x, be, the 20 th century) => (r0.arg1: c.1700, r1.rel: are from, r0.namespace: nell, r1.arg2: the 20th century, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1700) => c.1700
What was the first year of the 20th century?	realism	1.0	when do the 20 th century start ? => $x: (the 20 th century, start in, $x) => $x: (the 20 th century, start in, $x) => (r0.arg1: the great 20th century artists, r0.namespace: reverb, r0.arg2: realism, r0.rel: started off in) => realism
What was the first year of the 20th century?	c.1870	1.0	what year be the 20 th century ? => $x: ($x, "is a", year) ($x, be, the 20 th century) => $x: ($x, "is a", year) ($x, be, the 20 th century) => (r0.arg1: c.1870, r1.rel: are being expanded into, r0.namespace: nell, r1.arg2: the 20th century, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1870) => c.1870
What was the first year of the 20th century?	first half	1.0	when be the 20 th century create ? => $x: (the 20 th century, create in, $x) => $x: (the 20 th century, create in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the first half, r0.rel: will create further changes in) => the first half
What was the first year of the 20th century?	anthology	1.0	when be the 20 th century found ? => $x: (the 20 th century, found in, $x) => $x: (the 20 th century, found in, $x) => (r0.arg1: the 20th century American poetry, r0.namespace: reverb, r0.arg2: the anthology, r0.rel: found in) => the anthology
What was the first year of the 20th century?	newest timer	1.0	when do the 20 th century start ? => $x: (the 20 th century, start in, $x) => $x: (the 20 th century, start in, $x) => (r0.arg1: the 20th century, r0.namespace: reverb, r0.arg2: the newest timer, r0.rel: started to come in) => the newest timer
What was the first year of the 20th century?	1980	1.0	what year be the 20 th century ? => $x: ($x, "type", year) ($x, be, the 20 th century) => $x: ($x, "type", year) ($x, be, the 20 th century) => (r0.arg1: 1980, r1.rel: was, r0.namespace: freebase, r1.arg2: the 20th century, r0.arg2: Years, r0.rel: Type, r1.namespace: reverb, r1.arg1: 1980) => 1980
What was the first year of the 20th century?	c.1980	1.0	what year be the 20 th century ? => $x: ($x, "is a", year) ($x, be, the 20 th century) => $x: ($x, "is a", year) ($x, be, the 20 th century) => (r0.arg1: c.1980, r1.rel: was, r0.namespace: nell, r1.arg2: the 20th century, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1980) => c.1980
What was the first year of the 20th century?	?1996	1.0	what year do the 20 th century start ? => $x: ($x, "is a", year) (the 20 th century, start, $x) => $x: ($x, "is a", year) (the 20 th century, start, $x) => (r0.arg1: ?1996, r1.rel: Active as Musical Artist (start), r0.namespace: nell, r1.arg2: 1996, r0.arg2: year, r0.rel: is a, r1.namespace: freebase, r1.arg1: Alchemy of the 20th Century) => ?1996
Where did st peter die?	rome	8.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: dies in) => Rome; Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: openie4, r0.arg2: Rome, r0.rel: died in) => Rome; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: dies in) => Rome; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: openie4, r0.arg2: Rome, r0.rel: died in) => Rome; what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: did n?t go to) => Rome; what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: did build the catholic church at) => Rome; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome, r0.rel: dies in) => Rome; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: openie4, r0.arg2: Rome, r0.rel: died in) => Rome
Where did st peter die?	1072	6.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damien, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damian, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damien, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damian, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damien, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Damian, r0.namespace: reverb, r0.arg2: 1072, r0.rel: died in) => 1072
Where did st peter die?	car crash	3.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter?s Friendly Skies Three friends, r0.namespace: reverb, r0.arg2: a car crash, r0.rel: die in) => a car crash; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter?s Friendly Skies Three friends, r0.namespace: reverb, r0.arg2: a car crash, r0.rel: die in) => a car crash; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter?s Friendly Skies Three friends, r0.namespace: reverb, r0.arg2: a car crash, r0.rel: die in) => a car crash
Where did st peter die?	rome?s capital city	3.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome?s capital city, r0.rel: had died in) => Rome?s capital city; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome?s capital city, r0.rel: had died in) => Rome?s capital city; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: Rome?s capital city, r0.rel: had died in) => Rome?s capital city
Where did st peter die?	1654	3.0	Where did st peter die? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Claver, r0.namespace: reverb, r0.arg2: 1654, r0.rel: died in) => 1654; when do st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Claver, r0.namespace: reverb, r0.arg2: 1654, r0.rel: died in) => 1654; where be st peter die ? => $x: (st peter, die in, $x) => $x: (st peter, die in, $x) => (r0.arg1: St . Peter Claver, r0.namespace: reverb, r0.arg2: 1654, r0.rel: died in) => 1654
Where did st peter die?	14 sep 1911	1.0	when do st peter die ? => $x: (st peter, die on, $x) => $x: (st peter, die on, $x) => (r0.arg1: St . Peters, r0.namespace: reverb, r0.arg2: 14 Sep 1911, r0.rel: died on) => 14 Sep 1911
Where did st peter die?	december 2 , 450	1.0	when do st peter die ? => $x: (st peter, die on, $x) => $x: (st peter, die on, $x) => (r0.arg1: St . Peter Chrysologus, r0.namespace: reverb, r0.arg2: December 2 , 450, r0.rel: died on) => December 2 , 450
Where did st peter die?	royals	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: all St . Peter Chanel, r0.namespace: reverb, r0.arg2: the Royals, r0.rel: can do is look up at) => the Royals
Where did st peter die?	homes	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peters, r0.namespace: reverb, r0.arg2: homes, r0.rel: did shoddy work on) => homes
Where did st peter die?	roaring trade	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St Peter?s Autumn Fair, r0.namespace: reverb, r0.arg2: a roaring trade, r0.rel: did) => a roaring trade
Where did st peter die?	food preferences	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter MN, r0.namespace: reverb, r0.arg2: food preferences, r0.rel: did a study on) => food preferences
Where did st peter die?	few stages	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St Peter?s, r0.namespace: reverb, r0.arg2: a few stages, r0.rel: was done in) => a few stages
Where did st peter die?	so	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter, r0.namespace: openie4, r0.arg2: so, r0.rel: did) => so
Where did st peter die?	god	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St.Peter, r0.namespace: reverb, r0.arg2: God, r0.rel: Does) => God
Where did st peter die?	collaboration	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: was done in) => collaboration
Where did st peter die?	christmas	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St Peter, r0.namespace: reverb, r0.arg2: Christmas, r0.rel: got to do with) => Christmas
Where did st peter die?	last year?s maac tournament	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter?s, r0.namespace: reverb, r0.arg2: last year?s MAAC tournament, r0.rel: did in) => last year?s MAAC tournament
Where did st peter die?	saturday	1.0	when do st peter die ? => $x: (st peter, die on, $x) => $x: (st peter, die on, $x) => (r0.arg1: St . Peters, r0.namespace: reverb, r0.arg2: Saturday, r0.rel: died on) => Saturday
Where did st peter die?	fabbrica	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St.Peter?s, r0.namespace: reverb, r0.arg2: the Fabbrica, r0.rel: had little to do with) => the Fabbrica
Where did st peter die?	friday	1.0	when do st peter die ? => $x: (st peter, die on, $x) => $x: (st peter, die on, $x) => (r0.arg1: St . Peter Parish, r0.namespace: reverb, r0.arg2: Friday, r0.rel: died on) => Friday
Where did st peter die?	valley	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St . Peter / San Pietro, r0.namespace: reverb, r0.arg2: the valley, r0.rel: does) => the valley
Where did st peter die?	bishops	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: clear St . Peter, r0.namespace: reverb, r0.arg2: the Bishops, r0.rel: did have successors in) => the Bishops
Where did st peter die?	active service	1.0	when do st peter die ? => $x: (st peter, die on, $x) => $x: (st peter, die on, $x) => (r0.arg1: Peter St Clair-Erskine, r0.namespace: reverb, r0.arg2: active service, r0.rel: died on) => active service
Where did st peter die?	acts 2	1.0	what do st peter do ? => $x: (st peter, do, $x) => $x: (st peter, do, $x) => (r0.arg1: St Peter, r0.namespace: reverb, r0.arg2: Acts 2, r0.rel: does in) => Acts 2
What is Energy transformation examples?	spring	1.0	what be an example of of energy transformation ? => $x: ($x, be an example of of, energy transformation) => $x: ($x, be an example of of, energy transformation) => (r0.arg1: a spring, r0.namespace: reverb, r0.arg2: an energy transformation, r0.rel: is an example of) => a spring
Who make decisions in a Market Economy?	china	7.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: was) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a non market economy, r0.rel: is) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a socialist market economy, r0.rel: is) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: less a market economy, r0.rel: is much) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a market economy, r0.rel: were labeled) => China; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: a market economy, r0.rel: to be) => China
Who make decisions in a Market Economy?	united states	5.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => The United States; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: a market economy, r0.rel: is) => The United States; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => The United States; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: is) => The United States; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is still) => the United States
Who make decisions in a Market Economy?	russia	3.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Russia, r0.namespace: openie4, r0.arg2: a market economy, r0.rel: is) => Russia; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Russia, r0.namespace: reverb, r0.arg2: a capitalist market economy, r0.rel: is) => Russia; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Russia, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => Russia
Who make decisions in a Market Economy?	hungary	3.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Hungary, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Hungary; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Hungary, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => Hungary; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Hungary, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Hungary
Who make decisions in a Market Economy?	turkey	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Turkey, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Turkey; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Turkey, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Turkey
Who make decisions in a Market Economy?	america	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => America; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is going from being) => America
Who make decisions in a Market Economy?	kenya	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Kenya, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: is) => Kenya; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Kenya, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Kenya
Who make decisions in a Market Economy?	slovakia	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Slovakia, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Slovakia; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Slovakia, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Slovakia
Who make decisions in a Market Economy?	mexico	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Mexico; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Mexico, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: is) => Mexico
Who make decisions in a Market Economy?	cyprus	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Cyprus, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Cyprus; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Cyprus, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Cyprus
Who make decisions in a Market Economy?	system	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: a patriarchic , market economy, r0.rel: is) => the system; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Such a system, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is called) => Such a system
Who make decisions in a Market Economy?	european guy america	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: European guy America, r0.namespace: openie4, r0.arg2: a market economy, r0.rel: is) => European guy America; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: European guy America, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => European guy America
Who make decisions in a Market Economy?	economy	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: no economy, r0.namespace: reverb, r0.arg2: a pure market economy, r0.rel: is) => no economy; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the economy, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => the economy
Who make decisions in a Market Economy?	u.s.	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The U.S., r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => The U.S.; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the U.S., r0.namespace: reverb, r0.arg2: a marketing economy, r0.rel: is) => the U.S.
Who make decisions in a Market Economy?	bulgaria	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Bulgaria, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Bulgaria; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Bulgaria, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is close to being) => Bulgaria
Who make decisions in a Market Economy?	india	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: was) => India; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: was) => India
Who make decisions in a Market Economy?	bulgarian economy	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The Bulgarian economy, r0.namespace: openie4, r0.arg2: a free market economy, r0.rel: is) => The Bulgarian economy; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Bulgarian economy, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Bulgarian economy
Who make decisions in a Market Economy?	malta	2.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Malta, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Malta; what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Malta, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Malta
Who make decisions in a Market Economy?	?china	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: ?China, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => ?China
Who make decisions in a Market Economy?	china ?s	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: China ?s, r0.namespace: reverb, r0.arg2: a ?socialist market economy, r0.rel: was) => China ?s
Who make decisions in a Market Economy?	?our problem	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: ?Our problem, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => ?Our problem
Who make decisions in a Market Economy?	uae	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: UAE, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => UAE
Who make decisions in a Market Economy?	romania	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Romania, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Romania
Who make decisions in a Market Economy?	iceland	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Iceland, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Iceland
Who make decisions in a Market Economy?	thailand	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Thailand, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Thailand
Who make decisions in a Market Economy?	eu cannot	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the EU Cannot, r0.namespace: reverb, r0.arg2: a Social Market Economy, r0.rel: be) => the EU Cannot
Who make decisions in a Market Economy?	czech republic	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: The Czech Republic, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => The Czech Republic
Who make decisions in a Market Economy?	economic criteria croatia	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Economic criteria Croatia, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Economic criteria Croatia
Who make decisions in a Market Economy?	very typical scenario	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: a very typical scenario, r0.namespace: reverb, r0.arg2: a down market economy, r0.rel: is) => a very typical scenario
Who make decisions in a Market Economy?	destination	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the destination, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => the destination
Who make decisions in a Market Economy?	today vietnam	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Today Vietnam, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is almost) => Today Vietnam
Who make decisions in a Market Economy?	lithuania	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Lithuania, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Lithuania
Who make decisions in a Market Economy?	producer	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the producer, r0.namespace: reverb, r0.arg2: a market economy price, r0.rel: was) => the producer
Who make decisions in a Market Economy?	country	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is as) => the country
Who make decisions in a Market Economy?	internet	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: the internet, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is like) => the internet
Who make decisions in a Market Economy?	canada	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is) => Canada
Who make decisions in a Market Economy?	estonia	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Estonia, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Estonia
Who make decisions in a Market Economy?	croatia	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Croatia, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Croatia
Who make decisions in a Market Economy?	losers	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: losers, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is supposed to be) => losers
Who make decisions in a Market Economy?	poland	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Poland, r0.namespace: openie4, r0.arg2: a functioning market economy, r0.rel: is) => Poland
Who make decisions in a Market Economy?	economy mexico	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: ECONOMY Mexico, r0.namespace: reverb, r0.arg2: a free market economy, r0.rel: is considered) => ECONOMY Mexico
Who make decisions in a Market Economy?	michael watts	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Michael Watts, r0.namespace: reverb, r0.arg2: a Market Economy, r0.rel: is) => Michael Watts
Who make decisions in a Market Economy?	new zealand	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: New Zealand, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => New Zealand
Who make decisions in a Market Economy?	capitalism	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Capitalism, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => Capitalism
Who make decisions in a Market Economy?	odense	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Odense, r0.namespace: reverb, r0.arg2: a black market economy, r0.rel: is) => Odense
Who make decisions in a Market Economy?	repayment	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: no repayment, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is expected to be) => no repayment
Who make decisions in a Market Economy?	capitalist economy	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: A Capitalist economy, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => A Capitalist economy
Who make decisions in a Market Economy?	economic criteria turkey	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Economic criteria Turkey, r0.namespace: reverb, r0.arg2: a functioning market economy, r0.rel: is) => Economic criteria Turkey
Who make decisions in a Market Economy?	malaysia	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Malaysia, r0.namespace: reverb, r0.arg2: a market economy, r0.rel: is) => Malaysia
Who make decisions in a Market Economy?	cuba	1.0	what be a market economy ? => $x: ($x, be, a market economy) => $x: ($x, be, a market economy) => (r0.arg1: Cuba, r0.namespace: reverb, r0.arg2: a Free Market Economy, r0.rel: Are) => Cuba
Was Martin Luther King born in a hospital?	memphis	3.0	what hospital do martin luther king go to ? => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => (r0.arg1: memphis, r1.rel: went to, r0.namespace: nell, r1.arg2: Memphis, r0.arg2: hospital, r0.rel: is a, r1.namespace: openie4, r1.arg1: Martin Luther King) => memphis; what hospital do martin luther king go to ? => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => (r0.arg1: memphis, r1.rel: went to, r0.namespace: nell, r1.arg2: Memphis, r0.arg2: hospital, r0.rel: is a, r1.namespace: reverb, r1.arg1: Martin Luther King) => memphis; what hospital do martin luther king go to ? => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => $x: ($x, "is a", hospital) (martin luther king, go to, $x) => (r0.arg1: memphis, r1.rel: went to, r0.namespace: nell, r1.arg2: Memphis, r0.arg2: hospital, r0.rel: is a, r1.namespace: reverb, r1.arg1: Dr. Martin Luther King Jr.) => memphis
What is the common plants in grassland?	tree	19.0	what type of plant do grassland have ? => $x: ($x, "type", plant) (grassland, have, $x) => $x: ($x, "type", plant) (grassland, have, $x) => (r0.arg1: Tree, r1.rel: generally have, r0.namespace: freebase, r1.arg2: trees, r0.arg2: Plant Form, r0.rel: Type, r1.namespace: reverb, r1.arg1: grasslands) => Tree; what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: tree, r1.rel: generally have, r0.namespace: nell, r1.arg2: trees, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grasslands) => tree; what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: each tree, r1.rel: generally have, r0.namespace: nell, r1.arg2: trees, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grasslands) => each tree; what type of plant do grassland have ? => $x: ($x, "is an example of", plant) (grassland, have, $x) => $x: ($x, "is an example of", plant) (grassland, have, $x) => (r0.arg1: tree, r1.rel: generally have, r0.namespace: openie4, r1.arg2: trees, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: grasslands) => tree; what type of plant do grassland have ? => $x: ($x, "is an example of", plant) (grassland, have, $x) => $x: ($x, "is an example of", plant) (grassland, have, $x) => (r0.arg1: a tree, r1.rel: generally have, r0.namespace: reverb, r1.arg2: trees, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: grasslands) => a tree; what type of plant do grassland have ? => $x: ($x, "is an example of", plant) (grassland, have, $x) => $x: ($x, "is an example of", plant) (grassland, have, $x) => (r0.arg1: tree, r1.rel: has only a short kind of, r0.namespace: openie4, r1.arg2: tree, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The grassland) => tree; what type of plant do grassland have ? => $x: ($x, "is an example of", plant) (grassland, have, $x) => $x: ($x, "is an example of", plant) (grassland, have, $x) => (r0.arg1: a tree, r1.rel: has only a short kind of, r0.namespace: reverb, r1.arg2: tree, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The grassland) => a tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: are shown in, r0.namespace: openie4, r1.arg2: the Buena Vista Grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: are shown in, r0.namespace: reverb, r1.arg2: the Buena Vista Grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => a tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: are scattered in, r0.namespace: openie4, r1.arg2: pasture/grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: are scattered in, r0.namespace: reverb, r1.arg2: pasture/grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => a tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: is found in, r0.namespace: openie4, r1.arg2: woodlands and grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The tree) => tree; what kind of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: is found in, r0.namespace: reverb, r1.arg2: woodlands and grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The tree) => a tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: are shown in, r0.namespace: openie4, r1.arg2: the Buena Vista Grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: are shown in, r0.namespace: reverb, r1.arg2: the Buena Vista Grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => a tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: are scattered in, r0.namespace: openie4, r1.arg2: pasture/grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: are scattered in, r0.namespace: reverb, r1.arg2: pasture/grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: trees) => a tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: tree, r1.rel: is found in, r0.namespace: openie4, r1.arg2: woodlands and grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The tree) => tree; what type of plant be in grassland ? => $x: ($x, "is an example of", plant) ($x, be in, grassland) => $x: ($x, "is an example of", plant) ($x, be in, grassland) => (r0.arg1: a tree, r1.rel: is found in, r0.namespace: reverb, r1.arg2: woodlands and grasslands, r0.arg2: a plant, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The tree) => a tree
What is the common plants in grassland?	plant	9.0	what type of plant do grassland have ? => $x: ($x, "type", plant) (grassland, have, $x) => $x: ($x, "type", plant) (grassland, have, $x) => (r0.arg1: Plant, r1.rel: have successional sequences of, r0.namespace: freebase, r1.arg2: plants, r0.arg2: Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: Grasslands) => Plant; what plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: Plants) => Plant; what plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: openie4, r1.arg1: these plants) => Plant; what kind of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: Plants) => Plant; what kind of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: openie4, r1.arg1: these plants) => Plant; what kind of plant live in grassland ? => $x: ($x, "type", plant) ($x, live in, grassland) => $x: ($x, "type", plant) ($x, live in, grassland) => (r0.arg1: Plant, r1.rel: lived in, r0.namespace: freebase, r1.arg2: the Grassland, r0.arg2: Plant, r0.rel: Type, r1.namespace: openie4, r1.arg1: Plants) => Plant; what plant live in grassland ? => $x: ($x, "type", plant) ($x, live in, grassland) => $x: ($x, "type", plant) ($x, live in, grassland) => (r0.arg1: Plant, r1.rel: lived in, r0.namespace: freebase, r1.arg2: the Grassland, r0.arg2: Plant, r0.rel: Type, r1.namespace: openie4, r1.arg1: Plants) => Plant; what type of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: Plants) => Plant; what type of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Plant, r1.rel: grow in, r0.namespace: freebase, r1.arg2: grasslands, r0.arg2: Plant, r0.rel: Type, r1.namespace: openie4, r1.arg1: these plants) => Plant
What is the common plants in grassland?	plants	9.0	what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: PLANTs, r1.rel: have successional sequences of, r0.namespace: nell, r1.arg2: plants, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Grasslands) => PLANTs; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Plants) => PLANTs; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: these plants) => PLANTs; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Plants) => PLANTs; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: these plants) => PLANTs; what kind of plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: PLANTs, r1.rel: lived in, r0.namespace: nell, r1.arg2: the Grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: Plants) => PLANTs; what plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: PLANTs, r1.rel: lived in, r0.namespace: nell, r1.arg2: the Grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: Plants) => PLANTs; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Plants) => PLANTs; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: PLANTs, r1.rel: grow in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: these plants) => PLANTs
What is the common plants in grassland?	flower	8.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWER; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWER; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWER; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWER; what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: FLOWER, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWER; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: FLOWER, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWER; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWER; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWER, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWER
What is the common plants in grassland?	flowers	8.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWERS; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWERS; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWERS; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWERS; what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: FLOWERS, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWERS; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: FLOWERS, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWERS; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => FLOWERS; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: FLOWERS, r1.rel: grows abundantly in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: flower) => FLOWERS
What is the common plants in grassland?	wild flower	6.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wild flower; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wild flower; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wild flower; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wild flower; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wild flower; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild flower, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wild flower
What is the common plants in grassland?	wild flowers	6.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => Wild Flowers; what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => Wild Flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => Wild Flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => Wild Flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => Wild Flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Wild Flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => Wild Flowers
What is the common plants in grassland?	oak_species	6.0	what kind of plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: oak_species, r1.rel: live in, r0.namespace: nell, r1.arg2: open grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: Species) => oak_species; what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: oak_species, r1.rel: is found in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: The species) => oak_species; what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: oak_species, r1.rel: was observed in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: species) => oak_species; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: oak_species, r1.rel: is found in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: The species) => oak_species; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: oak_species, r1.rel: was observed in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: species) => oak_species; what plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: oak_species, r1.rel: live in, r0.namespace: nell, r1.arg2: open grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: Species) => oak_species
What is the common plants in grassland?	? grass	5.0	what plant grow in grassland ? => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => (r0.arg1: ? grass, r1.rel: grows best in, r0.namespace: reverb, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: grass) => ? grass; what kind of plant grow in grassland ? => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => (r0.arg1: ? grass, r1.rel: grows best in, r0.namespace: reverb, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: grass) => ? grass; what kind of plant be in grassland ? => $x: ($x, "is a kind of", plant) ($x, be in, grassland) => $x: ($x, "is a kind of", plant) ($x, be in, grassland) => (r0.arg1: ? grass, r1.rel: is illegal in, r0.namespace: reverb, r1.arg2: the Grasslands, r0.arg2: plant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Grass) => ? grass; what type of plant be in grassland ? => $x: ($x, "is a kind of", plant) ($x, be in, grassland) => $x: ($x, "is a kind of", plant) ($x, be in, grassland) => (r0.arg1: ? grass, r1.rel: is illegal in, r0.namespace: reverb, r1.arg2: the Grasslands, r0.arg2: plant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Grass) => ? grass; what type of plant grow in grassland ? => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => $x: ($x, "is a kind of", plant) ($x, grow in, grassland) => (r0.arg1: ? grass, r1.rel: grows best in, r0.namespace: reverb, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: grass) => ? grass
What is the common plants in grassland?	large leaf trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large leaf trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large leaf trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large leaf trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large leaf trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large leaf trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large leaf trees
What is the common plants in grassland?	grasses	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: grasses, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => grasses; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: grasses, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => grasses; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: grasses, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => grasses
What is the common plants in grassland?	3 flowers	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 3 flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 3 flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 3 flowers
What is the common plants in grassland?	large trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Large Trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => Large Trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Large Trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => Large Trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Large Trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => Large Trees
What is the common plants in grassland?	large oak trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large oak trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large oak trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large oak trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large oak trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large oak trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large oak trees
What is the common plants in grassland?	large shade trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large shade trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large shade trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large shade trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large shade trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large shade trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large shade trees
What is the common plants in grassland?	large pine trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large pine trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large pine trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large pine trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large pine trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large pine trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large pine trees
What is the common plants in grassland?	25 flowers	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 25 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 25 flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 25 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 25 flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 25 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 25 flowers
What is the common plants in grassland?	zinnias	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnias, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnias; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnias, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnias; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnias, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnias
What is the common plants in grassland?	wild plants	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild plants, r1.rel: grow in, r0.namespace: nell, r1.arg2: woods , grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wild plants) => wild plants; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild plants, r1.rel: grow in, r0.namespace: nell, r1.arg2: woods , grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wild plants) => wild plants; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wild plants, r1.rel: grow in, r0.namespace: nell, r1.arg2: woods , grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Wild plants) => wild plants
What is the common plants in grassland?	60 flowers	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 60 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 60 flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 60 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 60 flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 60 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 60 flowers
What is the common plants in grassland?	2-grass	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 2-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 2-grass; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 2-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 2-grass; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 2-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 2-grass
What is the common plants in grassland?	host plants	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Host Plants, r1.rel: grow primarily in, r0.namespace: nell, r1.arg2: grasslands on serpentine soils, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: host plants) => Host Plants; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Host Plants, r1.rel: grow primarily in, r0.namespace: nell, r1.arg2: grasslands on serpentine soils, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: host plants) => Host Plants; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: Host Plants, r1.rel: grow primarily in, r0.namespace: nell, r1.arg2: grasslands on serpentine soils, r0.arg2: plant, r0.rel: is a, r1.namespace: openie4, r1.arg1: host plants) => Host Plants
What is the common plants in grassland?	3 grass	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 3 grass; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 3 grass; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 3 grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 3 grass
What is the common plants in grassland?	grass	3.0	what plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Grass, r1.rel: grows best in, r0.namespace: freebase, r1.arg2: a particular grassland environment, r0.arg2: Plant Form, r0.rel: Type, r1.namespace: reverb, r1.arg1: grass) => Grass; what kind of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Grass, r1.rel: grows best in, r0.namespace: freebase, r1.arg2: a particular grassland environment, r0.arg2: Plant Form, r0.rel: Type, r1.namespace: reverb, r1.arg1: grass) => Grass; what type of plant grow in grassland ? => $x: ($x, "type", plant) ($x, grow in, grassland) => $x: ($x, "type", plant) ($x, grow in, grassland) => (r0.arg1: Grass, r1.rel: grows best in, r0.namespace: freebase, r1.arg2: a particular grassland environment, r0.arg2: Plant Form, r0.rel: Type, r1.namespace: reverb, r1.arg1: grass) => Grass
What is the common plants in grassland?	large tree	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large tree, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large tree; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large tree, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large tree; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large tree, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large tree
What is the common plants in grassland?	wide flower	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wide flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wide flower; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wide flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wide flower; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wide flower, r1.rel: can be found growing in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: This wildflower) => wide flower
What is the common plants in grassland?	large cat trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large cat trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large cat trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large cat trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large cat trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large cat trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large cat trees
What is the common plants in grassland?	large palm trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large palm trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large palm trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large palm trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large palm trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large palm trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large palm trees
What is the common plants in grassland?	wall flowers	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wall flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wall flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wall flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wall flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: wall flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => wall flowers
What is the common plants in grassland?	large banzai trees	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large banzai trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large banzai trees; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large banzai trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large banzai trees; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: large banzai trees, r1.rel: grows terrestrially in, r0.namespace: nell, r1.arg2: rocky grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: large trees) => large banzai trees
What is the common plants in grassland?	field flowers	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: field flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => field flowers; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: field flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => field flowers; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: field flowers, r1.rel: grow in, r0.namespace: nell, r1.arg2: its grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: wild flowers) => field flowers
What is the common plants in grassland?	1-grass	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 1-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 1-grass; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 1-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 1-grass; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: 1-grass, r1.rel: grows best in, r0.namespace: nell, r1.arg2: a particular grassland environment, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grass) => 1-grass
What is the common plants in grassland?	zinnia	3.0	what plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnia, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnia; what kind of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnia, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnia; what type of plant grow in grassland ? => $x: ($x, "is a", plant) ($x, grow in, grassland) => $x: ($x, "is a", plant) ($x, grow in, grassland) => (r0.arg1: zinnia, r1.rel: grows in, r0.namespace: nell, r1.arg2: the grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: Zinnia) => zinnia
What is the common plants in grassland?	individual plants	2.0	what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: individual plants, r1.rel: have been identified in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: individual plants) => individual plants; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: individual plants, r1.rel: have been identified in, r0.namespace: nell, r1.arg2: grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: individual plants) => individual plants
What is the common plants in grassland?	ray flowers	2.0	what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: ray flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => ray flowers; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: ray flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => ray flowers
What is the common plants in grassland?	mountain mahogany	2.0	what kind of plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: mountain mahogany, r1.rel: live in, r0.namespace: nell, r1.arg2: steep , open grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: mountain mahogany) => mountain mahogany; what plant live in grassland ? => $x: ($x, "is a", plant) ($x, live in, grassland) => $x: ($x, "is a", plant) ($x, live in, grassland) => (r0.arg1: mountain mahogany, r1.rel: live in, r0.namespace: nell, r1.arg2: steep , open grasslands, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: mountain mahogany) => mountain mahogany
What is the common plants in grassland?	aza flowers	2.0	what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: Aza Flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => Aza Flowers; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: Aza Flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => Aza Flowers
What is the common plants in grassland?	7 flowers	2.0	what kind of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: 7 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 7 flowers; what type of plant be in grassland ? => $x: ($x, "is a", plant) ($x, be in, grassland) => $x: ($x, "is a", plant) ($x, be in, grassland) => (r0.arg1: 7 flowers, r1.rel: is an agricultural product grown in, r0.namespace: nell, r1.arg2: grassland, r0.arg2: plant, r0.rel: is a, r1.namespace: nell, r1.arg1: FLOWERS) => 7 flowers
What is the common plants in grassland?	trees	1.0	what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: TREES, r1.rel: generally have, r0.namespace: nell, r1.arg2: trees, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grasslands) => TREES
What is the common plants in grassland?	trees shrubs	1.0	what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: trees and shrubs, r1.rel: had been invaded by, r0.namespace: nell, r1.arg2: trees and shrubs, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grasslands) => trees and shrubs
What is the common plants in grassland?	tree?s	1.0	what type of plant do grassland have ? => $x: ($x, "is a", plant) (grassland, have, $x) => $x: ($x, "is a", plant) (grassland, have, $x) => (r0.arg1: tree?s, r1.rel: generally have, r0.namespace: nell, r1.arg2: trees, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: grasslands) => tree?s
What are the classes for the indian caste system?	example	1.0	what be the indian caste system ? => $x: ($x, be, the indian caste system) => $x: ($x, be, the indian caste system) => (r0.arg1: An example, r0.namespace: reverb, r0.arg2: the Indian caste system, r0.rel: is) => An example
What are the classes for the indian caste system?	key points	1.0	what be the indian caste system ? => $x: ($x, be, the indian caste system) => $x: ($x, be, the indian caste system) => (r0.arg1: the key points, r0.namespace: reverb, r0.arg2: the Indian caste system, r0.rel: Was) => the key points
What are the classes for the indian caste system?	illustration	1.0	what be the indian caste system ? => $x: ($x, be, the indian caste system) => $x: ($x, be, the indian caste system) => (r0.arg1: An illustration, r0.namespace: reverb, r0.arg2: the Indian caste system, r0.rel: is) => An illustration
How much do you get pay in soccer?	any idea	1.0	salary of soccer player ? => $x: ($x, be salary of, soccer player) => $x: ($x, be salary of, soccer player) => (r0.arg1: any idea, r0.namespace: reverb, r0.arg2: a soccer player, r0.rel: is the average salary of) => any idea
Is the human body matter?	issued	1.0	what state be the human body ? => $x: ($x, "is a", state) ($x, be, the human body) => $x: ($x, "is a", state) ($x, be, the human body) => (r0.arg1: Issued, r1.rel: is the value of, r0.namespace: nell, r1.arg2: the human body, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: issue) => Issued
Is the human body matter?	program	1.0	what state be the human body ? => $x: ($x, "is an example of", state) ($x, be, the human body) => $x: ($x, "is an example of", state) ($x, be, the human body) => (r0.arg1: The program, r1.rel: to be split to, r0.namespace: reverb, r1.arg2: ensure the human body, r0.arg2: a very simple state machine, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The program) => The program
Is the human body matter?	buddhism	1.0	what state be the human body ? => $x: ($x, "is a kind of", state) ($x, be, the human body) => $x: ($x, "is a kind of", state) ($x, be, the human body) => (r0.arg1: Buddhism, r1.rel: is, r0.namespace: reverb, r1.arg2: the human body, r0.arg2: ?flow ? state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism
Average cost nose job?	much	1.0	what do nose job cost ? => $x: ($x, do, nose job cost) => $x: ($x, do, nose job cost) => (r0.arg1: Much, r0.namespace: reverb, r0.arg2: A Nose Job Cost, r0.rel: Does) => Much
What are the earliest land plant?	hemp	4.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Hemp, r0.namespace: openie4, r0.arg2: the earliest domesticated plants, r0.rel: is one of) => Hemp; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Hemp, r0.namespace: openie4, r0.arg2: the earliest known plants, r0.rel: is one of) => Hemp; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Hemp, r0.namespace: openie4, r0.arg2: one of the earliest domesticated plants, r0.rel: is) => Hemp; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Hemp, r0.namespace: openie4, r0.arg2: one of the earliest known plants, r0.rel: is) => Hemp
What are the earliest land plant?	old	3.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: old, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: are) => old; what be the earliest land land plant ? => $x: ($x, be, the earliest land land plant) => $x: ($x, be, the earliest land land plant) => (r0.arg1: old, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: are) => old; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: old, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: are) => old
What are the earliest land plant?	liverworts	3.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: the liverworts, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were) => the liverworts; what be the earliest land land plant ? => $x: ($x, be, the earliest land land plant) => $x: ($x, be, the earliest land land plant) => (r0.arg1: the liverworts, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were) => the liverworts; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: the liverworts, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were) => the liverworts
What are the earliest land plant?	clones	3.0	What are the earliest land plant? => $x: ($x, are, the earliest land plant) => $x: ($x, are, the earliest land plant) => (r0.arg1: clones, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were amongst) => clones; what be the earliest land land plant ? => $x: ($x, be, the earliest land land plant) => $x: ($x, be, the earliest land land plant) => (r0.arg1: clones, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were amongst) => clones; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: clones, r0.namespace: reverb, r0.arg2: the earliest land plants, r0.rel: were amongst) => clones
What are the earliest land plant?	alfalfa	2.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Alfalfa, r0.namespace: openie4, r0.arg2: the earliest cultivated plants, r0.rel: is one of) => Alfalfa; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Alfalfa, r0.namespace: reverb, r0.arg2: the earliest cultivated plants, r0.rel: is one of) => Alfalfa
What are the earliest land plant?	irises	2.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Irises, r0.namespace: openie4, r0.arg2: the earliest blooming plants, r0.rel: are one of) => Irises; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Irises, r0.namespace: reverb, r0.arg2: the earliest blooming plants, r0.rel: are one of) => Irises
What are the earliest land plant?	leafy spurge	2.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Leafy spurge, r0.namespace: openie4, r0.arg2: the earliest plants, r0.rel: is one of) => Leafy spurge; what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Leafy spurge, r0.namespace: openie4, r0.arg2: one of the earliest plants, r0.rel: is) => Leafy spurge
What are the earliest land plant?	2012 corn crop	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: the 2012 Corn Crop, r0.namespace: reverb, r0.arg2: the Earliest Ever Planted, r0.rel: Be) => the 2012 Corn Crop
What are the earliest land plant?	prolific producer	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: a prolific producer, r0.namespace: reverb, r0.arg2: the earliest flowering outdoor plant, r0.rel: is) => a prolific producer
What are the earliest land plant?	magnolias	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Magnolias, r0.namespace: reverb, r0.arg2: the earliest flowering plants, r0.rel: were among) => Magnolias
What are the earliest land plant?	introduction garlic	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Introduction Garlic, r0.namespace: reverb, r0.arg2: the earliest plants, r0.rel: is one of) => Introduction Garlic
What are the earliest land plant?	tuberose	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: The tuberose, r0.namespace: reverb, r0.arg2: the earliest cultivated plants, r0.rel: is one of) => The tuberose
What are the earliest land plant?	ferns	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: ferns, r0.namespace: reverb, r0.arg2: the earliest vascular plants, r0.rel: were among) => ferns
What are the earliest land plant?	bryophytes	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Bryophytes, r0.namespace: reverb, r0.arg2: the earliest plants, r0.rel: are) => Bryophytes
What are the earliest land plant?	rosemary	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Rosemary, r0.namespace: openie4, r0.arg2: the earliest plants, r0.rel: is one of) => Rosemary
What are the earliest land plant?	snow peas	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Snow peas, r0.namespace: reverb, r0.arg2: the earliest known cultivated plants, r0.rel: are one of) => Snow peas
What are the earliest land plant?	creeper	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: The creeper, r0.namespace: reverb, r0.arg2: the earliest plants, r0.rel: had been among) => The creeper
What are the earliest land plant?	camellia japonica	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Camellia japonica, r0.namespace: reverb, r0.arg2: the earliest plants, r0.rel: is one of) => Camellia japonica
What are the earliest land plant?	?the highest yields	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: ?The highest yields, r0.namespace: reverb, r0.arg2: the earliest planting, r0.rel: were from) => ?The highest yields
What are the earliest land plant?	origin :it	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: origin :It, r0.namespace: reverb, r0.arg2: the earliest-known cultivated plants, r0.rel: is one of) => origin :It
What are the earliest land plant?	edible fruits	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: edible fruits, r0.namespace: reverb, r0.arg2: the earliest cultivated plants, r0.rel: were amongst) => edible fruits
What are the earliest land plant?	lotus	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: Lotus, r0.namespace: reverb, r0.arg2: the earliest plants, r0.rel: is one of) => Lotus
What are the earliest land plant?	yields	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: yields, r0.namespace: reverb, r0.arg2: the earliest planting dates, r0.rel: were highest at) => yields
What are the earliest land plant?	acres	1.0	what be the earliest plant ? => $x: ($x, be, the earliest plant) => $x: ($x, be, the earliest plant) => (r0.arg1: acres, r0.namespace: openie4, r0.arg2: or after the earliest planting date, r0.rel: are planted before) => acres
When and where were the first forms of money made?	gold coins	2.0	what be the first form of money ? => $x: ($x, be the first form of, money) => $x: ($x, be the first form of, money) => (r0.arg1: Gold coins, r0.namespace: reverb, r0.arg2: money, r0.rel: were the first form of) => Gold coins; what be the first form of money ? => $x: ($x, be the first form of, money) => $x: ($x, be the first form of, money) => (r0.arg1: Gold coins, r0.namespace: reverb, r0.arg2: money, r0.rel: were the first form of) => Gold coins
When and where were the first forms of money made?	commodity money	2.0	what be the first form of money ? => $x: ($x, be the first form of, money) => $x: ($x, be the first form of, money) => (r0.arg1: Commodity money, r0.namespace: reverb, r0.arg2: money, r0.rel: was the first form of) => Commodity money; what be the first form of money ? => $x: ($x, be the first form of, money) => $x: ($x, be the first form of, money) => (r0.arg1: Commodity money, r0.namespace: reverb, r0.arg2: money, r0.rel: was the first form of) => Commodity money
When and where were the first forms of money made?	banknotes	2.0	who make form of money ? => $x: ($x, make form of, money) => $x: ($x, make form of, money) => (r0.arg1: banknotes, r0.namespace: openie4, r0.arg2: all modern money, r0.rel: make up forms of) => banknotes; who make form of money ? => $x: ($x, make form of, money) => $x: ($x, make form of, money) => (r0.arg1: banknotes, r0.namespace: openie4, r0.arg2: all modern money, r0.rel: make up forms of) => banknotes
What do you call a gangs leader?	razz	2.0	what be a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a gang leader, r0.namespace: reverb, r0.arg2: Razz, r0.rel: called) => Razz; what do a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a gang leader, r0.namespace: reverb, r0.arg2: Razz, r0.rel: called) => Razz
What do you call a gangs leader?	gyrus	2.0	what be a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a gang leader, r0.namespace: reverb, r0.arg2: Gyrus, r0.rel: called) => Gyrus; what do a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a gang leader, r0.namespace: reverb, r0.arg2: Gyrus, r0.rel: called) => Gyrus
What do you call a gangs leader?	bowen who?s steven	2.0	what be a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a vicious Gang leader, r0.namespace: reverb, r0.arg2: Bowen who?s Steven, r0.rel: called) => Bowen who?s Steven; what do a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a vicious Gang leader, r0.namespace: reverb, r0.arg2: Bowen who?s Steven, r0.rel: called) => Bowen who?s Steven
What do you call a gangs leader?	bowen who?s steven	2.0	what be a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a vicious Gang leader, r0.namespace: reverb, r0.arg2: Bowen who?s Steven, r0.rel: called) => Bowen who?s Steven; what do a gang leader call ? => $x: (a gang leader, call, $x) => $x: (a gang leader, call, $x) => (r0.arg1: a vicious Gang leader, r0.namespace: reverb, r0.arg2: Bowen who?s Steven, r0.rel: called) => Bowen who?s Steven
When did spaghetti come to the us?	girls	2.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Girls, r0.namespace: openie4, r0.arg2: Spaghetti, r0.rel: are) => Girls; what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Girls, r0.namespace: reverb, r0.arg2: Spaghetti, r0.rel: Are) => Girls
When did spaghetti come to the us?	favorite food	2.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Favorite food, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => Favorite food; what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Favorite food, r0.namespace: openie4, r0.arg2: spaghetti, r0.rel: is) => Favorite food
When did spaghetti come to the us?	dinner	2.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Dinner, r0.namespace: openie4, r0.arg2: Spaghetti, r0.rel: is) => Dinner; what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: The dinner, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => The dinner
When did spaghetti come to the us?	trance	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: a trance, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => a trance
When did spaghetti come to the us?	pastas	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: pastas, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => pastas
When did spaghetti come to the us?	simplest one	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the simplest one, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => the simplest one
When did spaghetti come to the us?	recipe	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: The recipe, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => The recipe
When did spaghetti come to the us?	dinner tonight	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Dinner tonight, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => Dinner tonight
When did spaghetti come to the us?	top family main dishes	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: top family main dishes, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => top family main dishes
When did spaghetti come to the us?	pasta al burro e parmigiano	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: pasta al burro e parmigiano, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => pasta al burro e parmigiano
When did spaghetti come to the us?	dinner choice	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the dinner choice, r0.namespace: openie4, r0.arg2: spaghetti, r0.rel: is) => the dinner choice
When did spaghetti come to the us?	lasagna	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Lasagna, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => Lasagna
When did spaghetti come to the us?	waffles women	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: waffles and women, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => waffles and women
When did spaghetti come to the us?	wednesday night	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Wednesday night, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => Wednesday night
When did spaghetti come to the us?	menu	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: The menu, r0.namespace: openie4, r0.arg2: spaghetti, r0.rel: is) => The menu
When did spaghetti come to the us?	main dish	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Main dish, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => Main dish
When did spaghetti come to the us?	hands-down winner	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: A hands-down winner, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => A hands-down winner
When did spaghetti come to the us?	special	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the special, r0.namespace: openie4, r0.arg2: Spaghetti, r0.rel: was) => the special
When did spaghetti come to the us?	ballyard	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the ballyard, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => the ballyard
When did spaghetti come to the us?	purple 8. pet food	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: purple 8. Pet food, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => purple 8. Pet food
When did spaghetti come to the us?	5-way	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: a 5-way, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => a 5-way
When did spaghetti come to the us?	10-word challenge	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the 10-word Challenge, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => the 10-word Challenge
When did spaghetti come to the us?	worms	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the worms, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => the worms
When did spaghetti come to the us?	adulthood	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: adulthood, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => adulthood
When did spaghetti come to the us?	fav food	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: FaV Food, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => FaV Food
When did spaghetti come to the us?	night	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the night, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => the night
When did spaghetti come to the us?	pasta	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: not all pasta, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => not all pasta
When did spaghetti come to the us?	region	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the region, r0.namespace: reverb, r0.arg2: Spaghetti, r0.rel: is) => the region
When did spaghetti come to the us?	next	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => Next
When did spaghetti come to the us?	food	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => food
When did spaghetti come to the us?	wiring	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the wiring, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => the wiring
When did spaghetti come to the us?	day	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the day, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => the day
When did spaghetti come to the us?	hcg friendly marinara sauce	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the HCG friendly Marinara sauce, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => the HCG friendly Marinara sauce
When did spaghetti come to the us?	current code	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: The current code, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => The current code
When did spaghetti come to the us?	john?s favorite meals	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: John?s favorite meals, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => John?s favorite meals
When did spaghetti come to the us?	supper	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: supper, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => supper
When did spaghetti come to the us?	lunch	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: lunch, r0.namespace: openie4, r0.arg2: spaghetti, r0.rel: is) => lunch
When did spaghetti come to the us?	monday night	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Monday night, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => Monday night
When did spaghetti come to the us?	third night	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: a third night, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => a third night
When did spaghetti come to the us?	classic italian seafood recipe	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: A classic Italian seafood recipe, r0.namespace: reverb, r0.arg2: ?spaghetti, r0.rel: is) => A classic Italian seafood recipe
When did spaghetti come to the us?	cincinnati chili	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Cincinnati Chili, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => Cincinnati Chili
When did spaghetti come to the us?	left side	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the left side, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => the left side
When did spaghetti come to the us?	list	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the list, r0.namespace: reverb, r0.arg2: Spaghetti, r0.rel: was) => the list
When did spaghetti come to the us?	available pasta cuts	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Available pasta cuts, r0.namespace: reverb, r0.arg2: Spaghetti, r0.rel: are) => Available pasta cuts
When did spaghetti come to the us?	basic 3-way	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: The basic 3-way, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: is) => The basic 3-way
When did spaghetti come to the us?	class	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => the class
When did spaghetti come to the us?	last night	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: last night, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: was) => last night
When did spaghetti come to the us?	code geass ? characters	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: Code Geass ? characters, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => Code Geass ? characters
When did spaghetti come to the us?	hand	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: hand, r0.namespace: reverb, r0.arg2: spaghetti, r0.rel: are) => hand
When did spaghetti come to the us?	oldest	1.0	what be spaghetti ? => $x: ($x, be, spaghetti) => $x: ($x, be, spaghetti) => (r0.arg1: the oldest, r0.namespace: reverb, r0.arg2: Spaghetti, r0.rel: is) => the oldest
Which country has the best water?	united states	27.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: the united states, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: the united states, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: the united states, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best drinking water, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the best water treatment, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have the lowest water ? => $x: ($x, "is a", country) ($x, have, the lowest water) => $x: ($x, "is a", country) ($x, have, the lowest water) => (r0.arg1: the united states, r1.rel: has some of, r0.namespace: nell, r1.arg2: the lowest water rates, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country have the lowest water ? => $x: ($x, "is a", country) ($x, have, the lowest water) => $x: ($x, "is a", country) ($x, have, the lowest water) => (r0.arg1: the united states, r1.rel: has, r0.namespace: nell, r1.arg2: the lowest water and wastewater rates, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country have the lowest water ? => $x: ($x, "is an example of", country) ($x, have, the lowest water) => $x: ($x, "is an example of", country) ($x, have, the lowest water) => (r0.arg1: the United States, r1.rel: has some of, r0.namespace: openie4, r1.arg2: the lowest water rates, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have the lowest water ? => $x: ($x, "is an example of", country) ($x, have, the lowest water) => $x: ($x, "is an example of", country) ($x, have, the lowest water) => (r0.arg1: The United States, r1.rel: has some of, r0.namespace: reverb, r1.arg2: the lowest water rates, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country have the lowest water ? => $x: ($x, "is an example of", country) ($x, have, the lowest water) => $x: ($x, "is an example of", country) ($x, have, the lowest water) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: the lowest water and wastewater rates, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country have the lowest water ? => $x: ($x, "is an example of", country) ($x, have, the lowest water) => $x: ($x, "is an example of", country) ($x, have, the lowest water) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: the lowest water and wastewater rates, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
Which country has the best water?	home	22.0	which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best job in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best job in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: was the best feeling in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best feeling in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: our home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is sometimes the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: can be the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: water fowl, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best feeling in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best job in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best job in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: was the best feeling in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is the best place in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: our home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: is sometimes the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home; which water be the best in the world ? => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => $x: ($x, "is a kind of", water) ($x, be the best in, the world) => (r0.arg1: home, r1.rel: can be the best thing in, r0.namespace: nell, r1.arg2: the world, r0.arg2: Water birds, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: home) => home
Which country has the best water?	jamaica	22.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: jamaica, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best diving waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jamaica) => jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: jamaica, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best diving waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jamaica) => jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: jamaica, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best diving waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jamaica) => jamaica; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Jamaica, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best diving waters, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Jamaica) => Jamaica
Which country has the best water?	panama	16.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Panama, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Panama) => Panama
Which country has the best water?	denmark	13.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => Denmark; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Denmark, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best angling waters, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denmark) => Denmark
Which country has the best water?	australia	12.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Australia, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best surfing waters, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia
Which country has the best water?	aruba	12.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Dutch constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: aruba, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aruba) => aruba; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Dutch constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: aruba, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aruba) => aruba; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Dutch constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: Aruba, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aruba) => Aruba; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: aruba, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aruba) => aruba
Which country has the best water?	finland	6.0	Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: reverb, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; Which country has the best water? => $x: ($x, "is an example of", country) ($x, has, the best water) => $x: ($x, "is an example of", country) ($x, has, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: openie4, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: reverb, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; what country have best water ? => $x: ($x, "is an example of", country) ($x, have, best water) => $x: ($x, "is an example of", country) ($x, have, best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: openie4, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: reverb, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland; what country have the best water ? => $x: ($x, "is an example of", country) ($x, have, the best water) => $x: ($x, "is an example of", country) ($x, have, the best water) => (r0.arg1: Finland, r1.rel: is also known to have, r0.namespace: openie4, r1.arg2: the best water quality, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Finland) => Finland
Which country has the best water?	us-new york	6.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best tap water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best tap water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: US-New York, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best tap water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York
Which country has the best water?	san francisco	5.0	Which country has the best water? => $x: ($x, "type", country) ($x, has, the best water) => $x: ($x, "type", country) ($x, has, the best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco; what country have best water ? => $x: ($x, "type", country) ($x, have, best water) => $x: ($x, "type", country) ($x, have, best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco; what country have the best water ? => $x: ($x, "type", country) ($x, have, the best water) => $x: ($x, "type", country) ($x, have, the best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: US County, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: San Francisco, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: U.S. county, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?San Francisco) => San Francisco
Which country has the best water?	los angeles	4.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Los Angeles, r1.rel: has, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Los Angeles) => Los Angeles; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Los Angeles, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Los Angeles) => Los Angeles; which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: Los angeles, r1.rel: has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Los Angeles) => Los angeles; which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: Los angeles, r1.rel: has, r0.namespace: nell, r1.arg2: the best tap water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Los Angeles) => Los angeles
Which country has the best water?	st. louis	3.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: St. Louis, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting City Water, r0.arg2: US County, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Louis) => St. Louis; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: St. Louis, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting City Water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Louis) => St. Louis; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: St. Louis, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting City Water, r0.arg2: U.S. county, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Louis) => St. Louis
Which country has the best water?	st. lawrence county	3.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: St. Lawrence County, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best waters, r0.arg2: US County, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Lawrence County) => St. Lawrence County; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: St. Lawrence County, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best waters, r0.arg2: U.S. county, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Lawrence County) => St. Lawrence County; which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: St. Lawrence county, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best waters, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: St . Lawrence County) => St. Lawrence county
Which country has the best water?	denver	3.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Denver, r1.rel: does have one of, r0.namespace: freebase, r1.arg2: the best water parks, r0.arg2: US County, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denver) => Denver; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Denver, r1.rel: does have one of, r0.namespace: freebase, r1.arg2: the best water parks, r0.arg2: U.S. county, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denver) => Denver; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Denver, r1.rel: does have one of, r0.namespace: freebase, r1.arg2: the best water parks, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Denver) => Denver
Which country has the best water?	us-indiana	3.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-Indiana, r1.rel: has, r0.namespace: nell, r1.arg2: the BEST water park, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Indiana) => US-Indiana; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: US-Indiana, r1.rel: has, r0.namespace: nell, r1.arg2: the BEST water park, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Indiana) => US-Indiana; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: US-Indiana, r1.rel: has, r0.namespace: nell, r1.arg2: the BEST water park, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Indiana) => US-Indiana
Which country has the best water?	us-south carolina	3.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-South Carolina, r1.rel: had, r0.namespace: nell, r1.arg2: the best water quality, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: South Carolina) => US-South Carolina; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: US-South Carolina, r1.rel: had, r0.namespace: nell, r1.arg2: the best water quality, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: South Carolina) => US-South Carolina; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: US-South Carolina, r1.rel: had, r0.namespace: nell, r1.arg2: the best water quality, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: South Carolina) => US-South Carolina
Which country has the best water?	kinney county	3.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Kinney County, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: US County, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kinney County) => Kinney County; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Kinney County, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water, r0.arg2: U.S. county, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kinney County) => Kinney County; which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: Kinney County, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Kinney County) => Kinney County
Which country has the best water?	us-washington	3.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: US-Washington, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => US-Washington; what country have best water ? => $x: ($x, "is a", country) ($x, have, best water) => $x: ($x, "is a", country) ($x, have, best water) => (r0.arg1: US-Washington, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => US-Washington; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: US-Washington, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => US-Washington
Which country has the best water?	new york city	2.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: New York City, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: New York City) => New York City; which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: New York City, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: New York City) => New York City
Which country has the best water?	uk, denmark	2.0	Which country has the best water? => $x: ($x, "is a", country) ($x, has, the best water) => $x: ($x, "is a", country) ($x, has, the best water) => (r0.arg1: UK, Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => UK, Denmark; what country have the best water ? => $x: ($x, "is a", country) ($x, have, the best water) => $x: ($x, "is a", country) ($x, have, the best water) => (r0.arg1: UK, Denmark, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best angling waters, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Denmark) => UK, Denmark
Which country has the best water?	kansas city	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Kansas City, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best water parks, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kansas City) => Kansas City
Which country has the best water?	indiana	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Indiana, r1.rel: has, r0.namespace: freebase, r1.arg2: the BEST water park, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Indiana) => Indiana
Which country has the best water?	washington	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Washington, r1.rel: supposedly has, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Washington) => Washington
Which country has the best water?	milk	1.0	which water be the best in the world ? => $x: ($x, "is an example of", water) ($x, be the best in, the world) => $x: ($x, "is an example of", water) ($x, be the best in, the world) => (r0.arg1: Milk, r1.rel: is the best food in, r0.namespace: reverb, r1.arg2: the world, r0.arg2: an oil-in-water emulsion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: milk) => Milk
Which country has the best water?	bc	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: BC, r1.rel: has, r0.namespace: nell, r1.arg2: the best cold water diving, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: BC) => BC
Which country has the best water?	brooklyn	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Brooklyn, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Brooklyn) => Brooklyn
Which country has the best water?	lakes	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: The Lakes, r1.rel: has, r0.namespace: freebase, r1.arg2: the best water quality, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: The lake) => The Lakes
Which country has the best water?	grayland	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Grayland, r1.rel: arguably has, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Grayland) => Grayland
Which country has the best water?	st___lawrence_county	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: st___lawrence_county, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best waters, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: St . Lawrence County) => st___lawrence_county
Which country has the best water?	village	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: The Village, r1.rel: have access to, r0.namespace: freebase, r1.arg2: the best water filter, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: the villages) => The Village
Which country has the best water?	central scotland	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: central scotland, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best sailing waters, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scotland Scotland) => central scotland
Which country has the best water?	seattle	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Seattle, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best city water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Seattle) => Seattle
Which country has the best water?	old washington	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Old Washington, r1.rel: supposedly has, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Washington) => Old Washington
Which country has the best water?	cincinnati	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Cincinnati, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best drinking water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Cincinnati) => Cincinnati
Which country has the best water?	new york county	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: New York County, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York City) => New York County
Which country has the best water?	minneapolis	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Minneapolis, r1.rel: has some of, r0.namespace: freebase, r1.arg2: the best tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Minneapolis) => Minneapolis
Which country has the best water?	washington co	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: Washington Co, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => Washington Co
Which country has the best water?	bay st. louis	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Bay St. Louis, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting City Water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Louis) => Bay St. Louis
Which country has the best water?	stlawrence county	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: StLawrence County, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best waters, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: St . Lawrence County) => StLawrence County
Which country has the best water?	villages	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: The Villages, r1.rel: have access to, r0.namespace: freebase, r1.arg2: the best water filter, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: the villages) => The Villages
Which country has the best water?	henry	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Henry, r1.rel: can boast of having, r0.namespace: freebase, r1.arg2: the best tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Henry ]) => Henry
Which country has the best water?	oklahoma city	1.0	which county have the best water ? => $x: ($x, "type", county) ($x, have, the best water) => $x: ($x, "type", county) ($x, have, the best water) => (r0.arg1: Oklahoma City, r1.rel: has, r0.namespace: freebase, r1.arg2: the best tasting tap water, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Oklahoma City) => Oklahoma City
Which country has the best water?	maine	1.0	which water be the best in the world ? => $x: ($x, "type", water) ($x, be the best in, the world) => $x: ($x, "type", water) ($x, be the best in, the world) => (r0.arg1: Maine, r1.rel: is the best in, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Body Of Water, r0.rel: Type, r1.namespace: reverb, r1.arg1: Maine) => Maine
Which country has the best water?	washington town	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: WASHINGTON Town, r1.rel: supposedly has, r0.namespace: nell, r1.arg2: the best drinking water, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Washington) => WASHINGTON Town
Which country has the best water?	st lawrence county	1.0	which county have the best water ? => $x: ($x, "is a", county) ($x, have, the best water) => $x: ($x, "is a", county) ($x, have, the best water) => (r0.arg1: ST LAWRENCE COUNTY, r1.rel: has some of, r0.namespace: nell, r1.arg2: the best waters, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: St . Lawrence County) => ST LAWRENCE COUNTY
When was T. E. Lawrence born?	1888	2.0	When was T. E. Lawrence born? => $x: (T. E. Lawrence, was born in, $x) => $x: (T. E. Lawrence, was born in, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: 1888, r0.rel: was born in) => 1888; When was T. E. Lawrence born? => $x: (T. E. Lawrence, born in, $x) => $x: (T. E. Lawrence, born in, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: 1888, r0.rel: was born in) => 1888
When was T. E. Lawrence born?	aug. 15 , 1888	2.0	When was T. E. Lawrence born? => $x: (T. E. Lawrence, was born on, $x) => $x: (T. E. Lawrence, was born on, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: Aug. 15 , 1888, r0.rel: was born on) => Aug. 15 , 1888; When was T. E. Lawrence born? => $x: (T. E. Lawrence, born on, $x) => $x: (T. E. Lawrence, born on, $x) => (r0.arg1: T. E. Lawrence, r0.namespace: reverb, r0.arg2: Aug. 15 , 1888, r0.rel: was born on) => Aug. 15 , 1888
Fun games for kids?	dizzywood	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Dizzywood, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun game for) => Dizzywood; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Dizzywood, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Dizzywood
Fun games for kids?	online kid games	2.0	what be the best game for kid ? => $x: ($x, be the best game for, kid) => $x: ($x, be the best game for, kid) => (r0.arg1: The online kid games, r0.namespace: reverb, r0.arg2: kids, r0.rel: are the best games for) => The online kid games; what be the best game for kid ? => $x: ($x, be the best game for, kid) => $x: ($x, be the best game for, kid) => (r0.arg1: The online kid games, r0.namespace: reverb, r0.arg2: kids, r0.rel: are the best games for) => The online kid games
Fun games for kids?	tic tac toe safari	2.0	what be the best game for kid ? => $x: ($x, be the best game for, kid) => $x: ($x, be the best game for, kid) => (r0.arg1: Tic Tac Toe Safari, r0.namespace: reverb, r0.arg2: kids, r0.rel: is the best game for) => Tic Tac Toe Safari; what be the best game for kid ? => $x: ($x, be the best game for, kid) => $x: ($x, be the best game for, kid) => (r0.arg1: Tic Tac Toe Safari, r0.namespace: reverb, r0.arg2: kids, r0.rel: is the best game for) => Tic Tac Toe Safari
Fun games for kids?	twister	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Twister, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Twister; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Twister, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun game for) => Twister
Fun games for kids?	dragon	2.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: The Dragon, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a very fun game for) => The Dragon; Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: The Dragon, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a very fun game for) => The Dragon
Fun games for kids?	birthday cake memory	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Birthday Cake Memory, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun memory game for) => Birthday Cake Memory
Fun games for kids?	match	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: a Match, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun memory matching game for) => a Match
Fun games for kids?	melissa gastineau popmath	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Melissa Gastineau PopMath, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Melissa Gastineau PopMath
Fun games for kids?	20x10 multibubbles	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: 20x10 MultiBubbles, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => 20x10 MultiBubbles
Fun games for kids?	math critters	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Math Critters, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a cute , fun math game app for) => Math Critters
Fun games for kids?	emergency supply kit	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: an emergency supply kit, r0.namespace: reverb, r0.arg2: kids, r0.rel: can be a fun game for) => an emergency supply kit
Fun games for kids?	halloween pumpkin bowling bowling	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Halloween Pumpkin Bowling Bowling, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Halloween Pumpkin Bowling Bowling
Fun games for kids?	tag	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Tag, r0.namespace: reverb, r0.arg2: kids, r0.rel: is a fun game for) => Tag
Fun games for kids?	playhouse	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Playhouse, r0.namespace: openie4, r0.arg2: kids, r0.rel: is a fun and educational game for) => Playhouse
Fun games for kids?	ben 10 games online	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Ben 10 Games Online, r0.namespace: openie4, r0.arg2: kids, r0.rel: are fun cartoon games for) => Ben 10 Games Online
Fun games for kids?	balls	1.0	Fun games for kids? => $x: ($x, be Fun games for, kids) => $x: ($x, be Fun games for, kids) => (r0.arg1: Balls, r0.namespace: reverb, r0.arg2: young kids, r0.rel: is a fun game for) => Balls
In baseball what is the Green Monster?	jealousy	12.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: jealousy, r0.namespace: reverb, r0.arg2: the green eyed monster, r0.rel: is realy) => jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: openie4, r0.arg2: the green-eyed monster, r0.rel: is) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: could be) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: reverb, r0.arg2: the ?green-eyed monster, r0.rel: has often been called) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: reverb, r0.arg2: the ?green-eyed monster, r0.rel: has often been called) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: jealousy, r0.namespace: openie4, r0.arg2: the green-eyed  monster, r0.rel: is referred to as) => jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: openie4, r0.arg2: the green-eyed  monster, r0.rel: has been called) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: openie4, r0.arg2: the green-eyed  monster, r0.rel: has been called) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: reverb, r0.arg2: the ?green-eyed monster, r0.rel: has often been called) => Jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: jealousy, r0.namespace: reverb, r0.arg2: the ?green-eyed monster, r0.rel: is sometimes referred to as) => jealousy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Jealousy, r0.namespace: openie4, r0.arg2: the green-eyed monster which doth mock the meat, r0.rel: is) => Jealousy
In baseball what is the Green Monster?	red sox	2.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the Red Sox, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is) => the Red Sox; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the Red Sox, r0.namespace: reverb, r0.arg2: the green monster BOSTREDSOX, r0.rel: are taking down) => the Red Sox
In baseball what is the Green Monster?	tall	2.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Tall, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is) => Tall; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Tall, r0.namespace: openie4, r0.arg2: the Green Monster, r0.rel: is) => Tall
In baseball what is the Green Monster?	left field	2.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Left field, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is home of) => Left field; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: left field, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is known as) => left field
In baseball what is the Green Monster?	envy	2.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Envy, r0.namespace: reverb, r0.arg2: the green eyed monster, r0.rel: is) => Envy; what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Envy, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is called) => Envy
In baseball what is the Green Monster?	stars stripes	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: The stars and stripes, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: will be draped over) => The stars and stripes
In baseball what is the Green Monster?	iago	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Iago, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is) => Iago
In baseball what is the Green Monster?	mark ruffalo	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Mark Ruffalo, r0.namespace: reverb, r0.arg2: the big green monster, r0.rel: has been cast as) => Mark Ruffalo
In baseball what is the Green Monster?	park	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the park, r0.namespace: reverb, r0.arg2: The Green Monster, r0.rel: is) => the park
In baseball what is the Green Monster?	west end field	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: West End Field, r0.namespace: reverb, r0.arg2: the mini Green Monster, r0.rel: is) => West End Field
In baseball what is the Green Monster?	professional	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: a professional, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was n?t intimidated by) => a professional
In baseball what is the Green Monster?	othello	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Othello, r0.namespace: reverb, r0.arg2: the ?green-eyed monster ?, r0.rel: is actually about) => Othello
In baseball what is the Green Monster?	july green monster	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: July Green Monster, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: Here is) => July Green Monster
In baseball what is the Green Monster?	high	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: high, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is) => high
In baseball what is the Green Monster?	american flag	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: The American flag, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was draped over) => The American flag
In baseball what is the Green Monster?	fenway park	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Fenway Park, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is nicknamed) => Fenway Park
In baseball what is the Green Monster?	temporary advertising signs	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Temporary advertising signs, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: are added above) => Temporary advertising signs
In baseball what is the Green Monster?	lot	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the lot, r0.namespace: reverb, r0.arg2: the famous green monster, r0.rel: is akin to) => the lot
In baseball what is the Green Monster?	10 meters	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: 10 meters, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: are called) => 10 meters
In baseball what is the Green Monster?	jealousy !it	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: jealousy !It, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is) => jealousy !It
In baseball what is the Green Monster?	net	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the net, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was added above) => the net
In baseball what is the Green Monster?	dom dimaggio	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Dom DiMaggio, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was attached high above) => Dom DiMaggio
In baseball what is the Green Monster?	homer	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: The homer, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was launched over) => The homer
In baseball what is the Green Monster?	any ball park	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: any ball park, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is) => any ball park
In baseball what is the Green Monster?	mal	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: mal, r0.namespace: reverb, r0.arg2: the cute green monster/mutant boi, r0.rel: is) => mal
In baseball what is the Green Monster?	fence	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: The fence, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is also known as) => The fence
In baseball what is the Green Monster?	turn	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: the Green Monster Campaign, r0.rel: will be donated to) => turn
In baseball what is the Green Monster?	cocktails	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: cocktails, r0.namespace: reverb, r0.arg2: The Green Monster, r0.rel: will be served on) => cocktails
In baseball what is the Green Monster?	picture	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: picture, r0.namespace: reverb, r0.arg2: the green eyed monster, r0.rel: was suppose to be) => picture
In baseball what is the Green Monster?	gates	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the gates, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was greeting with) => the gates
In baseball what is the Green Monster?	farmer margie	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Farmer Margie, r0.namespace: reverb, r0.arg2: the monster green fruit, r0.rel: was weighing) => Farmer Margie
In baseball what is the Green Monster?	ted	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Ted, r0.namespace: reverb, r0.arg2: the Big Green Monster, r0.rel: was probably) => Ted
In baseball what is the Green Monster?	back weeds	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Back Weeds, r0.namespace: reverb, r0.arg2: The Forest The GB Green Monster, r0.rel: will be called) => Back Weeds
In baseball what is the Green Monster?	person	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: a person, r0.namespace: reverb, r0.arg2: the ?green-eyed monster, r0.rel: is stung by) => a person
In baseball what is the Green Monster?	scar	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Scar, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is free from) => Scar
In baseball what is the Green Monster?	boston red sox game	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: a Boston Red Sox game, r0.namespace: reverb, r0.arg2: ?The Green Monster?, r0.rel: is) => a Boston Red Sox game
In baseball what is the Green Monster?	molori	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Molori, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: are Call of) => Molori
In baseball what is the Green Monster?	zr uzr	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: ZR and UZR, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is) => ZR and UZR
In baseball what is the Green Monster?	home plate	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: home plate, r0.namespace: reverb, r0.arg2: the ?Green Monster, r0.rel: is known as) => home plate
In baseball what is the Green Monster?	dustin pedroia	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Dustin Pedroia, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: are largely aided by) => Dustin Pedroia
In baseball what is the Green Monster?	two radar displays	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: The two radar displays, r0.namespace: reverb, r0.arg2: the Big Green-Eyed Monster, r0.rel: are known as) => The two radar displays
In baseball what is the Green Monster?	field	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the field, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: is tightly contained by) => the field
In baseball what is the Green Monster?	wind	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: the wind, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: was blowing out toward) => the wind
In baseball what is the Green Monster?	just 315 feet	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: just 315 feet, r0.namespace: reverb, r0.arg2: The Green Monster, r0.rel: is compensated for by) => just 315 feet
In baseball what is the Green Monster?	book riot	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Book Riot, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: is fanning the flames of) => Book Riot
In baseball what is the Green Monster?	gene	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: Gene, r0.namespace: reverb, r0.arg2: the green-eyed monster, r0.rel: was bitten by) => Gene
In baseball what is the Green Monster?	hit home	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: hit home, r0.namespace: reverb, r0.arg2: the Green Eyed Monster post, r0.rel: was) => hit home
In baseball what is the Green Monster?	halloween tradition	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: every Halloween tradition, r0.namespace: reverb, r0.arg2: the book Ten Green Monsters, r0.rel: is) => every Halloween tradition
In baseball what is the Green Monster?	weekend	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: each weekend, r0.namespace: reverb, r0.arg2: the Green Monster, r0.rel: will be located inside) => each weekend
In baseball what is the Green Monster?	left	1.0	what be the green monster ? => $x: ($x, be, the green monster) => $x: ($x, be, the green monster) => (r0.arg1: left, r0.namespace: reverb, r0.arg2: the Green Monster seats, r0.rel: was patterned after) => left
What did paul dirac discovered?	idea antimatter	1.0	what be paul dirac propose ? => $x: (paul dirac, propose, $x) => $x: (paul dirac, propose, $x) => (r0.arg1: Paul Dirac, r0.namespace: openie4, r0.arg2: the idea of antimatter, r0.rel: proposed) => the idea of antimatter
What did paul dirac discovered?	vacuum	1.0	what be paul dirac propose ? => $x: (paul dirac, propose, $x) => $x: (paul dirac, propose, $x) => (r0.arg1: Paul Dirac, r0.namespace: reverb, r0.arg2: the vacuum, r0.rel: proposed a model of) => the vacuum
When did the rev died?	monday 26	4.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 26, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Eddie Hudson) => Monday 26; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 26, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Milbert Sanders) => Monday 26; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 26, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Fred VanderPoel) => Monday 26; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 26, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Clyde William ?Sonny ? Cowan Sr) => Monday 26
When did the rev died?	monday	4.0	what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Monday, r1.rel: died, r0.namespace: freebase, r1.arg2: Monday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Eddie Hudson) => Monday; what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Monday, r1.rel: died, r0.namespace: freebase, r1.arg2: Monday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Milbert Sanders) => Monday; what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Monday, r1.rel: died, r0.namespace: freebase, r1.arg2: Monday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Fred VanderPoel) => Monday; what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Monday, r1.rel: died, r0.namespace: freebase, r1.arg2: Monday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Clyde William ?Sonny ? Cowan Sr) => Monday
When did the rev died?	monday 7	4.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 7, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Eddie Hudson) => Monday 7; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 7, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Milbert Sanders) => Monday 7; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 7, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Fred VanderPoel) => Monday 7; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Monday 7, r1.rel: died, r0.namespace: nell, r1.arg2: Monday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Clyde William ?Sonny ? Cowan Sr) => Monday 7
When did the rev died?	sunday	3.0	what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Sunday, r1.rel: died, r0.namespace: freebase, r1.arg2: Sunday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Mr. Miller) => Sunday; what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Sunday, r1.rel: died, r0.namespace: freebase, r1.arg2: Sunday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. Willie Bonds Jr.) => Sunday; what date do the rev die ? => $x: ($x, "type", date) (the rev, die, $x) => $x: ($x, "type", date) (the rev, die, $x) => (r0.arg1: Sunday, r1.rel: died, r0.namespace: freebase, r1.arg2: Sunday, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Rev. M.L. Graham Sr.) => Sunday
When did the rev died?	december 02	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 02, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 02; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 02, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 02
When did the rev died?	december '04	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '04, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '04; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '04, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '04
When did the rev died?	december 15	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 15, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 15; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 15, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 15
When did the rev died?	aug. 11	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: aug. 11, r1.rel: died, r0.namespace: nell, r1.arg2: Aug. 14, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Candice Lorraine Martin) => aug. 11; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: aug. 11, r1.rel: died, r0.namespace: nell, r1.arg2: Aug. 11, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. Paul J. Erb) => aug. 11
When did the rev died?	december '96	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '96, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '96; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '96, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '96
When did the rev died?	december 94	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 94, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 94; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 94, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 94
When did the rev died?	july 2-7	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 2-7, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: openie4, r1.arg1: the Rev John Stott) => July 2-7; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 2-7, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev John Stott) => July 2-7
When did the rev died?	december 3	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 3, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 3; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 3, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 3
When did the rev died?	31 december	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: 31 December, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => 31 December; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: 31 December, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => 31 December
When did the rev died?	december 04	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 04, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 04; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 04, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 04
When did the rev died?	december 98	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 98, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 98; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 98, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 98
When did the rev died?	december 10	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 10, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 10; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 10, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 10
When did the rev died?	july 25-27	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 25-27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: openie4, r1.arg1: the Rev John Stott) => July 25-27; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 25-27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev John Stott) => July 25-27
When did the rev died?	december 2.	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 2., r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 2.; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 2., r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 2.
When did the rev died?	december '01	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '01, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '01; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '01, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '01
When did the rev died?	2008	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Marcial Maciel Degollado, r0.namespace: reverb, r0.arg2: 2008, r0.rel: died in) => 2008; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Grave ?The Rev. Marcial Maciel, r0.namespace: reverb, r0.arg2: 2008, r0.rel: died in) => 2008
When did the rev died?	december 06	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 06, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 06; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 06, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 06
When did the rev died?	december 17	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 17, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 17; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 17, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 17
When did the rev died?	saturday 10	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Saturday 10, r1.rel: died, r0.namespace: nell, r1.arg2: Saturday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Samuel MURRAY) => Saturday 10; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: Saturday 10, r1.rel: died, r0.namespace: nell, r1.arg2: Saturday, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Rev. George M. Elmore) => Saturday 10
When did the rev died?	december '98	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '98, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '98; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '98, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '98
When did the rev died?	december 95	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 95, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 95; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 95, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 95
When did the rev died?	december 14	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 14, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 14; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 14, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 14
When did the rev died?	december '09	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '09, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '09; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '09, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '09
When did the rev died?	may 15	2.0	When did the rev died? => $x: (the rev, died on, $x) => $x: (the rev, died on, $x) => (r0.arg1: The Rev. Jerry Falwell, r0.namespace: reverb, r0.arg2: May 15, r0.rel: died on) => May 15; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: may 15, r1.rel: died, r0.namespace: nell, r1.arg2: May 15, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Jerry Falwell) => may 15
When did the rev died?	july 27-27	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 27-27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: openie4, r1.arg1: the Rev John Stott) => July 27-27; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 27-27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev John Stott) => July 27-27
When did the rev died?	december '95	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '95, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '95; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '95, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '95
When did the rev died?	december__06	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december__06, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december__06; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december__06, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december__06
When did the rev died?	december '05	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '05, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '05; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '05, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '05
When did the rev died?	december '93	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '93, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '93; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '93, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '93
When did the rev died?	december	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: Jimmy ?The Rev? Sullivan, r0.namespace: reverb, r0.arg2: December, r0.rel: died in) => December; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev' Sullivan, r0.namespace: reverb, r0.arg2: December, r0.rel: died in) => December
When did the rev died?	december 23	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 23, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 23; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 23, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 23
When did the rev died?	december 21	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 21, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => DECEMBER 21; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: DECEMBER 21, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => DECEMBER 21
When did the rev died?	december 00	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 00, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 00; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 00, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 00
When did the rev died?	december?6	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December?6, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December?6; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December?6, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December?6
When did the rev died?	england	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Daniel Brown, r0.namespace: reverb, r0.arg2: England, r0.rel: died in) => England; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: the Rev John Stott, r0.namespace: openie4, r0.arg2: England, r0.rel: died in) => England
When did the rev died?	december 99	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 99, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 99; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 99, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 99
When did the rev died?	december 05	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 05, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 05; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 05, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 05
When did the rev died?	december 24	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 24, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 24; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 24, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 24
When did the rev died?	december 7.	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 7., r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 7.; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 7., r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 7.
When did the rev died?	july 27	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: july 27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: openie4, r1.arg1: the Rev John Stott) => july 27; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: july 27, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev John Stott) => july 27
When did the rev died?	july 27th	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 27th, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: openie4, r1.arg1: the Rev John Stott) => July 27th; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: July 27th, r1.rel: died, r0.namespace: nell, r1.arg2: July 27, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev John Stott) => July 27th
When did the rev died?	december '03	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '03, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December '03; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December '03, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December '03
When did the rev died?	december 18	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 18, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 18; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 18, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 18
When did the rev died?	december 5	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 5, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => december 5; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: december 5, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => december 5
When did the rev died?	december 22	2.0	what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 22, r1.rel: died, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Rev. Stephen Bulger) => December 22; what date do the rev die ? => $x: ($x, "is a", date) (the rev, die, $x) => $x: ($x, "is a", date) (the rev, die, $x) => (r0.arg1: December 22, r1.rel: died in, r0.namespace: nell, r1.arg2: December, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: Jimmy ?The Rev? Sullivan) => December 22
When did the rev died?	1998	2.0	When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Lawrence Murphy, r0.namespace: reverb, r0.arg2: 1998, r0.rel: died in) => 1998; When did the rev died? => $x: (the rev, died in, $x) => $x: (the rev, died in, $x) => (r0.arg1: The Rev. Dr. D'Orlando, r0.namespace: reverb, r0.arg2: 1998, r0.rel: died in) => 1998
Are snakes warm blooded or cold?	dinosaurs	8.0	what kind of animal be warm blooded or cold ? => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => (r0.arg1: Dinosaurs, r1.rel: were, r0.namespace: nell, r1.arg2: cold or warm blooded, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: dinosaurs) => Dinosaurs; what kind of animal be warm blooded or cold ? => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => (r0.arg1: Dinosaurs, r1.rel: were, r0.namespace: nell, r1.arg2: warm or cold blooded, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: dinosaurs) => Dinosaurs; what kind of animal be warm blooded or cold ? => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => (r0.arg1: Dinosaurs, r1.rel: were, r0.namespace: nell, r1.arg2: warm - or cold-blooded, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the dinosaurs) => Dinosaurs; what kind of animal be warm blooded or cold ? => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => $x: ($x, "is a kind of", animal) ($x, be, warm blooded or cold) => (r0.arg1: Dinosaurs, r1.rel: could have been created, r0.namespace: nell, r1.arg2: cold-blooded or warm-blooded, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: dinosaurs) => Dinosaurs; what be warm blooded or cold ? => $x: ($x, be, warm blooded or cold) => $x: ($x, be, warm blooded or cold) => (r0.arg1: dinosaurs, r0.namespace: openie4, r0.arg2: cold or warm blooded, r0.rel: were) => dinosaurs; what be warm blooded or cold ? => $x: ($x, be, warm blooded or cold) => $x: ($x, be, warm blooded or cold) => (r0.arg1: dinosaurs, r0.namespace: openie4, r0.arg2: warm or cold blooded, r0.rel: were) => dinosaurs; what be warm blooded or cold ? => $x: ($x, be, warm blooded or cold) => $x: ($x, be, warm blooded or cold) => (r0.arg1: the dinosaurs, r0.namespace: openie4, r0.arg2: warm - or cold-blooded, r0.rel: were) => the dinosaurs; what be warm blooded or cold ? => $x: ($x, be, warm blooded or cold) => $x: ($x, be, warm blooded or cold) => (r0.arg1: dinosaurs, r0.namespace: reverb, r0.arg2: cold-blooded or warm-blooded, r0.rel: could have been created) => dinosaurs
Are snakes warm blooded or cold?	2011	1.0	what be warm blooded or cold ? => $x: ($x, be, warm blooded or cold) => $x: ($x, be, warm blooded or cold) => (r0.arg1: 2011, r0.namespace: reverb, r0.arg2: a moth warm-blooded or cold-blooded, r0.rel: Is) => 2011
What do calvinists teach?	several months	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: This Calvinist teaching, r0.namespace: reverb, r0.arg2: several months, r0.rel: was taught in-depth for) => several months
What do calvinists teach?	sovereign grace	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: the sovereign grace, r0.rel: should still confidently teach) => the sovereign grace
What do calvinists teach?	bible	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: The true Calvinist, r0.namespace: reverb, r0.arg2: the Bible, r0.rel: believes the teaching of) => the Bible
What do calvinists teach?	distinction	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: the distinction, r0.rel: have taught) => the distinction
What do calvinists teach?	princeton	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: the Calvinist principles, r0.namespace: reverb, r0.arg2: Princeton, r0.rel: were taught at) => Princeton
What do calvinists teach?	verses	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Some Calvinists, r0.namespace: reverb, r0.arg2: such verses, r0.rel: reject the plain teaching of) => such verses
What do calvinists teach?	sometimes	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: openie4, r0.arg2: sometimes, r0.rel: are wrongly criticized as teaching) => sometimes
What do calvinists teach?	calvin	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: Calvin, r0.rel: reject this teaching of) => Calvin
What do calvinists teach?	impassibility	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: impassibility, r0.rel: have long taught) => impassibility
What do calvinists teach?	effectual forgiveness	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: reverb, r0.arg2: effectual forgiveness, r0.rel: teach the false doctrine of) => effectual forgiveness
What do calvinists teach?	different gospel	1.0	What do calvinists teach? => $x: (calvinists, teach, $x) => $x: (calvinists, teach, $x) => (r0.arg1: Calvinists, r0.namespace: openie4, r0.arg2: a different Gospel, r0.rel: teach) => a different Gospel
Is there matter in space?	total sum	1.0	matter in space ? => $x: ($x, be matter in, space) => $x: ($x, be matter in, space) => (r0.arg1: the total sum, r0.namespace: reverb, r0.arg2: space, r0.rel: is dark matter in) => the total sum
What is the chemical composition of 14 karat gold?	ring	5.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The ring, r0.namespace: reverb, r0.arg2: 14-karat white gold, r0.rel: is) => The ring; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The ring, r0.namespace: openie4, r0.arg2: 14 karat white gold, r0.rel: is) => The ring; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The ring, r0.namespace: openie4, r0.arg2: 14-karat white gold, r0.rel: is) => The ring; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The ring, r0.namespace: reverb, r0.arg2: 14 karat white gold, r0.rel: is composed of) => The ring; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: ring, r0.namespace: reverb, r0.arg2: 14 karat white gold, r0.rel: is set in) => ring
What is the chemical composition of 14 karat gold?	gold	5.0	what do 14 karat gold contain ? => $x: (14 karat gold, contain, $x) => $x: (14 karat gold, contain, $x) => (r0.arg1: 14 karat blue gold, r0.namespace: reverb, r0.arg2: gold, r0.rel: contain the same amount of) => gold; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Gold, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: might be) => Gold; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Gold, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: could be) => Gold; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Gold, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: may be) => Gold; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Gold, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: can be) => Gold
What is the chemical composition of 14 karat gold?	clasp	3.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The clasp, r0.namespace: reverb, r0.arg2: 14 karat solid gold, r0.rel: is) => The clasp; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The clasp, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => The clasp; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: the clasp, r0.namespace: openie4, r0.arg2: 14 karat gold, r0.rel: is) => the clasp
What is the chemical composition of 14 karat gold?	nickel	3.0	what chemical be in 14 karat gold ? => $x: ($x, "type", chemical) ($x, be in, 14 karat gold) => $x: ($x, "type", chemical) ($x, be in, 14 karat gold) => (r0.arg1: Nickel, r1.rel: is even used in, r0.namespace: freebase, r1.arg2: 14karat & 18 karat gold, r0.arg2: Chemical Element, r0.rel: Type, r1.namespace: reverb, r1.arg1: nickel) => Nickel; what chemical be in 14 karat gold ? => $x: ($x, "is a", chemical) ($x, be in, 14 karat gold) => $x: ($x, "is a", chemical) ($x, be in, 14 karat gold) => (r0.arg1: Nickel, r1.rel: is even used in, r0.namespace: nell, r1.arg2: 14karat & 18 karat gold, r0.arg2: chemical, r0.rel: is a, r1.namespace: reverb, r1.arg1: nickel) => Nickel; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: nickel, r0.namespace: reverb, r0.arg2: 14karat & 18 karat gold, r0.rel: is even used in) => nickel
What is the chemical composition of 14 karat gold?	jewelry	2.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: jewelry, r0.namespace: reverb, r0.arg2: 14 karat yellow gold, r0.rel: is) => jewelry; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Jewelry, r0.namespace: reverb, r0.arg2: 14-karat white gold, r0.rel: is finely crafted of) => Jewelry
What is the chemical composition of 14 karat gold?	pendant	2.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Pendant, r0.namespace: openie4, r0.arg2: 14 Karat pure gold, r0.rel: is in) => Pendant; what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Pendant, r0.namespace: reverb, r0.arg2: 14 Karat pure gold, r0.rel: is in) => Pendant
What is the chemical composition of 14 karat gold?	initial posts	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The initial posts, r0.namespace: reverb, r0.arg2: 14-karat gold, r0.rel: should be) => The initial posts
What is the chemical composition of 14 karat gold?	pearl earrings	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: pearl earrings, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: are) => pearl earrings
What is the chemical composition of 14 karat gold?	urn jewelry	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: urn jewelry, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => urn jewelry
What is the chemical composition of 14 karat gold?	piece	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: piece, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => piece
What is the chemical composition of 14 karat gold?	bezel	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Bezel, r0.namespace: reverb, r0.arg2: 14 Karat gold, r0.rel: is) => Bezel
What is the chemical composition of 14 karat gold?	small chai pendant	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: small Chai pendant, r0.namespace: reverb, r0.arg2: 14 karat yellow gold, r0.rel: is crafted of) => small Chai pendant
What is the chemical composition of 14 karat gold?	large chai pendant	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: large Chai pendant, r0.namespace: reverb, r0.arg2: 14 karat yellow gold, r0.rel: is crafted of) => large Chai pendant
What is the chemical composition of 14 karat gold?	much	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Much, r0.namespace: reverb, r0.arg2: 14 Karat Gold Worth karat gold Gold, r0.rel: Is) => Much
What is the chemical composition of 14 karat gold?	pendants	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: pendants, r0.namespace: reverb, r0.arg2: 14 karat gold fill, r0.rel: are hung from) => pendants
What is the chemical composition of 14 karat gold?	classic jewelers	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Classic Jewelers, r0.namespace: reverb, r0.arg2: a 14 karat gold, r0.rel: is) => Classic Jewelers
What is the chemical composition of 14 karat gold?	metal	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The metal, r0.namespace: reverb, r0.arg2: 14 karat gold ring, r0.rel: is unmarked) => The metal
What is the chemical composition of 14 karat gold?	evangelist bill graham	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Evangelist Bill Graham, r0.namespace: reverb, r0.arg2: pure 14-karat gold, r0.rel: are) => Evangelist Bill Graham
What is the chemical composition of 14 karat gold?	frame pin	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The frame and pin, r0.namespace: reverb, r0.arg2: 14 Karat Yellow Gold, r0.rel: is) => The frame and pin
What is the chemical composition of 14 karat gold?	libertad	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Libertad, r0.namespace: openie4, r0.arg2: 14 karat gold, r0.rel: is) => Libertad
What is the chemical composition of 14 karat gold?	genuine amethyst stud earrings	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: genuine Amethyst stud earrings, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: are crafted of) => genuine Amethyst stud earrings
What is the chemical composition of 14 karat gold?	fork logo	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Fork logo, r0.namespace: reverb, r0.arg2: 14 Karat Gold, r0.rel: are also applied) => Fork logo
What is the chemical composition of 14 karat gold?	orolatina	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: OroLatina, r0.namespace: reverb, r0.arg2: Genuine 14 Karat Gold, r0.rel: are) => OroLatina
What is the chemical composition of 14 karat gold?	sterling silver	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: sterling silver, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => sterling silver
What is the chemical composition of 14 karat gold?	set	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The set, r0.namespace: reverb, r0.arg2: durable 14 karat gold, r0.rel: is plated in) => The set
What is the chemical composition of 14 karat gold?	drop bezel	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: drop bezel, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => drop bezel
What is the chemical composition of 14 karat gold?	figure	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: the figure, r0.namespace: reverb, r0.arg2: 14-karat green gold, r0.rel: stands is) => the figure
What is the chemical composition of 14 karat gold?	14 karat gold filled piece	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: a 14 karat gold filled piece, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => a 14 karat gold filled piece
What is the chemical composition of 14 karat gold?	outer surface	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: the outer surface, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => the outer surface
What is the chemical composition of 14 karat gold?	posts	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: the posts, r0.namespace: reverb, r0.arg2: 14 karat yellow gold, r0.rel: are in) => the posts
What is the chemical composition of 14 karat gold?	shank	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The shank, r0.namespace: reverb, r0.arg2: 14 karat antique gold, r0.rel: is made of) => The shank
What is the chemical composition of 14 karat gold?	lorgnette	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The Lorgnette, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is marked) => The Lorgnette
What is the chemical composition of 14 karat gold?	offer	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: offer, r0.namespace: reverb, r0.arg2: solid 14 Karat gold, r0.rel: are) => offer
What is the chemical composition of 14 karat gold?	genuine peridot stud earrings	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: genuine Peridot stud earrings, r0.namespace: openie4, r0.arg2: 14 karat gold, r0.rel: are crafted of) => genuine Peridot stud earrings
What is the chemical composition of 14 karat gold?	iconic rolex oyster case	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The iconic Rolex Oyster case, r0.namespace: reverb, r0.arg2: solid 14 karat gold, r0.rel: is crafted in) => The iconic Rolex Oyster case
What is the chemical composition of 14 karat gold?	cup	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: the cup, r0.namespace: reverb, r0.arg2: 14-karat gold, r0.rel: is) => the cup
What is the chemical composition of 14 karat gold?	laser	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: a laser, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: were fashioned from) => a laser
What is the chemical composition of 14 karat gold?	stylish earring	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Each stylish earring, r0.namespace: reverb, r0.arg2: 14-karat white gold, r0.rel: is comprised of) => Each stylish earring
What is the chemical composition of 14 karat gold?	earrings	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The earrings, r0.namespace: reverb, r0.arg2: 14-karat white gold, r0.rel: are crafted of) => The earrings
What is the chemical composition of 14 karat gold?	58 % gold	1.0	what do 14 karat gold contain ? => $x: (14 karat gold, contain, $x) => $x: (14 karat gold, contain, $x) => (r0.arg1: 14 karat gold, r0.namespace: reverb, r0.arg2: 58 % gold, r0.rel: usually contains approximately) => 58 % gold
What is the chemical composition of 14 karat gold?	rhodolite stud earrings	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Rhodolite stud earrings, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: are crafted of) => Rhodolite stud earrings
What is the chemical composition of 14 karat gold?	14 parts	1.0	what do 14 karat gold contain ? => $x: (14 karat gold, contain, $x) => $x: (14 karat gold, contain, $x) => (r0.arg1: 14 karat gold, r0.namespace: reverb, r0.arg2: 14 parts, r0.rel: contains) => 14 parts
What is the chemical composition of 14 karat gold?	cross pendant	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Each cross pendant, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => Each cross pendant
What is the chemical composition of 14 karat gold?	fountain pen nibs	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: Fountain pen nibs, r0.namespace: reverb, r0.arg2: 14-Karat/18-Karat Gold, r0.rel: can be made from) => Fountain pen nibs
What is the chemical composition of 14 karat gold?	graduated marquis gems	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: graduated marquis gems, r0.namespace: reverb, r0.arg2: 14 karat gold luxury, r0.rel: are set in) => graduated marquis gems
What is the chemical composition of 14 karat gold?	58.3 %	1.0	what do 14 karat gold contain ? => $x: (14 karat gold, contain, $x) => $x: (14 karat gold, contain, $x) => (r0.arg1: a 14-karat gold item, r0.namespace: reverb, r0.arg2: 58.3 %, r0.rel: contains) => 58.3 %
What is the chemical composition of 14 karat gold?	band	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The band, r0.namespace: reverb, r0.arg2: 14-karat yellow gold, r0.rel: is crafted of) => The band
What is the chemical composition of 14 karat gold?	energetic symbols	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: energetic symbols, r0.namespace: reverb, r0.arg2: 14 karat gold fill, r0.rel: are hung from) => energetic symbols
What is the chemical composition of 14 karat gold?	lever	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: The lever, r0.namespace: reverb, r0.arg2: 14 Karat White Gold, r0.rel: is) => The lever
What is the chemical composition of 14 karat gold?	product	1.0	what be 14 karat gold ? => $x: ($x, be, 14 karat gold) => $x: ($x, be, 14 karat gold) => (r0.arg1: such a product, r0.namespace: reverb, r0.arg2: 14 karat gold, r0.rel: is) => such a product
When was Arthur Ashe born?	richmond	4.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: Richmond, r0.rel: was born in) => Richmond; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: Richmond, r0.rel: was born in) => Richmond
When was Arthur Ashe born?	1943	4.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, was born in, $x) => $x: (Arthur Ashe, was born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: reverb, r0.arg2: 1943, r0.rel: was born in) => 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born in, $x) => $x: (Arthur Ashe, born in, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: 1943, r0.rel: was born in) => 1943
When was Arthur Ashe born?	finals	2.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The finals, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: will be played on) => The finals; who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The finals, r0.namespace: openie4, r0.arg2: Arthur Ashe Stadium, r0.rel: will be played on) => The finals
When was Arthur Ashe born?	pat	2.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Pat, r0.namespace: reverb, r0.arg2: ATP Arthur Ashe humanitarian award, r0.rel: was awarded) => Pat; who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Pat, r0.namespace: reverb, r0.arg2: the Arthur Ashe Courage Award, r0.rel: was a recipient of) => Pat
When was Arthur Ashe born?	july 10 , 1943	2.0	When was Arthur Ashe born? => $x: (Arthur Ashe, was born on, $x) => $x: (Arthur Ashe, was born on, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: July 10 , 1943, r0.rel: was born on) => July 10 , 1943; When was Arthur Ashe born? => $x: (Arthur Ashe, born on, $x) => $x: (Arthur Ashe, born on, $x) => (r0.arg1: Arthur Ashe, r0.namespace: openie4, r0.arg2: July 10 , 1943, r0.rel: was born on) => July 10 , 1943
When was Arthur Ashe born?	arthur ashe stadium	2.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Arthur Ashe Stadium, r0.namespace: reverb, r0.arg2: an Arthur Ashe Stadium ticket, r0.rel: is) => Arthur Ashe Stadium; who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: arthur ashe stadium, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Arthur%20Ashe%20Stadium, r0.rel: can be found on Wikipedia at) => arthur ashe stadium
When was Arthur Ashe born?	virus	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the virus, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: was) => the virus
When was Arthur Ashe born?	american express	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: American Express, r0.namespace: reverb, r0.arg2: Arthur Ashe Kids, r0.rel: is the official card of) => American Express
When was Arthur Ashe born?	tournament	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the Tournament, r0.namespace: reverb, r0.arg2: Arthur Ashe Kids Day, r0.rel: is) => the Tournament
When was Arthur Ashe born?	second shoes revival	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The second shoes revival, r0.namespace: reverb, r0.arg2: the Arthur Ashe, r0.rel: is) => The second shoes revival
When was Arthur Ashe born?	black history ...presented	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Black History ...Presented, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: here is) => Black History ...Presented
When was Arthur Ashe born?	tennis	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Tennis, r0.namespace: nell, r0.arg2: arthur ashe stadium, r0.rel: is a sport played in the venue) => Tennis
When was Arthur Ashe born?	finalist	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: a finalist, r0.namespace: reverb, r0.arg2: a two-time Arthur Ashe, r0.rel: is) => a finalist
When was Arthur Ashe born?	newest monument	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the newest monument, r0.namespace: reverb, r0.arg2: Arthur Ashe Jr., r0.rel: is dedicated to) => the newest monument
When was Arthur Ashe born?	arthur ashe athletic center	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Arthur Ashe Athletic Center, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Arthur%20Ashe%20Athletic%20Center, r0.rel: can be found on Wikipedia at) => Arthur Ashe Athletic Center
When was Arthur Ashe born?	us open	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The US Open, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: is held at) => The US Open
When was Arthur Ashe born?	aids syndrome	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the AIDS syndrome, r0.namespace: reverb, r0.arg2: tennis star Arthur Ashe, r0.rel: are) => the AIDS syndrome
When was Arthur Ashe born?	competition	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: competition, r0.namespace: reverb, r0.arg2: the Arthur Ashe Center, r0.rel: is held at) => competition
When was Arthur Ashe born?	29 sybille bammer	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: 29 Sybille Bammer, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: was moved from) => 29 Sybille Bammer
When was Arthur Ashe born?	grace	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Grace, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: is a book by) => Grace
When was Arthur Ashe born?	moutoussamy-ashe	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Moutoussamy-Ashe, r0.namespace: reverb, r0.arg2: the Arthur Ashe Endowment, r0.rel: is a director of) => Moutoussamy-Ashe
When was Arthur Ashe born?	nation	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the nation, r0.namespace: reverb, r0.arg2: Arthur Ashe Jr. Sports Scholars, r0.rel: have been named) => the nation
When was Arthur Ashe born?	1990	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: 1990, r0.namespace: reverb, r0.arg2: the Arthur Ashe Courage, r0.rel: was awarded) => 1990
When was Arthur Ashe born?	berhane	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Berhane, r0.namespace: reverb, r0.arg2: the Arthur Ashe Jr. Award, r0.rel: was honored with) => Berhane
When was Arthur Ashe born?	wife	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: wife, r0.namespace: reverb, r0.arg2: the Arthur Ashe Endowment, r0.rel: is a Director of) => wife
When was Arthur Ashe born?	mind	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: mind, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: is) => mind
When was Arthur Ashe born?	most famous examples	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the most famous examples, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: is) => the most famous examples
When was Arthur Ashe born?	gabou	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Gabou, r0.namespace: reverb, r0.arg2: a first team Arthur Ashe Scholar, r0.rel: was) => Gabou
When was Arthur Ashe born?	awards	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The awards, r0.namespace: reverb, r0.arg2: tennis legend Arthur Ashe Jr., r0.rel: were inspired by) => The awards
When was Arthur Ashe born?	omg run	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: OMG RUN, r0.namespace: reverb, r0.arg2: ARTHUR ASHE, r0.rel: IS RELATED TO) => OMG RUN
When was Arthur Ashe born?	njtl	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The NJTL, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: was established by) => The NJTL
When was Arthur Ashe born?	aids	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: AIDS, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: was founded by) => AIDS
When was Arthur Ashe born?	teammate	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: a teammate, r0.namespace: reverb, r0.arg2: the Arthur Ashe Courage Award, r0.rel: were presented) => a teammate
When was Arthur Ashe born?	frank garry	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Frank Garry, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: has been referred to in) => Frank Garry
When was Arthur Ashe born?	citi field	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Citi Field, r0.namespace: reverb, r0.arg2: the Arthur Ashe Stadium, r0.rel: is) => Citi Field
When was Arthur Ashe born?	andre	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Andre, r0.namespace: reverb, r0.arg2: the Arthur Ashe Humanitarian Award, r0.rel: was awarded) => Andre
When was Arthur Ashe born?	conjunction	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: conjunction, r0.namespace: reverb, r0.arg2: Arthur Ashe stadium, r0.rel: is currently available at) => conjunction
When was Arthur Ashe born?	quddus	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Quddus, r0.namespace: reverb, r0.arg2: Arthur Ashe Kids ? Day, r0.rel: is hosting) => Quddus
When was Arthur Ashe born?	winners	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Winners, r0.namespace: reverb, r0.arg2: Arthur Ashe Kids ? Day, r0.rel: are guests on) => Winners
When was Arthur Ashe born?	yehyawi	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Yehyawi, r0.namespace: reverb, r0.arg2: a two-time first-team Arthur Ashe, r0.rel: is also) => Yehyawi
When was Arthur Ashe born?	harvard yard	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Harvard Yard, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: is) => Harvard Yard
When was Arthur Ashe born?	hotel	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the hotel, r0.namespace: reverb, r0.arg2: the acclaimed Arthur Ashe Tennis Center, r0.rel: is also) => the hotel
When was Arthur Ashe born?	one contender	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: one contender, r0.namespace: reverb, r0.arg2: tennis superstar Arthur Ashe, r0.rel: was) => one contender
When was Arthur Ashe born?	first black male champion	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The first black male champion, r0.namespace: reverb, r0.arg2: Arthur Ashe, r0.rel: was) => The first black male champion
When was Arthur Ashe born?	espn analyst jim valvano	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: ESPN analyst Jim Valvano, r0.namespace: reverb, r0.arg2: the Arthur Ashe Courage, r0.rel: was awarded) => ESPN analyst Jim Valvano
When was Arthur Ashe born?	property	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the property, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: is) => the property
When was Arthur Ashe born?	flight 93	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Flight 93, r0.namespace: reverb, r0.arg2: the Arthur Ashe Award, r0.rel: were honored with) => Flight 93
When was Arthur Ashe born?	match	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: The match, r0.namespace: reverb, r0.arg2: Arthur Ashe Stadium, r0.rel: was played at) => The match
When was Arthur Ashe born?	ruth c. browne	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: Ruth C. Browne, r0.namespace: reverb, r0.arg2: the Arthur Ashe Institute, r0.rel: is CEO of) => Ruth C. Browne
When was Arthur Ashe born?	pair	1.0	who be arthur ashe ? => $x: ($x, be, arthur ashe) => $x: ($x, be, arthur ashe) => (r0.arg1: the pair, r0.namespace: reverb, r0.arg2: the Arthur Ashe Courage Award, r0.rel: were given) => the pair
What county is Mesa Arizona in?	beautiful east mesa	2.0	where be mesa arizona locate ? => $x: (mesa arizona, locate in, $x) => $x: (mesa arizona, locate in, $x) => (r0.arg1: Carlson Mesa Arizona, r0.namespace: reverb, r0.arg2: beautiful East Mesa, r0.rel: is located in) => beautiful East Mesa; where be mesa arizona located ? => $x: (mesa arizona, located in, $x) => $x: (mesa arizona, located in, $x) => (r0.arg1: Carlson Mesa Arizona, r0.namespace: reverb, r0.arg2: beautiful East Mesa, r0.rel: is located in) => beautiful East Mesa
What county is Mesa Arizona in?	performance amc dealer	2.0	what be mesa arizona know as ? => $x: (mesa arizona, be know as, $x) => $x: (mesa arizona, be know as, $x) => (r0.arg1: Mesa Arizona, r0.namespace: reverb, r0.arg2: a Performance AMC Dealer, r0.rel: was already know as) => a Performance AMC Dealer; what be mesa arizona know as ? => $x: (mesa arizona, know as, $x) => $x: (mesa arizona, know as, $x) => (r0.arg1: Mesa Arizona, r0.namespace: reverb, r0.arg2: a Performance AMC Dealer, r0.rel: was already know as) => a Performance AMC Dealer
What county is Mesa Arizona in?	america	2.0	what city be mesa arizona ? => $x: ($x, "type", city) ($x, be, mesa arizona) => $x: ($x, "type", city) ($x, be, mesa arizona) => (r0.arg1: America, r1.rel: will be on, r0.namespace: freebase, r1.arg2: Arizona and Mesa, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: America) => America; what state be mesa arizona ? => $x: ($x, "is a kind of", state) ($x, be, mesa arizona) => $x: ($x, "is a kind of", state) ($x, be, mesa arizona) => (r0.arg1: America, r1.rel: will be on, r0.namespace: reverb, r1.arg2: Arizona and Mesa, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: America) => America
What county is Mesa Arizona in?	hanks	1.0	what city be mesa arizona ? => $x: ($x, "type", city) ($x, be, mesa arizona) => $x: ($x, "type", city) ($x, be, mesa arizona) => (r0.arg1: Hanks, r1.rel: is currently living in, r0.namespace: freebase, r1.arg2: the Mesa , Arizona area, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Hank) => Hanks
What county is Mesa Arizona in?	audra	1.0	what city be mesa arizona ? => $x: ($x, "type", city) ($x, be, mesa arizona) => $x: ($x, "type", city) ($x, be, mesa arizona) => (r0.arg1: Audra, r1.rel: is, r0.namespace: freebase, r1.arg2: the Mesa , Arizona-based quartet, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Audra) => Audra
What county is Mesa Arizona in?	red mesa	1.0	what county be mesa arizona ? => $x: ($x, "type", county) ($x, be, mesa arizona) => $x: ($x, "type", county) ($x, be, mesa arizona) => (r0.arg1: Red Mesa, r1.rel: can be found on Wikipedia at, r0.namespace: freebase, r1.arg2: http://en.wikipedia.org/wiki/Red%20Mesa,%20Arizona, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: nell, r1.arg1: Red Mesa) => Red Mesa
What county is Mesa Arizona in?	arizona temple	1.0	what be mesa arizona know as ? => $x: (mesa arizona, know as, $x) => $x: (mesa arizona, know as, $x) => (r0.arg1: Mesa Arizona Temple, r0.namespace: freebase, r0.arg2: Arizona Temple, r0.rel: Also known as) => Arizona Temple
What county is Mesa Arizona in?	mesa, az	1.0	what be mesa arizona know as ? => $x: (mesa arizona, know as, $x) => $x: (mesa arizona, know as, $x) => (r0.arg1: Mesa, Arizona, r0.namespace: freebase, r0.arg2: Mesa, AZ, r0.rel: Also known as) => Mesa, AZ
When and where was baseball invented?	england	64.0	what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Place of interment, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Place of interment, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Place of interment, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: England, r0.rel: was invented in) => England; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: England, r0.rel: invented in) => England; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: England, r0.rel: invented in) => England; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: England, r0.rel: was invented in) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: england, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: baseball) => england; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: england, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: baseball) => england; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: england, r1.rel: was invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => england; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: UK constituent country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: England, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => England; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: england, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: baseball) => england; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: england, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: baseball) => england; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: england, r1.rel: was invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => england
When and where was baseball invented?	canada	48.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball & Hockey, r0.namespace: reverb, r0.arg2: Canada, r0.rel: were invented in) => Canada; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: the baseball glove, r0.namespace: openie4, r0.arg2: Canada, r0.rel: was invented in) => Canada; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: reverb, r0.arg2: Canada, r0.rel: was invented in) => Canada; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball & Hockey, r0.namespace: reverb, r0.arg2: Canada, r0.rel: were invented in) => Canada; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: the baseball glove, r0.namespace: openie4, r0.arg2: Canada, r0.rel: was invented in) => Canada; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: reverb, r0.arg2: Canada, r0.rel: was invented in) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent in ? => $x: ($x, "type", country) (baseball, invent in, $x) => $x: ($x, "type", country) (baseball, invent in, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: were invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada; what country be baseball invent ? => $x: ($x, "type", country) (baseball, invent, $x) => $x: ($x, "type", country) (baseball, invent, $x) => (r0.arg1: Canada, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Canada, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada
When and where was baseball invented?	america	12.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: America, r0.rel: was invented in) => America; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: America, r0.rel: was invented in) => America; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: America, r0.rel: was invented in) => America; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: America, r0.rel: was invented in) => America; what country be baseball invent in ? => $x: ($x, "is an example of", country) (baseball, invent in, $x) => $x: ($x, "is an example of", country) (baseball, invent in, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: openie4, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Baseball) => America; what country be baseball invent in ? => $x: ($x, "is an example of", country) (baseball, invent in, $x) => $x: ($x, "is an example of", country) (baseball, invent in, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: openie4, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Baseball) => America; what country be baseball invent in ? => $x: ($x, "is an example of", country) (baseball, invent in, $x) => $x: ($x, "is an example of", country) (baseball, invent in, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: reverb, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Baseball) => America; what country be baseball invent in ? => $x: ($x, "is an example of", country) (baseball, invent in, $x) => $x: ($x, "is an example of", country) (baseball, invent in, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: reverb, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Baseball) => America; what country be baseball invent ? => $x: ($x, "is an example of", country) (baseball, invent, $x) => $x: ($x, "is an example of", country) (baseball, invent, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: openie4, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Baseball) => America; what country be baseball invent ? => $x: ($x, "is an example of", country) (baseball, invent, $x) => $x: ($x, "is an example of", country) (baseball, invent, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: reverb, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Baseball) => America; what country be baseball invent ? => $x: ($x, "is an example of", country) (baseball, invent, $x) => $x: ($x, "is an example of", country) (baseball, invent, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: openie4, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Baseball) => America; what country be baseball invent ? => $x: ($x, "is an example of", country) (baseball, invent, $x) => $x: ($x, "is an example of", country) (baseball, invent, $x) => (r0.arg1: America, r1.rel: was invented in, r0.namespace: reverb, r1.arg2: America, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Baseball) => America
When and where was baseball invented?	1839	10.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was Invented in) => 1839; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: The Game of Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was Invented in) => 1839; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: The Game of Baseball, r0.namespace: openie4, r0.arg2: 1839, r0.rel: was invented in) => 1839
When and where was baseball invented?	cooperstown	9.0	what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Cooperstown, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Cooperstown, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: baseball) => Cooperstown; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Cooperstown, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Cooperstown, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => Cooperstown; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Cooperstown, r1.rel: was invented in, r0.namespace: freebase, r1.arg2: Cooperstown, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: baseball) => Cooperstown; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: openie4, r0.arg2: Cooperstown, r0.rel: was invented in) => Cooperstown
When and where was baseball invented?	canada -	6.0	what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: Canada - On, r1.rel: were invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada - On; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: Canada - On, r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada - On; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: Canada - On, r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada - On; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: Canada - On, r1.rel: were invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => Canada - On; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: Canada - On, r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: the baseball glove) => Canada - On; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: Canada - On, r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The baseball glove) => Canada - On
When and where was baseball invented?	canada.	6.0	what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: CANADA., r1.rel: were invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => CANADA.; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: CANADA., r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: the baseball glove) => CANADA.; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: CANADA., r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The baseball glove) => CANADA.; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: CANADA., r1.rel: were invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball & Hockey) => CANADA.; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: CANADA., r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: the baseball glove) => CANADA.; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: CANADA., r1.rel: was invented in, r0.namespace: nell, r1.arg2: Canada, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The baseball glove) => CANADA.
When and where was baseball invented?	uk, england	6.0	what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: UK, England, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: baseball) => UK, England; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: UK, England, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: baseball) => UK, England; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: UK, England, r1.rel: was invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => UK, England; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: UK, England, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: baseball) => UK, England; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: UK, England, r1.rel: invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: baseball) => UK, England; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: UK, England, r1.rel: was invented in, r0.namespace: nell, r1.arg2: England, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => UK, England
When and where was baseball invented?	? america	4.0	what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: ? America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Baseball) => ? America; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: ? America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => ? America; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: ? America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Baseball) => ? America; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: ? America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => ? America
When and where was baseball invented?	maine	4.0	what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Maine, r1.rel: Really Invented in, r0.namespace: freebase, r1.arg2: Maine, r0.arg2: Place of interment, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => Maine; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Maine, r1.rel: Really Invented in, r0.namespace: freebase, r1.arg2: Maine, r0.arg2: Military unit place of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball) => Maine; what place be baseball invent ? => $x: ($x, "is a", place) (baseball, invent, $x) => $x: ($x, "is a", place) (baseball, invent, $x) => (r0.arg1: maine, r1.rel: Really Invented in, r0.namespace: nell, r1.arg2: Maine, r0.arg2: place to ski, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => maine; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: Maine, r0.rel: Really Invented in) => Maine
When and where was baseball invented?	uk, america	4.0	what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: UK, America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Baseball) => UK, America; what country be baseball invent in ? => $x: ($x, "is a", country) (baseball, invent in, $x) => $x: ($x, "is a", country) (baseball, invent in, $x) => (r0.arg1: UK, America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => UK, America; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: UK, America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Baseball) => UK, America; what country be baseball invent ? => $x: ($x, "is a", country) (baseball, invent, $x) => $x: ($x, "is a", country) (baseball, invent, $x) => (r0.arg1: UK, America, r1.rel: was invented in, r0.namespace: nell, r1.arg2: America, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Baseball) => UK, America
When and where was baseball invented?	1883	4.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: reverb, r0.arg2: 1883, r0.rel: was invented in) => 1883; when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: openie4, r0.arg2: 1883, r0.rel: was invented in) => 1883; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: reverb, r0.arg2: 1883, r0.rel: was invented in) => 1883; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: The baseball glove, r0.namespace: openie4, r0.arg2: 1883, r0.rel: was invented in) => 1883
When and where was baseball invented?	brooklyn	3.0	what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Brooklyn, r1.rel: is invented by, r0.namespace: freebase, r1.arg2: Brooklyn, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball?s curve ball pitch) => Brooklyn; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Brooklyn, r1.rel: is invented by, r0.namespace: freebase, r1.arg2: Brooklyn, r0.arg2: Place of interment, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball?s curve ball pitch) => Brooklyn; what place be baseball invent ? => $x: ($x, "type", place) (baseball, invent, $x) => $x: ($x, "type", place) (baseball, invent, $x) => (r0.arg1: Brooklyn, r1.rel: is invented by, r0.namespace: freebase, r1.arg2: Brooklyn, r0.arg2: Place with neighborhoods, r0.rel: Type, r1.namespace: reverb, r1.arg1: Baseball?s curve ball pitch) => Brooklyn
When and where was baseball invented?	1964	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Beep Baseball, r0.namespace: reverb, r0.arg2: 1964, r0.rel: was invented in) => 1964; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Beep Baseball, r0.namespace: reverb, r0.arg2: 1964, r0.rel: was invented in) => 1964
When and where was baseball invented?	quaint rural town	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: a quaint rural town, r0.rel: was invented in) => a quaint rural town; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball, r0.namespace: reverb, r0.arg2: a quaint rural town, r0.rel: was invented in) => a quaint rural town
When and where was baseball invented?	1834 tilton	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: 1834 Tilton, r0.rel: was invented in) => 1834 Tilton; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Baseball, r0.namespace: reverb, r0.arg2: 1834 Tilton, r0.rel: was invented in) => 1834 Tilton
When and where was baseball invented?	men	2.0	what be baseball invent for ? => $x: (baseball, be invent for, $x) => $x: (baseball, be invent for, $x) => (r0.arg1: the baseball cap, r0.namespace: reverb, r0.arg2: men, r0.rel: was invented for) => men; what be baseball invent for ? => $x: (baseball, invent for, $x) => $x: (baseball, invent for, $x) => (r0.arg1: the baseball cap, r0.namespace: reverb, r0.arg2: men, r0.rel: was invented for) => men
When and where was baseball invented?	1920s	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: Metal baseball bats, r0.namespace: reverb, r0.arg2: the 1920s, r0.rel: were invented in) => the 1920s; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: Metal baseball bats, r0.namespace: reverb, r0.arg2: the 1920s, r0.rel: were invented in) => the 1920s
When and where was baseball invented?	1884	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: baseball bat, r0.namespace: reverb, r0.arg2: 1884, r0.rel: was invented in) => 1884; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: baseball bat, r0.namespace: reverb, r0.arg2: 1884, r0.rel: was invented in) => 1884
When and where was baseball invented?	1839 ~ contrary	2.0	when be baseball invent ? => $x: (baseball, be invent in, $x) => $x: (baseball, be invent in, $x) => (r0.arg1: ~ Baseball, r0.namespace: reverb, r0.arg2: 1839 ~ Contrary, r0.rel: was Invented in) => 1839 ~ Contrary; when be baseball invent ? => $x: (baseball, invent in, $x) => $x: (baseball, invent in, $x) => (r0.arg1: ~ Baseball, r0.namespace: reverb, r0.arg2: 1839 ~ Contrary, r0.rel: was Invented in) => 1839 ~ Contrary
When and where was baseball invented?	ryan theriot	1.0	what be baseball invent for ? => $x: (baseball, invent for, $x) => $x: (baseball, invent for, $x) => (r0.arg1: A Nincompoop . Baseball statistic, r0.namespace: reverb, r0.arg2: Ryan Theriot, r0.rel: invented for) => Ryan Theriot
What is the other name for the silver?	treasure-chambers	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: all the silver and gold, r0.namespace: reverb, r0.arg2: the treasure-chambers, r0.rel: was left in) => the treasure-chambers
What is the other name for the silver?	sasanian	1.0	what be another name of the silver ? => $x: (the silver, have name of, $x) => $x: (the silver, have name of, $x) => (r0.arg1: the Kama silver, r0.namespace: reverb, r0.arg2: Sasanian, r0.rel: has received a name of) => Sasanian
What is the other name for the silver?	paypal	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: the SILVER pendant as, r0.namespace: reverb, r0.arg2: PayPal, r0.rel: please leave a note in) => PayPal
What is the other name for the silver?	film	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: the silver compound, r0.namespace: reverb, r0.arg2: the film, r0.rel: is therefore left in) => the film
What is the other name for the silver?	stock	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: the silver, r0.namespace: reverb, r0.arg2: stock, r0.rel: left in) => stock
What is the other name for the silver?	flames	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: the silver, r0.namespace: openie4, r0.arg2: the flames, r0.rel: was left too long in) => the flames
What is the other name for the silver?	shafts	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: all the silver, r0.namespace: reverb, r0.arg2: the shafts, r0.rel: left in) => the shafts
What is the other name for the silver?	treasuries	1.0	where do the silver leave ? => $x: (the silver, leave in, $x) => $x: (the silver, leave in, $x) => (r0.arg1: all the silver and gold, r0.namespace: reverb, r0.arg2: the treasuries, r0.rel: was left in) => the treasuries
What is the world's best video game?	game	1.0	what be s best video game ? => $x: ($x, be, s best video game) => $x: ($x, be, s best video game) => (r0.arg1: The game, r0.namespace: reverb, r0.arg2: Valve?s best video game, r0.rel: is) => The game
What is the world's best video game?	sims	1.0	what be the world best selling video game ? => $x: ($x, be, the world best selling video game) => $x: ($x, be, the world best selling video game) => (r0.arg1: The Sims, r0.namespace: reverb, r0.arg2: the worlds best selling video game, r0.rel: is by far) => The Sims
What is the world's best video game?	wii	1.0	what be s best video game ? => $x: ($x, be, s best video game) => $x: ($x, be, s best video game) => (r0.arg1: The wii, r0.namespace: reverb, r0.arg2: Amazon?s best selling video game, r0.rel: is) => The wii
Which island is the most popular?	santorini	17.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most beautiful Island, r0.rel: is) => Santorini; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is amongst) => Santorini; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Santorini; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is one of) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most famous islands, r0.rel: is one of) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is undoubtedly one of) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most famous Greek island, r0.rel: is) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: openie4, r0.arg2: the most famous Greek Islands, r0.rel: is one of) => Santorini; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Santorini, r0.namespace: reverb, r0.arg2: the most famous Greek islands, r0.rel: is one of) => Santorini
Which island is the most popular?	maui	17.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Maui, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Maui; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => Maui; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Maui, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Maui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Maui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => Maui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Maui, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Maui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the popular Hawaiian Islands, r0.rel: is another one of) => Maui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Maui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Maui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Maui, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => Maui
Which island is the most popular?	corfu	16.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Corfu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Corfu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Corfu; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Corfu, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is one of) => Corfu
Which island is the most popular?	rhodes	16.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rhodes; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek island, r0.rel: is) => Rhodes; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular holiday islands, r0.rel: is one of) => Rhodes; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rhodes; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek island, r0.rel: is) => Rhodes; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular holiday islands, r0.rel: is one of) => Rhodes; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Rhodes; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Rhodes; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rhodes; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek island, r0.rel: is) => Rhodes; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rhodes; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek island, r0.rel: is) => Rhodes; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular holiday islands, r0.rel: is one of) => Rhodes; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Rhodes; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rhodes, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Rhodes; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Rhodes, r0.namespace: openie4, r0.arg2: a popular island of Greece, r0.rel: being) => Rhodes
Which island is the most popular?	oahu	14.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Oahu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Oahu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most beautiful Islands, r0.rel: is truly one of) => Oahu; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Oahu, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: being one of) => Oahu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Oahu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Oahu; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Oahu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Oahu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Oahu, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Oahu
Which island is the most popular?	mykonos	12.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Mykonos, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Mykonos; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mykonos, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Mykonos, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mykonos, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Mykonos; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Mykonos, r0.namespace: openie4, r0.arg2: a quite popular island of Greece, r0.rel: is) => Mykonos; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most famous island, r0.rel: is arguably) => Mykonos; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Mykonos, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is one of) => Mykonos
Which island is the most popular?	jamaica	10.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Jamaica; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular Caribbean islands, r0.rel: is one of) => Jamaica; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Jamaica, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Jamaica; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Jamaica; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Jamaica; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular Caribbean islands, r0.rel: is one of) => Jamaica; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Jamaica; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Jamaica; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most popular Caribbean islands, r0.rel: is one of) => Jamaica; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Jamaica, r0.namespace: reverb, r0.arg2: the most famous Caribbean island, r0.rel: is probably) => Jamaica
Which island is the most popular?	kauai	10.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Kauai; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kauai; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: is) => Kauai; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Kauai; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kauai; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Kauai; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kauai; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Kauai; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kauai; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Kauai, r0.namespace: reverb, r0.arg2: a popular island, r0.rel: is) => Kauai
Which island is the most popular?	bali	10.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Bali, r0.namespace: openie4, r0.arg2: most popular islands, r0.rel: is one of) => Bali; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Bali, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Bali; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: is Bali, r0.namespace: reverb, r0.arg2: the most popular island destinations, r0.rel: is one of) => is Bali; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bali, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Bali; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bali, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Bali; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Bali, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Bali; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: is Bali, r0.namespace: reverb, r0.arg2: the most popular island destinations, r0.rel: is one of) => is Bali; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Bali, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Bali; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Bali, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Bali; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: is Bali, r0.namespace: reverb, r0.arg2: the most popular island destinations, r0.rel: is one of) => is Bali
Which island is the most popular?	barbados	9.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Barbados, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Barbados, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Barbados, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Barbados; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Barbados, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Barbados, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Barbados, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Barbados, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Barbados, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Barbados, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Barbados
Which island is the most popular?	big island	8.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: the Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are) => the Big Island; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: The Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => The Big Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: the Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are) => the Big Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => The Big Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: the Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are) => the Big Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: The Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => The Big Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: the Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are) => the Big Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Big Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => The Big Island
Which island is the most popular?	sylt	8.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Sylt, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Sylt; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Sylt, r0.namespace: openie4, r0.arg2: far the most popular island, r0.rel: is by) => Sylt; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sylt, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Sylt; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sylt, r0.namespace: openie4, r0.arg2: far the most popular island, r0.rel: is by) => Sylt; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Sylt, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Sylt; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sylt, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is by far) => Sylt; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sylt, r0.namespace: openie4, r0.arg2: far the most popular island, r0.rel: is by) => Sylt; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Sylt, r0.namespace: reverb, r0.arg2: a popular holiday island, r0.rel: is) => Sylt
Which island is the most popular?	kefalonia	8.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Kefalonia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Kefalonia, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kefalonia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kefalonia, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Kefalonia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Kefalonia, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kefalonia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Kefalonia, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Kefalonia
Which island is the most popular?	phuket	8.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is most likely among) => Phuket; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: are among) => Phuket; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is most likely among) => Phuket; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is most likely among) => Phuket; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the popular Raya Yai Island, r0.rel: is) => Phuket; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is most likely among) => Phuket; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is most likely among) => Phuket; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Phuket, r0.namespace: reverb, r0.arg2: the most famous resort island, r0.rel: is) => Phuket
Which island is the most popular?	cuba	7.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Cuba, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Cuba, r0.namespace: openie4, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Cuba, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: is) => Cuba; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cuba, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cuba, r0.namespace: openie4, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cuba, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cuba, r0.namespace: openie4, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Cuba
Which island is the most popular?	hamilton island	7.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Hamilton Island; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular Whitsunday islands, r0.rel: is one of) => Hamilton Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Hamilton Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular Whitsunday islands, r0.rel: is one of) => Hamilton Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Hamilton Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Hamilton Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Hamilton Island, r0.namespace: reverb, r0.arg2: the most popular Whitsunday islands, r0.rel: is one of) => Hamilton Island
Which island is the most popular?	st . lucia	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: St . Lucia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => St . Lucia; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: St . Lucia, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: is) => St . Lucia; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: St . Lucia, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => St . Lucia; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: St . Lucia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => St . Lucia; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: St . Lucia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => St . Lucia; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: St . Lucia, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => St . Lucia
Which island is the most popular?	koh samui	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Koh Samui, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is now) => Koh Samui; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Koh Samui, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Koh Samui; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Koh Samui, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: is one of) => Koh Samui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Koh Samui, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is now) => Koh Samui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Koh Samui, r0.namespace: reverb, r0.arg2: the popular tropical island, r0.rel: is) => Koh Samui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Koh Samui, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is now) => Koh Samui
Which island is the most popular?	bora bora	6.0	what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bora Bora, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Bora Bora; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bora Bora, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: has been described as) => Bora Bora; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bora Bora, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Bora Bora; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Bora Bora, r0.namespace: reverb, r0.arg2: the most beautiful island, r0.rel: has been called) => Bora Bora; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Bora Bora, r0.namespace: reverb, r0.arg2: the most famous islands, r0.rel: is indeed one of) => Bora Bora; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Bora Bora, r0.namespace: reverb, r0.arg2: the most famous tropical islands, r0.rel: is one of) => Bora Bora
Which island is the most popular?	antigua	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is probably) => Antigua; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Antigua; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is probably) => Antigua; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the foremost popular island, r0.rel: is) => Antigua; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is probably) => Antigua; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is probably) => Antigua
Which island is the most popular?	ionian	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: The Ionian, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: The Ionian, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Ionian, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Ionian, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Ionian, r0.namespace: openie4, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Ionian, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: are some of) => The Ionian
Which island is the most popular?	hawaii	6.0	what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: a crescent shaped ?island ? popular, r0.rel: is) => Hawaii; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: a popular , stunning , spectacular island, r0.rel: is) => Hawaii; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: such a popular , stunning , superb island, r0.rel: is) => Hawaii; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Hawaii, r0.namespace: openie4, r0.arg2: such a popular , stunning , superb island, r0.rel: is) => Hawaii; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: the most famous island, r0.rel: is) => Hawaii; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: the most famous tropical island, r0.rel: is easily) => Hawaii
Which island is the most popular?	mallorca	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Mallorca, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Mallorca; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Mallorca, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Mallorca; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Mallorca, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Mallorca; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mallorca, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Mallorca; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mallorca, r0.namespace: reverb, r0.arg2: the most popular tourist islands, r0.rel: is one of) => Mallorca; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: Mallorca, r0.namespace: reverb, r0.arg2: a very popular holiday island, r0.rel: is) => Mallorca
Which island is the most popular?	2011 oahu	6.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: openie4, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu; what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: openie4, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: openie4, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2011 Oahu, r0.namespace: reverb, r0.arg2: the most popular Hawaiian Islands, r0.rel: is one of) => 2011 Oahu
Which island is the most popular?	largest	5.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => the largest; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => the largest; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => the largest; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => the largest; what be a popular island ? => $x: ($x, be, a popular island) => $x: ($x, be, a popular island) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: a popular tourist island, r0.rel: is) => the largest
Which island is the most popular?	2010 gran canaria	5.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: 2010 Gran Canaria, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => 2010 Gran Canaria; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2010 Gran Canaria, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => 2010 Gran Canaria; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: 2010 Gran Canaria, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => 2010 Gran Canaria; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: 2010 Gran Canaria, r0.namespace: reverb, r0.arg2: the more popular islands, r0.rel: is one of) => 2010 Gran Canaria; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: 2010 Gran Canaria, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => 2010 Gran Canaria
Which island is the most popular?	crete	5.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Crete, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Crete; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Crete, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Crete; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Crete, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Crete; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Crete, r0.namespace: openie4, r0.arg2: the most popular islands, r0.rel: is one of) => Crete; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Crete, r0.namespace: reverb, r0.arg2: the most famous Greek islands, r0.rel: is one of) => Crete
Which island is the most popular?	samos	5.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Samos, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Samos; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Samos, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Samos; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Samos, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Samos; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Samos, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Samos; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Samos, r0.namespace: reverb, r0.arg2: the most popular Greek islands, r0.rel: is one of) => Samos
Which island is the most popular?	phuket island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Phuket Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Phuket Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Phuket Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Phuket Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Phuket Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Phuket Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Phuket Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Phuket Island
Which island is the most popular?	paradise tour stradbroke island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Paradise Tour Stradbroke Island, r0.namespace: reverb, r0.arg2: the most popular Island, r0.rel: is) => Paradise Tour Stradbroke Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Paradise Tour Stradbroke Island, r0.namespace: reverb, r0.arg2: the most popular Island, r0.rel: is) => Paradise Tour Stradbroke Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Paradise Tour Stradbroke Island, r0.namespace: reverb, r0.arg2: the most popular Island, r0.rel: is) => Paradise Tour Stradbroke Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Paradise Tour Stradbroke Island, r0.namespace: reverb, r0.arg2: the most popular Island, r0.rel: is) => Paradise Tour Stradbroke Island
Which island is the most popular?	sal	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Sal, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is proving to be one of) => Sal; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sal, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is proving to be one of) => Sal; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Sal, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is proving to be one of) => Sal; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Sal, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is proving to be one of) => Sal
Which island is the most popular?	grand caymen island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Grand Caymen Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Grand Caymen Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Grand Caymen Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Grand Caymen Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Grand Caymen Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Grand Caymen Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Grand Caymen Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Grand Caymen Island
Which island is the most popular?	taveuni island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Taveuni Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is undoubtedly) => Taveuni Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Taveuni Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is undoubtedly) => Taveuni Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Taveuni Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is undoubtedly) => Taveuni Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Taveuni Island, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is undoubtedly) => Taveuni Island
Which island is the most popular?	rab	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Rab, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rab; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rab, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rab; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Rab, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rab; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Rab, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Rab
Which island is the most popular?	boracay island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Boracay Island, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Boracay Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Boracay Island, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Boracay Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Boracay Island, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Boracay Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Boracay Island, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Boracay Island
Which island is the most popular?	grand bahama	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Grand Bahama, r0.namespace: reverb, r0.arg2: the second most popular island, r0.rel: is) => Grand Bahama; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Grand Bahama, r0.namespace: reverb, r0.arg2: the second most popular island, r0.rel: is) => Grand Bahama; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Grand Bahama, r0.namespace: reverb, r0.arg2: the second most popular island, r0.rel: is) => Grand Bahama; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Grand Bahama, r0.namespace: reverb, r0.arg2: the second most popular island, r0.rel: is) => Grand Bahama
Which island is the most popular?	ibiza	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Ibiza, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Ibiza; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Ibiza, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Ibiza; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Ibiza, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Ibiza; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Ibiza, r0.namespace: reverb, r0.arg2: the most popular island destination, r0.rel: is) => Ibiza
Which island is the most popular?	mayne saturna	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Mayne and Saturna, r0.namespace: reverb, r0.arg2: the most popular Gulf Islands, r0.rel: are) => Mayne and Saturna; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mayne and Saturna, r0.namespace: reverb, r0.arg2: the most popular Gulf Islands, r0.rel: are) => Mayne and Saturna; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Mayne and Saturna, r0.namespace: reverb, r0.arg2: the most popular Gulf Islands, r0.rel: are) => Mayne and Saturna; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mayne and Saturna, r0.namespace: reverb, r0.arg2: the most popular Gulf Islands, r0.rel: are) => Mayne and Saturna
Which island is the most popular?	hvar	4.0	what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Hvar, r0.namespace: openie4, r0.arg2: the most beautiful islands, r0.rel: is one of) => Hvar; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Hvar, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Hvar; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Hvar, r0.namespace: reverb, r0.arg2: the most famous and seductive Adriatic island, r0.rel: is) => Hvar; what be the most famous island ? => $x: ($x, be, the most famous island) => $x: ($x, be, the most famous island) => (r0.arg1: Hvar, r0.namespace: openie4, r0.arg2: the most famous and seductive Adriatic island, r0.rel: is) => Hvar
Which island is the most popular?	kauai vacations	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: The Kauai vacations, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: are by far) => The Kauai vacations; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Kauai vacations, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: are by far) => The Kauai vacations; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: The Kauai vacations, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: are by far) => The Kauai vacations; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: The Kauai vacations, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: are by far) => The Kauai vacations
Which island is the most popular?	santorini thira	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Santorini or Thira, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini or Thira; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini or Thira, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini or Thira; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Santorini or Thira, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini or Thira; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Santorini or Thira, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Santorini or Thira
Which island is the most popular?	zakynthos	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Zakynthos, r0.namespace: reverb, r0.arg2: the most popular Ionian island, r0.rel: is) => Zakynthos; what be the most beautiful island ? => $x: ($x, be, the most beautiful island) => $x: ($x, be, the most beautiful island) => (r0.arg1: Zakynthos, r0.namespace: reverb, r0.arg2: the most beautiful islands, r0.rel: is one of) => Zakynthos; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Zakynthos, r0.namespace: reverb, r0.arg2: the most popular Ionian island, r0.rel: is) => Zakynthos; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Zakynthos, r0.namespace: reverb, r0.arg2: the most popular Ionian island, r0.rel: is) => Zakynthos
Which island is the most popular?	paradise samui	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: paradise Samui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => paradise Samui; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: paradise Samui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => paradise Samui; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: paradise Samui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => paradise Samui; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: paradise Samui, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => paradise Samui
Which island is the most popular?	mali lo?inj	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Mali Lo?inj, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mali Lo?inj; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mali Lo?inj, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mali Lo?inj; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Mali Lo?inj, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mali Lo?inj; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Mali Lo?inj, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => Mali Lo?inj
Which island is the most popular?	lumut	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Lumut, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Lumut; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Lumut, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Lumut; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Lumut, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Lumut; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Lumut, r0.namespace: reverb, r0.arg2: the most popular island resort, r0.rel: is) => Lumut
Which island is the most popular?	paradise islands	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Paradise islands, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are among) => Paradise islands; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Paradise islands, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are among) => Paradise islands; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Paradise islands, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are among) => Paradise islands; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Paradise islands, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: are among) => Paradise islands
Which island is the most popular?	tenerife	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Tenerife, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Tenerife; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Tenerife, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Tenerife; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Tenerife, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Tenerife; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Tenerife, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Tenerife
Which island is the most popular?	heavenly beaches	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: heavenly beaches, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => heavenly beaches; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: heavenly beaches, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => heavenly beaches; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: heavenly beaches, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => heavenly beaches; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: heavenly beaches, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is one of) => heavenly beaches
Which island is the most popular?	provo	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Provo, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Provo; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Provo, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Provo; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Provo, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Provo; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Provo, r0.namespace: reverb, r0.arg2: the most popular island, r0.rel: is) => Provo
Which island is the most popular?	cousin island	4.0	what be most popular island ? => $x: ($x, be, most popular island) => $x: ($x, be, most popular island) => (r0.arg1: Cousin Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Cousin Island; who be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cousin Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Cousin Island; what be the popular island ? => $x: ($x, be, the popular island) => $x: ($x, be, the popular island) => (r0.arg1: Cousin Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Cousin Island; what be the most popular island ? => $x: ($x, be, the most popular island) => $x: ($x, be, the most popular island) => (r0.arg1: Cousin Island, r0.namespace: reverb, r0.arg2: the most popular islands, r0.rel: is certainly one of) => Cousin Island
What are bacterial cells classified as?	dna	5.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: DNA, r1.rel: can also be introduced into, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: DNA) => DNA; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: DNA, r1.rel: can also be introduced into, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type Profile, r0.rel: Type, r1.namespace: reverb, r1.arg1: DNA) => DNA; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: DNA, r1.rel: can also be introduced into, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type/domain equivalent topic, r0.rel: Type, r1.namespace: reverb, r1.arg1: DNA) => DNA; what type be bacterial cell ? => $x: ($x, "is an example of", type) ($x, be, bacterial cell) => $x: ($x, "is an example of", type) ($x, be, bacterial cell) => (r0.arg1: DNA, r1.rel: can also be introduced into, r0.namespace: reverb, r1.arg2: bacterial cells, r0.arg2: this type, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: DNA) => DNA; what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: bacterial cells, r0.namespace: reverb, r0.arg2: DNA, r0.rel: contain) => DNA
What are bacterial cells classified as?	protein	4.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Protein, r1.rel: are released from, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: proteins) => Protein; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Protein, r1.rel: are released from, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Ingredient Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: proteins) => Protein; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Protein, r1.rel: are released from, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type Profile, r0.rel: Type, r1.namespace: reverb, r1.arg1: proteins) => Protein; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Protein, r1.rel: are released from, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type/domain equivalent topic, r0.rel: Type, r1.namespace: reverb, r1.arg1: proteins) => Protein
What are bacterial cells classified as?	virus	2.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Virus, r1.rel: are released from, r0.namespace: freebase, r1.arg2: the host bacterial cell, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: viruses) => Virus; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Virus, r1.rel: are released from, r0.namespace: freebase, r1.arg2: the host bacterial cell, r0.arg2: Microorganism type, r0.rel: Type, r1.namespace: reverb, r1.arg1: viruses) => Virus
What are bacterial cells classified as?	molecule	2.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Molecule, r1.rel: are toxic to, r0.namespace: freebase, r1.arg2: other bacterial cell membranes, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: molecules) => Molecule; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Molecule, r1.rel: are toxic to, r0.namespace: freebase, r1.arg2: other bacterial cell membranes, r0.arg2: Type Profile, r0.rel: Type, r1.namespace: reverb, r1.arg1: molecules) => Molecule
What are bacterial cells classified as?	example	2.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Example, r1.rel: is responsible for killing, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: example) => Example; what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Example, r1.rel: is responsible for killing, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type Profile, r0.rel: Type, r1.namespace: reverb, r1.arg1: example) => Example
What are bacterial cells classified as?	tegrated viral dna	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: A bacterial cell, r0.namespace: reverb, r0.arg2: tegrated viral DNA, r0.rel: contains in-) => tegrated viral DNA
What are bacterial cells classified as?	gas vacuoles	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: Some bacterial cells, r0.namespace: reverb, r0.arg2: gas vacuoles, r0.rel: contain) => gas vacuoles
What are bacterial cells classified as?	pim	1.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: PIM, r1.rel: were extracted from, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: PIMs) => PIM
What are bacterial cells classified as?	peptidoglycan 4	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: 3. B- Bacterial cell walls, r0.namespace: reverb, r0.arg2: peptidoglycan 4, r0.rel: contain) => peptidoglycan 4
What are bacterial cells classified as?	thousands	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: Even the tiniest bacterial cell, r0.namespace: reverb, r0.arg2: thousands, r0.rel: contains) => thousands
What are bacterial cells classified as?	plasmid	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: the bacterial cell, r0.namespace: openie4, r0.arg2: a plasmid, r0.rel: containing) => a plasmid
What are bacterial cells classified as?	examples	1.0	what type be bacterial cell ? => $x: ($x, "type", type) ($x, be, bacterial cell) => $x: ($x, "type", type) ($x, be, bacterial cell) => (r0.arg1: Examples, r1.rel: is responsible for killing, r0.namespace: freebase, r1.arg2: bacterial cells, r0.arg2: Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: example) => Examples
What are bacterial cells classified as?	5,000 different genes	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: Bacterial cells, r0.namespace: reverb, r0.arg2: 5,000 different genes, r0.rel: contain about) => 5,000 different genes
What are bacterial cells classified as?	chitin	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: certain bacterial cell walls, r0.namespace: reverb, r0.arg2: chitin, r0.rel: also contain) => chitin
What are bacterial cells classified as?	10,000 copies	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: Each bacterial cell, r0.namespace: reverb, r0.arg2: 10,000 copies, r0.rel: contains up to) => 10,000 copies
What are bacterial cells classified as?	peptidoglycan	1.0	what do bacterial cell contain ? => $x: (bacterial cell, contain, $x) => $x: (bacterial cell, contain, $x) => (r0.arg1: Cell walls Most Bacterial cell walls, r0.namespace: reverb, r0.arg2: peptidoglycan, r0.rel: contain) => peptidoglycan
When was the first computers developed?	illinois	14.0	what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: State, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: US State, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: US State, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "type", state) (the first computer, develop at, $x) => $x: ($x, "type", state) (the first computer, develop at, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois; what state be the first computer develop at ? => $x: ($x, "is a", state) (the first computer, develop at, $x) => $x: ($x, "is a", state) (the first computer, develop at, $x) => (r0.arg1: illinois, r1.rel: was developed at, r0.namespace: nell, r1.arg2: Illinois, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: the first super computer) => illinois; what state be the first computer develop at ? => $x: ($x, "is a", state) (the first computer, develop at, $x) => $x: ($x, "is a", state) (the first computer, develop at, $x) => (r0.arg1: illinois, r1.rel: was developed at, r0.namespace: nell, r1.arg2: Illinois, r0.arg2: state or a province, r0.rel: is a, r1.namespace: openie4, r1.arg1: the first super computer) => illinois; what date be first computer develop ? => $x: ($x, "type", date) (first computer, develop, $x) => $x: ($x, "type", date) (first computer, develop, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first super computer) => Illinois; what date be first computer develop ? => $x: ($x, "type", date) (first computer, develop, $x) => $x: ($x, "type", date) (first computer, develop, $x) => (r0.arg1: Illinois, r1.rel: was developed at, r0.namespace: freebase, r1.arg2: Illinois, r0.arg2: Dated location, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first super computer) => Illinois
When was the first computers developed?	early 1980s	12.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: openie4, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: The first computer viruses, r0.namespace: reverb, r0.arg2: the early 1980s, r0.rel: were developed in) => the early 1980s
When was the first computers developed?	1961	11.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; what date be first computer develop ? => $x: ($x, "type", date) (first computer, develop, $x) => $x: ($x, "type", date) (first computer, develop, $x) => (r0.arg1: 1961, r1.rel: was developed in, r0.namespace: freebase, r1.arg2: 1961, r0.arg2: Date, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first computer games) => 1961; what date be first computer develop ? => $x: ($x, "is a", date) (first computer, develop, $x) => $x: ($x, "is a", date) (first computer, develop, $x) => (r0.arg1: 1961, r1.rel: was developed in, r0.namespace: nell, r1.arg2: 1961, r0.arg2: date, r0.rel: is a, r1.namespace: reverb, r1.arg1: the first computer games) => 1961; when be the first gaming computer develop ? => $x: (the first gaming computer, be develop in, $x) => $x: (the first gaming computer, be develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; when be the first gaming computer develop ? => $x: (the first gaming computer, develop in, $x) => $x: (the first gaming computer, develop in, $x) => (r0.arg1: the first computer games, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was developed in) => 1961; what year be the first computer develop ? => $x: ($x, "type", year) (the first computer, develop, $x) => $x: ($x, "type", year) (the first computer, develop, $x) => (r0.arg1: 1961, r1.rel: was developed in, r0.namespace: freebase, r1.arg2: 1961, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: the first computer games) => 1961
When was the first computers developed?	united states	9.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: the United States, r0.rel: were developed in) => the United States; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: the United States, r0.rel: were developed in) => the United States; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: The first computer, r0.namespace: reverb, r0.arg2: the United States, r0.rel: is developed in) => the United States
When was the first computers developed?	1951	8.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: The first commercial computer, r0.namespace: openie4, r0.arg2: 1951, r0.rel: was developed in) => 1951; what year be the first computer develop ? => $x: ($x, "type", year) (the first computer, develop, $x) => $x: ($x, "type", year) (the first computer, develop, $x) => (r0.arg1: 1951, r1.rel: was developed in, r0.namespace: freebase, r1.arg2: 1951, r0.arg2: Years, r0.rel: Type, r1.namespace: openie4, r1.arg1: The first commercial computer) => 1951
When was the first computers developed?	1950s	7.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a computer programming language, r0.namespace: openie4, r0.arg2: the 1950s, r0.rel: developed in) => the 1950s; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: the first computer programs, r0.namespace: reverb, r0.arg2: the 1950s, r0.rel: were developed in) => the 1950s
When was the first computers developed?	order	7.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer models, r0.namespace: reverb, r0.arg2: order, r0.rel: were developed in) => order; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer software, r0.namespace: reverb, r0.arg2: order, r0.rel: was developed in) => order; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: A computer simulation program, r0.namespace: reverb, r0.arg2: order, r0.rel: is developed in) => order; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Various computer models, r0.namespace: reverb, r0.arg2: order, r0.rel: have been developed in) => order; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer models, r0.namespace: reverb, r0.arg2: order, r0.rel: were developed in) => order; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer software, r0.namespace: reverb, r0.arg2: order, r0.rel: was developed in) => order; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: A computer simulation program, r0.namespace: reverb, r0.arg2: order, r0.rel: is developed in) => order
When was the first computers developed?		6.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: the first electronic computers, r0.namespace: reverb, r0.arg2: the then, r0.rel: was developed in) => the then
When was the first computers developed?	secret	6.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The Colossus computer, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The Colossus computer, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The Colossus computer, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: a computer chip, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The Colossus computer, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a computer chip, r0.namespace: reverb, r0.arg2: secret, r0.rel: was developed in) => secret
When was the first computers developed?	late 1960s	6.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer mouse, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were developed here in) => the late 1960s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer mouse, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were developed here in) => the late 1960s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer mouse, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were developed here in) => the late 1960s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the computer mouse, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were developed here in) => the late 1960s; when be the first computer create ? => $x: (the first computer, be create in, $x) => $x: (the first computer, be create in, $x) => (r0.arg1: the first computer networks, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were created in) => the late 1960s; when be the first computer create ? => $x: (the first computer, create in, $x) => $x: (the first computer, create in, $x) => (r0.arg1: the first computer networks, r0.namespace: reverb, r0.arg2: the late 1960s, r0.rel: were created in) => the late 1960s
When was the first computers developed?	manchester	6.0	When was the first computers developed? => $x: (the first computers, was developed in, $x) => $x: (the first computers, was developed in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: the first modern computer, r0.namespace: reverb, r0.arg2: Manchester, r0.rel: were developed in) => Manchester
When was the first computers developed?	india	6.0	When was the first computers developed? => $x: (the first computers, developed in, $x) => $x: (the first computers, developed in, $x) => (r0.arg1: the first indigenous digital computer, r0.namespace: openie4, r0.arg2: India, r0.rel: developed in) => India; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the first indigenous digital computer, r0.namespace: openie4, r0.arg2: India, r0.rel: developed in) => India; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a tablet computer, r0.namespace: reverb, r0.arg2: India, r0.rel: developed in) => India; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the first indigenous digital computer, r0.namespace: openie4, r0.arg2: India, r0.rel: developed in) => India; where be the first computer develop ? => $x: (the first computer, develop in, $x) => $x: (the first computer, develop in, $x) => (r0.arg1: the first indigenous digital computer, r0.namespace: openie4, r0.arg2: India, r0.rel: developed in) => India; what date be first computer develop ? => $x: ($x, "type", date) (first computer, develop, $x) => $x: ($x, "type", date) (first computer, develop, $x) => (r0.arg1: India, r1.rel: developed in, r0.namespace: freebase, r1.arg2: India, r0.arg2: Dated location, r0.rel: Type, r1.namespace: openie4, r1.arg1: the first indigenous digital computer) => India
When was the first computers developed?	collaboration	5.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer simulations, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: are being developed in) => collaboration; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: A user-friendly computer model, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: was developed in) => collaboration; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: a computer-based essay test, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: was developed in) => collaboration; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: headset computer, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: developed in) => collaboration; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer simulations, r0.namespace: reverb, r0.arg2: collaboration, r0.rel: are being developed in) => collaboration
When was the first computers developed?	massachusetts	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: Massachusetts, r0.rel: were developed in) => Massachusetts; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: Massachusetts, r0.rel: were developed in) => Massachusetts; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: Massachusetts, r0.rel: were developed in) => Massachusetts; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: Massachusetts, r0.rel: were developed in) => Massachusetts
When was the first computers developed?	early 1950	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the early 1950, r0.rel: were developed in) => the early 1950; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the early 1950, r0.rel: were developed in) => the early 1950; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the early 1950, r0.rel: were developed in) => the early 1950; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the early 1950, r0.rel: were developed in) => the early 1950
When was the first computers developed?	1940s	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the 1940s, r0.rel: was developed in) => the 1940s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the 1940s, r0.rel: was developed in) => the 1940s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the 1940s, r0.rel: was developed in) => the 1940s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the computer, r0.namespace: reverb, r0.arg2: the 1940s, r0.rel: was developed in) => the 1940s
When was the first computers developed?	ukraine	4.0	when be the first computer create ? => $x: (the first computer, be create in, $x) => $x: (the first computer, be create in, $x) => (r0.arg1: The first modern computer, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: was created in) => Ukraine; when be the first computer create ? => $x: (the first computer, be create in, $x) => $x: (the first computer, be create in, $x) => (r0.arg1: The first-ever modern computer, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: was created in) => Ukraine; when be the first computer create ? => $x: (the first computer, create in, $x) => $x: (the first computer, create in, $x) => (r0.arg1: The first modern computer, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: was created in) => Ukraine; when be the first computer create ? => $x: (the first computer, create in, $x) => $x: (the first computer, create in, $x) => (r0.arg1: The first-ever modern computer, r0.namespace: reverb, r0.arg2: Ukraine, r0.rel: was created in) => Ukraine
When was the first computers developed?	cooperation	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: cooperation, r0.rel: was developed in) => cooperation; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: cooperation, r0.rel: was developed in) => cooperation; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: cooperation, r0.rel: was developed in) => cooperation; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: cooperation, r0.rel: was developed in) => cooperation
When was the first computers developed?	america	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The computer software, r0.namespace: reverb, r0.arg2: America, r0.rel: has been developed in) => America; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The computer software, r0.namespace: reverb, r0.arg2: America, r0.rel: has been developed in) => America; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The computer software, r0.namespace: reverb, r0.arg2: America, r0.rel: has been developed in) => America; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The computer software, r0.namespace: reverb, r0.arg2: America, r0.rel: has been developed in) => America
When was the first computers developed?	countries	4.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: countries, r0.rel: are needed in developing) => countries; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: such countries, r0.rel: were developed in) => such countries; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: countries, r0.rel: are needed in developing) => countries; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: such countries, r0.rel: were developed in) => such countries
When was the first computers developed?	1970s	4.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer-aided-design, r0.namespace: reverb, r0.arg2: 1970s, r0.rel: was first developed in) => 1970s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: government computer networks, r0.namespace: reverb, r0.arg2: the 1970s, r0.rel: were developed in) => the 1970s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: openie4, r0.arg2: the 1970s, r0.rel: developed in) => the 1970s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer-aided-design, r0.namespace: reverb, r0.arg2: 1970s, r0.rel: was first developed in) => 1970s
When was the first computers developed?	tianjin	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The super computer, r0.namespace: reverb, r0.arg2: Tianjin, r0.rel: has been developed in) => Tianjin; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The super computer, r0.namespace: reverb, r0.arg2: Tianjin, r0.rel: has been developed in) => Tianjin; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The super computer, r0.namespace: reverb, r0.arg2: Tianjin, r0.rel: has been developed in) => Tianjin; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The super computer, r0.namespace: reverb, r0.arg2: Tianjin, r0.rel: has been developed in) => Tianjin
When was the first computers developed?	record-breaking term	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: record-breaking term, r0.rel: was developed in) => record-breaking term; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: record-breaking term, r0.rel: was developed in) => record-breaking term; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: record-breaking term, r0.rel: was developed in) => record-breaking term; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: The computer, r0.namespace: reverb, r0.arg2: record-breaking term, r0.rel: was developed in) => record-breaking term
When was the first computers developed?	variety	4.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: quantum computers, r0.namespace: reverb, r0.arg2: a variety, r0.rel: are now being developed in) => a variety; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer models, r0.namespace: reverb, r0.arg2: a variety, r0.rel: have been successfully developed in) => a variety; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: quantum computers, r0.namespace: reverb, r0.arg2: a variety, r0.rel: are now being developed in) => a variety; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer models, r0.namespace: reverb, r0.arg2: a variety, r0.rel: have been successfully developed in) => a variety
When was the first computers developed?	japan	4.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the network computer market, r0.namespace: reverb, r0.arg2: Japan, r0.rel: has been slow to develop in) => Japan; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the network computer market, r0.namespace: reverb, r0.arg2: Japan, r0.rel: has been slow to develop in) => Japan; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the network computer market, r0.namespace: reverb, r0.arg2: Japan, r0.rel: has been slow to develop in) => Japan; what date be first computer develop ? => $x: ($x, "type", date) (first computer, develop, $x) => $x: ($x, "type", date) (first computer, develop, $x) => (r0.arg1: Japan, r1.rel: developed, r0.namespace: freebase, r1.arg2: Japan, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: 's first digital computers) => Japan
When was the first computers developed?	bielefeld	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer program CaGe, r0.namespace: reverb, r0.arg2: Bielefeld, r0.rel: is just being developed in) => Bielefeld; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer program CaGe, r0.namespace: reverb, r0.arg2: Bielefeld, r0.rel: is just being developed in) => Bielefeld; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer program CaGe, r0.namespace: reverb, r0.arg2: Bielefeld, r0.rel: is just being developed in) => Bielefeld
When was the first computers developed?	1972	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The Traff-O-Data computer, r0.namespace: reverb, r0.arg2: 1972, r0.rel: was developed in) => 1972; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The Traff-O-Data computer, r0.namespace: reverb, r0.arg2: 1972, r0.rel: was developed in) => 1972; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The Traff-O-Data computer, r0.namespace: reverb, r0.arg2: 1972, r0.rel: was developed in) => 1972
When was the first computers developed?	1964	3.0	when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a computer language, r0.namespace: openie4, r0.arg2: 1964, r0.rel: developed in) => 1964; when be the first computer create ? => $x: (the first computer, be create in, $x) => $x: (the first computer, be create in, $x) => (r0.arg1: The first tablet-like computer device, r0.namespace: reverb, r0.arg2: 1964, r0.rel: was created in) => 1964; when be the first computer create ? => $x: (the first computer, create in, $x) => $x: (the first computer, create in, $x) => (r0.arg1: The first tablet-like computer device, r0.namespace: reverb, r0.arg2: 1964, r0.rel: was created in) => 1964
When was the first computers developed?	software	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The Computer Centre, r0.namespace: reverb, r0.arg2: software, r0.rel: is also involved in developing) => software; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The Computer Centre, r0.namespace: reverb, r0.arg2: software, r0.rel: is also involved in developing) => software; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The Computer Centre, r0.namespace: reverb, r0.arg2: software, r0.rel: is also involved in developing) => software
When was the first computers developed?	1970	3.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: the 1970, r0.rel: were developed in) => the 1970; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: the 1970, r0.rel: were developed in) => the 1970; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: an imperative computer programming language, r0.namespace: openie4, r0.arg2: 1970, r0.rel: developed in) => 1970
When was the first computers developed?	1973	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The Alto personal computer, r0.namespace: reverb, r0.arg2: 1973, r0.rel: was first developed in) => 1973; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The Alto personal computer, r0.namespace: reverb, r0.arg2: 1973, r0.rel: was first developed in) => 1973; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The Alto personal computer, r0.namespace: reverb, r0.arg2: 1973, r0.rel: was first developed in) => 1973
When was the first computers developed?	1981	3.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: quantum computers, r0.namespace: reverb, r0.arg2: 1981, r0.rel: was developed in) => 1981; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: quantum computers, r0.namespace: reverb, r0.arg2: 1981, r0.rel: was developed in) => 1981; who develop the first computer ? => $x: ($x, develop, the first computer) => $x: ($x, develop, the first computer) => (r0.arg1: 1981, r0.namespace: reverb, r0.arg2: the first personal computer, r0.rel: developed) => 1981
When was the first computers developed?	england	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: The DEUCE computer, r0.namespace: reverb, r0.arg2: England, r0.rel: was developed in) => England; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: The DEUCE computer, r0.namespace: reverb, r0.arg2: England, r0.rel: was developed in) => England; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: The DEUCE computer, r0.namespace: reverb, r0.arg2: England, r0.rel: was developed in) => England
When was the first computers developed?	1980s	3.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: the 1980s, r0.rel: were developed in) => the 1980s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: openie4, r0.arg2: the 1980s, r0.rel: developed in) => the 1980s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: the 1980s, r0.rel: were developed in) => the 1980s
When was the first computers developed?	department	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the MONADS II computer system, r0.namespace: reverb, r0.arg2: the department, r0.rel: was developed in) => the department; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the MONADS II computer system, r0.namespace: reverb, r0.arg2: the department, r0.rel: was developed in) => the department; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the MONADS II computer system, r0.namespace: reverb, r0.arg2: the department, r0.rel: was developed in) => the department
When was the first computers developed?	50s	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the other earliest computers, r0.namespace: reverb, r0.arg2: the 50s, r0.rel: were first developed in) => the 50s; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the other earliest computers, r0.namespace: reverb, r0.arg2: the 50s, r0.rel: were first developed in) => the 50s; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the other earliest computers, r0.namespace: reverb, r0.arg2: the 50s, r0.rel: were first developed in) => the 50s
When was the first computers developed?	accordance	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer courses, r0.namespace: reverb, r0.arg2: accordance, r0.rel: have been developed in) => accordance; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer courses, r0.namespace: reverb, r0.arg2: accordance, r0.rel: have been developed in) => accordance; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer courses, r0.namespace: reverb, r0.arg2: accordance, r0.rel: have been developed in) => accordance
When was the first computers developed?	uk	3.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: This single-board computer, r0.namespace: reverb, r0.arg2: the UK, r0.rel: was developed in) => the UK; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: A single-board computer, r0.namespace: reverb, r0.arg2: the UK, r0.rel: developed in) => the UK; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a single-board computer, r0.namespace: openie4, r0.arg2: the UK, r0.rel: developed in) => the UK
When was the first computers developed?	industry	3.0	when be the computer develop ? => $x: (the computer, be develop in, $x) => $x: (the computer, be develop in, $x) => (r0.arg1: the computer-based technology, r0.namespace: reverb, r0.arg2: the industry, r0.rel: is developing in) => the industry; when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer-based technology, r0.namespace: reverb, r0.arg2: the industry, r0.rel: is developing in) => the industry; when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: the computer-based technology, r0.namespace: reverb, r0.arg2: the industry, r0.rel: is developing in) => the industry
When was the first computers developed?	1984	2.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Microsoft GWBasic computer programs, r0.namespace: reverb, r0.arg2: 1984, r0.rel: were developed in) => 1984; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Microsoft GWBasic computer programs, r0.namespace: reverb, r0.arg2: 1984, r0.rel: were developed in) => 1984
When was the first computers developed?	chicago	2.0	when be the first computer create ? => $x: (the first computer, be create in, $x) => $x: (the first computer, be create in, $x) => (r0.arg1: The first computer bulletin board system, r0.namespace: openie4, r0.arg2: Chicago, r0.rel: is created in) => Chicago; when be the first computer create ? => $x: (the first computer, create in, $x) => $x: (the first computer, create in, $x) => (r0.arg1: The first computer bulletin board system, r0.namespace: openie4, r0.arg2: Chicago, r0.rel: is created in) => Chicago
When was the first computers developed?	gauss	2.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: Computer code, r0.namespace: reverb, r0.arg2: GAUSS, r0.rel: has been developed in) => GAUSS; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: Computer code, r0.namespace: reverb, r0.arg2: GAUSS, r0.rel: has been developed in) => GAUSS
When was the first computers developed?	1991	2.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: 1991, r0.rel: was developed in) => 1991; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: personal computers, r0.namespace: reverb, r0.arg2: 1991, r0.rel: was developed in) => 1991
When was the first computers developed?	xml	2.0	when be computer develop ? => $x: (computer, be develop on, $x) => $x: (computer, be develop on, $x) => (r0.arg1: a computer language, r0.namespace: reverb, r0.arg2: XML, r0.rel: was developed on) => XML; when be computer develop ? => $x: (computer, develop on, $x) => $x: (computer, develop on, $x) => (r0.arg1: a computer language, r0.namespace: reverb, r0.arg2: XML, r0.rel: was developed on) => XML
When was the first computers developed?	days	2.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: the days, r0.rel: was developed in) => the days; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: computers, r0.namespace: reverb, r0.arg2: the days, r0.rel: was developed in) => the days
When was the first computers developed?	host computer	2.0	when be computer develop ? => $x: (computer, be develop on, $x) => $x: (computer, be develop on, $x) => (r0.arg1: an embedded target computer, r0.namespace: reverb, r0.arg2: a host computer, r0.rel: is developed on) => a host computer; when be computer develop ? => $x: (computer, develop on, $x) => $x: (computer, develop on, $x) => (r0.arg1: an embedded target computer, r0.namespace: reverb, r0.arg2: a host computer, r0.rel: is developed on) => a host computer
When was the first computers developed?	theme	2.0	when be computer develop ? => $x: (computer, be develop on, $x) => $x: (computer, be develop on, $x) => (r0.arg1: Flash computer games, r0.namespace: reverb, r0.arg2: every theme, r0.rel: have been developed on) => every theme; when be computer develop ? => $x: (computer, develop on, $x) => $x: (computer, develop on, $x) => (r0.arg1: Flash computer games, r0.namespace: reverb, r0.arg2: every theme, r0.rel: have been developed on) => every theme
When was the first computers developed?	canada	2.0	when be computer develop ? => $x: (computer, be develop in, $x) => $x: (computer, be develop in, $x) => (r0.arg1: a computer, r0.namespace: reverb, r0.arg2: Canada, r0.rel: was developed in) => Canada; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a computer, r0.namespace: reverb, r0.arg2: Canada, r0.rel: was developed in) => Canada
When was the first computers developed?	1960s 1970s	2.0	when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: a computer operating system, r0.namespace: openie4, r0.arg2: the 1960s and 1970s, r0.rel: developed in) => the 1960s and 1970s; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: digital computer technology, r0.namespace: openie4, r0.arg2: the 1960s and 1970s, r0.rel: developed in) => the 1960s and 1970s
When was the first computers developed?	context	2.0	when be the computer develop ? => $x: (the computer, develop in, $x) => $x: (the computer, develop in, $x) => (r0.arg1: the computer model, r0.namespace: reverb, r0.arg2: the context, r0.rel: developed in) => the context; when be computer develop ? => $x: (computer, develop in, $x) => $x: (computer, develop in, $x) => (r0.arg1: the computer model, r0.namespace: reverb, r0.arg2: the context, r0.rel: developed in) => the context
What country developed Pizza?	italy	12.0	which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: was first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Italy, r1.rel: were first developed in, r0.namespace: freebase, r1.arg2: Italy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy
What country developed Pizza?	pakistan	4.0	which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Pakistan, r1.rel: developed recipes for, r0.namespace: freebase, r1.arg2: Pakistan, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pizza Hut) => Pakistan; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Pakistan, r1.rel: developed recipes for, r0.namespace: freebase, r1.arg2: Pakistan, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pizza Hut) => Pakistan; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Pakistan, r1.rel: developed recipes for, r0.namespace: freebase, r1.arg2: Pakistan, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pizza Hut) => Pakistan; which country be pizza develop ? => $x: ($x, "type", country) (pizza, develop, $x) => $x: ($x, "type", country) (pizza, develop, $x) => (r0.arg1: Pakistan, r1.rel: developed recipes for, r0.namespace: freebase, r1.arg2: Pakistan, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pizza Hut) => Pakistan
What country developed Pizza?	us-new york	4.0	What country developed Pizza? => $x: ($x, "is a", country) ($x, developed, Pizza) => $x: ($x, "is a", country) ($x, developed, Pizza) => (r0.arg1: US-New York, r1.rel: developed a love of, r0.namespace: nell, r1.arg2: pizza, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; what countrys develop pizza ? => $x: ($x, "is a", countrys) ($x, develop, pizza) => $x: ($x, "is a", countrys) ($x, develop, pizza) => (r0.arg1: US-New York, r1.rel: developed a love of, r0.namespace: nell, r1.arg2: pizza, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; which countrys develop pizza ? => $x: ($x, "is a", countrys) ($x, develop, pizza) => $x: ($x, "is a", countrys) ($x, develop, pizza) => (r0.arg1: US-New York, r1.rel: developed a love of, r0.namespace: nell, r1.arg2: pizza, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York; which country develop pizza ? => $x: ($x, "is a", country) ($x, develop, pizza) => $x: ($x, "is a", country) ($x, develop, pizza) => (r0.arg1: US-New York, r1.rel: developed a love of, r0.namespace: nell, r1.arg2: pizza, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New York) => US-New York
What country developed Pizza?	las vegas	2.0	what county develop pizza ? => $x: ($x, "type", county) ($x, develop, pizza) => $x: ($x, "type", county) ($x, develop, pizza) => (r0.arg1: Las Vegas, r1.rel: develop, r0.namespace: freebase, r1.arg2: their ?Monster Pizza? story, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Las Vegas) => Las Vegas; what county develop pizza ? => $x: ($x, "is a", county) ($x, develop, pizza) => $x: ($x, "is a", county) ($x, develop, pizza) => (r0.arg1: Las Vegas, r1.rel: develop, r0.namespace: nell, r1.arg2: their ?Monster Pizza? story, r0.arg2: county, r0.rel: is a, r1.namespace: reverb, r1.arg1: Las Vegas) => Las Vegas
What country developed Pizza?	italy(	2.0	which country be pizza develop ? => $x: ($x, "is a", country) (pizza, develop, $x) => $x: ($x, "is a", country) (pizza, develop, $x) => (r0.arg1: Italy(, r1.rel: was first developed in, r0.namespace: nell, r1.arg2: Italy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Pizza Cone concept) => Italy(; which country be pizza develop ? => $x: ($x, "is a", country) (pizza, develop, $x) => $x: ($x, "is a", country) (pizza, develop, $x) => (r0.arg1: Italy(, r1.rel: were first developed in, r0.namespace: nell, r1.arg2: Italy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: THE CONCEPT Pizza Cones) => Italy(
What country developed Pizza?	pakistan.	1.0	which country be pizza develop ? => $x: ($x, "is a", country) (pizza, develop, $x) => $x: ($x, "is a", country) (pizza, develop, $x) => (r0.arg1: Pakistan., r1.rel: developed recipes for, r0.namespace: nell, r1.arg2: Pakistan, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Pizza Hut) => Pakistan.
What is the best stock?	apple	2.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Apple, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => Apple; What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Apple, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is still) => Apple
What is the best stock?	dell computer	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Dell Computer, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => Dell Computer
What is the best stock?	mcdonald?s	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: McDonald?s, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: is) => McDonald?s
What is the best stock?	automaker stocks	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: automaker stocks, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: were) => automaker stocks
What is the best stock?	very high position	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: a very high position, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: are considered to be) => a very high position
What is the best stock?	bac	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: BAC, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: are) => BAC
What is the best stock?	2006	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: 2006, r0.namespace: reverb, r0.arg2: the best revenue year, r0.rel: was) => 2006
What is the best stock?	june	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: June, r0.namespace: reverb, r0.arg2: the best revenue producing month, r0.rel: was) => June
What is the best stock?	cash	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: cash, r0.namespace: reverb, r0.arg2: the best revenue opportunities, r0.rel: is) => cash
What is the best stock?	reducing taxes	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: reducing taxes, r0.namespace: openie4, r0.arg2: the best way open to us to increase revenues, r0.rel: is) => reducing taxes
What is the best stock?	group choices 2007	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Group Choices 2007, r0.namespace: reverb, r0.arg2: the best Stocking Stuffer, r0.rel: is) => Group Choices 2007
What is the best stock?	chrysler	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Chrysler, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was arguably) => Chrysler
What is the best stock?	electrical supply house	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: an electrical supply house, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: were) => an electrical supply house
What is the best stock?	highland gold	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Highland Gold, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was) => Highland Gold
What is the best stock?	reebok	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Reebok, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: was also one of) => Reebok
What is the best stock?	hubpage	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: Hubpage, r0.namespace: reverb, r0.arg2: the best revenue sharing web site, r0.rel: is) => Hubpage
What is the best stock?	ski higher	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Ski Higher, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: is perhaps) => Ski Higher
What is the best stock?	idea	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The idea, r0.namespace: reverb, r0.arg2: the best stock/s, r0.rel: is to select) => The idea
What is the best stock?	tie	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: TIE, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was virtually) => TIE
What is the best stock?	t hem	1.0	what be the the best stock make ? => $x: (the the best stock, make, $x) => $x: (the the best stock, make, $x) => (r0.arg1: the best stock picks, r0.namespace: reverb, r0.arg2: t hem, r0.rel: made) => t hem
What is the best stock?	mee	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: MEE, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: is also) => MEE
What is the best stock?	2008-2010	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: 2008-2010, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: were some of) => 2008-2010
What is the best stock?	audio ports any mac	1.0	what be the the best stock make ? => $x: (the the best stock, make, $x) => $x: (the the best stock, make, $x) => (r0.arg1: the best stock, r0.namespace: openie4, r0.arg2: audio ports of any Mac, r0.rel: made) => audio ports of any Mac
What is the best stock?	home builders	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Home builders, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: have been among) => Home builders
What is the best stock?	cent	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: cent, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => cent
What is the best stock?	raising tax rates	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: Raising tax rates, r0.namespace: openie4, r0.arg2: the best way to raise revenue, r0.rel: is) => Raising tax rates
What is the best stock?	cyclicals	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Cyclicals, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: were among) => Cyclicals
What is the best stock?	remaining 5 %	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: The remaining 5 %, r0.namespace: reverb, r0.arg2: the best penny stocks, r0.rel: are) => The remaining 5 %
What is the best stock?	12-month period	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: a 12-month period, r0.namespace: reverb, r0.arg2: the Best stock, r0.rel: is) => a 12-month period
What is the best stock?	sector	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the sector, r0.namespace: reverb, r0.arg2: the best performing stocks, r0.rel: are some of) => the sector
What is the best stock?	background	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the background, r0.namespace: reverb, r0.arg2: the best damn stock, r0.rel: is from) => the background
What is the best stock?	night	1.0	what be the the best stock make ? => $x: (the the best stock, make, $x) => $x: (the the best stock, make, $x) => (r0.arg1: the best stock market decisions, r0.namespace: reverb, r0.arg2: night, r0.rel: are made at) => night
What is the best stock?	fabulous stocks	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: FABULOUS STOCKS, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: here are some of) => FABULOUS STOCKS
What is the best stock?	stock	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: stock, r0.namespace: reverb, r0.arg2: the best tasting stock, r0.rel: is definitely) => stock
What is the best stock?	storm	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the storm, r0.namespace: reverb, r0.arg2: the best stock farms, r0.rel: were some of) => the storm
What is the best stock?	superior	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Superior, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: seems to be) => Superior
What is the best stock?	recent years	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the best stock, r0.rel: was one of) => recent years
What is the best stock?	polyvinyl chloride	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: polyvinyl chloride, r0.namespace: reverb, r0.arg2: the very best revenue producing product, r0.rel: is) => polyvinyl chloride
What is the best stock?	corn sugar beets	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: corn and sugar beets, r0.namespace: reverb, r0.arg2: the best feed stocks, r0.rel: are) => corn and sugar beets
What is the best stock?	adsense	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: AdSense, r0.namespace: reverb, r0.arg2: the best revenue sharing program, r0.rel: is) => AdSense
What is the best stock?	tidy profit	1.0	what be the the best stock make ? => $x: (the the best stock, make, $x) => $x: (the the best stock, make, $x) => (r0.arg1: Stock the best products, r0.namespace: reverb, r0.arg2: a tidy profit, r0.rel: make) => a tidy profit
What is the best stock?	goal	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: the goal, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: was to pick) => the goal
What is the best stock?	natalie	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Natalie, r0.namespace: reverb, r0.arg2: the best stock picker, r0.rel: was) => Natalie
What is the best stock?	green mountain	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Green Mountain, r0.namespace: reverb, r0.arg2: the best battleground stocks, r0.rel: has been one of) => Green Mountain
What is the best stock?	lexg	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: LEXG, r0.namespace: reverb, r0.arg2: the best penny stocks, r0.rel: has been one of) => LEXG
What is the best stock?	alphaclone fund managers	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: AlphaClone fund managers, r0.namespace: reverb, r0.arg2: the best stock pickers, r0.rel: are) => AlphaClone fund managers
What is the best stock?	capgemini	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Capgemini, r0.namespace: reverb, r0.arg2: the best performing stock, r0.rel: was) => Capgemini
What is the best stock?	2007	1.0	what be the best revenue ? => $x: ($x, be, the best revenue) => $x: ($x, be, the best revenue) => (r0.arg1: 2007, r0.namespace: reverb, r0.arg2: the second best revenue year, r0.rel: had previously been) => 2007
What is the best stock?	fridays	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Fridays, r0.namespace: reverb, r0.arg2: the best stocked, r0.rel: is probably one of) => Fridays
What is the best stock?	precious metals	1.0	What is the best stock? => $x: ($x, is, the best stock) => $x: ($x, is, the best stock) => (r0.arg1: Precious metals, r0.namespace: reverb, r0.arg2: the best stocks, r0.rel: are) => Precious metals
What are the research topics in computer science?	students	3.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: students, r0.namespace: reverb, r0.arg2: the advanced research topic, r0.rel: will be) => students; what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Students, r0.namespace: openie4, r0.arg2: research the topic, r0.rel: are required to) => Students; what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: The students, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: were fascinated by) => The students
What are the research topics in computer science?	education	2.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: The education, r0.namespace: reverb, r0.arg2: the various research topics, r0.rel: is anchored around) => The education; what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the education, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: is anchored around) => the education
What are the research topics in computer science?	reader	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the reader, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is being introduced to) => the reader
What are the research topics in computer science?	judging criteria communication style	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Judging criteria Communication style, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: was) => Judging criteria Communication style
What are the research topics in computer science?	red tides	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: red tides, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: is a specific example of) => red tides
What are the research topics in computer science?	self-esteem	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Self-esteem, r0.namespace: reverb, r0.arg2: the most researched topics, r0.rel: is one of) => Self-esteem
What are the research topics in computer science?	mission-unique requirements	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: mission-unique requirements, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is) => mission-unique requirements
What are the research topics in computer science?	travel	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Travel, r0.namespace: reverb, r0.arg2: the foremost researched topics, r0.rel: is one among) => Travel
What are the research topics in computer science?	research agenda	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the Research Agenda, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: are the basis for) => the Research Agenda
What are the research topics in computer science?	list	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: a list, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: be specific in) => a list
What are the research topics in computer science?	hans knoell institute	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the Hans Knoell Institute, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: were involved in) => the Hans Knoell Institute
What are the research topics in computer science?	nonlinear mechanics	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: nonlinear mechanics, r0.namespace: reverb, r0.arg2: the main research topic, r0.rel: is) => nonlinear mechanics
What are the research topics in computer science?	software units	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: software units, r0.namespace: reverb, r0.arg2: the main research topics, r0.rel: has been one of) => software units
What are the research topics in computer science?	asf+sdf project	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: The ASF+SDF project, r0.namespace: reverb, r0.arg2: the main research topics, r0.rel: is one of) => The ASF+SDF project
What are the research topics in computer science?	department ompl	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the department OMPL, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: are closely related to) => the department OMPL
What are the research topics in computer science?	topic	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: topic, r0.namespace: reverb, r0.arg2: the applied research topic, r0.rel: is) => topic
What are the research topics in computer science?	leadership	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: leadership, r0.namespace: reverb, r0.arg2: the most researched topics, r0.rel: is one of) => leadership
What are the research topics in computer science?	first step	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: The first step, r0.namespace: reverb, r0.arg2: the research paper topic, r0.rel: is the selection of) => The first step
What are the research topics in computer science?	comments	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: comments, r0.namespace: reverb, r0.arg2: the revised research topics, r0.rel: are requested on) => comments
What are the research topics in computer science?	meditation	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Meditation, r0.namespace: reverb, r0.arg2: the third most researched topic, r0.rel: is) => Meditation
What are the research topics in computer science?	times	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: times, r0.namespace: reverb, r0.arg2: the most researched topics, r0.rel: reported to be one of) => times
What are the research topics in computer science?	user acceptance	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: user acceptance, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is related to) => user acceptance
What are the research topics in computer science?	concrete patios	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: concrete patios, r0.namespace: reverb, r0.arg2: the number one researched topic, r0.rel: are) => concrete patios
What are the research topics in computer science?	fpga physical design	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: FPGA physical design, r0.namespace: reverb, r0.arg2: the hottest research topics, r0.rel: is one of) => FPGA physical design
What are the research topics in computer science?	nistep	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: NISTEP, r0.namespace: reverb, r0.arg2: the following research topics, r0.rel: is working on) => NISTEP
What are the research topics in computer science?	price	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: PRICE, r0.namespace: reverb, r0.arg2: the cost research topics, r0.rel: were) => PRICE
What are the research topics in computer science?	hypothesis	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the hypothesis, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is to finalize) => the hypothesis
What are the research topics in computer science?	stress	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: stress, r0.namespace: reverb, r0.arg2: the most popular research topics, r0.rel: have been among) => stress
What are the research topics in computer science?	magnetised winds outflows	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: magnetised winds and outflows, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: are) => magnetised winds and outflows
What are the research topics in computer science?	introduction	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Introduction, r0.namespace: reverb, r0.arg2: the research lesson topic, r0.rel: is) => Introduction
What are the research topics in computer science?	bridging knowledge gaps	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Bridging Knowledge Gaps, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is) => Bridging Knowledge Gaps
What are the research topics in computer science?	class	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: The class, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: is loosely organized around) => The class
What are the research topics in computer science?	presence	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Presence, r0.namespace: reverb, r0.arg2: the major research topics, r0.rel: is one of) => Presence
What are the research topics in computer science?	experts	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: experts, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: feel are essential to) => experts
What are the research topics in computer science?	gfp protein	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the GFP protein, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: must be brought to) => the GFP protein
What are the research topics in computer science?	money online	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: money online, r0.namespace: reverb, r0.arg2: the most researched topics, r0.rel: is one of) => money online
What are the research topics in computer science?	indonesia	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Indonesia, r0.namespace: reverb, r0.arg2: the research topic, r0.rel: is) => Indonesia
What are the research topics in computer science?	specific research topics	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Specific research topics, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: will be based on) => Specific research topics
What are the research topics in computer science?	poets	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: poets, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: are among) => poets
What are the research topics in computer science?	courses	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: courses, r0.namespace: openie4, r0.arg2: the research topic, r0.rel: to be selected with) => courses
What are the research topics in computer science?	car insurance	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: car insurance, r0.namespace: reverb, r0.arg2: the widely researched topics, r0.rel: are among) => car insurance
What are the research topics in computer science?	hyperdeformed nuclei	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: hyperdeformed nuclei, r0.namespace: reverb, r0.arg2: the main research topics, r0.rel: is one of) => hyperdeformed nuclei
What are the research topics in computer science?	information systems	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: the information systems, r0.namespace: reverb, r0.arg2: the hottest research topics, r0.rel: is one of) => the information systems
What are the research topics in computer science?	papers	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Papers, r0.namespace: reverb, r0.arg2: the following research topics, r0.rel: have been prepared on) => Papers
What are the research topics in computer science?	interest denis b?langer	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: Interest Denis B?langer, r0.namespace: reverb, r0.arg2: the Director , Topics and Research, r0.rel: is) => Interest Denis B?langer
What are the research topics in computer science?	co2 capture	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: CO2 capture, r0.namespace: reverb, r0.arg2: the hottest research topics, r0.rel: is one of) => CO2 capture
What are the research topics in computer science?	carrier transport	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: carrier transport, r0.namespace: reverb, r0.arg2: the central research topic, r0.rel: has been) => carrier transport
What are the research topics in computer science?	materials	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: materials, r0.namespace: reverb, r0.arg2: the major research topics, r0.rel: is currently one of) => materials
What are the research topics in computer science?	oversea countries	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: oversea countries, r0.namespace: reverb, r0.arg2: the research topics, r0.rel: are interested in) => oversea countries
What are the research topics in computer science?	wear reduction	1.0	what be the research topic ? => $x: ($x, be, the research topic) => $x: ($x, be, the research topic) => (r0.arg1: wear reduction, r0.namespace: reverb, r0.arg2: the most researched topics, r0.rel: is among) => wear reduction
What is the full meaning of utp?	unshielded twisted pair cable	2.0	what do utp stand for ? => $x: (utp, stand for, $x) => $x: (utp, stand for, $x) => (r0.arg1: UTP, r0.namespace: reverb, r0.arg2: Unshielded Twisted Pair cable, r0.rel: stands for) => Unshielded Twisted Pair cable; what do utp stand for ? => $x: (utp, stand for, $x) => $x: (utp, stand for, $x) => (r0.arg1: UTP/STP, r0.namespace: reverb, r0.arg2: the unshielded twisted pair cable, r0.rel: stands for) => the unshielded twisted pair cable
What is the full meaning of utp?	rj45 connector	2.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: RJ45 connector, r0.namespace: reverb, r0.arg2: UTP cables, r0.rel: is used for connecting) => RJ45 connector; what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: a RJ45 connector, r0.namespace: reverb, r0.arg2: UTP cabling, r0.rel: is connected to) => a RJ45 connector
What is the full meaning of utp?	video	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: video, r0.namespace: reverb, r0.arg2: UTP cable, r0.rel: is transmitted over) => video
What is the full meaning of utp?	whats more dust	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Whats more no dust, r0.namespace: reverb, r0.arg2: the UTP1605, r0.rel: is safe with) => Whats more no dust
What is the full meaning of utp?	house	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the house, r0.namespace: reverb, r0.arg2: three UTP cables, r0.rel: was built with) => the house
What is the full meaning of utp?	poe	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: PoE, r0.namespace: reverb, r0.arg2: UTP cable, r0.rel: is only supported on) => PoE
What is the full meaning of utp?	unshielded twisted pair	1.0	what do utp stand for ? => $x: (utp, stand for, $x) => $x: (utp, stand for, $x) => (r0.arg1: UTP, r0.namespace: reverb, r0.arg2: Unshielded Twisted Pair, r0.rel: stands for) => Unshielded Twisted Pair
What is the full meaning of utp?	rs485 connection	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: RS485 connection, r0.namespace: reverb, r0.arg2: 1 channel UTP, r0.rel: is via) => RS485 connection
What is the full meaning of utp?	siemon	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Siemon, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is the best choice for) => Siemon
What is the full meaning of utp?	coax cable connections	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: coax cable connections, r0.namespace: reverb, r0.arg2: UTP wire, r0.rel: are now commonly interfaced to) => coax cable connections
What is the full meaning of utp?	video data	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the video data, r0.namespace: reverb, r0.arg2: Fast Ethernet UTP, r0.rel: is fed via) => the video data
What is the full meaning of utp?	tc3300r/s	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the TC3300R/S, r0.namespace: reverb, r0.arg2: UTP and fiber optics, r0.rel: is ideal for integrating) => the TC3300R/S
What is the full meaning of utp?	hsy	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: HSY, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is) => HSY
What is the full meaning of utp?	cable run	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: The cable run, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is) => The cable run
What is the full meaning of utp?	fibre optic cable	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Fibre optic cable, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is considered to be more secure than) => Fibre optic cable
What is the full meaning of utp?	useable bandwidth	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: useable bandwidth, r0.namespace: reverb, r0.arg2: any UTP system, r0.rel: is simply unique for) => useable bandwidth
What is the full meaning of utp?	stp connection	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: an STP connection, r0.namespace: reverb, r0.arg2: UTP., r0.rel: is just as easy as with) => an STP connection
What is the full meaning of utp?	new utorrent release	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the new uTorrent release, r0.namespace: reverb, r0.arg2: uTP, r0.rel: was) => the new uTorrent release
What is the full meaning of utp?	model vi2301	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Model Vi2301, r0.namespace: reverb, r0.arg2: UTP applications, r0.rel: is designed for) => Model Vi2301
What is the full meaning of utp?	category 6	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Category 6, r0.namespace: reverb, r0.arg2: the highest performing UTP, r0.rel: is) => Category 6
What is the full meaning of utp?	less data revenue	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: less data revenue, r0.namespace: reverb, r0.arg2: the UTP Plan, r0.rel: was shared under) => less data revenue
What is the full meaning of utp?	differential analog signal	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: a differential analog signal, r0.namespace: reverb, r0.arg2: UTP wire, r0.rel: is a better match for) => a differential analog signal
What is the full meaning of utp?	extension	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: extension, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is) => extension
What is the full meaning of utp?	cable types	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Cable Types, r0.namespace: reverb, r0.arg2: 4 Pair UTP, r0.rel: are) => Cable Types
What is the full meaning of utp?	tax position	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the tax position, r0.namespace: reverb, r0.arg2: Schedule UTP, r0.rel: be reported on) => the tax position
What is the full meaning of utp?	wire	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: The wire, r0.namespace: reverb, r0.arg2: UTP cable, r0.rel: is then much less popular compared to) => The wire
What is the full meaning of utp?	data equipments	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Data equipments, r0.namespace: reverb, r0.arg2: UTP, r0.rel: are tied separately by) => Data equipments
What is the full meaning of utp?	less than 1.5 %	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: less than 1.5 %, r0.namespace: reverb, r0.arg2: F/UTP, r0.rel: was) => less than 1.5 %
What is the full meaning of utp?	model uv1-r	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: a Model UV1-R, r0.namespace: reverb, r0.arg2: the UTP signal, r0.rel: is required to convert) => a Model UV1-R
What is the full meaning of utp?	fast ethernet	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Fast Ethernet, r0.namespace: reverb, r0.arg2: Category 3 UTP, r0.rel: is possible on) => Fast Ethernet
What is the full meaning of utp?	january 10 , 2011	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: January 10 , 2011, r0.namespace: reverb, r0.arg2: UTP Cable, r0.rel: is) => January 10 , 2011
What is the full meaning of utp?	major cost increases	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: major cost increases, r0.namespace: reverb, r0.arg2: UTP, r0.rel: have been dumped on) => major cost increases
What is the full meaning of utp?	building	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: a building, r0.namespace: reverb, r0.arg2: UTP, r0.rel: has been flood-wired with) => a building
What is the full meaning of utp?	charger	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the charger, r0.namespace: reverb, r0.arg2: a standard UTP cable, r0.rel: is with) => the charger
What is the full meaning of utp?	telephone cable	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Telephone cable, r0.namespace: reverb, r0.arg2: UTP., r0.rel: is an example of) => Telephone cable
What is the full meaning of utp?	10g 6?	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: 10G 6?, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is the best choice for) => 10G 6?
What is the full meaning of utp?	signal boosts	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: signal boosts, r0.namespace: reverb, r0.arg2: UTP, r0.rel: is shorter for) => signal boosts
What is the full meaning of utp?	following questions	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the following questions, r0.namespace: reverb, r0.arg2: the familiar UTP cabling, r0.rel: Is) => the following questions
What is the full meaning of utp?	even manufacturers	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Even some manufacturers, r0.namespace: reverb, r0.arg2: that UTP copper, r0.rel: are acknowledging) => Even some manufacturers
What is the full meaning of utp?	left	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: UTP Category 5 cable, r0.rel: is) => the left
What is the full meaning of utp?	first year	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: The first year, r0.namespace: reverb, r0.arg2: the UTP population, r0.rel: would be for) => The first year
What is the full meaning of utp?	f/utp cables	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: F/UTP cables, r0.namespace: reverb, r0.arg2: some UTP cables, r0.rel: are smaller than) => F/UTP cables
What is the full meaning of utp?	analog cctv cameras	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Analog CCTV cameras, r0.namespace: reverb, r0.arg2: UTP cable, r0.rel: can be wired easily with) => Analog CCTV cameras
What is the full meaning of utp?	fred	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Fred, r0.namespace: reverb, r0.arg2: UTP, r0.rel: was a co-founder of) => Fred
What is the full meaning of utp?	summary	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: Summary, r0.namespace: reverb, r0.arg2: UTP versus, r0.rel: is being promoted about) => Summary
What is the full meaning of utp?	in-home connections	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: The in-home connections, r0.namespace: reverb, r0.arg2: UTP or Coax copper, r0.rel: can be) => The in-home connections
What is the full meaning of utp?	eight-position modular jack	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: The eight-position modular jack, r0.namespace: reverb, r0.arg2: the only UTP jack, r0.rel: is) => The eight-position modular jack
What is the full meaning of utp?	personal computer networks	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: personal computer networks, r0.namespace: reverb, r0.arg2: UTP cable, r0.rel: is) => personal computer networks
What is the full meaning of utp?	utp links	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: UTP links, r0.namespace: reverb, r0.arg2: UTP-5 connectors, r0.rel: are with) => UTP links
What is the full meaning of utp?	31.25 mhz	1.0	what be utp ? => $x: ($x, be, utp) => $x: ($x, be, utp) => (r0.arg1: 31.25 MHz, r0.namespace: reverb, r0.arg2: UTP-5, r0.rel: is slow enough to travel well over) => 31.25 MHz
What do the earth plates move over?	rate	2.0	what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: The earth?s tectonic plates, r0.namespace: reverb, r0.arg2: a rate, r0.rel: typically move at) => a rate; what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: The earth?s tectonic plates, r0.namespace: reverb, r0.arg2: a rate, r0.rel: typically move at) => a rate
What do the earth plates move over?	little	1.0	what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: The Earth plates, r0.namespace: reverb, r0.arg2: a little, r0.rel: will move) => a little
What do the earth plates move over?	always	1.0	what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: the Earths  tectonic plates, r0.namespace: openie4, r0.arg2: always, r0.rel: are moving) => always
What do the earth plates move over?	apart	1.0	what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: the Earth 's tectonic plates, r0.namespace: openie4, r0.arg2: apart, r0.rel: move) => apart
What do the earth plates move over?		1.0	what do the earth plate move ? => $x: (the earth plate, move, $x) => $x: (the earth plate, move, $x) => (r0.arg1: the Earth?s plates, r0.namespace: reverb, r0.arg2: each other, r0.rel: are moving away from) => each other
What kind of mixture is soda?	end	3.0	What kind of mixture is soda? => $x: ($x, "is an example of", mixture) ($x, is, soda) => $x: ($x, "is an example of", mixture) ($x, is, soda) => (r0.arg1: the end, r1.rel: is bigger than, r0.namespace: reverb, r1.arg2: a soda, r0.arg2: a mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the end) => the end; what type of mixture be soda ? => $x: ($x, "is an example of", mixture) ($x, be, soda) => $x: ($x, "is an example of", mixture) ($x, be, soda) => (r0.arg1: the end, r1.rel: is bigger than, r0.namespace: reverb, r1.arg2: a soda, r0.arg2: a mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the end) => the end; what mixture be soda ? => $x: ($x, "is an example of", mixture) ($x, be, soda) => $x: ($x, "is an example of", mixture) ($x, be, soda) => (r0.arg1: the end, r1.rel: is bigger than, r0.namespace: reverb, r1.arg2: a soda, r0.arg2: a mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the end) => the end
What kind of mixture is soda?	soil	3.0	What kind of mixture is soda? => $x: ($x, "is an example of", mixture) ($x, is, soda) => $x: ($x, "is an example of", mixture) ($x, is, soda) => (r0.arg1: soil, r1.rel: was neutralized with, r0.namespace: reverb, r1.arg2: soda ash, r0.arg2: a heterogeneous mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: soil) => soil; what type of mixture be soda ? => $x: ($x, "is an example of", mixture) ($x, be, soda) => $x: ($x, "is an example of", mixture) ($x, be, soda) => (r0.arg1: soil, r1.rel: was neutralized with, r0.namespace: reverb, r1.arg2: soda ash, r0.arg2: a heterogeneous mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: soil) => soil; what mixture be soda ? => $x: ($x, "is an example of", mixture) ($x, be, soda) => $x: ($x, "is an example of", mixture) ($x, be, soda) => (r0.arg1: soil, r1.rel: was neutralized with, r0.namespace: reverb, r1.arg2: soda ash, r0.arg2: a heterogeneous mixture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: soil) => soil
What work does princess diana do?	score	12.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Adapted Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Score; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Adapted Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Score; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Adapted Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Score, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Score
What work does princess diana do?	aids	6.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aids, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aids; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: AIDS, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => AIDS; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aids, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aids; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: AIDS, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => AIDS; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aids, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aids; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: AIDS, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => AIDS
What work does princess diana do?	england	6.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: England, r1.rel: did stay in, r0.namespace: freebase, r1.arg2: England, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => England
What work does princess diana do?	cause	6.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Cause; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The cause; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Cause; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The cause; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The Cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The Cause; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: The cause, r1.rel: could have done for, r0.namespace: freebase, r1.arg2: the cause, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => The cause
What work does princess diana do?	score!	6.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Score!, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Score!
What work does princess diana do?	7 years	3.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: 7 Years, r1.rel: has been doing so for, r0.namespace: freebase, r1.arg2: 7 years, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => 7 Years; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: 7 Years, r1.rel: has been doing so for, r0.namespace: freebase, r1.arg2: 7 years, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => 7 Years; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: 7 Years, r1.rel: has been doing so for, r0.namespace: freebase, r1.arg2: 7 years, r0.arg2: Creative Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => 7 Years
What work does princess diana do?	scores	3.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Scores, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Scores; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Scores, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Scores; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Scores, r1.rel: did, r0.namespace: freebase, r1.arg2: score, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Scores
What work does princess diana do?	aid	3.0	What work does princess diana do? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aid, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aid; what kind of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aid, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aid; what type of work do princess diana do ? => $x: ($x, "type", work) (princess diana, do, $x) => $x: ($x, "type", work) (princess diana, do, $x) => (r0.arg1: Aid, r1.rel: did with, r0.namespace: freebase, r1.arg2: Aids, r0.arg2: Written Work, r0.rel: Type, r1.namespace: reverb, r1.arg1: Princess Diana) => Aid
What work does princess diana do?	king	1.0	what job do princess diana have ? => $x: ($x, "is a", job) (princess diana, have, $x) => $x: ($x, "is a", job) (princess diana, have, $x) => (r0.arg1: KIng, r1.rel: had an affair with, r0.namespace: nell, r1.arg2: King, r0.arg2: job position, r0.rel: is a, r1.namespace: reverb, r1.arg1: Princess Diana) => KIng
Which religion has pillars?	islam	156.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: reverb, r1.arg2: pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has two different types of, r0.namespace: openie4, r1.arg2: pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 Pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 Pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: six pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: six pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: reverb, r1.arg2: five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has been constructed upon, r0.namespace: openie4, r1.arg2: five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its Pillars and Calvinism, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its Pillars and Calvinism, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five main pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five main pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five pillars of faith, r0.arg2: religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five pillars of faith, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: its five pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: its five pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: reverb, r1.arg2: five primary obligations or pillars, r0.arg2: religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Islam, r1.rel: has, r0.namespace: openie4, r1.arg2: five primary obligations or pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Islam) => Islam
Which religion has pillars?	science	57.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: science, r1.rel: have supported the creation of, r0.namespace: openie4, r1.arg2: science, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The three pillars) => science; what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: Science, r1.rel: have supported the creation of, r0.namespace: reverb, r1.arg2: science, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The three pillars) => Science; what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: Science, r1.rel: have supported the creation of, r0.namespace: openie4, r1.arg2: science, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The three pillars) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: reverb, r1.arg2: two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has, r0.namespace: openie4, r1.arg2: two pillars, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Science) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: reverb, r1.arg2: the pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: has been presented as, r0.namespace: openie4, r1.arg2: the pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 1 Science) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: reverb, r1.arg2: the third and fourth pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: Science, r1.rel: have become, r0.namespace: openie4, r1.arg2: the third and fourth pillar, r0.arg2: new religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Sciences) => Science
Which religion has pillars?	work	32.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work; what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: work, r1.rel: has been completely off, r0.namespace: openie4, r1.arg2: work, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: our farmer and pillar) => work; what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: work, r1.rel: have become an integral part of, r0.namespace: openie4, r1.arg2: the work, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These five pillars) => work; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has prompted from, r0.namespace: openie4, r1.arg2: skeptics and pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 's work) => work; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been concentrated on, r0.namespace: openie4, r1.arg2: the two pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: had been put into, r0.namespace: openie4, r1.arg2: the two main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been centred around, r0.namespace: openie4, r1.arg2: three main pillars, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the work) => work; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: work, r1.rel: has been done to reinforce, r0.namespace: openie4, r1.arg2: the southeastern pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: no work) => work
Which religion has pillars?	buddhism	12.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: have, r0.namespace: openie4, r1.arg2: ten pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: Buddhism, r1.rel: has become one of, r0.namespace: openie4, r1.arg2: the three pillars, r0.arg2: a religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Buddhism) => Buddhism
Which religion has pillars?	asia	12.0	Which religion has pillars? => $x: ($x, "type", religion) ($x, has, pillars) => $x: ($x, "type", religion) ($x, has, pillars) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; Which religion has pillars? => $x: ($x, "type", religion) ($x, has, pillars) => $x: ($x, "type", religion) ($x, has, pillars) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia; what religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; what religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia; which kind of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; which kind of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia; which type of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; which type of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia; what kind of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; what kind of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia; what type of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has become, r0.namespace: freebase, r1.arg2: a pillar, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: Asia) => Asia; what type of religion have pillar ? => $x: ($x, "type", religion) ($x, have, pillar) => $x: ($x, "type", religion) ($x, have, pillar) => (r0.arg1: Asia, r1.rel: has benefited immensely from, r0.namespace: freebase, r1.arg2: the western seven pillars, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: ?Asia) => Asia
Which religion has pillars?	terrorism	6.0	Which religion has pillars? => $x: ($x, "is an example of", religion) ($x, has, pillars) => $x: ($x, "is an example of", religion) ($x, has, pillars) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism; what religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism; which kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism; which type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism; what kind of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism; what type of religion have pillar ? => $x: ($x, "is an example of", religion) ($x, have, pillar) => $x: ($x, "is an example of", religion) ($x, have, pillar) => (r0.arg1: terrorism, r1.rel: has targeted, r0.namespace: reverb, r1.arg2: these three pillars, r0.arg2: the way religion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Terrorism) => terrorism
Which religion has pillars?	nationalism	6.0	Which religion has pillars? => $x: ($x, "is a kind of", religion) ($x, has, pillars) => $x: ($x, "is a kind of", religion) ($x, has, pillars) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism; what religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism; which kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism; which type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism; what kind of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism; what type of religion have pillar ? => $x: ($x, "is a kind of", religion) ($x, have, pillar) => $x: ($x, "is a kind of", religion) ($x, have, pillar) => (r0.arg1: nationalism, r1.rel: has been, r0.namespace: reverb, r1.arg2: a key pillar, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: nationalism) => nationalism
Which religion has pillars?	church	6.0	Which religion has pillars? => $x: ($x, "is a", religion) ($x, has, pillars) => $x: ($x, "is a", religion) ($x, has, pillars) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church; what religion have pillar ? => $x: ($x, "is a", religion) ($x, have, pillar) => $x: ($x, "is a", religion) ($x, have, pillar) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church; which kind of religion have pillar ? => $x: ($x, "is a", religion) ($x, have, pillar) => $x: ($x, "is a", religion) ($x, have, pillar) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church; which type of religion have pillar ? => $x: ($x, "is a", religion) ($x, have, pillar) => $x: ($x, "is a", religion) ($x, have, pillar) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church; what kind of religion have pillar ? => $x: ($x, "is a", religion) ($x, have, pillar) => $x: ($x, "is a", religion) ($x, have, pillar) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church; what type of religion have pillar ? => $x: ($x, "is a", religion) ($x, have, pillar) => $x: ($x, "is a", religion) ($x, have, pillar) => (r0.arg1: church, r1.rel: have historically served as, r0.namespace: nell, r1.arg2: pillars, r0.arg2: religion, r0.rel: is a, r1.namespace: reverb, r1.arg1: churches) => church
Which religion has pillars?	fire	1.0	what religion do pillar have ? => $x: ($x, "type", religion) (pillar, have, $x) => $x: ($x, "type", religion) (pillar, have, $x) => (r0.arg1: Fire, r1.rel: would have looked enough like, r0.namespace: freebase, r1.arg2: ?fire, r0.arg2: Religion, r0.rel: Type, r1.namespace: reverb, r1.arg1: the glowing pillars) => Fire
Which religion has pillars?	prescribed prayer	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: The prescribed prayer, r0.namespace: openie4, r0.arg2: the pillar of the religion, r0.rel: is) => The prescribed prayer
Which religion has pillars?	prudent talking	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: prudent talking, r0.namespace: reverb, r0.arg2: religion pillars, r0.rel: are one of) => prudent talking
Which religion has pillars?	prayer	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: The prayer, r0.namespace: openie4, r0.arg2: the pillar of the religion, r0.rel: is) => The prayer
Which religion has pillars?	nature	1.0	what religion do pillar have ? => $x: ($x, "is a kind of", religion) (pillar, have, $x) => $x: ($x, "is a kind of", religion) (pillar, have, $x) => (r0.arg1: nature, r1.rel: has been ethereal in, r0.namespace: reverb, r1.arg2: nature, r0.arg2: religion, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Middle Pillar Presents label) => nature
Which religion has pillars?	second pillar islam	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: The second pillar of Islam, r0.namespace: openie4, r0.arg2: a basic pillar of the religion, r0.rel: is) => The second pillar of Islam
Which religion has pillars?	namaz	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: Namaz, r0.namespace: openie4, r0.arg2: the pillar of the religion, r0.rel: is) => Namaz
Which religion has pillars?	arkaim	1.0	what be pillar religion ? => $x: ($x, be, pillar religion) => $x: ($x, be, pillar religion) => (r0.arg1: Arkaim, r0.namespace: reverb, r0.arg2: the Pillar religion, r0.rel: is indeed the mystery of) => Arkaim
What state did eddie guerrero die in?	2005	16.0	where do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: openie4, r0.arg2: 2005, r0.rel: dying in) => 2005; where do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: WWE star Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: wrestler Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: openie4, r0.arg2: 2005, r0.rel: dying in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: WWE star Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: wrestler Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in in, $x) => $x: (eddie guerrero, die in in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in in, $x) => $x: (eddie guerrero, die in in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: openie4, r0.arg2: 2005, r0.rel: dying in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in in, $x) => $x: (eddie guerrero, die in in, $x) => (r0.arg1: WWE star Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; where do eddie guerrero die in ? => $x: (eddie guerrero, die in in, $x) => $x: (eddie guerrero, die in in, $x) => (r0.arg1: wrestler Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; when do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; when do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: openie4, r0.arg2: 2005, r0.rel: dying in) => 2005; when do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: WWE star Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005; when do eddie guerrero die ? => $x: (eddie guerrero, die in, $x) => $x: (eddie guerrero, die in, $x) => (r0.arg1: wrestler Eddie Guerrero, r0.namespace: reverb, r0.arg2: 2005, r0.rel: died in) => 2005
What state did eddie guerrero die in?	38	2.0	where do eddie guerrero die at ? => $x: (eddie guerrero, die at, $x) => $x: (eddie guerrero, die at, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: openie4, r0.arg2: 38, r0.rel: died at) => 38; where do eddie guerrero die at ? => $x: (eddie guerrero, die at, $x) => $x: (eddie guerrero, die at, $x) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: 38, r0.rel: died at) => 38
What is the study of the body's structures?	asterix	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Asterix, r0.namespace: reverb, r0.arg2: the artist?s own mortal body, r0.rel: is a study of) => Asterix
What is the study of the body's structures?	pni	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: PNI, r0.namespace: reverb, r0.arg2: the body?s innate healing abilities, r0.rel: is the study of) => PNI
What is the study of the body's structures?	immunologists	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Immunologists, r0.namespace: reverb, r0.arg2: the body?s defense mechanisms, r0.rel: study) => Immunologists
What is the study of the body's structures?	columbia university	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Columbia University, r0.namespace: reverb, r0.arg2: the body?s metabolism, r0.rel: studied) => Columbia University
What is the study of the body's structures?	nih	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: NIH, r0.namespace: reverb, r0.arg2: the body?s defense mechanisms, r0.rel: will focus on studying) => NIH
What is the study of the body's structures?	kinesiology	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: kinesiology, r0.namespace: reverb, r0.arg2: the body?s bones, r0.rel: is the scientific study of) => kinesiology
What is the study of the body's structures?	loughborough university	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Loughborough University, r0.namespace: reverb, r0.arg2: the body?s recovery needs, r0.rel: has studied) => Loughborough University
What is the study of the body's structures?	students	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: students, r0.namespace: reverb, r0.arg2: the body?s major systems, r0.rel: will study several of) => students
What is the study of the body's structures?	endocrinologists	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Endocrinologists, r0.namespace: reverb, r0.arg2: the body?s endocrine system, r0.rel: study) => Endocrinologists
What is the study of the body's structures?	yoga anatomy	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Yoga anatomy, r0.namespace: reverb, r0.arg2: the body?s muscles, r0.rel: covers the study of) => Yoga anatomy
What is the study of the body's structures?	anatomy ?	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Anatomy ?, r0.namespace: reverb, r0.arg2: the human?s body, r0.rel: is a study of) => Anatomy ?
What is the study of the body's structures?	physiology	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Physiology, r0.namespace: reverb, r0.arg2: the body?s natural functions, r0.rel: is the study of) => Physiology
What is the study of the body's structures?	nutrition	1.0	who study the body s ? => $x: ($x, study, the body s) => $x: ($x, study, the body s) => (r0.arg1: Nutrition, r0.namespace: reverb, r0.arg2: the body?s use, r0.rel: is the study of) => Nutrition
What color is the streak of amethyst?	30 years	1.0	what streak do amethyst have ? => $x: ($x, "is a kind of", streak) (amethyst, have, $x) => $x: ($x, "is a kind of", streak) (amethyst, have, $x) => (r0.arg1: 30 years, r1.rel: has been doing healing work for over, r0.namespace: reverb, r1.arg2: 30 years, r0.arg2: streak, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Amethyst Light) => 30 years
What law does the judicial branch makes?	law	4.0	what rule do the judicial branch make ? => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => (r0.arg1: law, r1.rel: should make, r0.namespace: reverb, r1.arg2: law, r0.arg2: rule and measure, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the judicial branch) => law; what rule do the judicial branch make ? => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => (r0.arg1: law, r1.rel: to make, r0.namespace: reverb, r1.arg2: laws, r0.arg2: rule and measure, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Judicial branch) => law; what rule do the judicial branch make ? => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => (r0.arg1: law, r1.rel: can make, r0.namespace: reverb, r1.arg2: law, r0.arg2: rule and measure, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Judicial branch) => law; what rule do the judicial branch make ? => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => $x: ($x, "is a kind of", rule) (the judicial branch, make, $x) => (r0.arg1: law, r1.rel: should quit making, r0.namespace: reverb, r1.arg2: laws, r0.arg2: rule and measure, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the judicial branch) => law
What law does the judicial branch makes?	business	2.0	what do the judicial branch do ? => $x: (the judicial branch, do, $x) => $x: (the judicial branch, do, $x) => (r0.arg1: the Judicial Branch, r0.namespace: reverb, r0.arg2: business, r0.rel: does) => business; what do the judicial branch do ? => $x: (the judicial branch, do, $x) => $x: (the judicial branch, do, $x) => (r0.arg1: the Judicial Branch, r0.namespace: openie4, r0.arg2: business, r0.rel: does) => business
What law does the judicial branch makes?	policy	1.0	what do the judicial branch do ? => $x: (the judicial branch, do, $x) => $x: (the judicial branch, do, $x) => (r0.arg1: the judicial branch, r0.namespace: reverb, r0.arg2: policy, r0.rel: does indirectly make) => policy
What law does the judicial branch makes?	public polls	1.0	what do the judicial branch do ? => $x: (the judicial branch, do, $x) => $x: (the judicial branch, do, $x) => (r0.arg1: The judicial branch, r0.namespace: reverb, r0.arg2: public polls, r0.rel: does n?t always fare well in) => public polls
What law does the judicial branch makes?	public	1.0	what do the judicial branch do ? => $x: (the judicial branch, do, $x) => $x: (the judicial branch, do, $x) => (r0.arg1: the judicial branch, r0.namespace: reverb, r0.arg2: the public, r0.rel: can do is stay open for) => the public
Where does the term computer come from?	japan	2.0	what state do computer come from ? => $x: ($x, "type", state) (computer, come from, $x) => $x: ($x, "type", state) (computer, come from, $x) => (r0.arg1: Japan, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Japan, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: notebook computers) => Japan; what state do computer come from ? => $x: ($x, "type", state) (computer, come from, $x) => $x: ($x, "type", state) (computer, come from, $x) => (r0.arg1: Japan, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Japan, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: computer chips) => Japan
Where does the term computer come from?	john brunner	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: the term computer, r0.namespace: reverb, r0.arg2: John Brunner, r0.rel: came from) => John Brunner
Where does the term computer come from?	latin meaning computercount	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: The term computer, r0.namespace: openie4, r0.arg2: the Latin meaning computercount, r0.rel: comes from) => the Latin meaning computercount
Where does the term computer come from?	company	1.0	who introduce the term computer ? => $x: ($x, introduce, the term computer) => $x: ($x, introduce, the term computer) => (r0.arg1: the company, r0.namespace: reverb, r0.arg2: the term ?computer ?, r0.rel: introduced) => the company
Where does the term computer come from?	america	1.0	what state do computer come from ? => $x: ($x, "is a kind of", state) (computer, come from, $x) => $x: ($x, "is a kind of", state) (computer, come from, $x) => (r0.arg1: America, r1.rel: came from, r0.namespace: reverb, r1.arg2: America, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Computers) => America
Where does the term computer come from?	participants	1.0	who introduce the term computer ? => $x: ($x, introduce, the term computer) => $x: ($x, introduce, the term computer) => (r0.arg1: Participants, r0.namespace: reverb, r0.arg2: the computer terms, r0.rel: are also introduced to) => Participants
Where does the term computer come from?	analogy	1.0	Where does the term computer come from? => $x: (the term computer, come from, $x) => $x: (the term computer, come from, $x) => (r0.arg1: The term computer virus, r0.namespace: reverb, r0.arg2: the analogy, r0.rel: came from) => the analogy
What are the oldest life forms alive?	microorganisms	2.0	what be the oldest life form on earth ? => $x: ($x, be the oldest life form on, earth) => $x: ($x, be the oldest life form on, earth) => (r0.arg1: Microorganisms, r0.namespace: openie4, r0.arg2: earth and impact, r0.rel: are the oldest life forms on) => Microorganisms; what be the oldest life form on earth ? => $x: ($x, be the oldest life form on, earth) => $x: ($x, be the oldest life form on, earth) => (r0.arg1: Microorganisms, r0.namespace: openie4, r0.arg2: earth and impact, r0.rel: are the oldest life forms on) => Microorganisms
What are the oldest life forms alive?	cyanobacteria	2.0	what be the oldest known life form ? => $x: ($x, be, the oldest known life form) => $x: ($x, be, the oldest known life form) => (r0.arg1: Cyanobacteria, r0.namespace: reverb, r0.arg2: the oldest known life forms, r0.rel: are one of) => Cyanobacteria; what be the oldest known life form ? => $x: ($x, be, the oldest known life form) => $x: ($x, be, the oldest known life form) => (r0.arg1: Cyanobacteria, r0.namespace: openie4, r0.arg2: one of the oldest known life forms, r0.rel: are) => Cyanobacteria
What is the most complex of animals?	love song	2.0	What is the most complex of animals? => $x: ($x, is the most complex of, animals) => $x: ($x, is the most complex of, animals) => (r0.arg1: a love song, r0.namespace: reverb, r0.arg2: all animals, r0.rel: is the most complex of perhaps) => a love song; what be the most complex of all animal ? => $x: ($x, be the most complex of, all animal) => $x: ($x, be the most complex of, all animal) => (r0.arg1: a love song, r0.namespace: reverb, r0.arg2: all animals, r0.rel: is the most complex of perhaps) => a love song
What is the most complex of animals?	humans	1.0	What is the most complex of animals? => $x: ($x, is the most complex of, animals) => $x: ($x, is the most complex of, animals) => (r0.arg1: Humans, r0.namespace: reverb, r0.arg2: animals, r0.rel: are the most complex of) => Humans
Which one is biggest animal in world?	blue whales	6.0	what be the biggest animal in world ? => $x: ($x, be the biggest animal in, world) => $x: ($x, be the biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales; what be the biggest animal in world ? => $x: ($x, be the biggest animal in, world) => $x: ($x, be the biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales; who be biggest animal in world ? => $x: ($x, be biggest animal in, world) => $x: ($x, be biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales; who be biggest animal in world ? => $x: ($x, be biggest animal in, world) => $x: ($x, be biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales; what be biggest animal in world ? => $x: ($x, be biggest animal in, world) => $x: ($x, be biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales; what be biggest animal in world ? => $x: ($x, be biggest animal in, world) => $x: ($x, be biggest animal in, world) => (r0.arg1: Blue whales, r0.namespace: openie4, r0.arg2: the world, r0.rel: are the biggest animals in) => Blue whales
What countrys have geothermal?	new zealand	32.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: openie4, r1.arg2: geothermal powerstations, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: openie4, r1.arg2: geothermal systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: a large geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has developed, r0.namespace: openie4, r1.arg2: more geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: freebase, r1.arg2: geothermal powerstations, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: freebase, r1.arg2: geothermal systems, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has been running, r0.namespace: openie4, r1.arg2: geothermal powerstations, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has an array of, r0.namespace: openie4, r1.arg2: geothermal systems, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: a large geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: New Zealand, r1.rel: has developed, r0.namespace: openie4, r1.arg2: more geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: New Zealand) => New Zealand
What countrys have geothermal?	japan	26.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries in Fiction, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: japan, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Japan) => japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal energy, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: three geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: 18 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: now has, r0.namespace: reverb, r1.arg2: 18 geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has built, r0.namespace: reverb, r1.arg2: 20 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries in Fiction, r0.rel: Type, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: japan, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Japan) => japan; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal energy, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: three geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has, r0.namespace: reverb, r1.arg2: 18 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: now has, r0.namespace: reverb, r1.arg2: 18 geothermal power stations, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Japan, r1.rel: has built, r0.namespace: reverb, r1.arg2: 20 geothermal power plants, r0.arg2: the country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Japan) => Japan
What countrys have geothermal?	indonesia	24.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: large undeveloped geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: abundant geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the largest geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the world?s largest geothermal resource, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: large undeveloped geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the largest geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the world?s largest geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: large undeveloped geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: great geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: abundant geothermal resources, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the largest geothermal energy potential, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: reverb, r1.arg2: the world?s largest geothermal resource, r0.arg2: Asian countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: large undeveloped geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: great geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: abundant geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the largest geothermal energy potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ?Indonesia) => Indonesia; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Indonesia, r1.rel: has, r0.namespace: openie4, r1.arg2: the world?s largest geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Indonesia) => Indonesia
What countrys have geothermal?	iceland	24.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Iceland) => iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal advisers, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has rich reserves of, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has, r0.namespace: freebase, r1.arg2: geothermal advisers, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Iceland, r1.rel: has rich reserves of, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iceland) => Iceland; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Iceland) => iceland; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has, r0.namespace: nell, r1.arg2: geothermal advisers, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: iceland, r1.rel: has rich reserves of, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Iceland) => iceland
What countrys have geothermal?	switzerland	18.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Landlocked Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: SWITZERLAND, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => SWITZERLAND; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Landlocked Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: freebase, r1.arg2: geothermal energy, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: SWITZERLAND, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => SWITZERLAND; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Switzerland) => Switzerland
What countrys have geothermal?	united states	14.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: the united states, r1.rel: may have, r0.namespace: nell, r1.arg2: geothermal resources, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The United States) => the united states; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: may have, r0.namespace: openie4, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => the United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: may have, r0.namespace: reverb, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => The United States; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: the united states, r1.rel: may have, r0.namespace: nell, r1.arg2: geothermal resources, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: The United States) => the united states; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: may have, r0.namespace: openie4, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: the United States, r1.rel: has, r0.namespace: openie4, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => the United States; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: may have, r0.namespace: reverb, r1.arg2: geothermal resources, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: 61 geothermal projects, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: The United States, r1.rel: has, r0.namespace: reverb, r1.arg2: enough geothermal energy to meet, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the United States) => The United States
What countrys have geothermal?	germany	12.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: reverb, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: openie4, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: reverb, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: reverb, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has only just begun to develop, r0.namespace: openie4, r1.arg2: its geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: 5 small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Germany, r1.rel: has, r0.namespace: openie4, r1.arg2: five small geothermal power plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Germany) => Germany
What countrys have geothermal?	kenya	6.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: has, r0.namespace: reverb, r1.arg2: substantial geothermal potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: currently has, r0.namespace: reverb, r1.arg2: 3 geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: also has, r0.namespace: reverb, r1.arg2: a geothermal station, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: has, r0.namespace: reverb, r1.arg2: substantial geothermal potential, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: currently has, r0.namespace: reverb, r1.arg2: 3 geothermal plants, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Kenya, r1.rel: also has, r0.namespace: reverb, r1.arg2: a geothermal station, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Kenya) => Kenya
What countrys have geothermal?	america	4.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: openie4, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: openie4, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: America, r1.rel: has, r0.namespace: reverb, r1.arg2: geothermal , wind and solar, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: America) => America
What countrys have geothermal?	new-zealand	4.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has been running, r0.namespace: nell, r1.arg2: geothermal powerstations, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand; What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has an array of, r0.namespace: nell, r1.arg2: geothermal systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has been running, r0.namespace: nell, r1.arg2: geothermal powerstations, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: new-zealand, r1.rel: has an array of, r0.namespace: nell, r1.arg2: geothermal systems, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Zealand) => new-zealand
What countrys have geothermal?	mexico	4.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: openie4, r1.arg2: 958 MWe geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: reverb, r1.arg2: 958 MWe geothermal, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: openie4, r1.arg2: 958 MWe geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Mexico, r1.rel: has, r0.namespace: reverb, r1.arg2: 958 MWe geothermal, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico
What countrys have geothermal?	uk	2.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The UK, r1.rel: has, r0.namespace: reverb, r1.arg2: a good deep geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The UK) => The UK; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: The UK, r1.rel: has, r0.namespace: reverb, r1.arg2: a good deep geothermal resource, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The UK) => The UK
What countrys have geothermal?	us-colorado	2.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: US-Colorado, r1.rel: have installed, r0.namespace: nell, r1.arg2: geothermal heating, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Colorado) => US-Colorado; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: US-Colorado, r1.rel: have installed, r0.namespace: nell, r1.arg2: geothermal heating, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Colorado) => US-Colorado
What countrys have geothermal?	philippines	2.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: The Philippines, r1.rel: has, r0.namespace: openie4, r1.arg2: wind and geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Philippines) => The Philippines; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: The Philippines, r1.rel: has, r0.namespace: openie4, r1.arg2: wind and geothermal, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Philippines) => The Philippines
What countrys have geothermal?	colorado	2.0	What countrys have geothermal? => $x: ($x, "type", countrys) ($x, have, geothermal) => $x: ($x, "type", countrys) ($x, have, geothermal) => (r0.arg1: Colorado, r1.rel: have installed, r0.namespace: freebase, r1.arg2: geothermal heating, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Colorado) => Colorado; what type of country have geothermal ? => $x: ($x, "type", country) ($x, have, geothermal) => $x: ($x, "type", country) ($x, have, geothermal) => (r0.arg1: Colorado, r1.rel: have installed, r0.namespace: freebase, r1.arg2: geothermal heating, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Colorado) => Colorado
What countrys have geothermal?	tanzania	2.0	What countrys have geothermal? => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => $x: ($x, "is an example of", countrys) ($x, have, geothermal) => (r0.arg1: Tanzania, r1.rel: have huge potential for, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Tanzania) => Tanzania; what type of country have geothermal ? => $x: ($x, "is an example of", country) ($x, have, geothermal) => $x: ($x, "is an example of", country) ($x, have, geothermal) => (r0.arg1: Tanzania, r1.rel: have huge potential for, r0.namespace: openie4, r1.arg2: geothermal energy, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Tanzania) => Tanzania
What countrys have geothermal?	uk, switzerland	2.0	What countrys have geothermal? => $x: ($x, "is a", countrys) ($x, have, geothermal) => $x: ($x, "is a", countrys) ($x, have, geothermal) => (r0.arg1: UK, Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => UK, Switzerland; what type of country have geothermal ? => $x: ($x, "is a", country) ($x, have, geothermal) => $x: ($x, "is a", country) ($x, have, geothermal) => (r0.arg1: UK, Switzerland, r1.rel: have remained enthusiastic about, r0.namespace: nell, r1.arg2: geothermal energy, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Switzerland) => UK, Switzerland
What are some fast growing plants?	first area	1.0	What are some fast growing plants? => $x: ($x, are, some fast growing plants) => $x: ($x, are, some fast growing plants) => (r0.arg1: The first area, r0.namespace: reverb, r0.arg2: some fast growing plants, r0.rel: will be planted with) => The first area
What is the population of Muslims?	jama?at-i-islami :? ?q.?	6.0	What is the population of Muslims? => $x: ($x, is the population of, Muslims) => $x: ($x, is the population of, Muslims) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; What is the population of Muslims? => $x: ($x, is the population of, Muslims) => $x: ($x, is the population of, Muslims) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; who be the population of muslim ? => $x: ($x, be the population of, muslim) => $x: ($x, be the population of, muslim) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; who be the population of muslim ? => $x: ($x, be the population of, muslim) => $x: ($x, be the population of, muslim) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; the population of muslim ? => $x: ($x, be the population of, muslim) => $x: ($x, be the population of, muslim) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?; what be the the population of of muslim ? => $x: ($x, be the the population of of, muslim) => $x: ($x, be the the population of of, muslim) => (r0.arg1: Jama?at-i-Islami :? ?Q.?, r0.namespace: reverb, r0.arg2: Muslims, r0.rel: is the population of) => Jama?at-i-Islami :? ?Q.?
What is the population of Muslims?	25,000 persons	1.0	What is the population of Muslims? => $x: (Muslims, have population of, $x) => $x: (Muslims, have population of, $x) => (r0.arg1: Muslim Zaragoza, r0.namespace: reverb, r0.arg2: 25,000 persons, r0.rel: had a population of) => 25,000 persons
What is the population of Muslims?	80-90 % hindus	1.0	What is the population of Muslims? => $x: (Muslims, have population of, $x) => $x: (Muslims, have population of, $x) => (r0.arg1: local Muslim rulers, r0.namespace: reverb, r0.arg2: 80-90 % Hindus, r0.rel: had a population of) => 80-90 % Hindus
What is the root language in West Africa?	sanskrit	2.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Sanskrit, r0.namespace: reverb, r0.arg2: the root language, r0.rel: is) => Sanskrit; what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Sanskrit, r0.namespace: openie4, r0.arg2: the root of all languages, r0.rel: is) => Sanskrit
What is the root language in West Africa?	languages english	2.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Languages English, r0.namespace: reverb, r0.arg2: the root official language, r0.rel: is) => Languages English; what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Languages English, r0.namespace: openie4, r0.arg2: the root official language of Barbados, r0.rel: is) => Languages English
What is the root language in West Africa?	pali	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: The Pali, r0.namespace: reverb, r0.arg2: the root language Indo-European languages, r0.rel: is) => The Pali
What is the root language in West Africa?	gaelic	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Gaelic, r0.namespace: reverb, r0.arg2: the root language, r0.rel: is) => Gaelic
What is the root language in West Africa?	page language	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: The page language, r0.namespace: reverb, r0.arg2: the root page language, r0.rel: is now determined by) => The page language
What is the root language in West Africa?	old norse	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Old Norse, r0.namespace: reverb, r0.arg2: the root language, r0.rel: is) => Old Norse
What is the root language in West Africa?	modern english	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Modern English, r0.namespace: reverb, r0.arg2: the root language, r0.rel: really was) => Modern English
What is the root language in West Africa?	tamazight	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Tamazight, r0.namespace: reverb, r0.arg2: the root language, r0.rel: is seen as) => Tamazight
What is the root language in West Africa?	faroese	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Faroese, r0.namespace: openie4, r0.arg2: the national language , rooted in old Norse, r0.rel: is) => Faroese
What is the root language in West Africa?	caraguata	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Caraguata, r0.namespace: reverb, r0.arg2: the same language root, r0.rel: is likely derived from) => Caraguata
What is the root language in West Africa?	bruhi	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Bruhi, r0.namespace: reverb, r0.arg2: the root language, r0.rel: was) => Bruhi
What is the root language in West Africa?	barbados english	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: Barbados English, r0.namespace: reverb, r0.arg2: the root official language, r0.rel: is) => Barbados English
What is the root language in West Africa?	system	1.0	what be the root language ? => $x: ($x, be, the root language) => $x: ($x, be, the root language) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: the intermediate language root, r0.rel: is) => the system
