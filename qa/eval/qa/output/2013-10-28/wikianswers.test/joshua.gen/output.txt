How common is the bipolar disorder?	depression	-49.22736544546388	what be the common bipolar disorder ? => $x: ($x, be, the common bipolar disorder) => $x: ($x, be, common bipolar disorder) => (r0.arg1: depression, r0.namespace: openie4, r0.arg2: more common than mania in bipolar disorder, r0.rel: is) => depression
What is the worlds oldest drink after water?	foreigners	-64.89191781762682	what be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners; what be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners; who be world first after drinking water ? => $x: ($x, be world first after, drinking water) => $x: ($x, be after, drinking water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners; who be world first after drinking water ? => $x: ($x, be world first after, drinking water) => $x: ($x, be after, drinking water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners; who be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners; who be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: foreigners, r0.namespace: openie4, r0.arg2: drinking the water, r0.rel: being hospitalized after) => foreigners
What is the worlds oldest drink after water?	settlement	-64.92591687727928	what be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement; what be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement; who be world first after drinking water ? => $x: ($x, be world first after, drinking water) => $x: ($x, be after, drinking water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement; who be world first after drinking water ? => $x: ($x, be world first after, drinking water) => $x: ($x, be after, drinking water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement; who be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement; who be the world first after drink water ? => $x: ($x, be the world first after, drink water) => $x: ($x, be after, drink water) => (r0.arg1: a settlement, r0.namespace: openie4, r0.arg2: a source of drinking water, r0.rel: would be named after) => a settlement
What is a job for a lawyer?	maritime matter	2.151444821412354	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter
What is a job for a lawyer?	criminal	2.151444821412354	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal
What is a job for a lawyer?	municipal real estate	2.145893954530318	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate
What is a job for a lawyer?	absence	2.141036946008537	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence
What is a job for a lawyer?	low-cost countries	2.134792220766246	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries
What is a job for a lawyer?	more lawsuits	2.134792220766246	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits
What is a job for a lawyer?	integreon pangea3	2.134792220766246	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for a lawyer ? => $x: ($x, be a job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for lawyer ? => $x: ($x, be a job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be a job for an lawyer ? => $x: ($x, be a job for, an lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3
What is a job for a lawyer?	burnout	-37.68959912439401	what job be there for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be there for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be there for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be there for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be there for lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be there for lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be there for lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be there for lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be best for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be best for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be best for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be best for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be best for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be best for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be best for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be best for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: burnout) => Burnout; what job be for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: openie4, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout; what job be for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: Burnout, r1.rel: is a real issue for, r0.namespace: reverb, r1.arg2: many lawyers, r0.arg2: job depression, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Burnout) => Burnout
What is a job for a lawyer?	sirius	-37.797358835809064	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what do a job as a lawyer ? => $x: ($x, do a job as, a lawyer) => $x: ($x, do job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what do a job as a lawyer ? => $x: ($x, do a job as, a lawyer) => $x: ($x, do job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius
What is a job for a lawyer?	young people	-37.80360356105136	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Young people, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are offered high-paying jobs as) => Young people
What is a job for a lawyer?	avvo	-37.98467823313253	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Avvo, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was your first job as) => Avvo
What is a job for a lawyer?	question	-37.99022910001456	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were getting jobs as) => the question
What is a job for a lawyer?	providing legal advice	-37.99022910001456	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: Providing legal advice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is your job as) => Providing legal advice
What is a job for a lawyer?	you?ll	-37.99508610853634	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be the job as a lawyer ? => $x: ($x, be the job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be job as, lawyer) => (r0.arg1: You?ll, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: be able to get a job as) => You?ll
What is a job for a lawyer?	event	-39.43390510910544	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event
What is a job for a lawyer?	law school	-39.453333143192566	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => law school; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => law school; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school
What is a job for a lawyer?	legal term oral argument	-39.631632381832716	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument
What is a job for a lawyer?	?this conference	-39.631632381832716	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference
What is a job for a lawyer?	medicaid boot camp	-39.64273411559678	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp
What is a job for a lawyer?	campaign	-39.64273411559678	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign
What is a job for a lawyer?	divorce rates	-39.651060415919844	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates
What is a job for a lawyer?	externships	-39.65753642728221	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships
What is a job for a lawyer?	story	-39.745349215919816	what job be there for a lawyer ? => $x: ($x, "is an example of", job) ($x, be there for, a lawyer) => $x: ($x, "is an example of", job) ($x, be for, lawyer) => (r0.arg1: the story, r1.rel: is worth a look for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be there for lawyer ? => $x: ($x, "is an example of", job) ($x, be there for, lawyer) => $x: ($x, "is an example of", job) ($x, be for, lawyer) => (r0.arg1: the story, r1.rel: is worth a look for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: are, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is worth a look for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is in, r0.namespace: reverb, r1.arg2: the Lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is about, r0.namespace: reverb, r1.arg2: a lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: had been cleared by, r0.namespace: reverb, r1.arg2: the lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is told about, r0.namespace: reverb, r1.arg2: the lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is also in, r0.namespace: reverb, r1.arg2: The Lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is one of, r0.namespace: reverb, r1.arg2: brave lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is told about, r0.namespace: reverb, r1.arg2: the lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: was going to call, r0.namespace: reverb, r1.arg2: his lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: below is a report from, r0.namespace: reverb, r1.arg2: Trial lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is only as good as, r0.namespace: reverb, r1.arg2: the lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is, r0.namespace: reverb, r1.arg2: the young lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is, r0.namespace: reverb, r1.arg2: a lawyer Shiro, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is based on, r0.namespace: reverb, r1.arg2: a modern lawyer?s attempt, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is about, r0.namespace: reverb, r1.arg2: a New York lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: was about, r0.namespace: reverb, r1.arg2: naked personal injury lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is about, r0.namespace: reverb, r1.arg2: ninjas and lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is introduced by, r0.namespace: reverb, r1.arg2: his defence lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is even equivocal on whether, r0.namespace: reverb, r1.arg2: a Crown lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: had been boiled down to, r0.namespace: reverb, r1.arg2: Ford?s lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: is about, r0.namespace: reverb, r1.arg2: a highly-stressed lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be best for a lawyer ? => $x: ($x, "is an example of", job) ($x, be best for, a lawyer) => $x: ($x, "is an example of", job) ($x, be, lawyer) => (r0.arg1: the story, r1.rel: was, r0.namespace: reverb, r1.arg2: a about a female defence lawyer, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story; what job be for a lawyer ? => $x: ($x, "is an example of", job) ($x, be for, a lawyer) => $x: ($x, "is an example of", job) ($x, be for, lawyer) => (r0.arg1: the story, r1.rel: is worth a look for, r0.namespace: reverb, r1.arg2: lawyers, r0.arg2: a menial back office type job, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The story) => the story
What is a job for a lawyer?	cases	-39.780550259113014	what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases
What is a job for a lawyer?	oral argument	-39.79981420001453	what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be the opportunity for lawyer ? => $x: ($x, be the opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: An oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => An oral argument
What is a job for a lawyer?	doctors	-39.809692310243705	what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: the doctors, r0.namespace: reverb, r0.arg2: a competent lawyer skilled, r0.rel: is the job of) => the doctors
What is a job for a lawyer?	explosion	-39.82717754092211	what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be a job of a lawyer ? => $x: ($x, be a job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, lawyer) => (r0.arg1: an explosion, r0.namespace: reverb, r0.arg2: a burn or gas explosion lawyer, r0.rel: is the job of) => an explosion
What is a job for a lawyer?	self-policing	-39.83050806105133	what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: lawyers, r0.namespace: reverb, r0.arg2: self-policing, r0.rel: do a good job of) => self-policing; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: lawyers, r0.namespace: reverb, r0.arg2: self-policing, r0.rel: do a good job of) => self-policing
What is a job for a lawyer?	discovery	-39.83883436137438	what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: your lawyer, r0.namespace: reverb, r0.arg2: discovery, r0.rel: does a thorough job of) => discovery; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: your lawyer, r0.namespace: reverb, r0.arg2: discovery, r0.rel: does a thorough job of) => discovery
What is a job for a lawyer?	existence terms	-39.83883436137438	what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: lawyers, r0.namespace: reverb, r0.arg2: the existence and terms, r0.rel: do a poor job of documenting) => the existence and terms; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: lawyers, r0.namespace: reverb, r0.arg2: the existence and terms, r0.rel: do a poor job of documenting) => the existence and terms
What is a job for a lawyer?	issues	-39.84531037273676	what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: Lawyers USA, r0.namespace: reverb, r0.arg2: the issues, r0.rel: does a nice job of summarizing) => the issues; what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: 's lawyers, r0.namespace: reverb, r0.arg2: the issues, r0.rel: did a good job of framing) => the issues; what be the job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: the lawyer-author, r0.namespace: reverb, r0.arg2: issues, r0.rel: does a really nice job of focusing on) => issues; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: Lawyers USA, r0.namespace: reverb, r0.arg2: the issues, r0.rel: does a nice job of summarizing) => the issues; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: 's lawyers, r0.namespace: reverb, r0.arg2: the issues, r0.rel: did a good job of framing) => the issues; what be a job of a lawyer ? => $x: (a lawyer, have job of, $x) => $x: (lawyer, job of, $x) => (r0.arg1: the lawyer-author, r0.namespace: reverb, r0.arg2: issues, r0.rel: does a really nice job of focusing on) => issues
What is a job for a lawyer?	parent	-40.421113824687666	what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: our parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: openie4, r1.arg1: her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Their parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Both parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: the parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: openie4, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are having to hire, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: would be calling, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were contacted by, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Both her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: would be calling so fast, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: openie4, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were represented by, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: The parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: had been, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are also, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were able to pay for, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were sharing brutal stories with, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: their parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: was, r0.namespace: freebase, r1.arg2: a lawyer, r0.arg2: jobs, r0.rel: Type, r1.namespace: openie4, r1.arg1: the parent) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: both lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: divorce lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: both parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: the lawyer, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: both lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: The parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: were, r0.namespace: freebase, r1.arg2: both lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: His parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are, r0.namespace: freebase, r1.arg2: strict lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: her parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: is, r0.namespace: freebase, r1.arg2: a lawyer, r0.arg2: jobs, r0.rel: Type, r1.namespace: openie4, r1.arg1: your parent) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: can be represented by, r0.namespace: freebase, r1.arg2: a lawyer, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: was trained to become, r0.namespace: freebase, r1.arg2: a lawyer, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are rarely allowed by, r0.namespace: freebase, r1.arg2: their lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: are looking to hire, r0.namespace: freebase, r1.arg2: two lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: parent, r1.rel: have been quieted by, r0.namespace: freebase, r1.arg2: their lawyers, r0.arg2: jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: parents) => parent
What is a job for a lawyer?	programmer	-40.42944012501073	what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: Programmer, r1.rel: are like, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: programmers) => Programmer; what job be best for a lawyer ? => $x: ($x, "type", job) ($x, be best for, a lawyer) => $x: ($x, "type", job) ($x, be, lawyer) => (r0.arg1: Programmer, r1.rel: now are much cheaper than, r0.namespace: freebase, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: Type, r1.namespace: reverb, r1.arg1: Programmers) => Programmer
What is a job for a lawyer?	links	-41.30036296592438	what job be there for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: LINKS, r1.rel: is a special network for, r0.namespace: nell, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the LINK) => LINKS; what job be there for lawyer ? => $x: ($x, "is a kind of", job) ($x, be there for, lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: LINKS, r1.rel: is a special network for, r0.namespace: nell, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the LINK) => LINKS; what job be best for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be best for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be, lawyer) => (r0.arg1: LINKS, r1.rel: can be very useful to, r0.namespace: nell, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: links) => LINKS; what job be for a lawyer ? => $x: ($x, "is a kind of", job) ($x, be for, a lawyer) => $x: ($x, "is a kind of", job) ($x, be for, lawyer) => (r0.arg1: LINKS, r1.rel: is a special network for, r0.namespace: nell, r1.arg2: lawyers, r0.arg2: Jobs, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the LINK) => LINKS
What is a job for a lawyer?	advertising	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: advertising, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Are) => advertising
What is a job for a lawyer?	next	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Next, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Next
What is a job for a lawyer?	hawaii	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Hawaii, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Hawaii
What is a job for a lawyer?	demand	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: demand, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => demand
What is a job for a lawyer?	top	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the top
What is a job for a lawyer?	cost	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the cost, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the cost
What is a job for a lawyer?	information	-41.7616608227342	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: information, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => information
What is a job for a lawyer?	husband	-41.92984264091602	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Husband, r0.namespace: openie4, r0.arg2: lawyer, r0.rel: is) => Husband
What is a job for a lawyer?	proud parents 3 sons	-41.92984264091602	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the proud parents of 3 sons, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => the proud parents of 3 sons
What is a job for a lawyer?	lot legislators	-41.92984264091602	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: A lot of legislators, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are) => A lot of legislators
What is a job for a lawyer?	social defenders	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: social defenders, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => social defenders
What is a job for a lawyer?	best	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the best, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => the best
What is a job for a lawyer?	salesmen	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: Not all salesmen, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => Not all salesmen
What is a job for a lawyer?	130	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: 130, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => 130
What is a job for a lawyer?	120 million	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: the 120 million, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were) => the 120 million
What is a job for a lawyer?	risk	-41.95938809546148	what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be the occupation for a lawyer ? => $x: ($x, be the occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be occupation for a lawyer ? => $x: ($x, be occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be a occupation for a lawyer ? => $x: ($x, be a occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk; what be an occupation for a lawyer ? => $x: ($x, be an occupation for, a lawyer) => $x: ($x, be, lawyer) => (r0.arg1: risk, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are) => risk
What is Capitol of lansing?	rental cars	-56.77896033239399	what be capitol lanse ? => $x: ($x, be, capitol lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse s capitol ? => $x: ($x, be, lanse s capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; who be capitol lanse ? => $x: ($x, be, capitol lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; who be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be capitol and lanse ? => $x: ($x, be, capitol and lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be capitol o lanse ? => $x: ($x, be, capitol o lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be capitol or lanse ? => $x: ($x, be, capitol or lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars
What is Capitol of lansing?	michigan	-59.00124364660704	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan
What is Capitol of lansing?	citadel	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel
What is Capitol of lansing?	general motors	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors
What is Capitol of lansing?	ingham county	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County
What is Capitol of lansing?	ship	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship
What is Capitol of lansing?	mid-michigan	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan
What is Capitol of lansing?	loft	-59.030385697737714	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft
What is Capitol of lansing?	ann arbor	-59.04204251818999	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor
What is Capitol of lansing?	capital city michigan	-59.198567515919535	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city of Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city of Michigan
What is Capitol of lansing?	capital michigan	-59.198567515919535	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital of Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital of Michigan
What is Capitol of lansing?	capitol michigan	-59.198567515919535	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capitol of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capitol of Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capitol of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capitol of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capitol of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capitol of Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capitol of Michigan, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capitol of Michigan
What is Capitol of lansing?	christopher	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher
What is Capitol of lansing?	hearing	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing
What is Capitol of lansing?	couple	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple
What is Capitol of lansing?	tigers	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers
What is Capitol of lansing?	delegate meetings	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings
What is Capitol of lansing?	club	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club
What is Capitol of lansing?	delphi transfers	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers
What is Capitol of lansing?	neogen?s corporate headquarters	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters
What is Capitol of lansing?	honda	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda
What is Capitol of lansing?	2006 noac	-59.1989709193343	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC
What is Capitol of lansing?	project	-59.21645615001272	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the project, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being piloted in) => the project; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the project, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being piloted in) => the project; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the project, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being piloted in) => the project; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the project, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being piloted in) => the project
What is Capitol of lansing?	incorporation papers	-59.21645615001272	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: incorporation papers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were being filed in) => incorporation papers; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: incorporation papers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were being filed in) => incorporation papers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: incorporation papers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were being filed in) => incorporation papers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: incorporation papers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were being filed in) => incorporation papers
What is Capitol of lansing?	decisions	-59.21645615001272	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Decisions, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are being made in) => Decisions; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Decisions, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are being made in) => Decisions; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Decisions, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are being made in) => Decisions; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Decisions, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are being made in) => Decisions
What is Capitol of lansing?	shuto con	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con
What is Capitol of lansing?	grand cedar rivers	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers
What is Capitol of lansing?	romney	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Romney, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is set to be in) => Romney; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Romney, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is set to be in) => Romney; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Romney, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is set to be in) => Romney; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Romney, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is set to be in) => Romney
What is Capitol of lansing?	entertainment district	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district
What is Capitol of lansing?	potter park zoo	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo
What is Capitol of lansing?	wee hours	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours
What is Capitol of lansing?	big	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big
What is Capitol of lansing?	line	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line
What is Capitol of lansing?	wettest spot	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot
What is Capitol of lansing?	michigan state capital	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital
What is Capitol of lansing?	state capital	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital
What is Capitol of lansing?	capital city	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city
What is Capitol of lansing?	work	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work; what do capitol in lanse ? => $x: ($x, do capitol in, lanse) => $x: ($x, do, lanse) => (r0.arg1: the work, r0.namespace: reverb, r0.arg2: the Lansing community, r0.rel: has been done in) => the work; what do capitol in lanse ? => $x: ($x, do capitol in, lanse) => $x: ($x, do, lanse) => (r0.arg1: the work, r0.namespace: reverb, r0.arg2: the Lansing community, r0.rel: has been done in) => the work
What is Capitol of lansing?	michigan?s capital	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital
What is Capitol of lansing?	mega mall	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall
What is Capitol of lansing?	system	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being debated now in) => the system; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being debated now in) => the system; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being debated now in) => the system; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is being debated now in) => the system
What is Capitol of lansing?	legacy 5	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Legacy 5, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is suppose to be in) => Legacy 5; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Legacy 5, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is suppose to be in) => Legacy 5; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Legacy 5, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is suppose to be in) => Legacy 5; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Legacy 5, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is suppose to be in) => Legacy 5
What is Capitol of lansing?	capital	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital
What is Capitol of lansing?	palm	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm
What is Capitol of lansing?	lothamer	-59.22811297046499	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer
What is Capitol of lansing?	dimondale michigan	-59.239769790917265	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan
What is Capitol of lansing?	branch spotlight	-59.239769790917265	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight
What is Capitol of lansing?	sarah jo sarah	-59.239769790917265	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah
What is Capitol of lansing?	budget	-59.239769790917265	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget
What is Capitol of lansing?	december 2 , 1836	-59.239769790917265	what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836; what be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836; who be capitol in lanse ? => $x: ($x, be capitol in, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836
When did queen liliuokalani become queen?	september	-56.99713726137409	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be on, $x) => $x: (queen liliuokalanus, be on, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: September, r0.rel: was born on) => September
When did queen liliuokalani become queen?	1893	-57.159894072744535	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili`uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: his successor Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili`uokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893
When did queen liliuokalani become queen?	1868	-57.194864534101356	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: 1868, r0.rel: were composed in) => 1868
When did queen liliuokalani become queen?	1972	-57.194864534101356	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: The Queen Liliuokalani Canoe Race, r0.namespace: reverb, r0.arg2: 1972, r0.rel: was started in) => 1972
When did queen liliuokalani become queen?	england	-57.88430770456726	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: England, r0.rel: was in) => England; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: England, r0.rel: was in) => England
When did queen liliuokalani become queen?	verge	-58.082034977294526	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be on, $x) => $x: (queen liliuokalanus, be on, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: the verge, r0.rel: was on) => the verge
When did queen liliuokalani become queen?	coup	-58.12089104546878	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lydia Liliuokalani, r0.namespace: reverb, r0.arg2: a coup, r0.rel: was deposed in) => a coup
When did queen liliuokalani become queen?	iolani palace	-58.14031907955591	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: the Iolani Palace, r0.rel: was imprisoned in) => the Iolani Palace; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: the Iolani Palace, r0.rel: was imprisoned in) => the Iolani Palace
When did queen liliuokalani become queen?	long line	-58.14864537987896	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: a long line, r0.rel: were the last in) => a long line
When did queen liliuokalani become queen?	court	-58.154890105121254	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: the court, r0.rel: was still a princess in) => the court
What is one of italys famous landmarks?	tuscany	-48.72224254092096	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is perhaps the most famous province of) => Tuscany
What is one of italys famous landmarks?	tortellini	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Tortellini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => Tortellini
What is one of italys famous landmarks?	montepulciano	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montepulciano, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Montepulciano
What is one of italys famous landmarks?	scopa	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Scopa, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Scopa
What is one of italys famous landmarks?	town	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the town, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => the town
What is one of italys famous landmarks?	garfagnana	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Garfagnana, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is famous in) => Garfagnana
What is one of italys famous landmarks?	bocconi university	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bocconi University, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Bocconi University
What is one of italys famous landmarks?	meals	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Meals, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Meals
What is one of italys famous landmarks?	montecatini terme	-48.73704485260639	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Montecatini Terme, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous throughout) => Montecatini Terme
What is one of italys famous landmarks?	rome	-48.7403753727356	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is likely the most famous city in) => Rome
What is one of italys famous landmarks?	norcia	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Norcia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is so famous in) => Norcia
What is one of italys famous landmarks?	equipe 84	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Equipe 84, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were very famous in) => Equipe 84
What is one of italys famous landmarks?	?los roques	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: ?Los Roques, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are quite famous in) => ?Los Roques
What is one of italys famous landmarks?	perugia	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Perugia, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is also famous in) => Perugia
What is one of italys famous landmarks?	agriturismo	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Agriturismo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => Agriturismo
What is one of italys famous landmarks?	event	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the event, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => the event
What is one of italys famous landmarks?	liguria	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Liguria, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Liguria
What is one of italys famous landmarks?	laura pausini	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Laura Pausini, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Laura Pausini
What is one of italys famous landmarks?	bologna	-48.74328957784867	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Bologna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous in) => Bologna
What is one of italys famous landmarks?	emilia romagna	-48.74814658637045	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Emilia Romagna, r0.namespace: reverb, r0.arg2: Italy, r0.rel: has always been famous as) => Emilia Romagna
What is one of italys famous landmarks?	monte toc	-48.74814658637045	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Monte Toc, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous mountain in) => Monte Toc
What is one of italys famous landmarks?	italo calvino	-48.74814658637045	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Italo Calvino, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous writer in) => Italo Calvino
What is one of italys famous landmarks?	intimissimi	-48.75203219318787	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Intimissimi, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is already a famous brand in) => Intimissimi
What is one of italys famous landmarks?	alla scala	-48.916328404552274	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: alla Scala, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is a famous opera in) => alla Scala
What is one of italys famous landmarks?	viareggio carnival	-48.9264458250106	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Viareggio Carnival, r0.namespace: openie4, r0.arg2: Italy, r0.rel: is the most famous in) => the Viareggio Carnival
What is one of italys famous landmarks?	dr. david fisher	-48.9264458250106	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Dr. David Fisher, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the famous architect in) => Dr. David Fisher
What is one of italys famous landmarks?	2012 milan	-48.9264458250106	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 2012 Milan, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is very famous city of) => 2012 Milan
What is one of italys famous landmarks?	viareggio?s	-48.9264458250106	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Viareggio?s, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is the most famous in) => Viareggio?s
What is one of italys famous landmarks?	rome venice	-48.93292183637297	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Rome and Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are the most famous cities in) => Rome and Venice
What is one of italys famous landmarks?	confrontational person	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a confrontational person, r0.namespace: reverb, r0.arg2: Italy, r0.rel: were famous throughout) => a confrontational person
What is one of italys famous landmarks?	milano marittima	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Milano Marittima, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => Milano Marittima
What is one of italys famous landmarks?	stratta	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Stratta, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Stratta
What is one of italys famous landmarks?	orchards	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the orchards, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the orchards
What is one of italys famous landmarks?	cinque terre	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Cinque Terre, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous in) => the Cinque Terre
What is one of italys famous landmarks?	dish	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a dish, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous outside) => a dish
What is one of italys famous landmarks?	david christenson dario argento	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: David Christenson Dario Argento, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => David Christenson Dario Argento
What is one of italys famous landmarks?	marches	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: the Marches, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are famous throughout) => the Marches
What is one of italys famous landmarks?	fico	-48.93477212533365	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Fico, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous in) => Fico
What is one of italys famous landmarks?	arezzo tuscany	-48.93810264546288	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Arezzo Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is probably the most famous region in) => Arezzo Tuscany
What is one of italys famous landmarks?	white kidney beans	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: White kidney beans, r0.namespace: reverb, r0.arg2: Italy, r0.rel: are very famous in) => White kidney beans
What is one of italys famous landmarks?	lorentia stoza	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Lorentia Stoza, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is now famous in) => Lorentia Stoza
What is one of italys famous landmarks?	87-year-old american dancer	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: an 87-year-old American dancer, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was quite famous in) => an 87-year-old American dancer
What is one of italys famous landmarks?	toby	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Toby, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is becoming famous in) => Toby
What is one of italys famous landmarks?	7626 tuscany cooking tuscany	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: 7626 Tuscany Cooking Tuscany, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all throughout) => 7626 Tuscany Cooking Tuscany
What is one of italys famous landmarks?	man	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is quite famous in) => a man
What is one of italys famous landmarks?	one time	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was very famous in) => one time
What is one of italys famous landmarks?	bianco pi marble	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: The Bianco Pi Marble, r0.namespace: reverb, r0.arg2: Italy, r0.rel: was made famous in) => The Bianco Pi Marble
What is one of italys famous landmarks?	particular pavilion	-48.94101685057595	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: particular pavilion, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is famous all over) => particular pavilion
What is one of italys famous landmarks?	pizza paulo	-48.94587385909773	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: pizza Paulo, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous chef in) => pizza Paulo
What is one of italys famous landmarks?	brendon	-48.94587385909773	what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon; what be the famous landmark of italy ? => $x: ($x, be the famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon; what be some famous landmark of italy ? => $x: ($x, be some famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon; what be a famous landmark of italy ? => $x: ($x, be a famous landmark of, italy) => $x: ($x, be famous, italy) => (r0.arg1: Brendon, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a famous character in) => Brendon
Use of tin and tin alloy?	pewter	-60.86409351364905	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter
Use of tin and tin alloy?	badge	-60.875750334101326	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge
Use of tin and tin alloy?	bronze	-60.884076634424375	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze
Use of tin and tin alloy?	libya	-60.89517836818845	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya
Use of tin and tin alloy?	micron	-60.89517836818845	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Micron, r0.namespace: reverb, r0.arg2: tin-lead alloys, r0.rel: is replacing) => Micron
Use of tin and tin alloy?	weapons	-60.900729235070486	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons
Use of tin and tin alloy?	rosin	-60.90489238523202	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin
Use of tin and tin alloy?	data	-60.90489238523202	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: copper-tin alloys, r0.rel: are shown here for) => data
Use of tin and tin alloy?	surfaces	-60.9081303909132	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces
Use of tin and tin alloy?	phosphor bronze	-61.00896169092631	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze
Use of tin and tin alloy?	brass	-61.035605851960085	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass
Use of tin and tin alloy?	pewter pewter	-61.035605851960085	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter
Use of tin and tin alloy?	bronze bronze	-61.035605851960085	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze
Use of tin and tin alloy?	comparison bronze	-61.04393215228314	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze
Use of tin and tin alloy?	pewter beads	-61.08180390715165	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Pewter beads, r0.namespace: reverb, r0.arg2: this tin alloy, r0.rel: are made from) => Pewter beads
Use of tin and tin alloy?	advanced circuits	-61.08180390715165	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits
Use of tin and tin alloy?	one half	-61.08513442728086	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: one half, r0.namespace: reverb, r0.arg2: tin-copper alloys, r0.rel: was) => one half
Use of tin and tin alloy?	remainder	-61.08513442728086	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the remainder, r0.namespace: reverb, r0.arg2: tin-lead-copper alloys, r0.rel: was) => the remainder
Use of tin and tin alloy?	most common solders	-61.08513442728086	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: reverb, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The most common solders, r0.namespace: openie4, r0.arg2: lead-tin alloys, r0.rel: are) => The most common solders
Use of tin and tin alloy?	packaging	-61.088048632393935	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging
Use of tin and tin alloy?	regular solder	-61.09290564091572	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder
Use of tin and tin alloy?	solder	-61.09290564091572	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder
Use of tin and tin alloy?	928	-61.09290564091572	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928
Use of tin and tin alloy?	copper ?speculum metal	-61.09290564091572	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal
Use of tin and tin alloy?	speculum metal	-61.09290564091572	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal
Use of tin and tin alloy?	termination finish	-61.09845650779775	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the termination finish, r0.namespace: reverb, r0.arg2: 60/40 tin/lead alloy, r0.rel: was actually) => the termination finish
Use of tin and tin alloy?	k100	-61.09845650779775	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100
Use of tin and tin alloy?	blade	-61.09845650779775	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade
Use of tin and tin alloy?	high temperature	-61.10261965795928	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: high temperature, r0.namespace: reverb, r0.arg2: tin-silver alloys, r0.rel: is often associated with) => high temperature
Use of tin and tin alloy?	motherboard	-61.10261965795928	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard
Use of tin and tin alloy?	previous soldering processes	-61.10261965795928	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes
Use of tin and tin alloy?	pipes	-61.10261965795928	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes
Use of tin and tin alloy?	device	-61.10261965795928	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device
Use of tin and tin alloy?	bgas	-61.105857663640464	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: BGAs, r0.namespace: reverb, r0.arg2: tin/lead alloys, r0.rel: is fairly well understood for) => BGAs
Use of tin and tin alloy?	copper cylinder	-61.105857663640464	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder
Use of tin and tin alloy?	sheet copper	-61.105857663640464	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper
Use of tin and tin alloy?	curogan	-61.112333675002844	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan
Use of tin and tin alloy?	metal pipes	-61.24165942501041	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes
Use of tin and tin alloy?	sn100c	-61.274039481822285	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; use on tin tin alloy ? => $x: ($x, be use on, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; use with tin tin alloy ? => $x: ($x, be use with, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; use by tin tin alloy ? => $x: ($x, be use by, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; use to tin tin alloy ? => $x: ($x, be use to, tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C; what be tin tin or alloy ? => $x: ($x, be, tin tin or alloy) => $x: ($x, be, tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C
When does justified season 2 comes out?	showcase	-69.41647139546103	who be justified season 2 be on ? => $x: (justified season 2, be on, $x) => $x: (justified season, be on, $x) => (r0.arg1: Justified?s first season, r0.namespace: reverb, r0.arg2: Showcase, r0.rel: is airing Sundays on) => Showcase; where be justified season 2 be on ? => $x: (justified season 2, be on, $x) => $x: (justified season, be on, $x) => (r0.arg1: Justified?s first season, r0.namespace: reverb, r0.arg2: Showcase, r0.rel: is airing Sundays on) => Showcase; where do justified season 2 be on ? => $x: (justified season 2, be on, $x) => $x: (justified season, be on, $x) => (r0.arg1: Justified?s first season, r0.namespace: reverb, r0.arg2: Showcase, r0.rel: is airing Sundays on) => Showcase
What is not required of a thesis?	philosopher	-61.283918639777454	what not require of a thesis ? => $x: ($x, not require of, a thesis) => $x: ($x, not, thesis) => (r0.arg1: a philosopher, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: cannot?and need not?abandon) => a philosopher; what not require of a thesis ? => $x: ($x, not require of, a thesis) => $x: ($x, not, thesis) => (r0.arg1: a philosopher, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: cannot?and need not?abandon) => a philosopher
What is something that is white and orange?	texas	-54.109410190923384	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Texas, r0.namespace: reverb, r0.arg2: burnt orange and white, r0.rel: are) => Texas
What is something that is white and orange?	prince	-54.12051192468746	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the prince, r0.namespace: reverb, r0.arg2: orange , white and blue, r0.rel: was) => the prince
What is something that is white and orange?	saltwater	-54.12051192468746	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: saltwater, r0.namespace: reverb, r0.arg2: distinctive orange and white makings, r0.rel: are) => saltwater
What is something that is white and orange?	albert heijn	-54.12051192468746	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Albert Heijn, r0.namespace: reverb, r0.arg2: orange , blue and white, r0.rel: were) => Albert Heijn
What is something that is white and orange?	?florida?	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	?florida?	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	rock	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The rock, r0.namespace: reverb, r0.arg2: white and orange calcite, r0.rel: is composed of) => The rock
What is something that is white and orange?	road signs	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Road signs, r0.namespace: reverb, r0.arg2: green , white and orange, r0.rel: were painted) => Road signs
What is something that is white and orange?	whigs	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The Whigs, r0.namespace: reverb, r0.arg2: white and orange washes, r0.rel: were backlit by) => The Whigs
What is something that is white and orange?	new york city	-54.12883822501051	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: New York City, r0.namespace: reverb, r0.arg2: orange and white lights, r0.rel: is lit up with) => New York City
What is something that is white and orange?	sandman	-54.13531423637289	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Sandman, r0.namespace: reverb, r0.arg2: orange and white patches, r0.rel: is a boy with) => Sandman
What is something that is white and orange?	school colors	-54.262049581835505	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: School colors, r0.namespace: openie4, r0.arg2: orange and white, r0.rel: were) => School colors
What is something that is white and orange?	obo 2006 model year	-54.291595036380954	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: OBO 2006 model year, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: is) => OBO 2006 model year
What is something that is white and orange?	lucky colors	-54.291595036380954	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Lucky colors, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: are) => Lucky colors
What is something that is white and orange?	lanterns	-54.30349605455471	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The lanterns, r0.namespace: openie4, r0.arg2: orange , white and black, r0.rel: were sold in) => The lanterns
What is something that is white and orange?	victor	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Victor, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: is) => Victor
What is something that is white and orange?	ship 's-mast light fixtures	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the ship 's-mast light fixtures, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are in) => the ship 's-mast light fixtures
What is something that is white and orange?	562	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: 562, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: were for) => 562
What is something that is white and orange?	older taxis	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The older taxis, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: are painted) => The older taxis
What is something that is white and orange?	lettering	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The lettering, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: is in) => The lettering
What is something that is white and orange?	walter	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Walter, r0.namespace: reverb, r0.arg2: orange tabby and white, r0.rel: is) => Walter
What is something that is white and orange?	chicago bears jerseys	-54.30713746365066	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Chicago Bears jerseys, r0.namespace: reverb, r0.arg2: blue white and orange, r0.rel: are) => Chicago Bears jerseys
What is something that is white and orange?	dominating colors	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the dominating colors, r0.namespace: reverb, r0.arg2: orange , white and gray, r0.rel: are) => the dominating colors
What is something that is white and orange?	inside	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Inside, r0.namespace: reverb, r0.arg2: an orange and white kitten, r0.rel: was) => Inside
What is something that is white and orange?	team colors	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: openie4, r0.arg2: black , orange and white, r0.rel: are) => The team colors; what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: are) => The team colors
What is something that is white and orange?	wedding colours	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The wedding colours, r0.namespace: reverb, r0.arg2: White and Orange, r0.rel: will apparently be) => The wedding colours
What is something that is white and orange?	red	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the red, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is mixed with) => the red
What is something that is white and orange?	upright?s blue colors	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: UpRight?s blue colors, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: were changed for) => UpRight?s blue colors
What is something that is white and orange?	tower	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The tower, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is painted in) => The tower
What is something that is white and orange?	high elevations	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: high elevations, r0.namespace: reverb, r0.arg2: orange , red and white, r0.rel: are) => high elevations
What is something that is white and orange?	creamy	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Creamy, r0.namespace: reverb, r0.arg2: an orange and white color, r0.rel: was) => Creamy
What is something that is white and orange?	flames	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the flames, r0.namespace: reverb, r0.arg2: Orange , White and Green, r0.rel: were) => the flames
What is something that is white and orange?	originally dutch flag	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: originally the Dutch flag, r0.namespace: reverb, r0.arg2: Orange , white and blue, r0.rel: was) => originally the Dutch flag
What is something that is white and orange?	keegan@may 10 2003 , 12:20	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: keegan@May 10 2003 , 12:20, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: AM thought) => keegan@May 10 2003 , 12:20
What is something that is white and orange?	dustjacket	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The dustjacket, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: was) => The dustjacket
What is something that is white and orange?	markings	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the markings, r0.namespace: reverb, r0.arg2: typical white and orange, r0.rel: are in) => the markings
What is something that is white and orange?	bo	-54.31823919741473	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Bo, r0.namespace: reverb, r0.arg2: an orange and white Corgi, r0.rel: is) => Bo
What is something that is white and orange?	62 heads	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The 62 heads, r0.namespace: reverb, r0.arg2: green , white and orange, r0.rel: were dyed) => The 62 heads
What is something that is white and orange?	thompson-boling arena	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Thompson-Boling Arena, r0.namespace: reverb, r0.arg2: the Orange and White, r0.rel: was ruined by) => Thompson-Boling Arena
What is something that is white and orange?	night time illumination	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: night time illumination, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: is nicely done in) => night time illumination; what do something white and orange ? => $x: ($x, do, something white and orange) => $x: ($x, do, white and orange) => (r0.arg1: night time illumination, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: is nicely done in) => night time illumination
What is something that is white and orange?	ambient lighting	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The ambient lighting, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: can be switched between) => The ambient lighting
What is something that is white and orange?	main colors	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: MAIN COLORS, r0.namespace: reverb, r0.arg2: PEACH , ORANGE AND WHITE 17128, r0.rel: ARE) => MAIN COLORS
What is something that is white and orange?	jewelry kit	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the jewelry kit, r0.namespace: reverb, r0.arg2: pink , blue , orange and white, r0.rel: are) => the jewelry kit
What is something that is white and orange?	philadelphia flyers	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the Philadelphia Flyers, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are getting back to) => the Philadelphia Flyers
What is something that is white and orange?	wire 1	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wire 1, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: needs to be matched to) => Wire 1
What is something that is white and orange?	tvs apache rtr 180 abs	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: TVS Apache RTR 180 ABS, r0.namespace: reverb, r0.arg2: white and orange color, r0.rel: is available in) => TVS Apache RTR 180 ABS
What is something that is white and orange?	gazebo	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the gazebo, r0.namespace: reverb, r0.arg2: white and orange roses, r0.rel: was draped in) => the gazebo
What is something that is white and orange?	chest	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the chest, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is black outlined by) => the chest
What is something that is white and orange?	cones	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: cones, r0.namespace: reverb, r0.arg2: fluorescent orange and white, r0.rel: are normally colored) => cones
What is something that is white and orange?	wings	-54.32656549773779	what be something white and orange ? => $x: ($x, be, something white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wings, r0.namespace: reverb, r0.arg2: white and orange bars, r0.rel: are black with) => Wings
What countries were involved in the Spanish war?	united states	4.253335244301153	What countries were involved in the Spanish war? => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is a", countries) ($x, were involved in, Spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be responsible for the spanish war ? => $x: ($x, "is a", country) ($x, be responsible for, the spanish war) => $x: ($x, "is a", country) ($x, for, spanish war) => (r0.arg1: the united states, r1.rel: prepared for, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be responsible for the spanish war ? => $x: ($x, "is a", country) ($x, be responsible for, the spanish war) => $x: ($x, "is a", country) ($x, for, spanish war) => (r0.arg1: the united states, r1.rel: pay for, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be responsible for the spanish war ? => $x: ($x, "is a", country) ($x, be responsible for, the spanish war) => $x: ($x, "is a", country) ($x, for, spanish war) => (r0.arg1: the united states, r1.rel: braced for, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: the United States, r1.rel: prepared for, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: the United States, r1.rel: pay for, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: the United States, r1.rel: braced for, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: The United States, r1.rel: prepared for, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: The United States, r1.rel: pay for, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be responsible for the spanish war ? => $x: ($x, "is an example of", country) ($x, be responsible for, the spanish war) => $x: ($x, "is an example of", country) ($x, for, spanish war) => (r0.arg1: The United States, r1.rel: braced for, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
What countries were involved in the Spanish war?	spain	-39.86763239302033	what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "type", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish civil war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "is a", country) ($x, be in, spanish civil war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be invovle in the spanish civil war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish civil war) => $x: ($x, "is an example of", country) ($x, be in, spanish civil war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; which country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; which country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "type", country) ($x, be invole in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "type", country) ($x, be invlove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; which country be invlove in the spanish war ? => $x: ($x, "is a", country) ($x, be invlove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; which country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be invlove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invlove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "type", country) ($x, be invove in, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "is a", country) ($x, be invove in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain
What countries were involved in the Spanish war?	cuba	-44.561235368892625	what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; which country be invole in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba
What countries were involved in the Spanish war?	francisco franco	-48.09704804476502	what country participate in the spanish war ? => $x: ($x, "type", country) ($x, participate in, the spanish war) => $x: ($x, "type", country) ($x, participate in, spanish war) => (r0.arg1: Francisco Franco, r1.rel: Participated in conflicts, r0.namespace: freebase, r1.arg2: Spanish Civil War, r0.arg2: Bad People Who Led Countries, r0.rel: Type, r1.namespace: freebase, r1.arg1: Francisco Franco) => Francisco Franco; which country participate in the spanish war ? => $x: ($x, "type", country) ($x, participate in, the spanish war) => $x: ($x, "type", country) ($x, participate in, spanish war) => (r0.arg1: Francisco Franco, r1.rel: Participated in conflicts, r0.namespace: freebase, r1.arg2: Spanish Civil War, r0.arg2: Bad People Who Led Countries, r0.rel: Type, r1.namespace: freebase, r1.arg1: Francisco Franco) => Francisco Franco
What countries were involved in the Spanish war?	bosnia	-48.183900579556095	what country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; which country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; which country be invole in the spanish war ? => $x: ($x, "is a", country) ($x, be invole in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; what country be invove in the spanish war ? => $x: ($x, "is a", country) ($x, be invove in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be invove in the spanish war ? => $x: ($x, "is a", country) ($x, be invove in, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA
What is another word of sand hills?	above ground	-57.533616872735465	what be another word for hill of sand ? => $x: ($x, be another word for hill of, sand) => $x: ($x, hill of, sand) => (r0.arg1: above ground, r0.namespace: reverb, r0.arg2: sand and dirt, r0.rel: were small hills of) => above ground; what be another name of hill of sand ? => $x: ($x, be another name of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: above ground, r0.namespace: reverb, r0.arg2: sand and dirt, r0.rel: were small hills of) => above ground; what be the word of hill of sand ? => $x: ($x, be the word of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: above ground, r0.namespace: reverb, r0.arg2: sand and dirt, r0.rel: were small hills of) => above ground
What is another word of sand hills?	trail	-57.533616872735465	what be another word for hill of sand ? => $x: ($x, be another word for hill of, sand) => $x: ($x, hill of, sand) => (r0.arg1: The trail, r0.namespace: reverb, r0.arg2: sand, r0.rel: is essentially a huge hill of) => The trail; what be another name of hill of sand ? => $x: ($x, be another name of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: The trail, r0.namespace: reverb, r0.arg2: sand, r0.rel: is essentially a huge hill of) => The trail; what be the word of hill of sand ? => $x: ($x, be the word of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: The trail, r0.namespace: reverb, r0.arg2: sand, r0.rel: is essentially a huge hill of) => The trail
What is another word of sand hills?	kame	-57.5378557165363	what be another word for hill of sand ? => $x: ($x, be another word for hill of, sand) => $x: ($x, hill of, sand) => (r0.arg1: a kame, r0.namespace: reverb, r0.arg2: gravel and sand, r0.rel: is a glacial hill of) => a kame; what be another name of hill of sand ? => $x: ($x, be another name of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: a kame, r0.namespace: reverb, r0.arg2: gravel and sand, r0.rel: is a glacial hill of) => a kame; what be the word of hill of sand ? => $x: ($x, be the word of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: a kame, r0.namespace: reverb, r0.arg2: gravel and sand, r0.rel: is a glacial hill of) => a kame
What is another word of sand hills?	dune	-57.69014187046501	what be another word for hill of sand ? => $x: ($x, be another word for hill of, sand) => $x: ($x, hill of, sand) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: sand, r0.rel: is a hill of) => a dune; what be another name of hill of sand ? => $x: ($x, be another name of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: sand, r0.rel: is a hill of) => a dune; what be another name of sand hill ? => $x: ($x, be another name of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: a hill of sand, r0.rel: is) => a dune; what be another name of sand hill ? => $x: ($x, be another name of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: a hill of sand, r0.rel: is) => a dune; what be the word of hill of sand ? => $x: ($x, be the word of hill of, sand) => $x: ($x, be hill of, sand) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: sand, r0.rel: is a hill of) => a dune; what be the word of sand hill ? => $x: ($x, be the word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: a hill of sand, r0.rel: is) => a dune; what be the word of sand hill ? => $x: ($x, be the word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: a dune, r0.namespace: openie4, r0.arg2: a hill of sand, r0.rel: is) => a dune
What is another word of sand hills?	sympathy	-61.67864268183236	what be another word of the hill ? => $x: (the hill, have word of, $x) => $x: (hill, have word of, $x) => (r0.arg1: Hill, r0.namespace: reverb, r0.arg2: sympathy, r0.rel: also had words of) => sympathy; what be another word of and hill ? => $x: (and hill, have word of, $x) => $x: (hill, have word of, $x) => (r0.arg1: Hill, r0.namespace: reverb, r0.arg2: sympathy, r0.rel: also had words of) => sympathy
What is another word of sand hills?	arcos de la frontera	-61.68349969035414	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Arcos de la Frontera, r0.namespace: reverb, r0.arg2: the small hill towns, r0.rel: is another of) => Arcos de la Frontera; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Arcos de la Frontera, r0.namespace: reverb, r0.arg2: the small hill towns, r0.rel: is another of) => Arcos de la Frontera
What is another word of sand hills?	munnar	-61.68349969035414	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Munnar, r0.namespace: reverb, r0.arg2: the hill resort, r0.rel: is another landmark of) => Munnar; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Munnar, r0.namespace: reverb, r0.arg2: the hill resort, r0.rel: is another landmark of) => Munnar
What is another word of sand hills?	chester	-61.68974441559644	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Chester, r0.namespace: reverb, r0.arg2: hills, r0.rel: is another range of) => Chester; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Chester, r0.namespace: reverb, r0.arg2: hills, r0.rel: is another range of) => Chester
What is another word of sand hills?	wawel cathedral	-61.698070715919485	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Wawel Cathedral, r0.namespace: reverb, r0.arg2: the Hill, r0.rel: is another building on) => Wawel Cathedral; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Wawel Cathedral, r0.namespace: reverb, r0.arg2: the Hill, r0.rel: is another building on) => Wawel Cathedral
What is another word of sand hills?	room	-61.71396638017259	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The Room, r0.namespace: reverb, r0.arg2: the pervious Silent Hill series, r0.rel: is another part to) => The Room; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The Room, r0.namespace: reverb, r0.arg2: the pervious Silent Hill series, r0.rel: is another part to) => The Room
What is another word of sand hills?	saturday	-61.71396638017259	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Saturday, r0.namespace: reverb, r0.arg2: those Notting Hill catering days, r0.rel: was another one of) => Saturday; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Saturday, r0.namespace: reverb, r0.arg2: those Notting Hill catering days, r0.rel: was another one of) => Saturday
What is another word of sand hills?	fiuggi	-61.71749875000661	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Fiuggi, r0.namespace: reverb, r0.arg2: a hill, r0.rel: is another city on) => Fiuggi; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Fiuggi, r0.namespace: reverb, r0.arg2: a hill, r0.rel: is another city on) => Fiuggi
What is another word of sand hills?	taygete	-61.72138435682403	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Taygete, r0.namespace: reverb, r0.arg2: Romi Hill, r0.rel: is another wonderful design by) => Taygete; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Taygete, r0.namespace: reverb, r0.arg2: Romi Hill, r0.rel: is another wonderful design by) => Taygete
What is another word of sand hills?	west	-61.724563489674665	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the west, r0.namespace: reverb, r0.arg2: a long hill, r0.rel: is another fine pond with) => the west; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the west, r0.namespace: reverb, r0.arg2: a long hill, r0.rel: is another fine pond with) => the west
What is another word of sand hills?	semi-annual interest	-61.86625253410131	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The semi-annual interest, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another down under) => The semi-annual interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The semi-annual interest, r0.namespace: openie4, r0.arg2: the hill, r0.rel: is another down under) => The semi-annual interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The semi-annual interest, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another down under) => The semi-annual interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: The semi-annual interest, r0.namespace: openie4, r0.arg2: the hill, r0.rel: is another down under) => The semi-annual interest
What is another word of sand hills?	advice	-61.87636995455962	what be another word of the hill ? => $x: (the hill, have word of, $x) => $x: (hill, have word of, $x) => (r0.arg1: Hill, r0.namespace: reverb, r0.arg2: advice, r0.rel: had some words of) => advice; what be another word of and hill ? => $x: (and hill, have word of, $x) => $x: (hill, have word of, $x) => (r0.arg1: Hill, r0.namespace: reverb, r0.arg2: advice, r0.rel: had some words of) => advice
What is another word of sand hills?	fresh cheese	-61.8812269630814	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: fresh cheese, r0.namespace: reverb, r0.arg2: the hill people, r0.rel: are another favorite of) => fresh cheese; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: fresh cheese, r0.namespace: reverb, r0.arg2: the hill people, r0.rel: are another favorite of) => fresh cheese
What is another word of sand hills?	wide valley	-61.8874716883237	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the wide valley, r0.namespace: reverb, r0.arg2: hills, r0.rel: was another range of) => the wide valley; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the wide valley, r0.namespace: reverb, r0.arg2: hills, r0.rel: was another range of) => the wide valley
What is another word of sand hills?	good five-cent cigar	-61.8874716883237	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: a good five-cent cigar, r0.namespace: reverb, r0.arg2: Crown Hill, r0.rel: is another of) => a good five-cent cigar; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: a good five-cent cigar, r0.namespace: reverb, r0.arg2: Crown Hill, r0.rel: is another of) => a good five-cent cigar
What is another word of sand hills?	mr. rickey	-61.88932197728438	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Mr. Rickey, r0.namespace: reverb, r0.arg2: the old Mill Hill boys, r0.rel: is another of) => Mr. Rickey; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Mr. Rickey, r0.namespace: reverb, r0.arg2: the old Mill Hill boys, r0.rel: is another of) => Mr. Rickey
What is another word of sand hills?	bear swamp hill	-61.88932197728438	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Bear Swamp Hill, r0.namespace: reverb, r0.arg2: the Beacon Hill Gravel, r0.rel: is another remnant of) => Bear Swamp Hill; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Bear Swamp Hill, r0.namespace: reverb, r0.arg2: the Beacon Hill Gravel, r0.rel: is another remnant of) => Bear Swamp Hill
What is another word of sand hills?	vysehrad	-61.89579798864675	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Vysehrad, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another castle on) => Vysehrad; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Vysehrad, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another castle on) => Vysehrad
What is another word of sand hills?	mortgage interest	-61.89579798864675	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: mortgage interest, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another down under) => mortgage interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: mortgage interest, r0.namespace: openie4, r0.arg2: the hill, r0.rel: is another down under) => mortgage interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: mortgage interest, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another down under) => mortgage interest; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: mortgage interest, r0.namespace: openie4, r0.arg2: the hill, r0.rel: is another down under) => mortgage interest
What is another word of sand hills?	cnoc uachtair archae	-61.89579798864675	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Cnoc Uachtair Archae, r0.namespace: reverb, r0.arg2: the Hill, r0.rel: is another name for) => Cnoc Uachtair Archae; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Cnoc Uachtair Archae, r0.namespace: reverb, r0.arg2: the Hill, r0.rel: is another name for) => Cnoc Uachtair Archae
What is another word of sand hills?	scribbly	-61.89579798864675	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Scribbly, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another 50m up) => Scribbly; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Scribbly, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is another 50m up) => Scribbly
What is another word of sand hills?	break/chill training week	-61.90227400000913	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: break/chill training week, r0.namespace: reverb, r0.arg2: Pinon Hills, r0.rel: here is another shot of) => break/chill training week; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: break/chill training week, r0.namespace: reverb, r0.arg2: Pinon Hills, r0.rel: here is another shot of) => break/chill training week
What is another word of sand hills?	maloney	-61.90227400000913	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Maloney, r0.namespace: reverb, r0.arg2: the hill, r0.rel: was another dominating presence on) => Maloney; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Maloney, r0.namespace: reverb, r0.arg2: the hill, r0.rel: was another dominating presence on) => Maloney
What is another word of sand hills?	kagyat	-61.90227400000913	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Kagyat, r0.namespace: reverb, r0.arg2: the hill resort, r0.rel: is another attraction in) => Kagyat; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Kagyat, r0.namespace: reverb, r0.arg2: the hill resort, r0.rel: is another attraction in) => Kagyat
What is another word of sand hills?	tomorrow	-61.90745480909902	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Tomorrow, r0.namespace: reverb, r0.arg2: the Black Hills, r0.rel: is another adventurous day in) => Tomorrow; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Tomorrow, r0.namespace: reverb, r0.arg2: the Black Hills, r0.rel: is another adventurous day in) => Tomorrow
What is another word of sand hills?	peshwa?s monument	-61.91169365289986	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Peshwa?s Monument, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is yet another place to visit on) => Peshwa?s Monument; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Peshwa?s Monument, r0.namespace: reverb, r0.arg2: the hill, r0.rel: is yet another place to visit on) => Peshwa?s Monument
What is another word of sand hills?	live bait	-61.91169365289986	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Live bait, r0.namespace: reverb, r0.arg2: the Watch Hill Reefs, r0.rel: is another effective option for) => Live bait; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Live bait, r0.namespace: reverb, r0.arg2: the Watch Hill Reefs, r0.rel: is another effective option for) => Live bait
What is another word of sand hills?	marble hills	-61.915226022733876	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Marble Hills, r0.namespace: reverb, r0.arg2: Takaka Hill, r0.rel: is another name for) => Marble Hills; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Marble Hills, r0.namespace: reverb, r0.arg2: Takaka Hill, r0.rel: is another name for) => Marble Hills
What is another word of sand hills?	farewell my gentle harp	-61.915226022733876	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Farewell My Gentle Harp, r0.namespace: reverb, r0.arg2: Martyn Hill, r0.rel: is another vehicle for) => Farewell My Gentle Harp; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Farewell My Gentle Harp, r0.namespace: reverb, r0.arg2: Martyn Hill, r0.rel: is another vehicle for) => Farewell My Gentle Harp
What is another word of sand hills?	witc h's beauty	-61.919111629551296	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: A WITC H'S BEAUTY, r0.namespace: reverb, r0.arg2: Joey W Hill, r0.rel: is another masterpiece from) => A WITC H'S BEAUTY; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: A WITC H'S BEAUTY, r0.namespace: reverb, r0.arg2: Joey W Hill, r0.rel: is another masterpiece from) => A WITC H'S BEAUTY
What is another word of sand hills?	graham motion	-61.919111629551296	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Graham Motion, r0.namespace: reverb, r0.arg2: Fair Hill, r0.rel: is another fantastic trainer at) => Graham Motion; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Graham Motion, r0.namespace: reverb, r0.arg2: Fair Hill, r0.rel: is another fantastic trainer at) => Graham Motion
What is another word of sand hills?	sangam	-61.919111629551296	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the sangam, r0.namespace: reverb, r0.arg2: a small hill, r0.rel: is another temple on) => the sangam; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: the sangam, r0.namespace: reverb, r0.arg2: a small hill, r0.rel: is another temple on) => the sangam
What is another word of sand hills?	intergame ?this	-61.919111629551296	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: InterGame ?This, r0.namespace: reverb, r0.arg2: William Hill, r0.rel: is another major investment for) => InterGame ?This; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: InterGame ?This, r0.namespace: reverb, r0.arg2: William Hill, r0.rel: is another major investment for) => InterGame ?This
What is another word of sand hills?	side-step	-61.919111629551296	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Side-step, r0.namespace: reverb, r0.arg2: a hill, r0.rel: is another way to climb) => Side-step; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: Side-step, r0.namespace: reverb, r0.arg2: a hill, r0.rel: is another way to climb) => Side-step
What is another word of sand hills?	?the 787	-61.92229076240193	what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: ?The 787, r0.namespace: reverb, r0.arg2: Green Hills Software?s cap, r0.rel: is another feather in) => ?The 787; what be another word of the hill ? => $x: ($x, be another word of, the hill) => $x: ($x, be another, hill) => (r0.arg1: ?The 787, r0.namespace: reverb, r0.arg2: Green Hills Software?s cap, r0.rel: is another feather in) => ?The 787
What is another word of sand hills?	marketing	-66.69350516137396	what be another name of the hill ? => $x: (the hill, have name of, $x) => $x: (hill, have name of, $x) => (r0.arg1: Richmond Hill, r0.namespace: reverb, r0.arg2: marketing, r0.rel: has been named director of) => marketing
What is another word of sand hills?	discordianism	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: Discordianism, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => Discordianism; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: Discordianism, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => Discordianism
What is another word of sand hills?	lottery	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: the lottery, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => the lottery; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: the lottery, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => the lottery
What is another word of sand hills?	south	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: the south, r0.namespace: reverb, r0.arg2: hills, r0.rel: were) => the south; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: the south, r0.namespace: reverb, r0.arg2: hills, r0.rel: were) => the south
What is another word of sand hills?	cajun	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: CAJUN, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => CAJUN; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: CAJUN, r0.namespace: reverb, r0.arg2: Hill, r0.rel: is) => CAJUN
What is another word of sand hills?	craps	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: Craps, r0.namespace: reverb, r0.arg2: hill, r0.rel: is) => Craps; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: Craps, r0.namespace: reverb, r0.arg2: hill, r0.rel: is) => Craps
What is another word of sand hills?	cycling	-66.71293319546108	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: cycling, r0.namespace: reverb, r0.arg2: Hills, r0.rel: was) => cycling; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: cycling, r0.namespace: reverb, r0.arg2: Hills, r0.rel: was) => cycling
What is another word of sand hills?	oer	-66.71848406234312	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: OER, r0.namespace: reverb, r0.arg2: ? Hill, r0.rel: is) => OER; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: OER, r0.namespace: reverb, r0.arg2: ? Hill, r0.rel: is) => OER
What is another word of sand hills?	nights	-66.87666140853588	what be another name of the hill ? => $x: (the hill, have name of, $x) => $x: (hill, have name of, $x) => (r0.arg1: The Calton Hill, r0.namespace: reverb, r0.arg2: nights, r0.rel: had an ill name of) => nights
What is another word of sand hills?	gambling	-66.88111501364288	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: gambling, r0.namespace: openie4, r0.arg2: hills, r0.rel: is) => gambling; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: gambling, r0.namespace: openie4, r0.arg2: hills, r0.rel: is) => gambling
What is another word of sand hills?	surname	-66.88111501364288	what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: The surname, r0.namespace: openie4, r0.arg2: Hill, r0.rel: is) => The surname; what be another name of the hill ? => $x: ($x, be another name of, the hill) => $x: ($x, be, hill) => (r0.arg1: The surname, r0.namespace: openie4, r0.arg2: Hill, r0.rel: is) => The surname
What color al pacinos eyes?	photo	-50.03682809092044	what color do al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what color be al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what color have al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what colour do al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo
What color al pacinos eyes?	godfather	-57.81494387078807	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: The Godfather, r0.rel: had a bit part in) => The Godfather
What color al pacinos eyes?	cast action comedy	-57.945657337516145	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: openie4, r0.arg2: the cast of the action comedy, r0.rel: has joined) => the cast of the action comedy
What color al pacinos eyes?	very strong movie character	-57.9460607409309	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a very strong movie character, r0.rel: has) => a very strong movie character
What color al pacinos eyes?	bacon number	-57.9460607409309	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a Bacon number, r0.rel: has) => a Bacon number
What color al pacinos eyes?	zero	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: zero, r0.rel: has scored) => zero
What color al pacinos eyes?	drawn-out fight	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a drawn-out fight, r0.rel: are having) => a drawn-out fight
What color al pacinos eyes?	difficult characters	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: difficult characters, r0.rel: has played) => difficult characters
What color al pacinos eyes?	full field house	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Speaker Al Pacino, r0.namespace: reverb, r0.arg2: a full field house, r0.rel: had) => a full field house
What color al pacinos eyes?	eight oscar nominations	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: eight Oscar nominations, r0.rel: has scored) => eight Oscar nominations
What color al pacinos eyes?	films	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: films, r0.rel: has developed) => films
What color al pacinos eyes?	less than discriminating	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: less than discriminating, r0.rel: have been) => less than discriminating
What color al pacinos eyes?	movie	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the movie, r0.rel: had on) => the movie; what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the movie, r0.rel: had a line in) => the movie
What color al pacinos eyes?	classiest most debonair	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the classiest and most debonair, r0.rel: has been) => the classiest and most debonair
What color al pacinos eyes?	film	-57.975202792061594	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a film, r0.rel: has created) => a film
What color al pacinos eyes?	any problems	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: any problems, r0.rel: did n?t have) => any problems
What color al pacinos eyes?	custom size magic comfort mattress	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a custom size Magic Comfort mattress, r0.rel: has slept on) => a custom size Magic Comfort mattress
What color al pacinos eyes?	part	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a part, r0.rel: has stepped into) => a part
What color al pacinos eyes?	unlikely choice	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: an unlikely choice, r0.rel: has to be) => an unlikely choice
What color al pacinos eyes?	oscar	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: an Oscar, r0.rel: should have won) => an Oscar
What color al pacinos eyes?	west village restaurant da silvano	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: West Village Restaurant Da Silvano, r0.rel: had lunch at) => West Village Restaurant Da Silvano
What color al pacinos eyes?	two children	-57.99268802274001	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: D'Angelo and Al Pacino, r0.namespace: reverb, r0.arg2: two children, r0.rel: have) => two children
What color al pacinos eyes?	film history	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino ? scenes, r0.namespace: reverb, r0.arg2: film history, r0.rel: have made) => film history
What color al pacinos eyes?	recent years	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: recent years, r0.rel: has been getting in) => recent years
What color al pacinos eyes?	comedy	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the comedy, r0.rel: has a cameo in) => the comedy
What color al pacinos eyes?	2009 remake	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a 2009 remake, r0.rel: has signed up for) => a 2009 remake
What color al pacinos eyes?	?ocean thirteen?	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: the phone Al Pacino, r0.namespace: reverb, r0.arg2: ?Ocean Thirteen?, r0.rel: had in) => ?Ocean Thirteen?
What color al pacinos eyes?	documentary film	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a documentary film, r0.rel: had been working on) => a documentary film
What color al pacinos eyes?	heart-to heart	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino playing Michael Corleone, r0.namespace: reverb, r0.arg2: a heart-to heart, r0.rel: has) => a heart-to heart
What color al pacinos eyes?	hollywood	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: Hollywood, r0.rel: has remained one of) => Hollywood; what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: intense , al pacino, r0.namespace: reverb, r0.arg2: Hollywood, r0.rel: has remained one of) => Hollywood
What color al pacinos eyes?	outstanding movies	-58.004344843192285	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: outstanding movies, r0.rel: has a number of) => outstanding movies
What color al pacinos eyes?	one success	-58.012671143515334	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: His contemporary Al Pacino, r0.namespace: reverb, r0.arg2: one success, r0.rel: has moved from) => one success
What color al pacinos eyes?	action comedy	-58.012671143515334	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the action comedy, r0.rel: has joined the cast of) => the action comedy
What color al pacinos eyes?	billie jo armstrong	-58.012671143515334	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: Billie Jo Armstrong, r0.rel: had the manic energy of) => Billie Jo Armstrong
What color al pacinos eyes?	drunken driving charge	-58.012671143515334	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: actor Al Pacino, r0.namespace: reverb, r0.arg2: a drunken driving charge, r0.rel: has been arrested on) => a drunken driving charge
What color al pacinos eyes?	legend	-58.01891586875763	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: The 1983 Al Pacino gangster film, r0.namespace: reverb, r0.arg2: a legend, r0.rel: has become) => a legend
What color al pacinos eyes?	characters	-58.01891586875763	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: characters, r0.rel: has created an unforgettable gallery of) => characters
What color al pacinos eyes?	villain	-58.01891586875763	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the villain, r0.rel: has reportedly signed on to play) => the villain
What color al pacinos eyes?	tough , fearless group	-58.02377287727941	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino?s police lieutenant, r0.namespace: reverb, r0.arg2: a tough , fearless group, r0.rel: has) => a tough , fearless group
What color al pacinos eyes?	photos	-58.02765848409683	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino and Robert De Niro, r0.namespace: reverb, r0.arg2: photos, r0.rel: had been replaced by) => photos
What color al pacinos eyes?	flesh	-58.02765848409683	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Venice ? ? Al Pacino, r0.namespace: reverb, r0.arg2: flesh, r0.rel: will have his pound of) => flesh
What color al pacinos eyes?	heady feat	-58.043200911366526	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: The AlPacino?s, r0.namespace: reverb, r0.arg2: the heady feat, r0.rel: have achieved) => the heady feat
What color al pacinos eyes?	game	-58.180852961697155	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: openie4, r0.arg2: the game, r0.rel: has lent his likeness to) => the game
What is new south wales slogan?	nowra	-52.432230515919635	what be new south wale town ? => $x: ($x, be, new south wale town) => $x: ($x, be, new south wale town) => (r0.arg1: Nowra, r0.namespace: openie4, r0.arg2: a major town on the New South Wales south coast, r0.rel: is) => Nowra
What is new south wales slogan?	condobolin	-52.436797069495924	what be new south wale town ? => $x: ($x, be, new south wale town) => $x: ($x, be, new south wale town) => (r0.arg1: Condobolin, r0.namespace: reverb, r0.arg2: a Western New South Wales town, r0.rel: is) => Condobolin
What is new south wales slogan?	further north	-52.44720494489974	what be new south wale town ? => $x: ($x, be, new south wale town) => $x: ($x, be, new south wale town) => (r0.arg1: further north, r0.namespace: reverb, r0.arg2: the outback New South Wales mining town, r0.rel: is) => further north
What is new south wales slogan?	500th store	-52.44720494489974	what be new south wale town ? => $x: ($x, be, new south wale town) => $x: ($x, be, new south wale town) => (r0.arg1: The 500th store, r0.namespace: reverb, r0.arg2: the New South Wales town, r0.rel: was opened in) => The 500th store
What is new south wales slogan?	jindabyne	-52.604978887677746	what be new south wale town ? => $x: ($x, be, new south wale town) => $x: ($x, be, new south wale town) => (r0.arg1: Jindabyne, r0.namespace: openie4, r0.arg2: a town in New South Wales, r0.rel: is) => Jindabyne
What is new south wales slogan?	place	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: The place, r0.namespace: reverb, r0.arg2: coastal New South Wales, r0.rel: is) => The place; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => place; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place
What is new south wales slogan?	australia	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is in) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: Australia, r0.rel: is in) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is located in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: Australia, r0.rel: is in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is located in) => Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia
What is new south wales slogan?	thredbo	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo
What is new south wales slogan?	dams	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams
What is new south wales slogan?	grasslands	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands
What is new south wales slogan?	sound	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound
What is new south wales slogan?	sir joseph banks	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks
What is new south wales slogan?	tom baker	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker
What is new south wales slogan?	chairman	-53.092834613658255	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman
What is new south wales slogan?	only state australia	-53.26101643184007	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia
What is new south wales slogan?	most populous state australia	-53.26101643184007	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia
What is new south wales slogan?	exception	-53.26101643184007	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: The exception, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: was) => The exception; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception
What is new south wales slogan?	largest state australia	-53.284330072744616	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia
What is new south wales slogan?	region	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region
What is new south wales slogan?	fairly rural area	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area
What is new south wales slogan?	timely significant point	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point
What is new south wales slogan?	hunter valley	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Hunter Valley, r0.rel: is) => the Hunter Valley; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: The Hunter Valley, r0.namespace: reverb, r0.arg2: new South Wales, r0.rel: is) => The Hunter Valley; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Hunter Valley, r0.rel: is) => the Hunter Valley; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Hunter Valley, r0.rel: is) => the Hunter Valley
What is new south wales slogan?	50 km/h	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h
What is new south wales slogan?	australia?s most populated state	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state
What is new south wales slogan?	bare island fort	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort
What is new south wales slogan?	constitutional monarchy	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy
What is new south wales slogan?	?28/7/6 ?24/0/11	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11
What is new south wales slogan?	victoria	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: there are in) => Victoria; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: there are in) => Victoria; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria
What is new south wales slogan?	20-30	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30
What is new south wales slogan?	teaching research school	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school
What is new south wales slogan?	444,000 dozen	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen
What is new south wales slogan?	100 km/h	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h
What is new south wales slogan?	hot , harsh horrible place	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place
What is new south wales slogan?	10,000 pages	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages
What is new south wales slogan?	309,500 square miles	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles
What is new south wales slogan?	registered research service provider	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider
What is new south wales slogan?	scenic drive	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive
What is new south wales slogan?	specialist superior court	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court
What is new south wales slogan?	state	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the state, r0.rel: is) => the state; what be new south wale manger ? => $x: ($x, be, new south wale manger) => $x: ($x, be, new south wale) => (r0.arg1: The state, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is) => The state; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the state, r0.rel: is) => the state; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the state, r0.rel: is) => the state
What is new south wales slogan?	penal colony	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony
What is new south wales slogan?	heritage act 1977	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977
What is new south wales slogan?	hour	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour
What is new south wales slogan?	upper house	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House
What is new south wales slogan?	historic town	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town
What is new south wales slogan?	recognized pioneer	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a recognized pioneer, r0.rel: is) => a recognized pioneer; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a recognized pioneer, r0.rel: is) => a recognized pioneer; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a recognized pioneer, r0.rel: is) => a recognized pioneer
What is new south wales slogan?	only jurisdiction	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the only jurisdiction, r0.rel: was) => the only jurisdiction; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the only jurisdiction, r0.rel: was) => the only jurisdiction; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the only jurisdiction, r0.rel: was) => the only jurisdiction
What is new south wales slogan?	modular refrigerator	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a modular refrigerator, r0.rel: is) => a modular refrigerator; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a modular refrigerator, r0.rel: is) => a modular refrigerator; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a modular refrigerator, r0.rel: is) => a modular refrigerator
What is new south wales slogan?	801,680 square kilometres	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 801,680 square kilometres, r0.rel: is) => 801,680 square kilometres; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 801,680 square kilometres, r0.rel: is) => 801,680 square kilometres; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 801,680 square kilometres, r0.rel: is) => 801,680 square kilometres
What is new south wales slogan?	first step	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the first step, r0.rel: is) => the first step; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the first step, r0.rel: is) => the first step; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the first step, r0.rel: is) => the first step
What is new south wales slogan?	australian tourist equivalent	-53.29056188638552	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Australian tourist equivalent, r0.rel: is) => the Australian tourist equivalent; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Australian tourist equivalent, r0.rel: is) => the Australian tourist equivalent; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Australian tourist equivalent, r0.rel: is) => the Australian tourist equivalent
What occurs in prokaryotic cells?	cellular respiration	-43.079303350022045	what take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; what take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who place in prokaryotic cell ? => $x: ($x, place in, prokaryotic cell) => $x: ($x, place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who place in prokaryotic cell ? => $x: ($x, place in, prokaryotic cell) => $x: ($x, place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration
What occurs in prokaryotic cells?	transduction	-47.463104043192445	what occur within prokaryotic cell ? => $x: ($x, occur within, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur within prokaryotic cell ? => $x: ($x, occur within, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur only in prokaryotic cell ? => $x: ($x, occur only in, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur only in prokaryotic cell ? => $x: ($x, occur only in, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur between prokaryotic cell ? => $x: ($x, occur between, prokaryotic cell) => $x: ($x, occur between, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur between prokaryotic cell ? => $x: ($x, occur between, prokaryotic cell) => $x: ($x, occur between, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur the prokaryotic cell ? => $x: ($x, occur, the prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur by prokaryotic cell ? => $x: ($x, occur by, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur by prokaryotic cell ? => $x: ($x, occur by, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur prokaryotic cell ? => $x: ($x, occur, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction
What occurs in prokaryotic cells?	inclusions	-50.827899877285574	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: inclusions, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: play in) => inclusions; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: inclusions, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: play in) => inclusions
What occurs in prokaryotic cells?	nutrition	-50.827899877285574	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: nutrition, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: found in) => nutrition; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: nutrition, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: found in) => nutrition
What occurs in prokaryotic cells?	rna	-50.85412772330319	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA
What occurs in prokaryotic cells?	ribosomes	-50.85412772330319	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes
What occurs in prokaryotic cells?	control dna	-51.00773851591966	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Control of DNA, r0.namespace: openie4, r0.arg2: the prokaryotic cell, r0.rel: supercoiling in) => Control of DNA; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Control of DNA, r0.namespace: openie4, r0.arg2: the prokaryotic cell, r0.rel: supercoiling in) => Control of DNA
What occurs in prokaryotic cells?	rna polymerase complex	-51.02562715001284	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: the RNA polymerase complex, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: found in) => the RNA polymerase complex; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: the RNA polymerase complex, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: found in) => the RNA polymerase complex
What occurs in prokaryotic cells?	recombinant dna products	-51.02562715001284	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: recombinant DNA products, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: produced in) => recombinant DNA products; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: recombinant DNA products, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: produced in) => recombinant DNA products
What occurs in prokaryotic cells?	precrp	-51.03728397046511	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP
What occurs in prokaryotic cells?	labor	-51.03728397046511	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor
What occurs in prokaryotic cells?	eukaryotic dna	-51.045610270788174	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA
What occurs in prokaryotic cells?	vectors	-51.05185499603046	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: The vectors, r0.namespace: reverb, r0.arg2: prokaryotic or eukaryotic cells, r0.rel: can function in) => The vectors; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: The vectors, r0.namespace: reverb, r0.arg2: prokaryotic or eukaryotic cells, r0.rel: can function in) => The vectors
What occurs in prokaryotic cells?	? what?s	-51.05185499603046	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: ? What?s, r0.namespace: reverb, r0.arg2: both prokaryotic and eukaryotic cells, r0.rel: found in) => ? What?s; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: ? What?s, r0.namespace: reverb, r0.arg2: both prokaryotic and eukaryotic cells, r0.rel: found in) => ? What?s
What occurs in prokaryotic cells?	polyribosomes	-51.22489382273406	what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what appear in prokaryotic cell ? => $x: ($x, appear in, prokaryotic cell) => $x: ($x, in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes
What occurs in prokaryotic cells?	wgd	-51.39988193410147	what occur in prokaryotic cel ? => $x: ($x, occur in, prokaryotic cel) => $x: ($x, occur in, prokaryotic) => (r0.arg1: WGD, r0.namespace: reverb, r0.arg2: prokaryotic genomes, r0.rel: had occurred in) => WGD; what occur in prokaryotic cel ? => $x: ($x, occur in, prokaryotic cel) => $x: ($x, occur in, prokaryotic) => (r0.arg1: WGD, r0.namespace: reverb, r0.arg2: prokaryotic genomes, r0.rel: had occurred in) => WGD
What celebrities have naked pictures?	scarlett johansson	-48.36450701364822	what celebrity have nude picture ? => $x: ($x, "type", celebrity) ($x, have, nude picture) => $x: ($x, "type", celebrity) ($x, have, nude picture) => (r0.arg1: Scarlett Johansson, r1.rel: has spoken about, r0.namespace: freebase, r1.arg2: the leaked nude pictures, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scarlett Johansson) => Scarlett Johansson; which celebrity have nude picture ? => $x: ($x, "type", celebrity) ($x, have, nude picture) => $x: ($x, "type", celebrity) ($x, have, nude picture) => (r0.arg1: Scarlett Johansson, r1.rel: has spoken about, r0.namespace: freebase, r1.arg2: the leaked nude pictures, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scarlett Johansson) => Scarlett Johansson
What celebrities have naked pictures?	playgirl	-49.89745334489977	what celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: Playgirl, r1.rel: also claimed to have, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Playgirl) => Playgirl; which celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: Playgirl, r1.rel: also claimed to have, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Playgirl) => Playgirl
What celebrities have naked pictures?	george h. w. bush	-49.89745334489977	what celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: George H. W. Bush, r1.rel: is having trouble with, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: George W. Bush) => George H. W. Bush; which celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: George H. W. Bush, r1.rel: is having trouble with, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: George W. Bush) => George H. W. Bush
What celebrities have naked pictures?	brad pitt	-50.02625718767777	what celebrity have naked pic ? => $x: ($x, "type", celebrity) ($x, have, naked pic) => $x: ($x, "type", celebrity) ($x, have, naked pic) => (r0.arg1: Brad Pitt, r1.rel: has been submitted, r0.namespace: freebase, r1.arg2: Naked Pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Brad Pitt) => Brad Pitt; which celebrity have naked pic ? => $x: ($x, "type", celebrity) ($x, have, naked pic) => $x: ($x, "type", celebrity) ($x, have, naked pic) => (r0.arg1: Brad Pitt, r1.rel: has been submitted, r0.namespace: freebase, r1.arg2: Naked Pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Brad Pitt) => Brad Pitt
What celebrities have naked pictures?	aaliyah	-51.504864377284534	what celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Aaliyah, r1.rel: has pictures of, r0.namespace: freebase, r1.arg2: nude Aaliyah pic Adel, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aaliyah) => Aaliyah; which celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Aaliyah, r1.rel: has pictures of, r0.namespace: freebase, r1.arg2: nude Aaliyah pic Adel, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aaliyah) => Aaliyah
What celebrities have naked pictures?	mariane pearl	-51.51663894339795	what celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Mariane Pearl, r1.rel: has joined, r0.namespace: freebase, r1.arg2: the aid Halle Berry nude pics nges, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mariane Pearl) => Mariane Pearl; which celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Mariane Pearl, r1.rel: has joined, r0.namespace: freebase, r1.arg2: the aid Halle Berry nude pics nges, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mariane Pearl) => Mariane Pearl
What celebrities have naked pictures?	pamela	-51.91197661705792	what celebrity have naked pic ? => $x: ($x, "is a kind of", celebrity) ($x, have, naked pic) => $x: ($x, "is a kind of", celebrity) ($x, have, naked) => (r0.arg1: Pamela, r1.rel: has appeared on, r0.namespace: reverb, r1.arg2: Integral Naked, r0.arg2: Internet celebrity, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Pamela) => Pamela; which celebrity have naked pic ? => $x: ($x, "is a kind of", celebrity) ($x, have, naked pic) => $x: ($x, "is a kind of", celebrity) ($x, have, naked) => (r0.arg1: Pamela, r1.rel: has appeared on, r0.namespace: reverb, r1.arg2: Integral Naked, r0.arg2: Internet celebrity, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Pamela) => Pamela
What celebrities have naked pictures?	paul pierce	-57.10247148864681	what celebrity have strip picture ? => $x: ($x, "type", celebrity) ($x, have, strip picture) => $x: ($x, "type", celebrity) ($x, have, strip picture) => (r0.arg1: Paul Pierce, r1.rel: had, r0.namespace: freebase, r1.arg2: a picture-perfect clean strip, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Paul Pierce) => Paul Pierce
What celebrities have naked pictures?	david diehl	-60.7450942961224	what celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, sexy pic) => (r0.arg1: David Diehl, r1.rel: has had, r0.namespace: freebase, r1.arg2: a sexy pic celebs, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: David Diehl) => David Diehl; which celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, sexy pic) => (r0.arg1: David Diehl, r1.rel: has had, r0.namespace: freebase, r1.arg2: a sexy pic celebs, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: David Diehl) => David Diehl
What celebrities have naked pictures?	kim kardashian	-60.786725797737674	what celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, sexy pic) => (r0.arg1: Kim Kardashian, r1.rel: has been accused of sending, r0.namespace: freebase, r1.arg2: sexy pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kim Kardashian) => Kim Kardashian; which celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, sexy pic) => (r0.arg1: Kim Kardashian, r1.rel: has been accused of sending, r0.namespace: freebase, r1.arg2: sexy pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kim Kardashian) => Kim Kardashian
What kind of music did the romans have?	language	4.052958694198363	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: reverb, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: openie4, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: reverb, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: openie4, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: reverb, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: openie4, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: reverb, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: openie4, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do thay have ? => $x: ($x, "is a kind of", music) (thay, have, $x) => $x: ($x, "is a kind of", music) (thay, have, $x) => (r0.arg1: Language, r1.rel: have to NEED, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Thay) => Language; what kind of music do thay have ? => $x: ($x, "is a kind of", music) (thay, have, $x) => $x: ($x, "is a kind of", music) (thay, have, $x) => (r0.arg1: Language, r1.rel: have to NEED, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Thay) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language
What kind of music did the romans have?	champion	1.4878161301508408	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: a champion, r1.rel: has also emerged as, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => a champion; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: a champion, r1.rel: has also emerged as, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => a champion; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion
What kind of music did the romans have?	past	1.4764038583793826	What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has had massive demonstrations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has responded in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has clearly cheated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had promised in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have expressed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has offered things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has said in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have made of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran ?) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has boasted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has amply demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has threatened in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have become prisoners of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has made in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has caused problems in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had concealed nuclear activities in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown a tendency in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been repeatedly discussed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown cooperative tendencies in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has used this tactic successfully in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done so many times in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had a nuclear weapons program in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done highly provocative things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been less hostile to us in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been provided such assurances in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has approved bills in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s parliament) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has also learned from, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s president) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: supposedly Iran) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has had massive demonstrations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has responded in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has clearly cheated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had promised in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have expressed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has offered things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has said in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have made of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran ?) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has boasted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has amply demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has threatened in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have become prisoners of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has made in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has caused problems in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had concealed nuclear activities in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown a tendency in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been repeatedly discussed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown cooperative tendencies in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has used this tactic successfully in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done so many times in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had a nuclear weapons program in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done highly provocative things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been less hostile to us in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been provided such assurances in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has approved bills in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s parliament) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has also learned from, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s president) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: supposedly Iran) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past
What kind of music did the romans have?	mod	1.4680348590803134	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD
What kind of music did the romans have?	harvest festival	0.635153426119335	What kind of music did the romans have? => $x: ($x, "is a", music) (the romans, have, $x) => $x: ($x, "is a", music) (romans, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what kind of music do the roman have ? => $x: ($x, "is a", music) (the roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what type of music do the roman have ? => $x: ($x, "is a", music) (the roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what kind of music do roman have ? => $x: ($x, "is a", music) (roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what type of music do roman have ? => $x: ($x, "is a", music) (roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what kind of music have roman have ? => $x: ($x, "is a", music) (roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; which type of music do the roman have ? => $x: ($x, "is a", music) (the roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival
What kind of music did the romans have?	costume	-39.750955088324034	what type of clothes do the roman have ? => $x: ($x, "type", clothes) (the roman, have, $x) => $x: ($x, "type", clothes) (roman, have, $x) => (r0.arg1: Costume, r1.rel: has used, r0.namespace: freebase, r1.arg2: this costume, r0.arg2: Clothing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman Catholic) => Costume; what type of clothes do roman have ? => $x: ($x, "type", clothes) (roman, have, $x) => $x: ($x, "type", clothes) (roman, have, $x) => (r0.arg1: Costume, r1.rel: has used, r0.namespace: freebase, r1.arg2: this costume, r0.arg2: Clothing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman Catholic) => Costume
What kind of music did the romans have?	vans	-39.76575740000946	what type of clothes do the roman have ? => $x: ($x, "type", clothes) (the roman, have, $x) => $x: ($x, "type", clothes) (roman, have, $x) => (r0.arg1: Vans, r1.rel: had followed in, r0.namespace: freebase, r1.arg2: the van, r0.arg2: Clothing brand, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman civilians) => Vans; what type of clothes do roman have ? => $x: ($x, "type", clothes) (roman, have, $x) => $x: ($x, "type", clothes) (roman, have, $x) => (r0.arg1: Vans, r1.rel: had followed in, r0.namespace: freebase, r1.arg2: the van, r0.arg2: Clothing brand, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman civilians) => Vans
What kind of music did the romans have?	poetry	-40.78595166649649	what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: reverb, r1.arg2: poetry, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: openie4, r1.arg2: poetry, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: reverb, r1.arg2: poetry, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: openie4, r1.arg2: poetry, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry
What kind of music did the romans have?	writing	-40.84614389712124	what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Writing, r1.rel: had yet to put the request in, r0.namespace: openie4, r1.arg2: writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Iran) => Writing; what kind of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Writing, r1.rel: had already been evangelized prior to, r0.namespace: openie4, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Writing; what kind of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: The writing, r1.rel: had already been evangelized prior to, r0.namespace: reverb, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => The writing; what type of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Writing, r1.rel: had already been evangelized prior to, r0.namespace: openie4, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Writing; what type of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: The writing, r1.rel: had already been evangelized prior to, r0.namespace: reverb, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => The writing; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Writing, r1.rel: had yet to put the request in, r0.namespace: openie4, r1.arg2: writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Iran) => Writing; what kind of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Writing, r1.rel: had already been evangelized prior to, r0.namespace: openie4, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Writing; what kind of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: The writing, r1.rel: had already been evangelized prior to, r0.namespace: reverb, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => The writing; what type of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Writing, r1.rel: had already been evangelized prior to, r0.namespace: openie4, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Writing; what type of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: The writing, r1.rel: had already been evangelized prior to, r0.namespace: reverb, r1.arg2: the writing, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => The writing
What kind of music did the romans have?	country music	-40.86203956137433	what kind of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Country music, r1.rel: will have the chance to take part in, r0.namespace: openie4, r1.arg2: country music, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Country music; what type of music do rome have ? => $x: ($x, "is a kind of", music) (rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Country music, r1.rel: will have the chance to take part in, r0.namespace: openie4, r1.arg2: country music, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Country music; what kind of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Country music, r1.rel: will have the chance to take part in, r0.namespace: openie4, r1.arg2: country music, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Country music; what type of music do the rome have ? => $x: ($x, "is a kind of", music) (the rome, have, $x) => $x: ($x, "is a kind of", music) (rome, have, $x) => (r0.arg1: Country music, r1.rel: will have the chance to take part in, r0.namespace: openie4, r1.arg2: country music, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Country music
What kind of music did the romans have?	art	-41.724429709105394	what kind of music do rome have ? => $x: ($x, "type", music) (rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of music do rome have ? => $x: ($x, "type", music) (rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: has a cheerfully cartoonish style of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: also has a few pieces of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Vishniac) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had learned many of, r0.namespace: reverb, r1.arg2: the arts, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: have their origins in, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman art) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: must have known something of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had become masters of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greeks and Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had a profound impact on, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art; what type of art do ancient roman have ? => $x: ($x, "is an example of", art) (ancient roman, have, $x) => $x: ($x, "is an example of", art) (ancient roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do ancient roman have ? => $x: ($x, "is an example of", art) (ancient roman, have, $x) => $x: ($x, "is an example of", art) (ancient roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art; what kind of thing do rome have ? => $x: ($x, "type", thing) (rome, have, $x) => $x: ($x, "type", thing) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what kind of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: art, r1.rel: has perfected, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => art; what type of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: has a cheerfully cartoonish style of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: also has a few pieces of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Vishniac) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had learned many of, r0.namespace: reverb, r1.arg2: the arts, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: have their origins in, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman art) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: must have known something of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had become masters of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greeks and Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had a profound impact on, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art
What kind of music did the romans have?	undergarment	-42.035224820472806	what type of clothes do the roman wear ? => $x: ($x, "type", clothes) (the roman, wear, $x) => $x: ($x, "type", clothes) (roman, wear, $x) => (r0.arg1: Undergarment, r1.rel: wore, r0.namespace: freebase, r1.arg2: undergarments, r0.arg2: Clothing, r0.rel: Type, r1.namespace: openie4, r1.arg1: The Romans) => Undergarment; what type of clothes do the roman wear ? => $x: ($x, "type", clothes) (the roman, wear, $x) => $x: ($x, "type", clothes) (roman, wear, $x) => (r0.arg1: Undergarment, r1.rel: later wore, r0.namespace: freebase, r1.arg2: undergarments, r0.arg2: Clothing, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Romans) => Undergarment
What kind of music did the romans have?	bra	-42.059509863081715	what type of clothes do the roman wear ? => $x: ($x, "type", clothes) (the roman, wear, $x) => $x: ($x, "type", clothes) (roman, wear, $x) => (r0.arg1: Bra, r1.rel: wear, r0.namespace: freebase, r1.arg2: bras, r0.arg2: Clothing, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Greeks or Romans) => Bra
What kind of music did the romans have?	sock	-42.20729224547205	what type of clothes do the roman wear ? => $x: ($x, "type", clothes) (the roman, wear, $x) => $x: ($x, "type", clothes) (roman, wear, $x) => (r0.arg1: Sock, r1.rel: wore, r0.namespace: freebase, r1.arg2: socks, r0.arg2: Clothing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Romans) => Sock
What kind of music did the romans have?	knowledge	-42.303938954559925	what kind of thing do the roman have ? => $x: ($x, "type", thing) (the roman, have, $x) => $x: ($x, "type", thing) (roman, have, $x) => (r0.arg1: Knowledge, r1.rel: had, r0.namespace: freebase, r1.arg2: knowledge, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Knowledge; what kind of thing do roman have ? => $x: ($x, "type", thing) (roman, have, $x) => $x: ($x, "type", thing) (roman, have, $x) => (r0.arg1: Knowledge, r1.rel: had, r0.namespace: freebase, r1.arg2: knowledge, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Knowledge
What kind of music did the romans have?	civilian	-43.360896556833424	what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Civilian, r1.rel: have attacked, r0.namespace: reverb, r1.arg2: those civilians, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Civilian; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Civilian, r1.rel: have killed, r0.namespace: reverb, r1.arg2: civilians, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Turkey and Iran) => Civilian; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Civilian, r1.rel: have attacked, r0.namespace: reverb, r1.arg2: those civilians, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Civilian; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Civilian, r1.rel: have killed, r0.namespace: reverb, r1.arg2: civilians, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Turkey and Iran) => Civilian
What kind of music did the romans have?	issue	-43.5202477772897	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has, r0.namespace: reverb, r1.arg2: issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Roman) => issue; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: had taken, r0.namespace: reverb, r1.arg2: issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Roman Catholic Church) => issue; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has officially resolved, r0.namespace: reverb, r1.arg2: such issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has, r0.namespace: reverb, r1.arg2: issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has released, r0.namespace: reverb, r1.arg2: Issue 3, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: have thrust, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has spurred interest in, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has refused to address, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: is definitely having some influence of, r0.namespace: reverb, r1.arg2: these issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has been maintain a stoic silence on, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has done nothing to resolve, r0.namespace: reverb, r1.arg2: these issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has manipulated, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran?s Islamic regime) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has been, r0.namespace: reverb, r1.arg2: an issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a nuclear Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has become, r0.namespace: reverb, r1.arg2: an issue for all, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Iran issue) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has, r0.namespace: reverb, r1.arg2: issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Roman) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: had taken, r0.namespace: reverb, r1.arg2: issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Roman Catholic Church) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has officially resolved, r0.namespace: reverb, r1.arg2: such issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => issue
What kind of music did the romans have?	music	-43.52613506034639	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: Music, r1.rel: had to record, r0.namespace: reverb, r1.arg2: their music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Music; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: Music, r1.rel: had to record, r0.namespace: openie4, r1.arg2: their music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music
What kind of music did the romans have?	translation	-43.529314193197024	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has contributed, r0.namespace: reverb, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => Translation; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has addressed the theory of, r0.namespace: reverb, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => Translation; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has contributed, r0.namespace: openie4, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => translation; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has addressed the theory of, r0.namespace: openie4, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has contributed, r0.namespace: reverb, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => Translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has addressed the theory of, r0.namespace: reverb, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => Translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has contributed, r0.namespace: openie4, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has addressed the theory of, r0.namespace: openie4, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => translation
What kind of music did the romans have?	?the crucifixion	-43.59841662439396	what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had the responsibility of, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => ?The Crucifixion; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had its part in, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Pagan Rome) => ?The Crucifixion; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had the responsibility of, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => ?The Crucifixion; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had its part in, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Pagan Rome) => ?The Crucifixion; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had the responsibility of, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => ?The Crucifixion; what kind of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had its part in, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Pagan Rome) => ?The Crucifixion; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had the responsibility of, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => ?The Crucifixion; what type of music do the rome have ? => $x: ($x, "is an example of", music) (the rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: ?The Crucifixion, r1.rel: had its part in, r0.namespace: reverb, r1.arg2: the crucifixion, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Pagan Rome) => ?The Crucifixion
What kind of music did the romans have?	eye	-44.18006045399078	what kind of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what type of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what kind of thing do ancient roman have ? => $x: ($x, "type", thing) (ancient roman, have, $x) => $x: ($x, "type", thing) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what kind of music do thay have ? => $x: ($x, "type", music) (thay, have, $x) => $x: ($x, "type", music) (thay, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: thay) => Eye
What kind of music did the romans have?	scientist	-44.18815546819374	what kind of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: The Scientist, r1.rel: has astounded, r0.namespace: freebase, r1.arg2: scientists, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: an ancient Roman shipwreck) => The Scientist; what type of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: The Scientist, r1.rel: has astounded, r0.namespace: freebase, r1.arg2: scientists, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: an ancient Roman shipwreck) => The Scientist
What kind of music did the romans have?	mission	-44.19993003430716	what kind of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: The Mission, r1.rel: has made, r0.namespace: freebase, r1.arg2: the mission, r0.arg2: Television news music package, r0.rel: Type, r1.namespace: reverb, r1.arg1: an ancient Roman book) => The Mission; what type of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: The Mission, r1.rel: has made, r0.namespace: freebase, r1.arg2: the mission, r0.arg2: Television news music package, r0.rel: Type, r1.namespace: reverb, r1.arg1: an ancient Roman book) => The Mission
What kind of music did the romans have?	crucifixion	-44.217290709105356	what type of art do the roman have ? => $x: ($x, "type", art) (the roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Series, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion; what type of art do the roman have ? => $x: ($x, "type", art) (the roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion; what type of art do roman have ? => $x: ($x, "type", art) (roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Series, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion; what type of art do roman have ? => $x: ($x, "type", art) (roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion
What kind of music did the romans have?	lead	-44.2258298888526	what kind of sport do ancient roman have ? => $x: ($x, "type", sport) (ancient roman, have, $x) => $x: ($x, "type", sport) (ancient roman, have, $x) => (r0.arg1: Lead, r1.rel: have revealed unusually high quantities of, r0.namespace: freebase, r1.arg2: lead, r0.arg2: Sports position, r0.rel: Type, r1.namespace: reverb, r1.arg1: ancient Romans) => Lead; what kind of sport do ancient roman have ? => $x: ($x, "is a", sport) (ancient roman, have, $x) => $x: ($x, "is a", sport) (ancient roman, have, $x) => (r0.arg1: lead, r1.rel: have revealed unusually high quantities of, r0.namespace: nell, r1.arg2: lead, r0.arg2: sports game, r0.rel: is a, r1.namespace: reverb, r1.arg1: ancient Romans) => lead; what type of art do ancient roman have ? => $x: ($x, "type", art) (ancient roman, have, $x) => $x: ($x, "type", art) (ancient roman, have, $x) => (r0.arg1: Lead, r1.rel: have revealed unusually high quantities of, r0.namespace: freebase, r1.arg2: lead, r0.arg2: Visual Art Medium, r0.rel: Type, r1.namespace: reverb, r1.arg1: ancient Romans) => Lead; what kind of thing do ancient roman have ? => $x: ($x, "type", thing) (ancient roman, have, $x) => $x: ($x, "type", thing) (ancient roman, have, $x) => (r0.arg1: Lead, r1.rel: have revealed unusually high quantities of, r0.namespace: freebase, r1.arg2: lead, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: ancient Romans) => Lead
What kind of music did the romans have?	sex	-44.65435285001192	what type of music have roman numeral ? => $x: ($x, "type", music) ($x, have, roman numeral) => $x: ($x, "type", music) ($x, have, roman numeral) => (r0.arg1: Sex, r1.rel: has, r0.namespace: freebase, r1.arg2: the Roman numerals XIIII, r0.arg2: Music video subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: sex) => Sex; what kind of music have roman numeral ? => $x: ($x, "type", music) ($x, have, roman numeral) => $x: ($x, "type", music) ($x, have, roman numeral) => (r0.arg1: Sex, r1.rel: has, r0.namespace: freebase, r1.arg2: the Roman numerals XIIII, r0.arg2: Music video subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: sex) => Sex
What kind of music did the romans have?	doors	-44.65435285001192	what type of music have roman numeral ? => $x: ($x, "type", music) ($x, have, roman numeral) => $x: ($x, "type", music) ($x, have, roman numeral) => (r0.arg1: The Doors, r1.rel: had been in, r0.namespace: freebase, r1.arg2: Roman numerals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the door) => The Doors; what kind of music have roman numeral ? => $x: ($x, "type", music) ($x, have, roman numeral) => $x: ($x, "type", music) ($x, have, roman numeral) => (r0.arg1: The Doors, r1.rel: had been in, r0.namespace: freebase, r1.arg2: Roman numerals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the door) => The Doors
What kind of music did the romans have?	sandals	-44.75216042274931	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman soldiers) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Roman citizens) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Romans) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman citizens) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: A Roman soldier) => SANDALS; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman soldiers) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: Roman citizens) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Romans) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman citizens) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: A Roman soldier) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman soldiers) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: Roman citizens) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Romans) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman citizens) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: A Roman soldier) => The Sandals
What kind of music did the romans have?	skirts	-44.75216042274931	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: skirts, r1.rel: wore, r0.namespace: nell, r1.arg2: skirts, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Romans) => skirts; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: skirts, r1.rel: wore, r0.namespace: nell, r1.arg2: skirts, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => skirts
What kind of music did the romans have?	skirt	-44.75216042274931	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: skirt, r1.rel: wore, r0.namespace: nell, r1.arg2: skirts, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Romans) => skirt; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: skirt, r1.rel: wore, r0.namespace: nell, r1.arg2: skirts, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => skirt
What kind of music did the romans have?	hobnail boots	-44.76511244547406	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: hobnail boots, r1.rel: wore, r0.namespace: nell, r1.arg2: hobnail boots, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman legions) => hobnail boots
What kind of music did the romans have?	tunics	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: Tunics, r1.rel: wore, r0.namespace: nell, r1.arg2: tunics, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Clothes Roman men) => Tunics; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: Tunics, r1.rel: wore, r0.namespace: nell, r1.arg2: tunics, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman women) => Tunics
What kind of music did the romans have?	pj pants	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: pj pants, r1.rel: wore, r0.namespace: nell, r1.arg2: pants, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: roman time) => pj pants
What kind of music did the romans have?	of-footwear	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: of-Footwear, r1.rel: wore, r0.namespace: nell, r1.arg2: footwear, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Romans) => of-Footwear
What kind of music did the romans have?	footwear	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: Footwear, r1.rel: wore, r0.namespace: nell, r1.arg2: footwear, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Romans) => Footwear
What kind of music did the romans have?	pants	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: pants, r1.rel: wore, r0.namespace: nell, r1.arg2: pants, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: roman time) => pants
What kind of music did the romans have?	cloaks	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: cloaks, r1.rel: wore a variety of, r0.namespace: nell, r1.arg2: cloaks, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans) => cloaks
What kind of music did the romans have?	tunic	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: tunic, r1.rel: wore, r0.namespace: nell, r1.arg2: tunics, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Clothes Roman men) => tunic; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: tunic, r1.rel: wore, r0.namespace: nell, r1.arg2: tunics, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman women) => tunic
What kind of music did the romans have?	bc footwear	-44.77806446819882	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: bc footwear, r1.rel: wore, r0.namespace: nell, r1.arg2: footwear, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Romans) => bc footwear
What kind of music did the romans have?	stoles	-44.78713088410615	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: stoles, r1.rel: wore, r0.namespace: nell, r1.arg2: stoles, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman government officials) => stoles
What kind of music did the romans have?	under-garments	-44.920342240931134	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: under-garments, r1.rel: wore, r0.namespace: nell, r1.arg2: undergarments, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Romans) => under-garments
What kind of music did the romans have?	togas	-44.920342240931134	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: togas, r1.rel: wore, r0.namespace: nell, r1.arg2: the toga, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Most Romans) => togas; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: togas, r1.rel: wore, r0.namespace: nell, r1.arg2: Togas, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Romans) => togas
What kind of music did the romans have?	socks	-44.93491326649648	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: SOCKS, r1.rel: wore, r0.namespace: nell, r1.arg2: socks, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Romans) => SOCKS
What kind of music did the romans have?	ring	-44.96273067893941	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (roman, wear, $x) => (r0.arg1: ring, r1.rel: wore, r0.namespace: nell, r1.arg2: rings, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Roman men and women) => ring
What kind of music did the romans have?	officials	-45.759344523438074	what kind of sport do iran have ? => $x: ($x, "is a kind of", sport) (iran, have, $x) => $x: ($x, "is a kind of", sport) (iran, have, $x) => (r0.arg1: officials, r1.rel: has greatly concerned, r0.namespace: reverb, r1.arg2: officials, r0.arg2: sport and gambling, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => officials; what kind of sport do iran have ? => $x: ($x, "is a kind of", sport) (iran, have, $x) => $x: ($x, "is a kind of", sport) (iran, have, $x) => (r0.arg1: officials, r1.rel: have raised concerns among, r0.namespace: reverb, r1.arg2: officials, r0.arg2: sport and gambling, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => officials; what kind of sport do iran have ? => $x: ($x, "is a kind of", sport) (iran, have, $x) => $x: ($x, "is a kind of", sport) (iran, have, $x) => (r0.arg1: officials, r1.rel: has also handed a letter to, r0.namespace: reverb, r1.arg2: EU officials, r0.arg2: sport and gambling, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => officials; what kind of sport do iran have ? => $x: ($x, "is a kind of", sport) (iran, have, $x) => $x: ($x, "is a kind of", sport) (iran, have, $x) => (r0.arg1: officials, r1.rel: has ordered, r0.namespace: reverb, r1.arg2: officials, r0.arg2: sport and gambling, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Irans  Ministry of Interior) => officials; what kind of sport do rome have ? => $x: ($x, "is a kind of", sport) (rome, have, $x) => $x: ($x, "is a kind of", sport) (rome, have, $x) => (r0.arg1: officials, r1.rel: has a small structure of, r0.namespace: reverb, r1.arg2: 5 officials, r0.arg2: sport and gambling, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Rome Delegation) => officials
What kind of music did the romans have?	universe	-45.87447555456292	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => universe; what kind of sport do the roman have ? => $x: ($x, "is a kind of", sport) (the roman, have, $x) => $x: ($x, "is a kind of", sport) (roman, have, $x) => (r0.arg1: the Universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Universe; what kind of sport do roman have ? => $x: ($x, "is a kind of", sport) (roman, have, $x) => $x: ($x, "is a kind of", sport) (roman, have, $x) => (r0.arg1: the Universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Universe; what kind of sport do rome have ? => $x: ($x, "is a kind of", sport) (rome, have, $x) => $x: ($x, "is a kind of", sport) (rome, have, $x) => (r0.arg1: the Universe, r1.rel: have found evidence in, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => the Universe; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => universe
What kind of music did the romans have?	church	-45.89001798183263	what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had joined, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have seen, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have come to describe, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had come to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have been incorporated into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman baths) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been terribly corrupted by, r0.namespace: reverb, r1.arg2: the churches, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans 13) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has seemed a threat to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has always been its theology of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long been imposed on, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a Roman Catholic invention) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been visibly divided from, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a non-Roman Catholic) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had joined, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have seen, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have come to describe, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had come to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have been incorporated into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman baths) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been terribly corrupted by, r0.namespace: reverb, r1.arg2: the churches, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans 13) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has seemed a threat to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has always been its theology of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long been imposed on, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a Roman Catholic invention) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been visibly divided from, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a non-Roman Catholic) => The church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had joined, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have seen, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have come to describe, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had come to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have been incorporated into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman baths) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has seemed a threat to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has been terribly corrupted by, r0.namespace: reverb, r1.arg2: the churches, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 13) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has always been its theology of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Empire) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Empire) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has long been imposed on, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a Roman Catholic invention) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has been visibly divided from, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a non-Roman Catholic) => the Church
What kind of music did the romans have?	popular culture	-45.89973199887619	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Popular culture, r1.rel: had a part in shaping, r0.namespace: reverb, r1.arg2: popular culture, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman rule) => Popular culture; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Popular culture, r1.rel: had a part in shaping, r0.namespace: reverb, r1.arg2: popular culture, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman rule) => Popular culture
What kind of music did the romans have?	stock	-45.909446015919755	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: stock, r1.rel: cannon have come back in, r0.namespace: reverb, r1.arg2: stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman Memoirs) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: had underreported, r0.namespace: reverb, r1.arg2: its stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: may have also begun to exploit, r0.namespace: reverb, r1.arg2: stocks, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: has been adding to, r0.namespace: reverb, r1.arg2: its stocks, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: stock, r1.rel: cannon have come back in, r0.namespace: reverb, r1.arg2: stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman Memoirs) => stock
What kind of music did the romans have?	life	-46.0722028272902	what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: have been so instrumental in shaping, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman politics) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has spared, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a Roman soldier) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has come to, r0.namespace: reverb, r1.arg2: life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had questions about, r0.namespace: reverb, r1.arg2: life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the huge Roman Empire) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: ceased to have, r0.namespace: reverb, r1.arg2: a life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman heritage) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has always championed, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had an absolute right over, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman father) => life; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has influenced every aspect of, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greco-Roman world) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: had been shelter of, r0.namespace: reverb, r1.arg2: life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: has lived most of, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: have learned to face, r0.namespace: reverb, r1.arg2: a life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: have had their impact on, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: has taken on, r0.namespace: reverb, r1.arg2: a life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: life, r1.rel: had spent most of, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: have been so instrumental in shaping, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman politics) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has spared, r0.namespace: reverb, r1.arg2: his life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a Roman soldier) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has come to, r0.namespace: reverb, r1.arg2: life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had questions about, r0.namespace: reverb, r1.arg2: life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the huge Roman Empire) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: ceased to have, r0.namespace: reverb, r1.arg2: a life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman heritage) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has always championed, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: had an absolute right over, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman father) => life; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: life, r1.rel: has influenced every aspect of, r0.namespace: reverb, r1.arg2: the life, r0.arg2: the highest art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greco-Roman world) => life
Who is the best dancer in the world and ever?	horses	-55.93580884157704	who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Horses, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Horses; who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Horses, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Horses; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Horses, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Horses; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Horses, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Horses
Who is the best dancer in the world and ever?	we love boyz	-56.133536114304306	who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: WE LOVE THOSE BOYZ THEY, r0.namespace: reverb, r0.arg2: THE WORLD, r0.rel: ARE THE BEST DANCERS IN) => WE LOVE THOSE BOYZ THEY; who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: WE LOVE THOSE BOYZ THEY, r0.namespace: reverb, r0.arg2: THE WORLD, r0.rel: ARE THE BEST DANCERS IN) => WE LOVE THOSE BOYZ THEY; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: WE LOVE THOSE BOYZ THEY, r0.namespace: reverb, r0.arg2: THE WORLD, r0.rel: ARE THE BEST DANCERS IN) => WE LOVE THOSE BOYZ THEY; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: WE LOVE THOSE BOYZ THEY, r0.namespace: reverb, r0.arg2: THE WORLD, r0.rel: ARE THE BEST DANCERS IN) => WE LOVE THOSE BOYZ THEY
Who is the best dancer in the world and ever?	young americans	-56.133536114304306	who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Young Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Young Americans; who be the best dancer ever in the world ? => $x: ($x, be the best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Young Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Young Americans; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Young Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Young Americans; who be best dancer ever in the world ? => $x: ($x, be best dancer ever in, the world) => $x: ($x, be best dancer, world) => (r0.arg1: Young Americans, r0.namespace: reverb, r0.arg2: the world, r0.rel: are the best dancers in) => Young Americans
What main features do nearly all mosques have?	cathedral	-71.59550117976126	what function do nearly all mosque have ? => $x: ($x, "type", function) (nearly all mosque, have, $x) => $x: ($x, "type", function) (all mosque, have, $x) => (r0.arg1: Cathedral, r1.rel: had been converted to, r0.namespace: freebase, r1.arg2: cathedrals, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: all Muslim mosques) => Cathedral; what function do mosque nearly all have ? => $x: ($x, "type", function) (mosque nearly all, have, $x) => $x: ($x, "type", function) (mosque all, have, $x) => (r0.arg1: Cathedral, r1.rel: had been converted to, r0.namespace: freebase, r1.arg2: cathedrals, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: all Muslim mosques) => Cathedral; what function do almost all mosque have ? => $x: ($x, "type", function) (almost all mosque, have, $x) => $x: ($x, "type", function) (all mosque, have, $x) => (r0.arg1: Cathedral, r1.rel: had been converted to, r0.namespace: freebase, r1.arg2: cathedrals, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: all Muslim mosques) => Cathedral
What responsibilities did john jay have?	united states secretary navy	-52.40256884222319	what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Navy, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Navy; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Navy, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Navy
What responsibilities did john jay have?	united states secretary army	-52.40256884222319	what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Army, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Army; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Army, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Army
What responsibilities did john jay have?	co-chairman	-52.570750660405004	what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Co-Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Co-Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Co-Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Co-Chairman
What responsibilities did john jay have?	chairman	-52.570750660405004	what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: HOBY role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Collaborator role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Project role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be there ? => $x: ($x, "type", role) (john jay, be there, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Role in Meeting, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: HOBY role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Collaborator role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Project role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Role in Meeting, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman
What responsibilities did john jay have?	spain	-56.51001126819355	what state do john jay have ? => $x: ($x, "type", state) (john jay, have, $x) => $x: ($x, "type", state) (john jay, have, $x) => (r0.arg1: Spain, r1.rel: had little success in, r0.namespace: freebase, r1.arg2: Spain, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => Spain; what state do john jay have ? => $x: ($x, "type", state) (john jay, have, $x) => $x: ($x, "type", state) (john jay, have, $x) => (r0.arg1: Spain, r1.rel: had been appointed minister to, r0.namespace: freebase, r1.arg2: Spain, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => Spain; what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: SPAIN, r1.rel: had little success in, r0.namespace: nell, r1.arg2: Spain, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => SPAIN; what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: SPAIN, r1.rel: had been appointed minister to, r0.namespace: nell, r1.arg2: Spain, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => SPAIN
What responsibilities did john jay have?	research	-56.61361068637537	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what function do john jay have ? => $x: ($x, "type", function) (john jay, have, $x) => $x: ($x, "type", function) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research
What responsibilities did john jay have?	college	-56.61361068637537	what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: COLLEGE, r1.rel: had been his contemporary in, r0.namespace: nell, r1.arg2: college, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => COLLEGE; what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: College, r1.rel: had been his contemporary in, r0.namespace: freebase, r1.arg2: college, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => College; what function do john jay have ? => $x: ($x, "type", function) (john jay, have, $x) => $x: ($x, "type", function) (john jay, have, $x) => (r0.arg1: College, r1.rel: had been his contemporary in, r0.namespace: freebase, r1.arg2: college, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => College
What responsibilities did john jay have?	agresearch	-56.62008669773775	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: AgResearch, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Type of thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => AgResearch
What responsibilities did john jay have?	target	-56.64250366014596	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: target, r1.rel: have been pretty much on, r0.namespace: freebase, r1.arg2: target, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Matt John Jay?s posts) => target
What responsibilities did john jay have?	volunteer	-57.180857837516186	what job do john jay ? => $x: ($x, "is a", job) ($x, do, john jay) => $x: ($x, "is a", job) ($x, do, john jay) => (r0.arg1: VOLUNTEER, r1.rel: did, r0.namespace: nell, r1.arg2: John Jay shape, r0.arg2: job position, r0.rel: is a, r1.namespace: reverb, r1.arg1: Volunteers) => VOLUNTEER
What responsibilities did john jay have?	london	-59.73130672501041	what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: London, r1.rel: had been dispatched to, r0.namespace: freebase, r1.arg2: London, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: Chief Justice John Jay) => London; what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: London, r1.rel: had been dispatched to, r0.namespace: freebase, r1.arg2: London, r0.arg2: Delete Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: Chief Justice John Jay) => London
What responsibilities did john jay have?	english	-59.74720238926352	what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: English, r1.rel: has been translated to, r0.namespace: freebase, r1.arg2: English, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: John C. Jay?s portion) => English
What is the welsh word for gram?	annwfn	-50.775046895466375	what be the welsh word for g ? => $x: ($x, be the welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be the welsh word for g ? => $x: ($x, be the welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be welsh word for g ? => $x: ($x, be welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be welsh word for g ? => $x: ($x, be welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn
What is the welsh word for gram?	eira	-52.08921525002191	what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be welsh word for, snow) => (r0.arg1: Eira, r0.namespace: openie4, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be welsh word for, snow) => (r0.arg1: Eira, r0.namespace: reverb, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be welsh word for, snow) => (r0.arg1: Eira, r0.namespace: openie4, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be welsh word for, snow) => (r0.arg1: Eira, r0.namespace: reverb, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira
Is star is a source of light?	windows	-54.19398025911275	which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: were used as, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: sources of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: was used as, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is located between, r0.namespace: reverb, r1.arg2: the light sources, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most common light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most obvious light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: should be, r0.namespace: reverb, r1.arg2: the brightest source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: were used as, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: sources of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: was used as, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is located between, r0.namespace: reverb, r1.arg2: the light sources, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most common light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most obvious light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: Windows, r1.rel: should be, r0.namespace: reverb, r1.arg2: the brightest source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: were used as, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: sources of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: was used as, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is located between, r0.namespace: reverb, r1.arg2: the light sources, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most common light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most obvious light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: should be, r0.namespace: reverb, r1.arg2: the brightest source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: were used as, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: sources of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: was used as, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is located between, r0.namespace: reverb, r1.arg2: the light sources, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most common light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: are, r0.namespace: reverb, r1.arg2: the most obvious light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: Windows, r1.rel: should be, r0.namespace: reverb, r1.arg2: the brightest source of light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows
Is star is a source of light?	sun	-54.423498860346214	which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has been the primary source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has been the primary source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: The Sun, r1.rel: has been the primary source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have source of, light) => (r0.arg1: the Sun, r1.rel: has been the primary source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, light source) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is the source of, r0.namespace: freebase, r1.arg2: energy and light, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sun) => Sun; which star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is our source of, r0.namespace: freebase, r1.arg2: light , energy and heat, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: the sun) => Sun; which star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is the source of, r0.namespace: freebase, r1.arg2: energy and light, r0.arg2: Star, r0.rel: Type, r1.namespace: openie4, r1.arg1: the sun) => Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the earth?s central source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the earth?s central source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is the source of, r0.namespace: freebase, r1.arg2: energy and light, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sun) => Sun; what star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is our source of, r0.namespace: freebase, r1.arg2: light , energy and heat, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: the sun) => Sun; what star be a source of light energy ? => $x: ($x, "type", star) ($x, be a source of, light energy) => $x: ($x, "type", star) ($x, be source of, light energy) => (r0.arg1: Sun, r1.rel: is the source of, r0.namespace: freebase, r1.arg2: energy and light, r0.arg2: Star, r0.rel: Type, r1.namespace: openie4, r1.arg1: the sun) => Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: The Sun, r1.rel: is the earth?s central source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light energy ? => $x: ($x, "is an example of", star) ($x, be a source of, light energy) => $x: ($x, "is an example of", star) ($x, be source of, light energy) => (r0.arg1: the Sun, r1.rel: is the earth?s central source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be considered to be this type of, r0.namespace: reverb, r1.arg2: light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the largest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an incandescent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the Source of Light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: an excellent light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: are, r0.namespace: reverb, r1.arg2: typical hard light sources, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: its light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the greatest light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: my only light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: your primary light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is generally, r0.namespace: reverb, r1.arg2: the main light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: will be, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the major source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our primary source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light for day, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: our prime light and energy source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of all the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of direct light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the source of life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: to be, r0.namespace: reverb, r1.arg2: the source of light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the primary source of light and heat for the Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the only source of light on the Moon, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the main source of earth 's heat and light energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, source light) => (r0.arg1: the Sun, r1.rel: was, r0.namespace: reverb, r1.arg2: the only source of light in the universe, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun
Is star is a source of light?	359 georgia	-55.10170248638043	which star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; what star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; which star be source of light ? => $x: ($x, "type", star) ($x, be source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; what star be source of light ? => $x: ($x, "type", star) ($x, be source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia
Is star is a source of light?	georgia	-60.57951753183994	what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: US State, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Former Soviet Union States, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "is a", state) ($x, be a source of, light) => $x: ($x, "is a", state) ($x, be source of, light) => (r0.arg1: GEORGIA, r1.rel: is a source of, r0.namespace: nell, r1.arg2: light, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: Georgia) => GEORGIA
Is star is a source of light?	object	-61.721667542575446	what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is located between, r0.namespace: reverb, r1.arg2: light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: An object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is illuminated by, r0.namespace: reverb, r1.arg2: a modulated light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is increased by, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is placed between, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is lit by, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is held between, r0.namespace: reverb, r1.arg2: the light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is placed in, r0.namespace: reverb, r1.arg2: front of a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, light source) => (r0.arg1: An object, r1.rel: is, r0.namespace: reverb, r1.arg2: twice the distance from a point source of light, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an object) => An object
Is star is a source of light?	saskatchewan	-62.421654115919466	what state be a light source ? => $x: ($x, "type", state) ($x, be, a light source) => $x: ($x, "type", state) ($x, be, light source) => (r0.arg1: Saskatchewan, r1.rel: is home to, r0.namespace: freebase, r1.arg2: the Canadian Light Source, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: Saskatchewan) => Saskatchewan
Is star is a source of light?	20th century	-62.49480600211092	what state be a source of light ? => $x: ($x, "is an example of", state) ($x, be a source of, light) => $x: ($x, "is an example of", state) ($x, be source of, light) => (r0.arg1: the 20th century, r1.rel: had been the chief source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a state achieving eminence, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the 20th Century) => the 20th century
Is star is a source of light?	links	-64.28378236105095	what state be a light source ? => $x: ($x, "is an example of", state) ($x, be, a light source) => $x: ($x, "is an example of", state) ($x, be, light source) => (r0.arg1: the links, r1.rel: should be, r0.namespace: reverb, r1.arg2: a large and bright light source, r0.arg2: the poor state, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the link) => the links
Is star is a source of light?	points	-65.1580177522831	what state be a light source ? => $x: ($x, "is a", state) ($x, be, a light source) => $x: ($x, "is a", state) ($x, be, light source) => (r0.arg1: points, r1.rel: can be displayed as, r0.namespace: nell, r1.arg2: light source, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: Points) => points
Who started the bear flag revolution?	ide	-57.75967172671784	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: Ide, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was a participant in) => Ide
Who started the bear flag revolution?	california	-57.75967172671784	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: is a reference to) => California; who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: California, r0.namespace: openie4, r0.arg2: the Bear Flag Revolt, r0.rel: was first flown during) => California
Who started the bear flag revolution?	mexican authorities	-57.93311395683621	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: Mexican authorities, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: is called) => Mexican authorities
Who started the bear flag revolution?	1851	-57.94699112404129	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: 1851, r0.namespace: reverb, r0.arg2: The Bear Flag Revolt, r0.rel: was intended to) => 1851
Who started the bear flag revolution?	fr?mont	-57.94699112404129	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: Fr?mont, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was involved in) => Fr?mont
Who started the bear flag revolution?	general vallejo	-57.94699112404129	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: General Vallejo, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was imprisoned during) => General Vallejo
Who started the bear flag revolution?	sonoma residents	-57.957398999445104	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, bear flag revolt) => (r0.arg1: Sonoma residents, r0.namespace: reverb, r0.arg2: the Bear Flag revolt, r0.rel: are quite aware of) => Sonoma residents
Who started the bear flag revolution?	california state legislature	-61.78572046365055	who make the bear flag revolt ? => $x: ($x, make, the bear flag revolt) => $x: ($x, make, bear flag revolt) => (r0.arg1: the California state legislature, r0.namespace: reverb, r0.arg2: their Bear Flag Revolt, r0.rel: made) => the California state legislature
Who started the bear flag revolution?	glenn county	-63.80982981495029	who be the bear flag rebellion ? => $x: ($x, be, the bear flag rebellion) => $x: ($x, be, bear flag rebellion) => (r0.arg1: Glenn County, r0.namespace: reverb, r0.arg2: the Bear Flag Rebellion, r0.rel: was involved in) => Glenn County
What were the names of famous highwayman?	dublin	-45.74699779773792	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin
What were the names of famous highwayman?	dick turpin	-45.74699779773792	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin
What were the names of famous highwayman?	two riniers	-45.886440968203814	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers
What were the names of famous highwayman?	gamaliel ratsey	-45.915583019334505	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey
What were the names of famous highwayman?	lady katherine ferrers	-45.93306825001292	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers
What were the names of famous highwayman?	dick dunsdon	-45.93306825001292	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon
What were the names of famous highwayman?	willie brennan	-45.93306825001292	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan
What were the names of famous highwayman?	holloway	-45.944725070465196	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway
What were the names of famous highwayman?	services	-45.944725070465196	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services
What were the names of famous highwayman?	desk	-45.97386712159589	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk; what be themost famous highwayman ? => $x: ($x, be, themost famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk
What were the names of famous highwayman?	higgins	-46.982105397414855	what be the name of the highwayman ? => $x: (the highwayman, have name of, $x) => $x: (highwayman, name of, $x) => (r0.arg1: the highwayman, r0.namespace: reverb, r0.arg2: Higgins, r0.rel: may find the name of) => Higgins
What were the names of famous highwayman?	erik	-53.52990408864689	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik
What were the names of famous highwayman?	angulimala	-53.52990408864689	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala
What were the names of famous highwayman?	gabriel	-53.52990408864689	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel
What were the names of famous highwayman?	junk science	-53.52990408864689	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science
What were the names of famous highwayman?	william brennan	-53.52990408864689	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan
What were the names of famous highwayman?	tutor	-53.54156090909916	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor
What were the names of famous highwayman?	moonlight ?	-53.549332122734015	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?
What were the names of famous highwayman?	governess	-53.549332122734015	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess
What were the names of famous highwayman?	silver	-53.549332122734015	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver
What were the names of famous highwayman?	paris	-53.549332122734015	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris
What were the names of famous highwayman?	road	-53.55488298961605	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road
What were the names of famous highwayman?	?business	-53.55488298961605	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business
What were the names of famous highwayman?	small paddocks	-53.70820332728704	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks
What were the names of famous highwayman?	poem	-53.70974272728098	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The poem, r0.namespace: openie4, r0.arg2: the Highwayman, r0.rel: is about) => The poem
What were the names of famous highwayman?	mountains defiles	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles
What were the names of famous highwayman?	class	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class
What were the names of famous highwayman?	denis moore	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore
What were the names of famous highwayman?	tall fellow next line	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line
What were the names of famous highwayman?	dennis	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis
What were the names of famous highwayman?	savior	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior
What were the names of famous highwayman?	jul 2008 , 22:04 wow	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow
What were the names of famous highwayman?	song	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song
What were the names of famous highwayman?	tories	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories
What were the names of famous highwayman?	audio challenge	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i
What were the names of famous highwayman?	dick	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick
What were the names of famous highwayman?	abu dharr	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr
What were the names of famous highwayman?	design	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design
What were the names of famous highwayman?	revealer	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer
What were the names of famous highwayman?	kid	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid
What were the names of famous highwayman?	tyburn gallows	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows
What were the names of famous highwayman?	kingston	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston
What were the names of famous highwayman?	walton	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton
What were the names of famous highwayman?	moll cutpurse	-53.727631361374165	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse
What were the names of famous highwayman?	charlotte	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte
What were the names of famous highwayman?	group	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group
What were the names of famous highwayman?	one time	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: one time, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => one time
What were the names of famous highwayman?	knot	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot
What were the names of famous highwayman?	lone hebrew	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew
What were the names of famous highwayman?	father	-53.73928818182644	who be famouse highwayman ? => $x: ($x, be, famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father
What is a bicycle that rides two people?	president	-66.21758677501484	what people ride a bicycle ? => $x: ($x, "is an example of", people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: President, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people empowerment, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the President) => President; what people ride a bicycle ? => $x: ($x, "is an example of", people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: President, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people empowerment, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the President) => President; what 2 people ride a bicycle ? => $x: ($x, "is an example of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: President, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people empowerment, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the President) => President; what 2 people ride a bicycle ? => $x: ($x, "is an example of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: President, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people empowerment, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the President) => President
What is a bicycle that rides two people?	test	-66.90001242404114	what people ride a bicycle ? => $x: ($x, "type", people) ($x, ride, a bicycle) => $x: ($x, "type", people) ($x, ride, bicycle) => (r0.arg1: test, r1.rel: is like riding, r0.namespace: freebase, r1.arg2: a bicycle, r0.arg2: People, r0.rel: Type, r1.namespace: reverb, r1.arg1: tests) => test; what 2 people ride a bicycle ? => $x: ($x, "type", 2 people) ($x, ride, a bicycle) => $x: ($x, "type", people) ($x, ride, bicycle) => (r0.arg1: test, r1.rel: is like riding, r0.namespace: freebase, r1.arg2: a bicycle, r0.arg2: People, r0.rel: Type, r1.namespace: reverb, r1.arg1: tests) => test
What is a bicycle that rides two people?	india	-68.5653385409257	what people ride a bicycle ? => $x: ($x, "is an example of", people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: India, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; what 2 people ride a bicycle ? => $x: ($x, "is an example of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is an example of", people) ($x, ride, bicycle) => (r0.arg1: India, r1.rel: rode, r0.namespace: reverb, r1.arg2: his bicycle, r0.arg2: people, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India
What is a bicycle that rides two people?	love	-68.77213222956028	what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Love, r1.rel: ride, r0.namespace: reverb, r1.arg2: my bicycle, r0.arg2: seven people treasure, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: love) => Love; what 2 people ride a bicycle ? => $x: ($x, "is a kind of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Love, r1.rel: ride, r0.namespace: reverb, r1.arg2: my bicycle, r0.arg2: seven people treasure, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: love) => Love
What is a bicycle that rides two people?	animals	-69.77125267729437	what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: ride, r0.namespace: nell, r1.arg2: bicycles, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: animals) => Animals; what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an animal) => Animals; what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the animals) => Animals; what 2 people ride a bicycle ? => $x: ($x, "is a kind of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: ride, r0.namespace: nell, r1.arg2: bicycles, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: animals) => Animals; what 2 people ride a bicycle ? => $x: ($x, "is a kind of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an animal) => Animals; what 2 people ride a bicycle ? => $x: ($x, "is a kind of", 2 people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the animals) => Animals
What was the name of the volcano in washington dc?	robinson cano	-47.495478861374266	what be the name of the volcano in new york ? => $x: ($x, be the name of the volcano in, new york) => $x: ($x, volcano in, new york) => (r0.arg1: Robinson Cano, r0.namespace: reverb, r0.arg2: the Bronx , New York, r0.rel: is an active Volcano in) => Robinson Cano; what be the name of volcano in new york ? => $x: ($x, be the name of volcano in, new york) => $x: ($x, volcano in, new york) => (r0.arg1: Robinson Cano, r0.namespace: reverb, r0.arg2: the Bronx , New York, r0.rel: is an active Volcano in) => Robinson Cano; what be the volcano in new york ? => $x: ($x, be the volcano in, new york) => $x: ($x, be volcano in, new york) => (r0.arg1: Robinson Cano, r0.namespace: reverb, r0.arg2: the Bronx , New York, r0.rel: is an active Volcano in) => Robinson Cano; what be the volcano in new york ? => $x: ($x, be the volcano in, new york) => $x: ($x, be volcano in, new york) => (r0.arg1: Robinson Cano, r0.namespace: reverb, r0.arg2: the Bronx , New York, r0.rel: is an active Volcano in) => Robinson Cano
What was the name of the volcano in washington dc?	mount rainier	-48.440583718191164	what be the name of the volcano in washington ? => $x: ($x, be the name of the volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mount Rainier, r0.namespace: reverb, r0.arg2: Washington, r0.rel: is an inactive volcano in) => Mount Rainier; what be the name of volcano in washington ? => $x: ($x, be the name of volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mount Rainier, r0.namespace: reverb, r0.arg2: Washington, r0.rel: is an inactive volcano in) => Mount Rainier; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mount Rainier, r0.namespace: reverb, r0.arg2: Washington, r0.rel: is an inactive volcano in) => Mount Rainier; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mount Rainier, r0.namespace: reverb, r0.arg2: Washington, r0.rel: is an inactive volcano in) => Mount Rainier
What was the name of the volcano in washington dc?	mount st . helens	-48.44576452728106	what be the name of the volcano in washington ? => $x: ($x, be the name of the volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mount St . Helens, r0.namespace: reverb, r0.arg2: Washington State, r0.rel: is an active volcano in) => Mount St . Helens; what be the name of volcano in washington ? => $x: ($x, be the name of volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mount St . Helens, r0.namespace: reverb, r0.arg2: Washington State, r0.rel: is an active volcano in) => Mount St . Helens; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mount St . Helens, r0.namespace: reverb, r0.arg2: Washington State, r0.rel: is an active volcano in) => Mount St . Helens; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mount St . Helens, r0.namespace: reverb, r0.arg2: Washington State, r0.rel: is an active volcano in) => Mount St . Helens
What was the name of the volcano in washington dc?	mt st . helens	-48.44576452728106	what be the name of the volcano in washington ? => $x: ($x, be the name of the volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mt St . Helens, r0.namespace: reverb, r0.arg2: Southwest Washington, r0.rel: is an Active Volcano in) => Mt St . Helens; what be the name of volcano in washington ? => $x: ($x, be the name of volcano in, washington) => $x: ($x, volcano in, washington) => (r0.arg1: Mt St . Helens, r0.namespace: reverb, r0.arg2: Southwest Washington, r0.rel: is an Active Volcano in) => Mt St . Helens; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mt St . Helens, r0.namespace: reverb, r0.arg2: Southwest Washington, r0.rel: is an Active Volcano in) => Mt St . Helens; what be the volcano in washington ? => $x: ($x, be the volcano in, washington) => $x: ($x, be volcano in, washington) => (r0.arg1: Mt St . Helens, r0.namespace: reverb, r0.arg2: Southwest Washington, r0.rel: is an Active Volcano in) => Mt St . Helens
How many diffrent types of televisions are there?	march 3. ?	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: March 3. ?, r0.namespace: reverb, r0.arg2: Television, r0.rel: is) => March 3. ?; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: March 3. ?, r0.namespace: reverb, r0.arg2: Television, r0.rel: is) => March 3. ?
How many diffrent types of televisions are there?	revenue	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: revenue, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => revenue; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: revenue, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => revenue
How many diffrent types of televisions are there?	e-waste	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: e-waste, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => e-waste; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: e-waste, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => e-waste
How many diffrent types of televisions are there?	pornography	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: pornography, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => pornography; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: pornography, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => pornography
How many diffrent types of televisions are there?	common	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: common, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => common; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: common, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => common
How many diffrent types of televisions are there?	home appliances	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => home appliances; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => home appliances
How many diffrent types of televisions are there?	mtv	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: MTV, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => MTV; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: MTV, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => MTV
How many diffrent types of televisions are there?	adulthood	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: adulthood, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => adulthood; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: adulthood, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => adulthood
How many diffrent types of televisions are there?	rooms	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the rooms, r0.namespace: reverb, r0.arg2: televisions, r0.rel: were) => the rooms; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the rooms, r0.namespace: reverb, r0.arg2: televisions, r0.rel: were) => the rooms
How many diffrent types of televisions are there?	iptv	-59.3237034363718	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: IPTV, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => IPTV; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: IPTV, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => IPTV
How many diffrent types of televisions are there?	internet	-59.49188525455362	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the internet, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the internet; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the internet, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the internet
How many diffrent types of televisions are there?	content youtube	-59.49188525455362	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the content of YouTube, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the content of YouTube; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the content of YouTube, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the content of YouTube
How many diffrent types of televisions are there?	earth	-59.49188525455362	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the earth, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the earth; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the earth, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => the earth
How many diffrent types of televisions are there?	source information	-59.49188525455362	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the source of information, r0.namespace: openie4, r0.arg2: television, r0.rel: was) => the source of information; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the source of information, r0.namespace: openie4, r0.arg2: television, r0.rel: was) => the source of information
How many diffrent types of televisions are there?	analogy	-59.49188525455362	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The analogy, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => The analogy; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The analogy, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => The analogy; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The analogy, r0.namespace: openie4, r0.arg2: television, r0.rel: is) => The analogy; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The analogy, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => The analogy
How many diffrent types of televisions are there?	only reference point	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: only other reference point, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => only other reference point; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: only other reference point, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => only other reference point
How many diffrent types of televisions are there?	easiest source	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the easiest source, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the easiest source; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the easiest source, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the easiest source
How many diffrent types of televisions are there?	electronics shops	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: electronics shops, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => electronics shops; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: electronics shops, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => electronics shops
How many diffrent types of televisions are there?	large part	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: A large part, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => A large part; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: A large part, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => A large part
How many diffrent types of televisions are there?	welcome	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: welcome, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => welcome; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: welcome, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => welcome
How many diffrent types of televisions are there?	runner-up targets	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Runner-up targets, r0.namespace: reverb, r0.arg2: television, r0.rel: are) => Runner-up targets; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Runner-up targets, r0.namespace: reverb, r0.arg2: television, r0.rel: are) => Runner-up targets
How many diffrent types of televisions are there?	2012	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => 2012; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => 2012
How many diffrent types of televisions are there?	eighties	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the eighties, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the eighties; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the eighties, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the eighties
How many diffrent types of televisions are there?	best way	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the best way, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the best way; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the best way, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the best way
How many diffrent types of televisions are there?	major advertising platform	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the major advertising platform, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the major advertising platform; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the major advertising platform, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the major advertising platform
How many diffrent types of televisions are there?	american public sentiment	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: American public sentiment, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => American public sentiment; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: American public sentiment, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => American public sentiment
How many diffrent types of televisions are there?	entertainment medium	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: entertainment medium, r0.namespace: reverb, r0.arg2: Television, r0.rel: is) => entertainment medium; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: entertainment medium, r0.namespace: reverb, r0.arg2: Television, r0.rel: is) => entertainment medium
How many diffrent types of televisions are there?	contagion	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: contagion, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => contagion; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: contagion, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => contagion
How many diffrent types of televisions are there?	one solution	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: One solution, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => One solution; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: One solution, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => One solution
How many diffrent types of televisions are there?	example home appliances	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: example home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => example home appliances; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: example home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => example home appliances
How many diffrent types of televisions are there?	week	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the week, r0.namespace: reverb, r0.arg2: Television, r0.rel: was) => the week; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the week, r0.namespace: reverb, r0.arg2: Television, r0.rel: was) => the week
How many diffrent types of televisions are there?	never land pirates	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the Never Land Pirates, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the Never Land Pirates; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the Never Land Pirates, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the Never Land Pirates
How many diffrent types of televisions are there?	monsters hd	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: MONSTERS HD, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => MONSTERS HD; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: MONSTERS HD, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => MONSTERS HD
How many diffrent types of televisions are there?	english	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: English, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => English; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: English, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => English
How many diffrent types of televisions are there?	materials	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the materials, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the materials; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the materials, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the materials
How many diffrent types of televisions are there?	hotel	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the hotel, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => the hotel; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the hotel, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => the hotel
How many diffrent types of televisions are there?	devil	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the devil, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the devil; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the devil, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => the devil
How many diffrent types of televisions are there?	next step	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the next step, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the next step; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the next step, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => the next step
How many diffrent types of televisions are there?	common culprits	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Common culprits, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => Common culprits; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Common culprits, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => Common culprits
How many diffrent types of televisions are there?	accurate information	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: accurate information, r0.namespace: reverb, r0.arg2: television, r0.rel: were) => accurate information; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: accurate information, r0.namespace: reverb, r0.arg2: television, r0.rel: were) => accurate information
How many diffrent types of televisions are there?	songs	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the songs, r0.namespace: reverb, r0.arg2: Television, r0.rel: was) => the songs; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the songs, r0.namespace: reverb, r0.arg2: Television, r0.rel: was) => the songs
How many diffrent types of televisions are there?	output	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the output, r0.namespace: reverb, r0.arg2: televisions, r0.rel: is) => the output; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the output, r0.namespace: reverb, r0.arg2: televisions, r0.rel: is) => the output
How many diffrent types of televisions are there?	lifeways centers	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: LifeWays Centers, r0.namespace: reverb, r0.arg2: television, r0.rel: are) => LifeWays Centers; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: LifeWays Centers, r0.namespace: reverb, r0.arg2: television, r0.rel: are) => LifeWays Centers
How many diffrent types of televisions are there?	level home appliances	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Level Home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => Level Home appliances; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: Level Home appliances, r0.namespace: reverb, r0.arg2: televisions, r0.rel: are) => Level Home appliances
How many diffrent types of televisions are there?	90 %	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: 90 %, r0.namespace: reverb, r0.arg2: televisions, r0.rel: were) => 90 %; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: 90 %, r0.namespace: reverb, r0.arg2: televisions, r0.rel: were) => 90 %
How many diffrent types of televisions are there?	reason	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The reason, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => The reason; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: The reason, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => The reason
How many diffrent types of televisions are there?	spin-off?it	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: a spin-off?it, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => a spin-off?it; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: a spin-off?it, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => a spin-off?it
How many diffrent types of televisions are there?	influential	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: influential, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => influential; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: influential, r0.namespace: reverb, r0.arg2: television, r0.rel: is) => influential
How many diffrent types of televisions are there?	one target	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: One target, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => One target; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: One target, r0.namespace: reverb, r0.arg2: television, r0.rel: was) => One target
How many diffrent types of televisions are there?	blank	-59.52143070909908	what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the blank, r0.namespace: reverb, r0.arg2: televisions, r0.rel: was) => the blank; what be diffrent type of television ? => $x: ($x, be diffrent type of, television) => $x: ($x, be, television) => (r0.arg1: the blank, r0.namespace: reverb, r0.arg2: televisions, r0.rel: was) => the blank
What kind of plants did the ancient Mayans have?	telescope	-59.63094478864679	what kind of thing do anciant mayan ? => $x: ($x, "type", thing) ($x, do, anciant mayan) => $x: ($x, "type", thing) ($x, do, mayan) => (r0.arg1: Telescope, r1.rel: did, r0.namespace: freebase, r1.arg2: the Mayans use, r0.arg2: Type of thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: telescopes) => Telescope
What kind of plants did the ancient Mayans have?	christianity	-59.655923689615946	what kind of thing do anciant mayan ? => $x: ($x, "type", thing) ($x, do, anciant mayan) => $x: ($x, "type", thing) ($x, do, mayan) => (r0.arg1: Christianity, r1.rel: had nothing to do with, r0.namespace: freebase, r1.arg2: the Mayan culture, r0.arg2: Thing of expressed value, r0.rel: Type, r1.namespace: reverb, r1.arg1: Christianity) => Christianity
What kind of plants did the ancient Mayans have?	english yew	-60.422502805859466	what kind of plant do anciant mayan ? => $x: ($x, "is a", plant) ($x, do, anciant mayan) => $x: ($x, "is a", plant) ($x, do, mayan) => (r0.arg1: English Yew, r1.rel: so does, r0.namespace: nell, r1.arg2: Mayan, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: English) => English Yew
What bird is brown and has a crown?	cactus wren	-59.22301736478883	what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird (Species), r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: cactus wren, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird (Species), r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: cactus wren, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wren
What bird is brown and has a crown?	marsh wren	-59.25215941591952	what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Marsh Wren, r1.rel: also has, r0.namespace: freebase, r1.arg2: an unstreaked brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Marsh Wren) => Marsh Wren; what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Marsh Wren, r1.rel: also has, r0.namespace: freebase, r1.arg2: an unstreaked brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Marsh Wren) => Marsh Wren; what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: MARSH WREN, r1.rel: also has, r0.namespace: nell, r1.arg2: an unstreaked brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marsh Wren) => MARSH WREN; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Marsh Wren, r1.rel: also has, r0.namespace: freebase, r1.arg2: an unstreaked brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Marsh Wren) => Marsh Wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, brown crown) => (r0.arg1: Marsh Wren, r1.rel: also has, r0.namespace: freebase, r1.arg2: an unstreaked brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Marsh Wren) => Marsh Wren; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: MARSH WREN, r1.rel: also has, r0.namespace: nell, r1.arg2: an unstreaked brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marsh Wren) => MARSH WREN
What bird is brown and has a crown?	cactus wrens	-61.946891550667885	what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: cactus wrens, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wrens; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: cactus wrens, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wrens
What bird is brown and has a crown?	marsh wrens	-61.96909501819603	what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: marsh wrens, r1.rel: also has, r0.namespace: nell, r1.arg2: an unstreaked brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marsh Wren) => marsh wrens; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, brown crown) => (r0.arg1: marsh wrens, r1.rel: also has, r0.namespace: nell, r1.arg2: an unstreaked brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Marsh Wren) => marsh wrens
What is the example of phylum bryophyta?	organisms	-63.03353432330299	what be the meaning of phylum bryophyta ? => $x: ($x, be the meaning of, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the meaning of phylum bryophyta ? => $x: ($x, be the meaning of, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the definition for phylum bryophyta ? => $x: ($x, be the definition for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the definition for phylum bryophyta ? => $x: ($x, be the definition for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the example for phylum bryophyta ? => $x: ($x, be the example for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the example for phylum bryophyta ? => $x: ($x, be the example for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: organisms, r0.namespace: reverb, r0.arg2: phylum Bryophyta, r0.rel: are found in) => organisms
What is the example of phylum bryophyta?	mosses	-63.22834739091721	what be the meaning of phylum bryophyta ? => $x: ($x, be the meaning of, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the meaning of phylum bryophyta ? => $x: ($x, be the meaning of, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the meaning of phylum division bryophyta ? => $x: ($x, be the meaning of, phylum division bryophyta) => $x: ($x, be, phylum division bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the meaning of phylum division bryophyta ? => $x: ($x, be the meaning of, phylum division bryophyta) => $x: ($x, be, phylum division bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for phylum bryophyta ? => $x: ($x, be the definition for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for phylum bryophyta ? => $x: ($x, be the definition for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the example for phylum bryophyta ? => $x: ($x, be the example for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the example for phylum bryophyta ? => $x: ($x, be the example for, phylum bryophyta) => $x: ($x, be, phylum bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for phylum division bryophyta ? => $x: ($x, be the definition for, phylum division bryophyta) => $x: ($x, be, phylum division bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses; what be the definition for phylum division bryophyta ? => $x: ($x, be the definition for, phylum division bryophyta) => $x: ($x, be, phylum division bryophyta) => (r0.arg1: the mosses, r0.namespace: reverb, r0.arg2: the division or phylum Bryophyta, r0.rel: are placed in) => the mosses
What is the example of phylum bryophyta?	bryophytes	-69.42270338182719	what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: Bryophytes, r0.namespace: reverb, r0.arg2: the plant division Bryophyta, r0.rel: are members of) => Bryophytes; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: Bryophytes, r0.namespace: reverb, r0.arg2: the plant division Bryophyta, r0.rel: are members of) => Bryophytes; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: Bryophytes, r0.namespace: reverb, r0.arg2: the plant division Bryophyta, r0.rel: are members of) => Bryophytes; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: Bryophytes, r0.namespace: reverb, r0.arg2: the plant division Bryophyta, r0.rel: are members of) => Bryophytes
What is the example of phylum bryophyta?	any species	-69.6333826772792	what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: any species, r0.namespace: reverb, r0.arg2: the division ?Bryophyta?, r0.rel: is part of) => any species; what be the meaning of a bryophyta ? => $x: ($x, be the meaning of, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: any species, r0.namespace: reverb, r0.arg2: the division ?Bryophyta?, r0.rel: is part of) => any species; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: any species, r0.namespace: reverb, r0.arg2: the division ?Bryophyta?, r0.rel: is part of) => any species; what be the definition for a bryophyta ? => $x: ($x, be the definition for, a bryophyta) => $x: ($x, be, bryophyta) => (r0.arg1: any species, r0.namespace: reverb, r0.arg2: the division ?Bryophyta?, r0.rel: is part of) => any species
What is the major cities of romania?	bucharest	2.349172094139626	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest
What is the major cities of romania?	romania bucharest	2.151444821412354	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest
What is the major cities of romania?	bucharest bucharest	2.151444821412354	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest
What is the major cities of romania?	rel=shortlink pite?ti	2.134792220766246	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti
What is the major cities of romania?	pite?ti	2.134792220766246	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti
What is the major cities of romania?	constanta	2.134792220766246	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta
What is the major cities of romania?	many	2.1181396201201395	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; who be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; who be the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be the main city of romanium ? => $x: ($x, be the main city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many
What is the major cities of romania?	sibiu	-34.20699149944549	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu
What is the major cities of romania?	cluj-napoca	-34.21508651364846	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca
What is the major cities of romania?	1st century	-34.39431089676894	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century
What is the major cities of romania?	romania constan?a	-34.40471877217276	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a
What is the major cities of romania?	cluj-napoca cluj-napoca	-34.40471877217276	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca
What is the major cities of romania?	population	-34.40471877217276	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be largest city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population
What is the major cities of romania?	constan?a	-34.40471877217276	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a
What is the major cities of romania?	easy smart search engine	-34.410963497415054	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine
What is the major cities of romania?	buscata	-34.410963497415054	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata
What is the major cities of romania?	braila	-38.0014501500121	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila
What is the major cities of romania?	buzau	-38.0014501500121	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau
What is the major cities of romania?	bacau	-38.0014501500121	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau
What is the major cities of romania?	resita	-38.0014501500121	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita
What is the major cities of romania?	arad	-38.00792616137447	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the largesst city in romanium ? => $x: ($x, be the largesst city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the six city in romanium ? => $x: ($x, be the six city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the marjor city in romanium ? => $x: ($x, be the marjor city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be most major city in romanium ? => $x: ($x, be most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be the most major city in romanium ? => $x: ($x, be the most major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; who be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the inportant city in romanium ? => $x: ($x, be the inportant city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad
What is the major cities of romania?	telecommunications	-40.34793715909788	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: UPC Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Vodafone Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Orange Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Cosmote Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: UPC Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Vodafone Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Orange Romania, r0.rel: Organizations in this industry) => Telecommunications; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Telecommunications, r0.namespace: freebase, r0.arg2: Cosmote Romania, r0.rel: Organizations in this industry) => Telecommunications
What is the major cities of romania?	video game industry	-40.34793715909788	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Video game industry, r0.namespace: freebase, r0.arg2: Ubisoft Romania, r0.rel: Organizations in this industry) => Video game industry; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Video game industry, r0.namespace: freebase, r0.arg2: Ubisoft Romania, r0.rel: Organizations in this industry) => Video game industry
What is the major cities of romania?	video game	-40.34793715909788	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Video game, r0.namespace: freebase, r0.arg2: Ubisoft Romania, r0.rel: Organizations in this industry) => Video game; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Video game, r0.namespace: freebase, r0.arg2: Ubisoft Romania, r0.rel: Organizations in this industry) => Video game
What is the major cities of romania?	natural gas	-40.3518227659153	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Natural gas, r0.namespace: freebase, r0.arg2: GDF Suez Romania, r0.rel: Organizations in this industry) => Natural gas; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Natural gas, r0.namespace: freebase, r0.arg2: E.ON Gaz Romania, r0.rel: Organizations in this industry) => Natural gas; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Natural gas, r0.namespace: freebase, r0.arg2: GDF Suez Romania, r0.rel: Organizations in this industry) => Natural gas; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Natural gas, r0.namespace: freebase, r0.arg2: E.ON Gaz Romania, r0.rel: Organizations in this industry) => Natural gas
What is the major cities of romania?	financial services	-40.35500189876593	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Financial Services, r0.namespace: freebase, r0.arg2: Export-Import Bank of Romania, r0.rel: Organizations in this industry) => Financial Services; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Financial Services, r0.namespace: freebase, r0.arg2: Export-Import Bank of Romania, r0.rel: Organizations in this industry) => Financial Services
What is the major cities of romania?	real estate	-40.357651176141445	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Real Estate, r0.namespace: freebase, r0.arg2: Sonae Sierra Developments Romania S.R.L., r0.rel: Organizations in this industry) => Real Estate; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Real Estate, r0.namespace: freebase, r0.arg2: Sonae Sierra Developments Romania S.R.L., r0.rel: Organizations in this industry) => Real Estate
What is the major cities of romania?	chemicals	-40.35989287238226	what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Chemicals, r0.namespace: freebase, r0.arg2: Compania Hoteliera Intercontinental Romania SA Bucuresti, r0.rel: Organizations in this industry) => Chemicals; what be the major industry in romanium ? => $x: ($x, be the major industry in, romanium) => $x: ($x, industry in, romanium) => (r0.arg1: Chemicals, r0.namespace: freebase, r0.arg2: Compania Hoteliera Intercontinental Romania SA Bucuresti, r0.rel: Organizations in this industry) => Chemicals
What is the major cities of romania?	points	-40.48956613442469	what city be there in romanium ? => $x: ($x, "type", city) ($x, be there in, romanium) => $x: ($x, "type", city) ($x, be, romanium) => (r0.arg1: Points, r1.rel: is, r0.namespace: freebase, r1.arg2: Romania, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: point) => Points
What is the major cities of romania?	day	-40.48956613442469	what city be there in romanium ? => $x: ($x, "type", city) ($x, be there in, romanium) => $x: ($x, "type", city) ($x, be, romanium) => (r0.arg1: Day, r1.rel: is, r0.namespace: freebase, r1.arg2: Romania, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: day) => Day
What is the major cities of romania?	days	-40.48956613442469	what city be there in romanium ? => $x: ($x, "type", city) ($x, be there in, romanium) => $x: ($x, "type", city) ($x, be, romanium) => (r0.arg1: Days, r1.rel: is, r0.namespace: freebase, r1.arg2: Romania, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: day) => Days
What is the major cities of romania?	point	-40.48956613442469	what city be there in romanium ? => $x: ($x, "type", city) ($x, be there in, romanium) => $x: ($x, "type", city) ($x, be, romanium) => (r0.arg1: Point, r1.rel: is, r0.namespace: freebase, r1.arg2: Romania, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: point) => Point
What is the major cities of romania?	country	-40.657747952606506	what city be there in romanium ? => $x: ($x, "type", city) ($x, be there in, romanium) => $x: ($x, "type", city) ($x, be, romanium) => (r0.arg1: The Country, r1.rel: is, r0.namespace: freebase, r1.arg2: Romania, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: openie4, r1.arg1: the country) => The Country
What is the major cities of romania?	internet	-42.1539671068289	what city be there in romanium ? => $x: ($x, "is an example of", city) ($x, be there in, romanium) => $x: ($x, "is an example of", city) ($x, be, romanium) => (r0.arg1: The internet, r1.rel: can be accessed from, r0.namespace: reverb, r1.arg2: Romania, r0.arg2: an invisible city, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Internet) => The internet
What is the major cities of romania?	idea	-42.34721098707453	what city be there in romanium ? => $x: ($x, "is an example of", city) ($x, be there in, romanium) => $x: ($x, "is an example of", city) ($x, be, romanium) => (r0.arg1: the idea, r1.rel: was to represent, r0.namespace: reverb, r1.arg2: Romania, r0.arg2: Arizona?s biggest cities, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the idea) => the idea; what city be there in romanium ? => $x: ($x, "is an example of", city) ($x, be there in, romanium) => $x: ($x, "is an example of", city) ($x, be, romanium) => (r0.arg1: the idea, r1.rel: seems to be around in, r0.namespace: reverb, r1.arg2: Romania, r0.arg2: Arizona?s biggest cities, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The idea) => the idea
What is the major cities of romania?	history	-42.356992934307215	what city be there in romanium ? => $x: ($x, "is a kind of", city) ($x, be there in, romanium) => $x: ($x, "is a kind of", city) ($x, be, romanium) => (r0.arg1: history, r1.rel: is reaching for, r0.namespace: reverb, r1.arg2: Romania, r0.arg2: city?, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: history) => history
What is the major cities of romania?	romania	-43.874116923303305	what be the city of romanium ? => $x: (romanium, have city of, $x) => $x: (romanium, city of, $x) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania
What is the major cities of romania?	timi? county	-44.07184419603057	what be the city of romanium ? => $x: (romanium, have city of, $x) => $x: (romanium, city of, $x) => (r0.arg1: Romania Timi?oara, r0.namespace: reverb, r0.arg2: Timi? County, r0.rel: is the capital city of) => Timi? County
What is the major cities of romania?	solca	-48.17325782468755	what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Solca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a town in) => Solca; what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Solca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a town in) => Solca
What is the major cities of romania?	predeal	-48.35433249676872	what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Predeal, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the highest town in) => Predeal; what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Predeal, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the highest town in) => Predeal
What is the major cities of romania?	today gurgevo	-48.37098509741483	what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Today Gurgevo, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a town in) => Today Gurgevo; what be the major town in romanium ? => $x: ($x, be the major town in, romanium) => $x: ($x, town in, romanium) => (r0.arg1: Today Gurgevo, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a town in) => Today Gurgevo
Where does a bullfrog reproduce?	water	-39.95051919806107	where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water; where do the bullfrog live ? => $x: (the bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; where do the bullfrog live ? => $x: (the bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water
Where does a bullfrog reproduce?	pond	-40.11077811933461	where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do the bullfrog live ? => $x: (the bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: a pond, r0.rel: have vanished in) => a pond; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: a pond, r0.rel: have vanished in) => a pond; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: a pond, r0.rel: have vanished in) => a pond; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: a pond, r0.rel: have vanished in) => a pond; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond
Where does a bullfrog reproduce?	modest sized pond	-40.13159387014224	where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; where do the bullfrog live ? => $x: (the bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond
Where does a bullfrog reproduce?	africa rain forest	-40.13992017046529	where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest; where do the bullfrog live ? => $x: (the bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest
Where does a bullfrog reproduce?	canada	-48.29490122727704	where do a bullfrog produce ? => $x: (a bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do a bullfrog produce ? => $x: (a bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog Power 's green natural gas, r0.namespace: openie4, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do bullfrog produce ? => $x: (bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do bullfrog produce ? => $x: (bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog Power 's green natural gas, r0.namespace: openie4, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is found in) => Canada; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is found in) => Canada; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do the bullfrog produce ? => $x: (the bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do the bullfrog produce ? => $x: (the bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog Power 's green natural gas, r0.namespace: openie4, r0.arg2: Canada, r0.rel: is produced in) => Canada
Where does a bullfrog reproduce?	common	-49.02980436137423	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: do headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: lawyers and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: do headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: lawyers and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: do headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: do headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common
Where does a bullfrog reproduce?	california	-49.02980436137423	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: have become established in) => California; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: have become established in) => California; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: have become established in) => California; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: are an invasive species in) => California; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: are an invasive class in) => California; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: have become established in) => California; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: are an invasive species in) => California; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: are an invasive class in) => California
Where does a bullfrog reproduce?	williamsport	-49.038130661697295	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: The Bullfrog Brewery, r0.namespace: reverb, r0.arg2: Williamsport, r0.rel: has been in) => Williamsport; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: The Bullfrog Brewery, r0.namespace: reverb, r0.arg2: Williamsport, r0.rel: has been in) => Williamsport
Where does a bullfrog reproduce?	master time	-49.20810360001438	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Master Time, r0.rel: had a run in with) => Master Time; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Master Time, r0.rel: had a run in with) => Master Time; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Master Time, r0.rel: had a run in with) => Master Time; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Master Time, r0.rel: had a run in with) => Master Time
Where does a bullfrog reproduce?	roof	-49.215874813649236	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: the roof, r0.rel: have teeth in) => the roof; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: the roof, r0.rel: have teeth in) => the roof; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: the roof, r0.rel: have teeth in) => the roof; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: the roof, r0.rel: have teeth in) => the roof
Where does a bullfrog reproduce?	gardens	-49.22753163410151	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Foreign bullfrogs, r0.namespace: reverb, r0.arg2: the gardens, r0.rel: have found a convivial nest in) => the gardens; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Foreign bullfrogs, r0.namespace: reverb, r0.arg2: the gardens, r0.rel: have found a convivial nest in) => the gardens; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Foreign bullfrogs, r0.namespace: reverb, r0.arg2: the gardens, r0.rel: have found a convivial nest in) => the gardens; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Foreign bullfrogs, r0.namespace: reverb, r0.arg2: the gardens, r0.rel: have found a convivial nest in) => the gardens
Where does a bullfrog reproduce?	u.s. , canada ,	-49.22753163410151	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the U.S. , Canada ,, r0.rel: has had tremendous growth in) => the U.S. , Canada ,; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the U.S. , Canada ,, r0.rel: has had tremendous growth in) => the U.S. , Canada ,; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the U.S. , Canada ,, r0.rel: has had tremendous growth in) => the U.S. , Canada ,; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the U.S. , Canada ,, r0.rel: has had tremendous growth in) => the U.S. , Canada ,
Where does a bullfrog reproduce?	declines	-49.22753163410151	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: declines, r0.rel: have played in) => declines; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: declines, r0.rel: have played in) => declines; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: declines, r0.rel: have played in) => declines; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: declines, r0.rel: have played in) => declines
Where does a bullfrog reproduce?	permanent ponds	-49.23585793442456	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: the bullfrog tadpoles, r0.namespace: reverb, r0.arg2: permanent ponds, r0.rel: have advantages in) => permanent ponds; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: the bullfrog tadpoles, r0.namespace: reverb, r0.arg2: permanent ponds, r0.rel: have advantages in) => permanent ponds
Where does a bullfrog reproduce?	western us	-49.23585793442456	where do a bullfrog have ? => $x: (a bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: western US, r0.rel: have become invasive in) => western US; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: western US, r0.rel: have become invasive in) => western US; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: western US, r0.rel: have become invasive in) => western US; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: western US, r0.rel: have become invasive in) => western US
Where does a bullfrog reproduce?	mud	-53.117450790917346	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: mud, r0.rel: hide in) => mud; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: A bullfrog, r0.namespace: openie4, r0.arg2: mud, r0.rel: may bury itself in) => mud; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: mud, r0.rel: hide in) => mud; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: A bullfrog, r0.namespace: openie4, r0.arg2: mud, r0.rel: may bury itself in) => mud
Where does a bullfrog reproduce?	state	-53.117450790917346	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a state, r0.rel: invests in) => a state; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrog Jumped, r0.namespace: reverb, r0.arg2: the state, r0.rel: lived around) => the state; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a state, r0.rel: invests in) => a state; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrog Jumped, r0.namespace: reverb, r0.arg2: the state, r0.rel: lived around) => the state
Where does a bullfrog reproduce?	point pelee national park	-53.117450790917346	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: Point Pelee National Park, r0.rel: disappeared in) => Point Pelee National Park; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: Point Pelee National Park, r0.rel: disappeared in) => Point Pelee National Park
Where does a bullfrog reproduce?	yard	-53.1252220045522	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: yard, r0.rel: can enjoy a private fenced in back) => yard; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: yard, r0.rel: can enjoy a private fenced in back) => yard
Where does a bullfrog reproduce?	toronto	-53.1252220045522	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: landed in) => Toronto; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: landed in) => Toronto
Where does a bullfrog reproduce?	arizona	-53.1252220045522	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: Arizona, r0.rel: collected in) => Arizona; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: Arizona, r0.rel: collected in) => Arizona
Where does a bullfrog reproduce?	april	-53.13077287143423	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Habits Bullfrogs, r0.namespace: reverb, r0.arg2: April, r0.rel: are active in) => April; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Habits Bullfrogs, r0.namespace: reverb, r0.arg2: April, r0.rel: are active in) => April
Where does a bullfrog reproduce?	top	-53.13077287143423	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: added three runs in) => the top; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: opened the scoring in) => the top; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: added another two runs in) => the top; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: broke the game open in) => the top; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: added three runs in) => the top; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: opened the scoring in) => the top; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: added another two runs in) => the top; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the top, r0.rel: broke the game open in) => the top
Where does a bullfrog reproduce?	being	-53.13077287143423	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog County, r0.namespace: reverb, r0.arg2: being, r0.rel: came in to) => being; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog County, r0.namespace: reverb, r0.arg2: being, r0.rel: came in to) => being
Where does a bullfrog reproduce?	ponds	-53.13077287143423	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: ponds, r0.rel: are fairly common in) => ponds; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: ponds, r0.rel: are fairly common in) => ponds
Where does a bullfrog reproduce?	bottom	-53.13077287143423	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom, r0.rel: would rally in) => the bottom; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom, r0.rel: battled back in) => the bottom; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom, r0.rel: would rally in) => the bottom; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom, r0.rel: battled back in) => the bottom
Where does a bullfrog reproduce?	british columbia	-53.13493602159576	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: openie4, r0.arg2: British Columbia, r0.rel: is available in) => British Columbia; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: British Columbia, r0.rel: is now available in) => British Columbia; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: openie4, r0.arg2: British Columbia, r0.rel: is available in) => British Columbia; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: British Columbia, r0.rel: is now available in) => British Columbia
Where does a bullfrog reproduce?	alberta	-53.13493602159576	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Alberta, r0.rel: marked its first anniversary in) => Alberta; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Alberta, r0.rel: marked its first anniversary in) => Alberta
Where does a bullfrog reproduce?	calaveras county	-53.138174027276946	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: Calaveras County, r0.rel: are now the primary contestants in) => Calaveras County; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: Calaveras County, r0.rel: are now the primary contestants in) => Calaveras County
Where does a bullfrog reproduce?	app store	-53.29340382273402	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Lite, r0.namespace: openie4, r0.arg2: the App Store, r0.rel: is in) => the App Store; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Lite, r0.namespace: openie4, r0.arg2: the App Store, r0.rel: is in) => the App Store
Where does a bullfrog reproduce?	north america	-53.303117839777585	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: openie4, r0.arg2: North America, r0.rel: is the largest frog in) => North America; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: openie4, r0.arg2: North America, r0.rel: is the largest frog in) => North America
Where does a bullfrog reproduce?	water garden	-53.30352124319235	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: a bullfrog, r0.namespace: reverb, r0.arg2: the water garden, r0.rel: was installed in) => the water garden; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: a bullfrog, r0.namespace: reverb, r0.arg2: the water garden, r0.rel: was installed in) => the water garden
Where does a bullfrog reproduce?	ontario	-53.30894625000372	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog power, r0.namespace: openie4, r0.arg2: Ontario, r0.rel: is the first electricity retailer in) => Ontario; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog power, r0.namespace: openie4, r0.arg2: Ontario, r0.rel: is the first electricity retailer in) => Ontario
Where does a bullfrog reproduce?	right direction	-53.3118475435154	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the right direction, r0.rel: is a step in) => the right direction; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the right direction, r0.rel: is a step in) => the right direction
Where does a bullfrog reproduce?	one week	-53.3118475435154	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: one week, r0.rel: can do a 10k in) => one week; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: one week, r0.rel: can do a 10k in) => one week
Where does a bullfrog reproduce?	2005	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: openie4, r0.arg2: 2005, r0.rel: launched in) => 2005; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: 2005, r0.rel: launched in) => 2005; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: 2005, r0.rel: was founded in) => 2005; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: openie4, r0.arg2: 2005, r0.rel: launched in) => 2005; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: 2005, r0.rel: launched in) => 2005; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: 2005, r0.rel: was founded in) => 2005
Where does a bullfrog reproduce?	full voice	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: full voice, r0.rel: are in) => full voice; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: full voice, r0.rel: are in) => full voice
Where does a bullfrog reproduce?	consultation process	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the consultation process, r0.rel: participated in) => the consultation process; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the consultation process, r0.rel: participated in) => the consultation process
Where does a bullfrog reproduce?	field	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a field, r0.rel: landed in) => a field; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a field, r0.rel: landed in) => a field
Where does a bullfrog reproduce?	maritimes	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the Maritimes, r0.rel: launched in) => the Maritimes; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the Maritimes, r0.rel: launched in) => the Maritimes; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the Maritimes, r0.rel: launched in) => the Maritimes; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the Maritimes, r0.rel: launched in) => the Maritimes
Where does a bullfrog reproduce?	more sustainable future	-53.31517806364462	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a more sustainable future, r0.rel: invest in) => a more sustainable future; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: a more sustainable future, r0.rel: invest in) => a more sustainable future
Where does a bullfrog reproduce?	canadians	-53.318092268757695	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: Canadians, r0.rel: is a leader in offering) => Canadians; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: Canadians, r0.rel: is a leader in offering) => Canadians
Where does a bullfrog reproduce?	family ranidae	-53.318092268757695	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: openie4, r0.arg2: the Family Ranidae, r0.rel: is a large species in) => the Family Ranidae; where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: reverb, r0.arg2: the family Ranidae, r0.rel: is a large species in) => the family Ranidae; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: openie4, r0.arg2: the Family Ranidae, r0.rel: is a large species in) => the Family Ranidae; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The bullfrog, r0.namespace: reverb, r0.arg2: the family Ranidae, r0.rel: is a large species in) => the family Ranidae
Where does a bullfrog reproduce?	bottom half	-53.318092268757695	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom half, r0.rel: took a 3-2 lead in) => the bottom half; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: the Bullfrogs, r0.namespace: reverb, r0.arg2: the bottom half, r0.rel: took a 3-2 lead in) => the bottom half
Where does a bullfrog reproduce?	charlevoix	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog candles, r0.namespace: reverb, r0.arg2: Charlevoix, r0.rel: made in) => Charlevoix; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog candles, r0.namespace: reverb, r0.arg2: Charlevoix, r0.rel: made in) => Charlevoix
Where does a bullfrog reproduce?	second inning	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the second inning, r0.rel: pounced in) => the second inning; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: The Bullfrogs, r0.namespace: reverb, r0.arg2: the second inning, r0.rel: pounced in) => the second inning
Where does a bullfrog reproduce?	mail	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the mail, r0.rel: is in) => the mail; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the mail, r0.rel: is in) => the mail
Where does a bullfrog reproduce?	rhi	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Anaheim Bullfrogs, r0.namespace: reverb, r0.arg2: the RHI, r0.rel: played in) => the RHI; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: Anaheim Bullfrogs, r0.namespace: reverb, r0.arg2: the RHI, r0.rel: played in) => the RHI
Where does a bullfrog reproduce?	deeper water	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: deeper water, r0.rel: sit out in) => deeper water; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: deeper water, r0.rel: sit out in) => deeper water
Where does a bullfrog reproduce?	background	-53.32294927727948	where do a bullfrog conceive ? => $x: (a bullfrog, conceive in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the background, r0.rel: were singing in) => the background; where do a bullfrog recognize ? => $x: (a bullfrog, recognize in, $x) => $x: (bullfrog, in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the background, r0.rel: were singing in) => the background
What is located 90 degrees north at 90 degrees south?	north pole	-69.8017762324859	what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north, r0.rel: is) => the North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north, r0.rel: is) => the North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north, r0.rel: is) => the North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The north pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is) => The north pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is) => the North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: openie4, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The North Pole, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: is at) => The North Pole
What is located 90 degrees north at 90 degrees south?	image	-69.83132168703136	what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: the image, r0.namespace: reverb, r0.arg2: 90 degrees north latitude, r0.rel: are at) => the image
What is located 90 degrees north at 90 degrees south?	poles	-69.8535251545595	what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north 90 degree north ? => $x: ($x, be located at, 90 degree north 90 degree north) => $x: ($x, be, 90 degree north 90 degree north) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north south 90 degree ? => $x: ($x, be located at, 90 degree north south 90 degree) => $x: ($x, be, 90 degree north south 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north south 90 degree ? => $x: ($x, be located at, 90 degree north south 90 degree) => $x: ($x, be, 90 degree north south 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north south 90 degree ? => $x: ($x, be located at, 90 degree north south 90 degree) => $x: ($x, be, 90 degree north south 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north south 90 degree ? => $x: ($x, be located at, 90 degree north south 90 degree) => $x: ($x, be, 90 degree north south 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South, r0.rel: are at) => The poles; what be located at 90 degree north north 90 degree ? => $x: ($x, be located at, 90 degree north north 90 degree) => $x: ($x, be, 90 degree north north 90 degree) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles; who be located at 90 degree north 90 degree latitude ? => $x: ($x, be located at, 90 degree north 90 degree latitude) => $x: ($x, be, 90 degree north 90 degree latitude) => (r0.arg1: The poles, r0.namespace: reverb, r0.arg2: 90 degrees North and South latitude, r0.rel: are at) => The poles
Who wins the WWE title?	mark henry	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: another WWE Championship match, r0.rel: is scheduled to have) => Mark Henry; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry
Who wins the WWE title?	cm punk	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: their WWE Title, r0.rel: have taken) => CM Punk; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk
Who wins the WWE title?	triple h	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has held) => Triple H; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H
Who wins the WWE title?	undertaker	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker
Who wins the WWE title?	edge	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win the wwe champion ? => $x: ($x, win, the wwe champion) => $x: ($x, win, wwe champion) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: had stolen) => Edge; who win wwe champion ? => $x: ($x, win, wwe champion) => $x: ($x, win, wwe champion) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: EDGE, r0.namespace: reverb, r0.arg2: WWE., r0.rel: has had on) => EDGE; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge
Who wins the WWE title?	rob van dam	2.3824772954318405	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam
Who wins the WWE title?	john cena	2.3591636545272907	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: WWE, r0.rel: won his 9th World Title in) => John Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: WWE, r0.rel: won his 9th World Title in) => John Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: WWE, r0.rel: won his 9th World Title in) => John Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has fought in) => John Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: WWE, r0.rel: won his 9th World Title in) => John Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena
Who wins the WWE title?	tony atlas	2.3591636545272907	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas
Who wins the WWE title?	beth phoenix	2.3591636545272907	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Diva, r0.rel: wins) => Beth Phoenix; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Diva, r0.rel: wins) => Beth Phoenix; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Diva, r0.rel: wins) => Beth Phoenix; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Diva, r0.rel: wins) => Beth Phoenix; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix
Who wins the WWE title?	bob backlund	2.3591636545272907	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund
Who wins the WWE title?	eddie guerrero	2.3591636545272907	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: a successful WWE title defense, r0.rel: had made) => Eddie Guerrero; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero
Who wins the WWE title?	monday	2.3325194934935194	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday
Who wins the WWE title?	lex luger	2.3241931931704656	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger
Who wins the WWE title?	christian	2.3158668928474118	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian
Who wins the WWE title?	eddie	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie
Who wins the WWE title?	sheamus	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: his WWE US Championship title, r0.rel: has to defend) => Sheamus; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: his WWE US Championship title, r0.rel: has to defend) => Sheamus; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus
Who wins the WWE title?	hhh	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH
Who wins the WWE title?	wade barrett	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett
Who wins the WWE title?	miz	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has been in) => The Miz; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz
Who wins the WWE title?	jeff	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: WWE, r0.rel: had a wonderful run in) => Jeff; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff
Who wins the WWE title?	cena	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win at wwe title ? => $x: ($x, win at, wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at wwe title ? => $x: ($x, win at, wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has been in) => Cena; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena
Who wins the WWE title?	orton	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: had) => Orton; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has held) => Orton; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton
Who wins the WWE title?	batista	2.184750022704568	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has held) => Batista; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista
Who wins the WWE title?	emotional big show	2.1614363818000175	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show
Who wins the WWE title?	samoan bulldozer	2.1614363818000175	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer
Who wins the WWE title?	punk	2.1556079715738807	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has hoisted up) => Punk; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: his WWE Championship, r0.rel: will have to defend) => Punk; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk
Who wins the WWE title?	jan 2011	2.145893954530318	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011
Who wins the WWE title?	taker	2.0165682045227493	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker
Who wins the WWE title?	jericho	2.0165682045227493	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho
Who wins the WWE title?	barrett	2.0165682045227493	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Barrett, r0.namespace: reverb, r0.arg2: WWE, r0.rel: had a bright future with) => Barrett; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett
Who wins the WWE title?	thq	-32.26612665000708	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: THQ, r0.namespace: reverb, r0.arg2: their annual WWE title, r0.rel: has once again released) => THQ; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: THQ, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has unleashed) => THQ; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: THQ, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has had a long relationship with) => THQ
Who wins the WWE title?	show	-32.409455427290396	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Show, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: has held) => Show
Who wins the WWE title?	business	-32.4249978545601	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship title, r0.rel: have held) => the business; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: have held) => the business; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship title, r0.rel: have held) => the business
Who wins the WWE title?	raw	-32.444425888647224	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Raw, r0.namespace: reverb, r0.arg2: a WWE Title Match, r0.rel: has) => Raw
Who wins the WWE title?	jeff hardy	-32.473312913658575	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: WWE, r0.rel: had to leave) => Jeff Hardy; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jeff Hardy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jeff Hardy
Who wins the WWE title?	jerry ?the king ? lawler	-32.473312913658575	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Jerry ?The King ? Lawler, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jerry ?The King ? Lawler
Who wins the WWE title?	chris jericho	-32.473312913658575	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has kept) => Chris Jericho; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: WWE., r0.rel: has been fired from) => Chris Jericho; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Chris Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => Chris Jericho
Who wins the WWE title?	c.m. punk	-32.473312913658575	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the undisputed WWE Championship, r0.rel: wins) => C.M. Punk; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: C.M. Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: wins) => C.M. Punk
Who wins the WWE title?	rock	-32.473312913658575	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Rock, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has put) => Rock; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: The Rock, r0.namespace: reverb, r0.arg2: WWE, r0.rel: has come back to) => The Rock; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Rock, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the Rock
Who wins the WWE title?	randy orton	-32.49662655456312	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who have the wwe tittle ? => $x: ($x, have, the wwe tittle) => $x: ($x, have, wwe) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: WWE., r0.rel: have potential in) => Randy Orton; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Randy Orton, r0.namespace: reverb, r0.arg2: the WWE Intercontinental Championship, r0.rel: won) => Randy Orton
Who wins the WWE title?	booker t.	-32.49662655456312	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Booker T., r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: almost won) => Booker T.; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Booker T., r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: almost won) => Booker T.; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Booker T., r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: almost won) => Booker T.; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Booker T., r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: almost won) => Booker T.
Who wins the WWE title?	mysterio	-32.49662655456312	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Mysterio, r0.namespace: reverb, r0.arg2: the WWE Championship tournament, r0.rel: won) => Mysterio
Who wins the WWE title?	angle	-32.51216898183282	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle
Who wins the WWE title?	big show	-32.523270715596894	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, wwe tag) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show
Who wins the WWE title?	maryse	-32.53159701591995	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: Maryse, r0.namespace: reverb, r0.arg2: her first WWE Championship, r0.rel: won) => Maryse
Who wins the WWE title?	maryse ouellet	-32.53807302728232	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse Ouellet, r0.namespace: reverb, r0.arg2: the WWE Divas Championship, r0.rel: won her 2nd title of) => Maryse Ouellet; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse Ouellet, r0.namespace: reverb, r0.arg2: the WWE Divas Championship, r0.rel: won her 2nd title of) => Maryse Ouellet; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse Ouellet, r0.namespace: reverb, r0.arg2: the WWE Divas Championship, r0.rel: won her 2nd title of) => Maryse Ouellet; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: Maryse Ouellet, r0.namespace: reverb, r0.arg2: the WWE Divas Championship, r0.rel: won her 2nd title of) => Maryse Ouellet
Who wins the WWE title?	entrances celebrations	-32.55432360456767	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: entrances or celebrations, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: have) => entrances or celebrations
Who wins the WWE title?	score	-32.67104018638585	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: score, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => score
Who wins the WWE title?	pedigree	-32.67104018638585	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the Pedigree, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => the Pedigree
Who wins the WWE title?	ecw guy	-32.67104018638585	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win the wwe champ ? => $x: ($x, win, the wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win the wwe tittle ? => $x: ($x, win, the wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win wwe champ ? => $x: ($x, win, wwe champ) => $x: ($x, win, wwe) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win a wwe championship ? => $x: ($x, win, a wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win the wwe championship tittle ? => $x: ($x, win, the wwe championship tittle) => $x: ($x, win, wwe championship) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy; who win wwe tittle ? => $x: ($x, win, wwe tittle) => $x: ($x, win, wwe) => (r0.arg1: the ECW guy, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => the ECW guy
Who was the first credit card issued to?	businesses	2.3565732499823406	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; who be the first credit card be issue to ? => $x: (the first credit card, be issue to, $x) => $x: (first credit card, be issue to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses
Who was the first credit card issued to?	new customers	2.1701789971392245	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; who be the first credit card be issue to ? => $x: (the first credit card, be issue to, $x) => $x: (first credit card, be issue to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; who make the first issue with credit card ? => $x: ($x, make the first issue with, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers; who make the first issue with credit card ? => $x: ($x, make the first issue with, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers; who make the first issue on credit card ? => $x: ($x, make the first issue on, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers; who make the first issue on credit card ? => $x: ($x, make the first issue on, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers; who make the first issue for credit card ? => $x: ($x, make the first issue for, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers; who make the first issue for credit card ? => $x: ($x, make the first issue for, credit card) => $x: ($x, make first, credit card) => (r0.arg1: New customers, r0.namespace: reverb, r0.arg2: Credit Card, r0.rel: must make their first payment by) => New customers
Who was the first credit card issued to?	sistec holding ad	-57.15334288703157	who be the first credit card issue ? => $x: ($x, be, the first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be the first issue credit card ? => $x: ($x, be, the first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be issue the first credit card ? => $x: ($x, be, issue the first credit card) => $x: ($x, be, issue first credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be first credit card issue ? => $x: ($x, be, first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be first issue credit card ? => $x: ($x, be, first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD
Who was the first credit card issued to?	bank	-57.35149938637638	who be the first credit card issue ? => $x: ($x, be, the first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be the first issue credit card ? => $x: ($x, be, the first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be issue the first credit card ? => $x: ($x, be, issue the first credit card) => $x: ($x, be, issue first credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be first credit card issue ? => $x: ($x, be, first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be first issue credit card ? => $x: ($x, be, first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the bank, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: intends to issue) => the bank; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: The bank, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: refuses to issue) => The bank; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the bank, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: intends to issue) => the bank; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: The bank, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: refuses to issue) => The bank; who publish the issue with credit card ? => $x: ($x, publish the issue with, credit card) => $x: ($x, publish, credit card) => (r0.arg1: A bank, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: should publish) => A bank; who publish the issue with credit card ? => $x: ($x, publish the issue with, credit card) => $x: ($x, publish, credit card) => (r0.arg1: A bank, r0.namespace: reverb, r0.arg2: credit card merchant account, r0.rel: must publish by) => A bank; who publish the issue with credit card ? => $x: ($x, publish the issue with, credit card) => $x: ($x, publish, credit card) => (r0.arg1: A bank, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: should publish) => A bank; who publish the issue with credit card ? => $x: ($x, publish the issue with, credit card) => $x: ($x, publish, credit card) => (r0.arg1: A bank, r0.namespace: reverb, r0.arg2: credit card merchant account, r0.rel: must publish by) => A bank; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank
Who was the first credit card issued to?	refund	-59.7606716574053	who be the first issue to credit card ? => $x: ($x, be the first issue to, credit card) => $x: ($x, be first issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue to credit card ? => $x: ($x, be the first issue to, credit card) => $x: ($x, be first issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => a refund; who be the first issue by credit card ? => $x: ($x, be the first issue by, credit card) => $x: ($x, be first issue, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who be the first issue by credit card ? => $x: ($x, be the first issue by, credit card) => $x: ($x, be first issue, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued first to) => the refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: The refund, r0.namespace: openie4, r0.arg2: the original credit card, r0.rel: will be issued to) => The refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the credit card account, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No refund, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: will be issued to) => No refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: is issued back to) => the refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: is issued to) => the refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the same credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => No refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refund, r0.namespace: reverb, r0.arg2: your credit card account, r0.rel: will be issued to) => Refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: a credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: that credit card account, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: The refund, r0.namespace: openie4, r0.arg2: the original credit card, r0.rel: will be issued to) => The refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the credit card account, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No refund, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: will be issued to) => No refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: is issued back to) => the refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the refund, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: is issued to) => the refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: the same credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => No refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refund, r0.namespace: reverb, r0.arg2: your credit card account, r0.rel: will be issued to) => Refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: openie4, r0.arg2: a credit card, r0.rel: will be issued to) => a refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund, r0.namespace: reverb, r0.arg2: that credit card account, r0.rel: will be issued to) => a refund
Who was the first credit card issued to?	authorities	-63.91250827955582	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Authorities, r0.namespace: reverb, r0.arg2: the credit card fraud, r0.rel: were first alerted of) => Authorities
Who was the first credit card issued to?	payments	-63.917806834306845	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Payments, r0.namespace: reverb, r0.arg2: the credit card amount, r0.rel: would first be applied to) => Payments
Who was the first credit card issued to?	viagra	-63.917806834306845	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: openie4, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Viagra, r0.namespace: reverb, r0.arg2: a credit card information, r0.rel: is the first letter of) => Viagra
Who was the first credit card issued to?	petrol	-63.924165100008096	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: credit card, r0.rel: is first fully paid by) => Petrol
Who was the first credit card issued to?	funds	-63.931936313642936	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: your Credit Card, r0.rel: will always be withdrawn first to) => funds; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: the credit card-issuing bank, r0.rel: are withdrawn from) => funds; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: funds, r0.namespace: reverb, r0.arg2: the credit card-issuing bank, r0.rel: are withdrawn from) => funds
Who was the first credit card issued to?	required forms	-64.1102355522831	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: required forms, r0.namespace: reverb, r0.arg2: the Credit card, r0.rel: is the first step to get) => required forms
Who was the first credit card issued to?	merchant accounts	-64.1102355522831	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the Merchant accounts, r0.namespace: reverb, r0.arg2: credit card fraud, r0.rel: is the first sign of) => the Merchant accounts
Who was the first credit card issued to?	transaction	-64.1102355522831	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the transaction, r0.namespace: reverb, r0.arg2: the credit card processor, r0.rel: is first sent to) => the transaction; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: a transaction, r0.namespace: openie4, r0.arg2: to credit card issues, r0.rel: has been declined due) => a transaction; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: every transaction, r0.namespace: reverb, r0.arg2: the credit card issuing company, r0.rel: is sent to) => every transaction; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: a transaction, r0.namespace: openie4, r0.arg2: to credit card issues, r0.rel: has been declined due) => a transaction; who be the info on credit card issue ? => $x: ($x, be the info on, credit card issue) => $x: ($x, be, credit card issue) => (r0.arg1: every transaction, r0.namespace: reverb, r0.arg2: the credit card issuing company, r0.rel: is sent to) => every transaction
Who was the first credit card issued to?	gateway	-64.1102355522831	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: the proposed credit card, r0.rel: is first the validity of) => The Gateway
Who was the first credit card issued to?	balance	-64.1102355522831	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: balance, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will first be applied to) => balance
Who was the first credit card issued to?	personal credit	-64.11553410703412	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: personal credit, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: is the first step to getting) => personal credit
Who was the first credit card issued to?	amounts	-64.11553410703412	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: amounts, r0.namespace: reverb, r0.arg2: the credit or debit card, r0.rel: shall first be credited to) => amounts
Who was the first credit card issued to?	americans	-64.11671156364547	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: were first introduced to) => Americans
Who was the first credit card issued to?	withdrawals	-64.12189237273537	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Withdrawals, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: are first credited back to) => Withdrawals
Who was the first credit card issued to?	merchant	-64.1261312165362	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: the merchant, r0.namespace: reverb, r0.arg2: a credit card fraud, r0.rel: first is treated as) => the merchant
Who was the first credit card issued to?	credit balances	-64.1261312165362	who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances; who be the first issue with credit card ? => $x: ($x, be the first issue with, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances; who be the first issue on credit card ? => $x: ($x, be the first issue on, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances; who be the first issue for credit card ? => $x: ($x, be the first issue for, credit card) => $x: ($x, be first, credit card) => (r0.arg1: Credit balances, r0.namespace: reverb, r0.arg2: a credit card, r0.rel: will be first refunded to) => Credit balances
Who was the first credit card issued to?	lenders	-66.5089686977376	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: lenders, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => lenders; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: lenders, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: use to issue) => lenders; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: lenders, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => lenders; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: lenders, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: use to issue) => lenders
Who was the first credit card issued to?	trade names	-66.52062551818987	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: trade names, r0.namespace: reverb, r0.arg2: your credit card account, r0.rel: issue a credit to) => trade names; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: trade names, r0.namespace: reverb, r0.arg2: your credit card account, r0.rel: issue a credit to) => trade names
Who was the first credit card issued to?	chase bank	-66.62228160909997	who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: Chase Bank, r0.namespace: reverb, r0.arg2: my credit cards, r0.rel: issued one of) => Chase Bank; who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: Chase Bank, r0.namespace: reverb, r0.arg2: my credit cards, r0.rel: issued one of) => Chase Bank
Who was the first credit card issued to?	citigroup	-66.66882421559635	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Citigroup, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Citigroup; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Citigroup, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Citigroup
Who was the first credit card issued to?	american financial institutions	-66.66882421559635	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: American financial institutions, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => American financial institutions; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: American financial institutions, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => American financial institutions
Who was the first credit card issued to?	citibank	-66.66882421559635	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Citibank, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Citibank; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Citibank, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Citibank
Who was the first credit card issued to?	hotel	-66.68880733637168	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Hotel, r0.namespace: openie4, r0.arg2: one of their credit cards, r0.rel: to issue) => Hotel; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Hotel, r0.namespace: openie4, r0.arg2: one of their credit cards, r0.rel: to issue) => Hotel
Who was the first credit card issued to?	refunds	-66.69212494489952	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: may be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: are issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: are issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the payment credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: must be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: may be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: are issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: are issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the payment credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: must be issued to) => Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued to) => Refunds
Who was the first credit card issued to?	credit order refunds	-66.69212494489952	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit order refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued to) => Credit order refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit order refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued to) => Credit order refunds
Who was the first credit card issued to?	credit	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: the credit card account, r0.rel: will be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => No credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: A credit, r0.namespace: reverb, r0.arg2: the buyers credit card, r0.rel: will be issued to) => A credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: can be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: is issued directly to) => Credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card company, r0.rel: is issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: the credit card account, r0.rel: will be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: No credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => No credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: A credit, r0.namespace: reverb, r0.arg2: the buyers credit card, r0.rel: will be issued to) => A credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: can be issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: is issued directly to) => Credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: reverb, r0.arg2: your credit card company, r0.rel: is issued to) => a credit; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a credit, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a credit
Who was the first credit card issued to?	credit card payment refunds	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card payment refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card payment refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card payment refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card payment refunds
Who was the first credit card issued to?	credit refund	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: A credit refund, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: is issued to) => A credit refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: A credit refund, r0.namespace: reverb, r0.arg2: the same credit card, r0.rel: is issued to) => A credit refund
Who was the first credit card issued to?	account balance refunds	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Account balance refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued back to) => Account balance refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Account balance refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued back to) => Account balance refunds
Who was the first credit card issued to?	refunds refunds	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued directly to) => Refunds Refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Refunds Refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: are issued directly to) => Refunds Refunds
Who was the first credit card issued to?	credit card refunds	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card refunds, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card refunds, r0.namespace: openie4, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credit card refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credit card refunds
Who was the first credit card issued to?	credits credits/refunds	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credits Credits/refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credits Credits/refunds; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credits Credits/refunds, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => Credits Credits/refunds
Who was the first credit card issued to?	10 % refund	-66.70021995910248	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a 10 % refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => a 10 % refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a 10 % refund, r0.namespace: reverb, r0.arg2: the credit card, r0.rel: will be issued to) => a 10 % refund
Who was the first credit card issued to?	credits charges	-66.70669597046486	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credits or charges, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => Credits or charges; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Credits or charges, r0.namespace: reverb, r0.arg2: the original credit card, r0.rel: will be issued to) => Credits or charges
Who was the first credit card issued to?	?john doe? summonses	-66.70669597046486	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: ?John Doe? summonses, r0.namespace: reverb, r0.arg2: credit card companies, r0.rel: issued to) => ?John Doe? summonses; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: ?John Doe? summonses, r0.namespace: reverb, r0.arg2: credit card companies, r0.rel: issued to) => ?John Doe? summonses
Who was the first credit card issued to?	banks	-66.70669597046486	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the banks, r0.namespace: openie4, r0.arg2: Credit cards, r0.rel: to issue) => the banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Banks, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: began to issue) => banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: openie4, r0.arg2: fewer credit cards, r0.rel: to issue) => banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: openie4, r0.arg2: credit or debit cards, r0.rel: to issue) => banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the banks, r0.namespace: openie4, r0.arg2: Credit cards, r0.rel: to issue) => the banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Banks, r0.namespace: openie4, r0.arg2: credit cards, r0.rel: to issue) => Banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: began to issue) => banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: openie4, r0.arg2: fewer credit cards, r0.rel: to issue) => banks; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: banks, r0.namespace: openie4, r0.arg2: credit or debit cards, r0.rel: to issue) => banks; who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issue hundreds of) => banks; who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issue these types of) => banks; who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issue hundreds of) => banks; who invent the first issue of credit card ? => $x: ($x, invent the first issue of, credit card) => $x: ($x, issue of, credit card) => (r0.arg1: banks, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: issue these types of) => banks
Who was the first credit card issued to?	minimum information	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Minimum information, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: is needed to issue) => Minimum information; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Minimum information, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: is needed to issue) => Minimum information
Who was the first credit card issued to?	prompt refund	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a prompt refund, r0.namespace: reverb, r0.arg2: my credit card, r0.rel: was issued to) => a prompt refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a prompt refund, r0.namespace: reverb, r0.arg2: my credit card, r0.rel: was issued to) => a prompt refund
Who was the first credit card issued to?	first three toll tags	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the first three Toll Tags, r0.namespace: reverb, r0.arg2: a credit card account, r0.rel: issued to) => the first three Toll Tags; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the first three Toll Tags, r0.namespace: reverb, r0.arg2: a credit card account, r0.rel: issued to) => the first three Toll Tags
Who was the first credit card issued to?	more card issuers	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: more card issuers, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: are expected to issue) => more card issuers; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: more card issuers, r0.namespace: reverb, r0.arg2: credit cards, r0.rel: are expected to issue) => more card issuers
Who was the first credit card issued to?	refund check	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund check, r0.namespace: reverb, r0.arg2: a credit card account, r0.rel: issue a credit to) => a refund check; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a refund check, r0.namespace: reverb, r0.arg2: a credit card account, r0.rel: issue a credit to) => a refund check
Who was the first credit card issued to?	poor way	-66.71317198182723	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a poor way, r0.namespace: reverb, r0.arg2: prepaid credit cards, r0.rel: is to issue) => a poor way; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a poor way, r0.namespace: reverb, r0.arg2: prepaid credit cards, r0.rel: is to issue) => a poor way
Who was the first credit card issued to?	merchandise	-66.71835279091714	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the merchandise, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => the merchandise; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: the merchandise, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => the merchandise
Who was the first credit card issued to?	additional $ 60 charge	-66.71835279091714	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: An additional $ 60 charge, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => An additional $ 60 charge; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: An additional $ 60 charge, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => An additional $ 60 charge
Who was the first credit card issued to?	full refund	-66.71835279091714	who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Full refund, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => Full refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a full refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a full refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: Full refund, r0.namespace: reverb, r0.arg2: your credit card, r0.rel: will be issued to) => Full refund; who invent the first issue to credit card ? => $x: ($x, invent the first issue to, credit card) => $x: ($x, issue to, credit card) => (r0.arg1: a full refund, r0.namespace: openie4, r0.arg2: your credit card, r0.rel: will be issued to) => a full refund
What are the different units of capacitor?	component 10	-54.29095634091583	what be the different unit in capacitor ? => $x: ($x, be the different unit in, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different unit in capacitor ? => $x: ($x, be the different unit in, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different grouping of capacitor ? => $x: ($x, be the different grouping of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different grouping of capacitor ? => $x: ($x, be the different grouping of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be different unit in capacitor ? => $x: ($x, be different unit in, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be different unit in capacitor ? => $x: ($x, be different unit in, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different patr of capacitor ? => $x: ($x, be the different patr of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different patr of capacitor ? => $x: ($x, be the different patr of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different untus of capacitor ? => $x: ($x, be the different untus of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different untus of capacitor ? => $x: ($x, be the different untus of, capacitor) => $x: ($x, be different of, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different measurement for capacitor ? => $x: ($x, be the different measurement for, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10; what be the different measurement for capacitor ? => $x: ($x, be the different measurement for, capacitor) => $x: ($x, be different, capacitor) => (r0.arg1: the component 10, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a different type of) => the component 10
What are the different units of capacitor?	motors	-55.741104170465036	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The motors, r0.namespace: reverb, r0.arg2: the capacitor run type, r0.rel: are of) => The motors; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The motors, r0.namespace: reverb, r0.arg2: the capacitor run type, r0.rel: are of) => The motors
What are the different units of capacitor?	inductor	-55.741104170465036	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: an inductor, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the opposite of) => an inductor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: an inductor, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the opposite of) => an inductor
What are the different units of capacitor?	heat	-55.741104170465036	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Heat, r0.namespace: reverb, r0.arg2: electrolytic capacitors, r0.rel: is the enemy of) => Heat; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Heat, r0.namespace: reverb, r0.arg2: electrolytic capacitors, r0.rel: is the enemy of) => Heat
What are the different units of capacitor?	silicon	-55.747580181827416	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: silicon, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: happened to be a part of) => silicon; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: silicon, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: happened to be a part of) => silicon
What are the different units of capacitor?	capacitance	-55.747580181827416	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: openie4, r0.arg2: a capacitor, r0.rel: is the property of) => Capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: openie4, r0.arg2: the capacitor, r0.rel: is a physical property of) => Capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A capacitance, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the electric capacity of) => A capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is a physical property of) => Capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: openie4, r0.arg2: a capacitor, r0.rel: is the property of) => Capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: openie4, r0.arg2: the capacitor, r0.rel: is a physical property of) => Capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A capacitance, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the electric capacity of) => A capacitance; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitance, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is a physical property of) => Capacitance
What are the different units of capacitor?	model	-55.75567519603038	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: model, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is one of) => model; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: model, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is one of) => model
What are the different units of capacitor?	inductors	-55.9009596883238	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: inductors, r0.namespace: openie4, r0.arg2: capacitors, r0.rel: are the opposite of) => inductors; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: inductors, r0.namespace: openie4, r0.arg2: capacitors, r0.rel: are the opposite of) => inductors
What are the different units of capacitor?	electrolytic capacitor	-55.9238570142122	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: An electrolytic capacitor, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a type of) => An electrolytic capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: An electrolytic capacitor, r0.namespace: openie4, r0.arg2: capacitor, r0.rel: is a type of) => An electrolytic capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: An electrolytic capacitor, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is a type of) => An electrolytic capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: An electrolytic capacitor, r0.namespace: openie4, r0.arg2: capacitor, r0.rel: is a type of) => An electrolytic capacitor
What are the different units of capacitor?	ttest	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Ttest, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the temperature of) => Ttest; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Ttest, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the temperature of) => Ttest
What are the different units of capacitor?	switched-capacitor	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the switched-capacitor, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is the use of) => the switched-capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the switched-capacitor, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is the use of) => the switched-capacitor
What are the different units of capacitor?	cv here c	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: CV Here C, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the capacitance of) => CV Here C; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: CV Here C, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the capacitance of) => CV Here C
What are the different units of capacitor?	ohms c	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: ohms and C, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the value of) => ohms and C; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: ohms and C, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the value of) => ohms and C
What are the different units of capacitor?	rc = 2 ms	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: RC = 2 ms, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the capacitance of) => RC = 2 ms; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: RC = 2 ms, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the capacitance of) => RC = 2 ms
What are the different units of capacitor?	vacuum	-55.93050514286925	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the vacuum, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the dielectric of) => the vacuum; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the vacuum, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is the dielectric of) => the vacuum
What are the different units of capacitor?	ca	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Ca, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is the actual value of) => Ca; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Ca, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is the actual value of) => Ca
What are the different units of capacitor?	farad	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The farad, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the capacitance of) => The farad; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The farad, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the capacitance of) => The farad
What are the different units of capacitor?	easy question	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Easy question, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is the overall tolerance of) => Easy question; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Easy question, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is the overall tolerance of) => Easy question
What are the different units of capacitor?	invention	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the invention, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the discharge of) => the invention; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the invention, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the discharge of) => the invention
What are the different units of capacitor?	capacitor c4	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitor C4, r0.namespace: reverb, r0.arg2: capacitor 20, r0.rel: is the equivalent of) => Capacitor C4; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Capacitor C4, r0.namespace: reverb, r0.arg2: capacitor 20, r0.rel: is the equivalent of) => Capacitor C4
What are the different units of capacitor?	next step	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Next step, r0.namespace: reverb, r0.arg2: ceramic capacitors, r0.rel: is the placement of) => Next step; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Next step, r0.namespace: reverb, r0.arg2: ceramic capacitors, r0.rel: is the placement of) => Next step
What are the different units of capacitor?	1970 jaco electronics	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 1970 Jaco Electronics, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: was the largest marketer of) => 1970 Jaco Electronics; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 1970 Jaco Electronics, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: was the largest marketer of) => 1970 Jaco Electronics
What are the different units of capacitor?	y22	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Y22, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is just the admittance of) => Y22; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Y22, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is just the admittance of) => Y22
What are the different units of capacitor?	parallel plate capacitor	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The parallel plate capacitor, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is the simplest form of) => The parallel plate capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The parallel plate capacitor, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: is the simplest form of) => The parallel plate capacitor
What are the different units of capacitor?	plasma ball	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a plasma ball, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is one side of) => a plasma ball; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a plasma ball, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is one side of) => a plasma ball
What are the different units of capacitor?	similar example	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A similar example, r0.namespace: reverb, r0.arg2: electrolytic capacitors, r0.rel: is the use of) => A similar example; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A similar example, r0.namespace: reverb, r0.arg2: electrolytic capacitors, r0.rel: is the use of) => A similar example
What are the different units of capacitor?	two conducting plates	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: two conducting plates, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the construction of) => two conducting plates; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: two conducting plates, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the construction of) => two conducting plates
What are the different units of capacitor?	circuit	-55.93883144319231	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the circuit, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the inclusion of) => the circuit; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the circuit, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is the inclusion of) => the circuit
What are the different units of capacitor?	leyden jar	-55.94166604545873	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The Leyden jar, r0.namespace: openie4, r0.arg2: capacitor, r0.rel: [is] a type of) => The Leyden jar; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A Leyden Jar, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: was an early example of) => A Leyden Jar; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The Leyden jar, r0.namespace: openie4, r0.arg2: capacitor, r0.rel: [is] a type of) => The Leyden jar; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A Leyden Jar, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: was an early example of) => A Leyden Jar
What are the different units of capacitor?	meter	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the meter, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is reading the exact value of) => the meter; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the meter, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is reading the exact value of) => the meter
What are the different units of capacitor?	second article	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The second article, r0.namespace: reverb, r0.arg2: the Cathode Capacitor, r0.rel: is ? Effects of) => The second article; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The second article, r0.namespace: reverb, r0.arg2: the Cathode Capacitor, r0.rel: is ? Effects of) => The second article
What are the different units of capacitor?	thick insulation	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: thick insulation, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: had been blown off of) => thick insulation; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: thick insulation, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: had been blown off of) => thick insulation
What are the different units of capacitor?	flash circuit	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the flash circuit, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is a direct short of) => the flash circuit; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the flash circuit, r0.namespace: reverb, r0.arg2: the capacitor, r0.rel: is a direct short of) => the flash circuit
What are the different units of capacitor?	signal	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a signal, r0.namespace: reverb, r0.arg2: a clamping capacitor, r0.rel: is the use of) => a signal; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a signal, r0.namespace: reverb, r0.arg2: a clamping capacitor, r0.rel: is the use of) => a signal
What are the different units of capacitor?	capacitor	-55.94530745455468	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The capacitor, r0.namespace: reverb, r0.arg2: the capacitors, r0.rel: are the actual original sizes of) => The capacitor; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The capacitor, r0.namespace: reverb, r0.arg2: the capacitors, r0.rel: are the actual original sizes of) => The capacitor
What are the different units of capacitor?	tesla engineers	-55.94715774351536	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Tesla engineers, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: are aware of) => Tesla engineers; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Tesla engineers, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: are aware of) => Tesla engineers
What are the different units of capacitor?	process	-55.95048826364459	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the process, r0.namespace: reverb, r0.arg2: a new capacitor station, r0.rel: is the construction of) => the process; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the process, r0.namespace: reverb, r0.arg2: a new capacitor station, r0.rel: is the construction of) => the process
What are the different units of capacitor?	restorer	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a restorer, r0.namespace: reverb, r0.arg2: old capacitors, r0.rel: be wary of) => a restorer; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: a restorer, r0.namespace: reverb, r0.arg2: old capacitors, r0.rel: be wary of) => a restorer
What are the different units of capacitor?	dc-link voltage	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the DC-link voltage, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is composed of) => the DC-link voltage; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the DC-link voltage, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is composed of) => the DC-link voltage
What are the different units of capacitor?	high voltage module	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: high voltage module, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is capable of charging) => high voltage module; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: high voltage module, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is capable of charging) => high voltage module
What are the different units of capacitor?	parallel plates	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The parallel plates, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: are a form of) => The parallel plates; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The parallel plates, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: are a form of) => The parallel plates
What are the different units of capacitor?	4 lines	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 4 lines, r0.namespace: reverb, r0.arg2: filter capacitors, r0.rel: are provided of) => 4 lines; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 4 lines, r0.namespace: reverb, r0.arg2: filter capacitors, r0.rel: are provided of) => 4 lines
What are the different units of capacitor?	sure power	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: sure the power, r0.namespace: reverb, r0.arg2: any capacitors, r0.rel: be aware of) => sure the power; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: sure the power, r0.namespace: reverb, r0.arg2: any capacitors, r0.rel: be aware of) => sure the power
What are the different units of capacitor?	study	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The study, r0.namespace: reverb, r0.arg2: one Capacitor, r0.rel: can be of) => The study; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The study, r0.namespace: reverb, r0.arg2: one Capacitor, r0.rel: can be of) => The study
What are the different units of capacitor?	orgone accumulators	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Orgone accumulators, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: are a type of) => Orgone accumulators; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Orgone accumulators, r0.namespace: reverb, r0.arg2: capacitor, r0.rel: are a type of) => Orgone accumulators
What are the different units of capacitor?	probable problem	-55.95340246875766	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The probable problem, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is a pair of) => The probable problem; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: The probable problem, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is a pair of) => The probable problem
What are the different units of capacitor?	thd hot plate?	-55.95825947727944	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A THD Hot Plate?, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is a tuned network of) => A THD Hot Plate?; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: A THD Hot Plate?, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: is a tuned network of) => A THD Hot Plate?
What are the different units of capacitor?	09/03/2012 which	-55.95825947727944	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 09/03/2012 which, r0.namespace: reverb, r0.arg2: faulty capacitors, r0.rel: is a result of) => 09/03/2012 which; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: 09/03/2012 which, r0.namespace: reverb, r0.arg2: faulty capacitors, r0.rel: is a result of) => 09/03/2012 which
What are the different units of capacitor?	sensor element	-55.95825947727944	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the sensor element, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is built out of) => the sensor element; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: the sensor element, r0.namespace: reverb, r0.arg2: a capacitor, r0.rel: is built out of) => the sensor element
What are the different units of capacitor?	memory drum	-55.95825947727944	what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Memory drum, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: was a large array of) => Memory drum; what be the different part of capacitor ? => $x: ($x, be the different part of, capacitor) => $x: ($x, be of, capacitor) => (r0.arg1: Memory drum, r0.namespace: reverb, r0.arg2: capacitors, r0.rel: was a large array of) => Memory drum
What is a tortoises habitat like?	management	-49.5840650204606	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management
What is a tortoises habitat like?	grasses bromus rubens	-49.758478652283316	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens
What is a tortoises habitat like?	private corporate ownership	-49.77304967784866	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership
What is a tortoises habitat like?	development	-49.77790668637044	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development
What is a tortoises habitat like?	number	-49.77790668637044	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number
What is a tortoises habitat like?	positions	-49.78179229318786	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions; what be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions; what be the tortoise habitat look like ? => $x: (the tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions; who be tortoise habitat look like ? => $x: (tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like in, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions; when be tortoise habitat look like ? => $x: (tortoise habitat, be look like on, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions
What is a tortoises habitat like?	water	-52.83245935260632	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the desert tortoise, r0.namespace: reverb, r0.arg2: water, r0.rel: does find) => water
What is a tortoises habitat like?	three days	-52.83245935260632	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: three days, r0.rel: did this for) => three days
What is a tortoises habitat like?	thunder	-52.838704077848604	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: Thunder, r0.rel: does win the race in) => Thunder
What is a tortoises habitat like?	liquid	-52.843561086370386	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: liquid, r0.rel: do pass) => liquid
What is a tortoises habitat like?	warren buffett	-52.843561086370386	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: Warren Buffett, r0.rel: does carry a picture of) => Warren Buffett
What is a tortoises habitat like?	windows explorer	-52.85327510341395	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: good old Tortoise, r0.namespace: reverb, r0.arg2: Windows Explorer, r0.rel: does for) => Windows Explorer; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the TortoiseSVN client, r0.namespace: reverb, r0.arg2: Windows Explorer, r0.rel: does with) => Windows Explorer
What is a tortoises habitat like?	shape shifting	-52.85651310909513	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoise, r0.namespace: reverb, r0.arg2: shape shifting, r0.rel: have done a lot of) => shape shifting
What is a tortoises habitat like?	uv rays	-52.85651310909513	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: UV rays, r0.rel: do need daily exposure to) => UV rays
What is a tortoises habitat like?	yoga	-52.861222935540496	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoise, r0.namespace: openie4, r0.arg2: yoga, r0.rel: likes to do) => yoga; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Mar 20 , 2012 Tortoise, r0.namespace: reverb, r0.arg2: yoga, r0.rel: likes to do) => yoga
What is a tortoises habitat like?	windows	-52.86576455389853	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: TortoiseSVN, r0.namespace: reverb, r0.arg2: Windows, r0.rel: does on) => Windows
What is a tortoises habitat like?	laugh	-52.86576455389853	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: ?Tortoise, r0.namespace: reverb, r0.arg2: laugh, r0.rel: did n?t) => laugh
What is a tortoises habitat like?	hare	-52.99231487046508	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the Tortoise, r0.namespace: openie4, r0.arg2: the Hare, r0.rel: did to) => the Hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the Tortoise, r0.namespace: reverb, r0.arg2: the Hare, r0.rel: did to) => the Hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: openie4, r0.arg2: the hare, r0.rel: did beat) => the hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: the hare, r0.rel: really does beat) => the hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: openie4, r0.arg2: the hare, r0.rel: really does beat) => the hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The Tortoise, r0.namespace: reverb, r0.arg2: the Hare, r0.rel: Does n?t Beat) => the Hare; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the hare, r0.rel: does n?t always beat) => the hare; what be the tortoise live like ? => $x: (the tortoise, be live like, $x) => $x: (tortoise, be, $x) => (r0.arg1: Tortoise, r0.namespace: reverb, r0.arg2: Hare, r0.rel: is) => Hare; what be a tortoise live like ? => $x: (a tortoise, be live like, $x) => $x: (tortoise, be, $x) => (r0.arg1: Tortoise, r0.namespace: reverb, r0.arg2: Hare, r0.rel: is) => Hare
What is a tortoises habitat like?	good job	-53.01020350455826	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the Tortoise, r0.namespace: reverb, r0.arg2: a good job, r0.rel: does) => a good job
What is a tortoises habitat like?	fox	-53.01020350455826	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: the fox, r0.rel: does) => the fox
What is a tortoises habitat like?	race	-53.021860325010536	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: openie4, r0.arg2: the race, r0.rel: does win) => the race; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: the race, r0.rel: does win) => the race; what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: the race, r0.rel: really did win) => the race
What is a tortoises habitat like?	huge tortoise stand	-53.021860325010536	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the huge tortoise, r0.namespace: reverb, r0.arg2: the huge tortoise stand, r0.rel: does) => the huge tortoise stand
What is a tortoises habitat like?	snoozing hare	-53.021860325010536	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the snoozing hare, r0.rel: did clobber) => the snoozing hare
What is a tortoises habitat like?	pool	-53.030186625333585	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the pool, r0.rel: did n?t mind) => the pool
What is a tortoises habitat like?	hare--i	-53.030186625333585	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the hare--I, r0.rel: really does beat) => the hare--I
What is a tortoises habitat like?	vocalize	-53.03351714546281	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: vocalize, r0.rel: do) => vocalize
What is a tortoises habitat like?	tour	-53.03643135057588	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the Two Tortoise Rock loop, r0.namespace: reverb, r0.arg2: a Tour, r0.rel: do) => a Tour
What is a tortoises habitat like?	disappoint	-53.03643135057588	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoises and frogs, r0.namespace: reverb, r0.arg2: disappoint, r0.rel: did n?t) => disappoint
What is a tortoises habitat like?	foot , horseback	-53.03643135057588	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoises, r0.namespace: reverb, r0.arg2: foot , horseback, r0.rel: can be done on) => foot , horseback
What is a tortoises habitat like?	heat lamps	-53.04128835909766	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: heat lamps, r0.rel: do need) => heat lamps
What is a tortoises habitat like?	face plant	-53.04128835909766	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: a tortoise, r0.namespace: reverb, r0.arg2: a face plant, r0.rel: do) => a face plant
What is a tortoises habitat like?	chinese calendar	-53.04517396591508	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: the Chinese calendar, r0.rel: does n?t have a year in) => the Chinese calendar
What is a tortoises habitat like?	rabbit	-53.04517396591508	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the rabbit, r0.rel: does n?t give any thought to) => the rabbit
What is a tortoises habitat like?	pull	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoise Git, r0.namespace: reverb, r0.arg2: a pull, r0.rel: would do) => a pull
What is a tortoises habitat like?	thiz	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoise, r0.namespace: reverb, r0.arg2: thiz, r0.rel: again i do) => thiz
What is a tortoises habitat like?	help spread information	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise?s environment, r0.namespace: reverb, r0.arg2: help spread information, r0.rel: Do) => help spread information
What is a tortoises habitat like?	lot	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: my tortoises, r0.namespace: reverb, r0.arg2: a lot, r0.rel: do require) => a lot
What is a tortoises habitat like?	can-can	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: ' tortoise, r0.namespace: reverb, r0.arg2: the can-can, r0.rel: did for) => the can-can
What is a tortoises habitat like?	fare	-53.046839225979696	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Most land tortoises, r0.namespace: reverb, r0.arg2: fare, r0.rel: do) => fare
What is a tortoises habitat like?	large scale solar projects	-53.05100237614123	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: large scale solar projects, r0.rel: have to do with) => large scale solar projects
What is a tortoises habitat like?	same slower	-53.05100237614123	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: a large Leopard Tortoise, r0.namespace: reverb, r0.arg2: the same but slower, r0.rel: did) => the same but slower
What is a tortoises habitat like?	? third	-53.05100237614123	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: an indefatigable tortoise, r0.namespace: reverb, r0.arg2: ? Third, r0.rel: will do) => ? Third
What is a tortoises habitat like?	fund raising projects	-53.05100237614123	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoise, r0.namespace: reverb, r0.arg2: fund raising projects, r0.rel: will continue to do) => fund raising projects
What is a tortoises habitat like?	minimal bureaucracy	-53.05424038182241	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: minimal bureaucracy, r0.rel: get things done with) => minimal bureaucracy; what do a tortoise habitat look like ? => $x: (a tortoise habitat, do look like, $x) => $x: (tortoise habitat, do, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: minimal bureaucracy, r0.rel: get things done with) => minimal bureaucracy; what do the tortoise habitat look like ? => $x: (the tortoise habitat, do look like, $x) => $x: (tortoise habitat, do, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: minimal bureaucracy, r0.rel: get things done with) => minimal bureaucracy
What is a tortoises habitat like?	march hare	-53.05424038182241	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: a tortoise, r0.namespace: reverb, r0.arg2: a March hare, r0.rel: have to do with) => a March hare
What is a tortoises habitat like?	sharp teeth	-53.05424038182241	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: large tortoises but dogs, r0.namespace: reverb, r0.arg2: sharp teeth, r0.rel: do have) => sharp teeth
What is a tortoises habitat like?	svn checkouts commits	-53.05424038182241	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: Tortoise SVN, r0.namespace: reverb, r0.arg2: SVN checkouts and commits, r0.rel: is good for doing) => SVN checkouts and commits
What is a tortoises habitat like?	use	-53.05683078636736	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: the tortoise-shell, r0.namespace: reverb, r0.arg2: the use, r0.rel: had nothing to do with) => the use
What is a tortoises habitat like?	sparse checkout	-53.06349182662581	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: TortoiseSVN, r0.namespace: reverb, r0.arg2: a sparse checkout, r0.rel: will do) => a sparse checkout
What is a tortoises habitat like?	n?t* roar	-53.06557340170656	what do the tortoise live like ? => $x: (the tortoise, do live like, $x) => $x: (tortoise, do, $x) => (r0.arg1: this little tortoise, r0.namespace: reverb, r0.arg2: n?t* roar, r0.rel: *did) => n?t* roar
What is Utah's most famous food?	dog	-46.9776427159197	what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: is from, r0.namespace: reverb, r1.arg2: Utah--oh, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Dog) => dog; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Dogs) => dog; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Dogs) => dog; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: is from, r0.namespace: reverb, r1.arg2: Utah--oh, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Dog) => dog; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Dogs) => dog; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: dog, r1.rel: are allowed in, r0.namespace: reverb, r1.arg2: all Utah state parks, r0.arg2: warm food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Dogs) => dog
What is Utah's most famous food?	milk	-46.982126108401346	what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: milk, r1.rel: is tested by, r0.namespace: reverb, r1.arg2: Utah Department, r0.arg2: food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: milk) => milk; what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Milk, r1.rel: is tested by, r0.namespace: openie4, r1.arg2: Utah Department, r0.arg2: the food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: milk) => Milk; what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: milk, r1.rel: has been tested by, r0.namespace: reverb, r1.arg2: Utah State University, r0.arg2: food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The milk) => milk; what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Milk, r1.rel: has been tested by, r0.namespace: openie4, r1.arg2: Utah State University, r0.arg2: the food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The milk) => Milk; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: milk, r1.rel: is tested by, r0.namespace: reverb, r1.arg2: Utah Department, r0.arg2: food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: milk) => milk; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Milk, r1.rel: is tested by, r0.namespace: openie4, r1.arg2: Utah Department, r0.arg2: the food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: milk) => Milk; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: milk, r1.rel: has been tested by, r0.namespace: reverb, r1.arg2: Utah State University, r0.arg2: food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The milk) => milk; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Milk, r1.rel: has been tested by, r0.namespace: openie4, r1.arg2: Utah State University, r0.arg2: the food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The milk) => Milk
What is Utah's most famous food?	music	-47.16371316819469	what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is, r0.namespace: openie4, r1.arg2: a Utah dealer, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Music) => music; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is, r0.namespace: reverb, r1.arg2: a Utah dealer, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Music) => music; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is a component of, r0.namespace: openie4, r1.arg2: the Utah picture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: music) => music; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is a component of, r0.namespace: reverb, r1.arg2: the Utah picture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: music) => music; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is, r0.namespace: openie4, r1.arg2: a Utah dealer, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Music) => music; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is, r0.namespace: reverb, r1.arg2: a Utah dealer, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Music) => music; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is a component of, r0.namespace: openie4, r1.arg2: the Utah picture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: music) => music; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: music, r1.rel: is a component of, r0.namespace: reverb, r1.arg2: the Utah picture, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: music) => music
What is Utah's most famous food?	picture	-47.1656559716034	what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: were shot in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pictures) => The picture; what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: was taken in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The picture) => The picture; what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: were a testament to, r0.namespace: reverb, r1.arg2: Ether and Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pictures) => The picture; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: were shot in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pictures) => The picture; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: was taken in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The picture) => The picture; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: The picture, r1.rel: were a testament to, r0.namespace: reverb, r1.arg2: Ether and Utah, r0.arg2: delicious vegan food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pictures) => The picture
What is Utah's most famous food?	nevada	-47.865936909100256	what food be most famous in utah ? => $x: ($x, "type", food) ($x, be most famous in, utah) => $x: ($x, "type", food) ($x, be, utah) => (r0.arg1: Nevada, r1.rel: were, r0.namespace: freebase, r1.arg2: Utah, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nevada) => Nevada; what food be famous in utah ? => $x: ($x, "type", food) ($x, be famous in, utah) => $x: ($x, "type", food) ($x, be, utah) => (r0.arg1: Nevada, r1.rel: were, r0.namespace: freebase, r1.arg2: Utah, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nevada) => Nevada
What is Utah's most famous food?	celery	-49.5277047779835	what food be most famous in utah ? => $x: ($x, "is an example of", food) ($x, be most famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Celery, r1.rel: is grown in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: a fat burning food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: celery) => Celery; what food be famous in utah ? => $x: ($x, "is an example of", food) ($x, be famous in, utah) => $x: ($x, "is an example of", food) ($x, be, utah) => (r0.arg1: Celery, r1.rel: is grown in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: a fat burning food, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: celery) => Celery
What is Utah's most famous food?	store	-49.72020142614886	what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: The store, r1.rel: were in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: Japanese fast food chain, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the stores) => The store; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: The store, r1.rel: were in, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: Japanese fast food chain, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the stores) => The store
What is Utah's most famous food?	wine	-49.729915443192425	what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The wine) => Wine; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Kentucky or Utah, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: wine) => Wine; what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Utah or Kentucky, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: wine) => Wine; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Utah, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The wine) => Wine; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Kentucky or Utah, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: wine) => Wine; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: Wine, r1.rel: cannot be shipped to, r0.namespace: reverb, r1.arg2: Utah or Kentucky, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: wine) => Wine
What is Utah's most famous food?	culture	-49.7415722636447	what food be most famous in utah ? => $x: ($x, "is a kind of", food) ($x, be most famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: culture, r1.rel: is focused on providing, r0.namespace: reverb, r1.arg2: Utah ?s finest healthcare, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a culture) => culture; what food be famous in utah ? => $x: ($x, "is a kind of", food) ($x, be famous in, utah) => $x: ($x, "is a kind of", food) ($x, be, utah) => (r0.arg1: culture, r1.rel: is focused on providing, r0.namespace: reverb, r1.arg2: Utah ?s finest healthcare, r0.arg2: food, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a culture) => culture
What is Utah's most famous food?	crop	-50.59582453410151	what food be most famous in utah ? => $x: ($x, "is a", food) ($x, be most famous in, utah) => $x: ($x, "is a", food) ($x, be, utah) => (r0.arg1: Crop, r1.rel: here is, r0.namespace: nell, r1.arg2: Utah, r0.arg2: food, r0.rel: is a, r1.namespace: reverb, r1.arg1: the crop) => Crop; what food be famous in utah ? => $x: ($x, "is a", food) ($x, be famous in, utah) => $x: ($x, "is a", food) ($x, be, utah) => (r0.arg1: Crop, r1.rel: here is, r0.namespace: nell, r1.arg2: Utah, r0.arg2: food, r0.rel: is a, r1.namespace: reverb, r1.arg1: the crop) => Crop
What do fairy tales have in common?	budget	-46.168111315919745	what do fairy tale havein common ? => $x: ($x, do, fairy tale havein common) => $x: ($x, do, fairy tale common) => (r0.arg1: a budget, r0.namespace: reverb, r0.arg2: the common person?s fairy tale, r0.rel: we?ll do) => a budget; who do fairy tale havein common ? => $x: ($x, do, fairy tale havein common) => $x: ($x, do, fairy tale common) => (r0.arg1: a budget, r0.namespace: reverb, r0.arg2: the common person?s fairy tale, r0.rel: we?ll do) => a budget; what do the fairy tale havein common ? => $x: ($x, do, the fairy tale havein common) => $x: ($x, do, fairy tale common) => (r0.arg1: a budget, r0.namespace: reverb, r0.arg2: the common person?s fairy tale, r0.rel: we?ll do) => a budget; what do a fairy tale havein common ? => $x: ($x, do, a fairy tale havein common) => $x: ($x, do, fairy tale common) => (r0.arg1: a budget, r0.namespace: reverb, r0.arg2: the common person?s fairy tale, r0.rel: we?ll do) => a budget
What do fairy tales have in common?	king lear	-52.24656818182646	what be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: King Lear, r0.namespace: reverb, r0.arg2: a common fairy tale, r0.rel: is also a literary variant of) => King Lear; who be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: King Lear, r0.namespace: reverb, r0.arg2: a common fairy tale, r0.rel: is also a literary variant of) => King Lear; what be some fairy tale havein common ? => $x: ($x, be, some fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: King Lear, r0.namespace: reverb, r0.arg2: a common fairy tale, r0.rel: is also a literary variant of) => King Lear; what be the fairy tale havein common ? => $x: ($x, be, the fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: King Lear, r0.namespace: reverb, r0.arg2: a common fairy tale, r0.rel: is also a literary variant of) => King Lear; what be a fairy tale havein common ? => $x: ($x, be, a fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: King Lear, r0.namespace: reverb, r0.arg2: a common fairy tale, r0.rel: is also a literary variant of) => King Lear
What do fairy tales have in common?	dark castle	-52.39476687923295	what be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: reverb, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: openie4, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; who be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: reverb, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; who be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: openie4, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be some fairy tale havein common ? => $x: ($x, be, some fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: reverb, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be some fairy tale havein common ? => $x: ($x, be, some fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: openie4, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be the fairy tale havein common ? => $x: ($x, be, the fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: reverb, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be the fairy tale havein common ? => $x: ($x, be, the fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: openie4, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be a fairy tale havein common ? => $x: ($x, be, a fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: reverb, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle; what be a fairy tale havein common ? => $x: ($x, be, a fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: the Dark Castle, r0.namespace: openie4, r0.arg2: a common fairy tale trope, r0.rel: is) => the Dark Castle
What do fairy tales have in common?	farfaria	-52.444295454553725	what be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria; who be fairy tale havein common ? => $x: ($x, be, fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria; what be some fairy tale havein common ? => $x: ($x, be, some fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria; what be the fairy tale havein common ? => $x: ($x, be, the fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria; what be a fairy tale havein common ? => $x: ($x, be, a fairy tale havein common) => $x: ($x, be, fairy tale common) => (r0.arg1: FarFaria, r0.namespace: reverb, r0.arg2: the common fairy tale beginning, r0.rel: is a play on) => FarFaria
What do fairy tales have in common?	hero?s journey plot	-52.50061632274917	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the hero?s journey plot, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is common in) => the hero?s journey plot; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the hero?s journey plot, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is common in) => the hero?s journey plot
What do fairy tales have in common?	prince	-52.520044356836294	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: a prince, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: might be common in) => a prince; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a Prince, r0.rel: have) => a Prince; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: a prince, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: might be common in) => a prince
What do fairy tales have in common?	anthropomorphic motifs	-52.520044356836294	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: openie4, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: openie4, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs
What do fairy tales have in common?	complete silence	-52.53392152404139	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Complete Silence, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Complete Silence; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Complete Silence, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Complete Silence
What do fairy tales have in common?	light	-52.53392152404139	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the light, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => the light; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the light, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => the light
What do fairy tales have in common?	melanie zimmer transformation	-52.53392152404139	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Melanie Zimmer Transformation, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Melanie Zimmer Transformation; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Melanie Zimmer Transformation, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Melanie Zimmer Transformation
What do fairy tales have in common?	impossible task	-52.53392152404139	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: The impossible task, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => The impossible task; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: The impossible task, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => The impossible task
What do fairy tales have in common?	deathless	-52.5443293994452	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the Deathless, r0.namespace: reverb, r0.arg2: Russian fairy tales, r0.rel: is a common character in) => the Deathless; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the Deathless, r0.namespace: reverb, r0.arg2: Russian fairy tales, r0.rel: is a common character in) => the Deathless
What do fairy tales have in common?	born station	-52.5443293994452	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: born station, r0.namespace: reverb, r0.arg2: many fairy tales, r0.rel: is a common theme in) => born station; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: born station, r0.namespace: reverb, r0.arg2: many fairy tales, r0.rel: is a common theme in) => born station
What do fairy tales have in common?	magic	-52.55242441364817	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: magic, r0.namespace: reverb, r0.arg2: fairy tales and fantasy, r0.rel: is a common feature in) => magic; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: magic, r0.namespace: reverb, r0.arg2: fairy tales and fantasy, r0.rel: is a common feature in) => magic
What do fairy tales have in common?	jack	-52.55242441364817	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Jack, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is the most common name in) => Jack; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Jack, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is the most common name in) => Jack
What do fairy tales have in common?	morals	-56.948680173879794	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: openie4, r0.arg2: morals, r0.rel: have) => morals; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: have) => morals; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: usually have) => morals; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: morals, r0.rel: always have) => morals
What do fairy tales have in common?	children	-56.97782222501047	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: children, r0.rel: have always attracted) => children; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: Fairy Tale, r0.namespace: reverb, r0.arg2: children, r0.rel: may have its basis in) => children
What do fairy tales have in common?	common	-56.97782222501047	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have this in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have this in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: the fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have one thing in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: these fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have something in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: a fairy-tale, r0.namespace: reverb, r0.arg2: common, r0.rel: had nothing in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: all these fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have one thing in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: these fairy tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have a single thing in) => common; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: these wizarding fairy-tales, r0.namespace: reverb, r0.arg2: common, r0.rel: have much in) => common
What do fairy tales have in common?	common ?	-56.98614852533353	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: common ?, r0.rel: have one thing in) => common ?; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: common ?, r0.rel: have one thing in) => common ?
What do fairy tales have in common?	marriage	-56.98614852533353	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: marriage, r0.rel: have traditional views about) => marriage
What do fairy tales have in common?	real world	-56.98614852533353	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: the real world, r0.rel: have been exiled to) => the real world
What do fairy tales have in common?	truth	-56.98614852533353	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: truth, r0.rel: has a grain of) => truth
What do fairy tales have in common?	dark side	-57.11686199206161	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: a dark side, r0.rel: have) => a dark side
What do fairy tales have in common?	uncanny staying power	-57.11686199206161	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: openie4, r0.arg2: an uncanny staying power, r0.rel: have) => an uncanny staying power; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: an uncanny staying power, r0.rel: have) => an uncanny staying power
What do fairy tales have in common?	happy ending	-57.13434722274002	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a happy ending, r0.rel: often have) => a happy ending; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a happy ending, r0.rel: do have) => a happy ending; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: a happy ending, r0.rel: DO have) => a happy ending
What do fairy tales have in common?	ups downs	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: ups and downs, r0.rel: have) => ups and downs
What do fairy tales have in common?	3 brothers	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: 3 brothers, r0.rel: have) => 3 brothers
What do fairy tales have in common?	similarity	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a similarity, r0.rel: have) => a similarity
What do fairy tales have in common?	sequel	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a sequel, r0.rel: have) => a sequel
What do fairy tales have in common?	404 pages	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy Tales, r0.namespace: reverb, r0.arg2: 404 pages, r0.rel: has) => 404 pages
What do fairy tales have in common?	crazy little red	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a crazy little red, r0.rel: has) => a crazy little red
What do fairy tales have in common?	strange endings	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: strange endings, r0.rel: have) => strange endings
What do fairy tales have in common?	story	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy Tale, r0.namespace: reverb, r0.arg2: a story, r0.rel: has) => a story
What do fairy tales have in common?	interested kazimer	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: interested Kazimer, r0.rel: have) => interested Kazimer
What do fairy tales have in common?	origin	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: an origin, r0.rel: has) => an origin
What do fairy tales have in common?	fun	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: fun, r0.rel: have) => fun
What do fairy tales have in common?	sacral purpose	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: sacral purpose, r0.rel: had) => sacral purpose
What do fairy tales have in common?	natural functions	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: natural functions, r0.rel: have) => natural functions
What do fairy tales have in common?	100 % cotton face cotton fill	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy Tales, r0.namespace: reverb, r0.arg2: a 100 % cotton face and cotton fill, r0.rel: has) => a 100 % cotton face and cotton fill
What do fairy tales have in common?	clear beginnings , middles ends	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: clear beginnings , middles and ends, r0.rel: have) => clear beginnings , middles and ends
What do fairy tales have in common?	double nature	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a double nature, r0.rel: has) => a double nature
What do fairy tales have in common?	long history	-57.14640744660706	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a long history, r0.rel: have) => a long history
What do fairy tales have in common?	dragon evil queen	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: a dragon or evil queen, r0.rel: always have) => a dragon or evil queen
What do fairy tales have in common?	modern childhood	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: modern childhood, r0.rel: have rendered) => modern childhood
What do fairy tales have in common?	psyche	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: the psyche, r0.rel: has on) => the psyche
What do fairy tales have in common?	villain	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a villain, r0.rel: always have) => a villain
What do fairy tales have in common?	dark undertones	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: dark undertones, r0.rel: often had) => dark undertones
What do fairy tales have in common?	heartbreaking moments	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: heartbreaking moments, r0.rel: must have) => heartbreaking moments
What do fairy tales have in common?	sad endings	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: sad endings, r0.rel: have) => sad endings; what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: sad endings, r0.rel: often have) => sad endings
What do fairy tales have in common?	american society	-57.163892677285475	what do fairy tale have alike ? => $x: (fairy tale, have alike, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: an American society, r0.rel: have in) => an American society; where do fairy tale have alike ? => $x: (fairy tale, have alike in, $x) => $x: (fairy tale, have in, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: an American society, r0.rel: have in) => an American society
What is Kristin Halvorsen's birthday?	left	-64.2947673011524	what be kristin halvorsen brithday ? => $x: ($x, be, kristin halvorsen brithday) => $x: ($x, be, kristin halvorsen) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: Kristin Halvorsen, r0.rel: is) => the left
What is Kristin Halvorsen's birthday?	kristin halvorsen	-67.95917299772854	what be kristin halvorsen brithday ? => $x: ($x, be, kristin halvorsen brithday) => $x: ($x, be, kristin halvorsen) => (r0.arg1: Kristin Halvorsen, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Kristin%20Halvorsen, r0.rel: can be found on Wikipedia at) => Kristin Halvorsen
What kind of experiments did pavlov do?	life	-59.45531082501044	what kind of experiment do pavlov be ? => $x: ($x, "is a kind of", experiment) (pavlov, be, $x) => $x: ($x, "is a kind of", experiment) (pavlov, be, $x) => (r0.arg1: life, r1.rel: are brought to, r0.namespace: reverb, r1.arg2: life, r0.arg2: experiment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Pavlov?s investigations) => life
What three things the plate tectonic theory helps to explanation?	study review questions	-83.2016611193339	what be something explanation of the theory of plate tectonic ? => $x: ($x, be something explanation of the theory of, plate tectonic) => $x: ($x, be theory of, plate tectonic) => (r0.arg1: Study and Review Questions, r0.namespace: reverb, r0.arg2: plate tectonics, r0.rel: was the theory of) => Study and Review Questions
What three things the plate tectonic theory helps to explanation?	first example	-83.2016611193339	what be something explanation of the theory of plate tectonic ? => $x: ($x, be something explanation of the theory of, plate tectonic) => $x: ($x, be theory of, plate tectonic) => (r0.arg1: The first example, r0.namespace: reverb, r0.arg2: plate tectonics, r0.rel: is the theory of) => The first example
What three things the plate tectonic theory helps to explanation?	new standards	-83.2016611193339	what be something explanation of the theory of plate tectonic ? => $x: ($x, be something explanation of the theory of, plate tectonic) => $x: ($x, be theory of, plate tectonic) => (r0.arg1: the new standards, r0.namespace: reverb, r0.arg2: plate tectonics, r0.rel: are the theories of) => the new standards
What three things the plate tectonic theory helps to explanation?	new theory	-83.21137513637747	what be something explanation of the theory of plate tectonic ? => $x: ($x, be something explanation of the theory of, plate tectonic) => $x: ($x, be theory of, plate tectonic) => (r0.arg1: The new theory, r0.namespace: reverb, r0.arg2: Plate Tectonics, r0.rel: is called the Theory of) => The new theory
What branch of government regulates post office?	u.s. national park service	-69.31749545228304	what type of government govern post office ? => $x: ($x, "type", government) ($x, govern, post office) => $x: ($x, "type", government) ($x, govern, post office) => (r0.arg1: U.S. National Park Service, r1.rel: Protected Sites Governed, r0.namespace: freebase, r1.arg2: Old Post Office Tower, r0.arg2: Government Agency, r0.rel: Type, r1.namespace: freebase, r1.arg1: U.S. National Park Service) => U.S. National Park Service
When was Drake born?	august	3.304618199981836	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August
When was Drake born?	february 12	3.2890757727121365	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12
When was Drake born?	1540	3.1302045681591135	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540
When was Drake born?	1948	3.1302045681591135	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948
When was Drake born?	24 october 1986	3.1302045681591135	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986
When was Drake born?	oct. 20 , 1785	3.1068909272545637	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785
When was Drake born?	1961	3.1068909272545637	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961
When was Drake born?	1819	3.1068909272545637	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819
When was Drake born?	1811	3.1068909272545637	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811
When was Drake born?	march 29 , 1819	3.1068909272545637	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819
When was Drake born?	december 8 , 1923	3.1068909272545637	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923
When was Drake born?	feb 1889	3.0913484999848633	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889
When was Drake born?	14 feb 1921	3.0913484999848633	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921
When was Drake born?	october 24 , 1986	3.0913484999848633	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986
When was Drake born?	mar 1921	3.0913484999848633	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921
When was Drake born?	1 jul 1922	3.0913484999848633	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922
When was Drake born?	june 19th	3.0913484999848633	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th
When was Drake born?	may 1879	3.0913484999848633	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879
When was Drake born?	august 2008	2.938709109072745	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008
When was Drake born?	22 mar 1901	2.9231666818030444	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901
When was Drake born?	toronto	2.3824772954318405	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto
When was Drake born?	tavistock	2.3824772954318405	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock
When was Drake born?	marathon county	2.3591636545272907	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county
When was Drake born?	scotland	2.3591636545272907	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland
When was Drake born?	birmingham	2.3591636545272907	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham
When was Drake born?	new york city	2.3436212272575903	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City
When was Drake born?	chicago	2.3436212272575903	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago
When was Drake born?	wilkes-barre	2.3436212272575903	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre
When was Drake born?	natchez	2.3325194934935194	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez
When was Drake born?	maine	2.3325194934935194	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine
When was Drake born?	devon	2.3325194934935194	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon
When was Drake born?	socorro	2.3241931931704656	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro
When was Drake born?	english midlands town	2.1614363818000175	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town
When was Drake born?	seneca county	2.1614363818000175	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County
When was Drake born?	pitka?s point	2.1614363818000175	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point
When was Drake born?	rockaway	2.145893954530318	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway
When was Drake born?	wayne	2.145893954530318	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne
When was Drake born?	nearby town	2.145893954530318	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town
When was Drake born?	cape breton	2.134792220766246	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton
When was Drake born?	pownal	1.9699409227136495	When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Henry Milton Drake, r0.namespace: openie4, r0.arg2: Pownal, r0.rel: born in) => Pownal
When was Drake born?	new jersey	-32.44904358693984	who be drake bear ? => $x: ($x, be, drake bear) => $x: ($x, be, drake bear) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey; who be drake born ? => $x: ($x, be, drake born) => $x: ($x, be, drake born) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey
When was Drake born?	october 25	-44.91679949091747	who be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; who be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25
When was Drake born?	yesterday	-45.87002525000686	who be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday; who be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday
Does the US consist of 50 states?	usa	-64.36615232274389	what state consist of 50 state ? => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => (r0.arg1: The USA, r1.rel: consists of, r0.namespace: openie4, r1.arg2: 50 states, r0.arg2: a secular state, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The USA) => The USA; what state consist of 50 state ? => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => (r0.arg1: The USA, r1.rel: consists of, r0.namespace: openie4, r1.arg2: 50 states, r0.arg2: a secular state, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The USA) => The USA
Does the US consist of 50 states?	america	-67.10709203013246	what state consist of 50 state ? => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => (r0.arg1: America, r1.rel: consists of, r0.namespace: reverb, r1.arg2: 50 states, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: America) => America; what state consist of 50 state ? => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => (r0.arg1: America, r1.rel: is a country consisting of, r0.namespace: reverb, r1.arg2: 50 states, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: America) => America
What is kentucky best at?	gillispie	-48.924594488323905	what be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was n?t a good fit at) => Gillispie; who be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was n?t a good fit at) => Gillispie
What is kentucky best at?	card	-48.924594488323905	what be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: The card, r0.namespace: reverb, r0.arg2: all Kentucky State Parks, r0.rel: is good at) => The card; who be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: The card, r0.namespace: reverb, r0.arg2: all Kentucky State Parks, r0.rel: is good at) => The card
What is kentucky best at?	louisville	-49.09260962274014	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is better than) => Louisville; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is better than) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the famed Kentucky Derby, r0.rel: is best known for) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is best known for hosting) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the famed Kentucky Derby, r0.rel: is best known for) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is best known for hosting) => Louisville; what be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the most populated city of) => Louisville; what be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is the most populated city of) => Louisville; what be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is most famous for) => Louisville; what be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: its Kentucky Derby, r0.rel: is most famous for) => Louisville; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was doing a lot of talking about) => Louisville; what be kentucky famous today ? => $x: ($x, be, kentucky famous today) => $x: ($x, be, kentucky famous) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the famous Kentucky Derby, r0.rel: is also home to) => Louisville; what be kentucky famous today ? => $x: ($x, be, kentucky famous today) => $x: ($x, be, kentucky famous) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: most famous for its Kentucky Derby, r0.rel: is) => Louisville; what be kentucky famous today ? => $x: ($x, be, kentucky famous today) => $x: ($x, be, kentucky famous) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: home to the famous Kentucky Derby, r0.rel: is) => Louisville; what be kentucky famous today ? => $x: ($x, be, kentucky famous today) => $x: ($x, be, kentucky famous) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: most famous as the home of the Kentucky Derby, r0.rel: is) => Louisville; who be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the most populated city of) => Louisville; who be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is the most populated city of) => Louisville; who be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is most famous for) => Louisville; who be most at kentucky ? => $x: ($x, be most at, kentucky) => $x: ($x, be most, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: its Kentucky Derby, r0.rel: is most famous for) => Louisville; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was doing a lot of talking about) => Louisville
What is kentucky best at?	west virginia	-49.104266443192415	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: West Virginia, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was just better than) => West Virginia; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: West Virginia, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was just better than) => West Virginia
What is kentucky best at?	program	-49.104266443192415	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is to better prepare) => the program; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is to better prepare) => the program
What is kentucky best at?	preakness	-49.11259274351548	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: The Preakness, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is better than) => The Preakness; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: The Preakness, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is better than) => The Preakness
What is kentucky best at?	search engine marketing	-49.11259274351548	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Search Engine Marketing, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is better than) => Search Engine Marketing; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Search Engine Marketing, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is better than) => Search Engine Marketing
What is kentucky best at?	nobody	-49.29033689546742	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: nobody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was better than) => nobody; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: nobody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was better than) => nobody
What is kentucky best at?	georgia	-49.29033689546742	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Georgia, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is better than) => Georgia; what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Georgia, r0.namespace: reverb, r0.arg2: Eastern Kentucky, r0.rel: is better than) => Georgia; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Georgia, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is better than) => Georgia; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Georgia, r0.namespace: reverb, r0.arg2: Eastern Kentucky, r0.rel: is better than) => Georgia
What is kentucky best at?	native grasses	-49.30199371591969	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Native grasses, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are better suited to) => Native grasses; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Native grasses, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are better suited to) => Native grasses
What is kentucky best at?	grayson	-49.31656474148504	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Grayson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been far better known in) => Grayson; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Grayson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been far better known in) => Grayson
What is kentucky best at?	purpose	-49.32142175000682	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: The purpose, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is to better serve the needs of) => The purpose; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: The purpose, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is to better serve the needs of) => The purpose
What is kentucky best at?	louisville?s defense	-49.32697261688885	what be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Louisville?s defense, r0.namespace: reverb, r0.arg2: Kentucky?s defense, r0.rel: is better than) => Louisville?s defense; who be better at kentucky ? => $x: ($x, be better at, kentucky) => $x: ($x, be better, kentucky) => (r0.arg1: Louisville?s defense, r0.namespace: reverb, r0.arg2: Kentucky?s defense, r0.rel: is better than) => Louisville?s defense
What is kentucky best at?	boys	-49.89096981024353	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => the boys; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are now racing at) => the boys; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => the boys; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are now racing at) => the boys; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => the boys; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are now racing at) => the boys; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => the boys; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are now racing at) => the boys; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: the boys, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: did in) => the boys; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did in) => the boys; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: the boys, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: did in) => the boys; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did in) => the boys
What is kentucky best at?	rondo	-49.89096981024353	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Rondo; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Rondo; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Rondo; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Rondo; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Rondo; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Rondo; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Rondo; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rondo, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Rondo
What is kentucky best at?	bear bryant	-49.89096981024353	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bear Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bear Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bear Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bear Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bear Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bear Bryant; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bear Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bear Bryant
What is kentucky best at?	john calipari	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => John Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => John Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; what do he at kentucky ? => $x: ($x, do he at, kentucky) => $x: ($x, do at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => John Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => John Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => John Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: John Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been able to do at) => John Calipari
What is kentucky best at?	??dorcas	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ??Dorcas, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ??Dorcas; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ??Dorcas, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ??Dorcas; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ??Dorcas, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ??Dorcas; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ??Dorcas, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ??Dorcas
What is kentucky best at?	eloy	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Eloy, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Eloy; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Eloy, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Eloy; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Eloy, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Eloy; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Eloy, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Eloy
What is kentucky best at?	aaron	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Aaron, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Aaron; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Aaron, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Aaron; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Aaron, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Aaron; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Aaron, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Aaron
What is kentucky best at?	billy gillispie	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Billy Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is out at) => Billy Gillispie; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Billy Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is out at) => Billy Gillispie; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Billy Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is out at) => Billy Gillispie; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Billy Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is out at) => Billy Gillispie
What is kentucky best at?	? ??vashti	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Vashti, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Vashti; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Vashti, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Vashti; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Vashti, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Vashti; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Vashti, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Vashti
What is kentucky best at?	antigua	-49.90845504092195	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Antigua; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Antigua; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Antigua; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Antigua, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Antigua
What is kentucky best at?	scott dixon	-49.920111861374224	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Scott Dixon, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mathematically eliminated at) => Scott Dixon; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Scott Dixon, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mathematically eliminated at) => Scott Dixon; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Scott Dixon, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mathematically eliminated at) => Scott Dixon; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Scott Dixon, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mathematically eliminated at) => Scott Dixon
What is kentucky best at?	isbn	-49.920111861374224	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ISBN, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was a hit at) => ISBN; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ISBN, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was a hit at) => ISBN; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ISBN, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was a hit at) => ISBN; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ISBN, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was a hit at) => ISBN
What is kentucky best at?	memphis	-49.92843816169727	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Memphis, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently the coach at) => Memphis; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Memphis, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently the coach at) => Memphis; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Memphis, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently the coach at) => Memphis; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Memphis, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently the coach at) => Memphis
What is kentucky best at?	nation	-50.08829367955604	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the nation, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: are bench players at) => the nation; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the nation, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: are bench players at) => the nation; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the nation, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: are bench players at) => the nation; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the nation, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: are bench players at) => the nation
What is kentucky best at?	race	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the race, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => the race; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the race, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => the race; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the race, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => the race; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the race, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => the race
What is kentucky best at?	wall	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Wall; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Wall; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Wall; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Wall; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Wall; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Wall; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Wall; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Wall; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did attend the College of) => Wall; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did n?t make) => Wall; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did attend the College of) => Wall; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Wall, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: did n?t make) => Wall
What is kentucky best at?	pitino	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Pitino; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Pitino; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Pitino; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Pitino; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Pitino; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Pitino; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Pitino; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Pitino, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Pitino
What is kentucky best at?	garnett	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Garnett, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Garnett; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Garnett, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Garnett; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Garnett, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Garnett; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Garnett, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Garnett
What is kentucky best at?	mike	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Mike, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => Mike; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Mike, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => Mike; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Mike, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => Mike; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Mike, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is at) => Mike
What is kentucky best at?	rebels	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: The Rebels, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => The Rebels; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: The Rebels, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => The Rebels; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: The Rebels, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => The Rebels; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: The Rebels, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are at) => The Rebels
What is kentucky best at?	bryant	-50.08869708297081	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Bryant; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Bryant; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bryant; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was at) => Bryant; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bryant, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was at) => Bryant
What is kentucky best at?	calipari	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has only been at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the coach at) => Calipari; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be the head coach at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has only been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the coach at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be the head coach at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has only been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the coach at) => Calipari; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be the head coach at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has only been at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was hired at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: has been at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the coach at) => Calipari; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Calipari, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be the head coach at) => Calipari
What is kentucky best at?	rich brooks	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rich Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was coach at) => Rich Brooks; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rich Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was coach at) => Rich Brooks; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rich Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was coach at) => Rich Brooks; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Rich Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was coach at) => Rich Brooks
What is kentucky best at?	saying ...the ncaa	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the saying ...The NCAA, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mad at) => the saying ...The NCAA; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the saying ...The NCAA, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mad at) => the saying ...The NCAA; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the saying ...The NCAA, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mad at) => the saying ...The NCAA; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the saying ...The NCAA, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was mad at) => the saying ...The NCAA
What is kentucky best at?	special one-game playoff	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: A special one-game playoff, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was played at) => A special one-game playoff
What is kentucky best at?	? ??anne	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Anne, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Anne; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Anne, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Anne; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Anne, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Anne; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Anne, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Anne
What is kentucky best at?	bills wr steve johnson	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bills WR Steve Johnson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were teammates at) => Bills WR Steve Johnson; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bills WR Steve Johnson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were teammates at) => Bills WR Steve Johnson; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bills WR Steve Johnson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were teammates at) => Bills WR Steve Johnson; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Bills WR Steve Johnson, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were teammates at) => Bills WR Steve Johnson
What is kentucky best at?	?? ? ??katherine	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?? ? ??Katherine, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ?? ? ??Katherine; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?? ? ??Katherine, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ?? ? ??Katherine; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?? ? ??Katherine, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ?? ? ??Katherine; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?? ? ??Katherine, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ?? ? ??Katherine
What is kentucky best at?	? ??sarah	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Sarah, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Sarah; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Sarah, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Sarah; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Sarah, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Sarah; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ? ??Sarah, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => ? ??Sarah
What is kentucky best at?	everybody	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Everybody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is looking at) => Everybody; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Everybody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is looking at) => Everybody; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Everybody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is looking at) => Everybody; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Everybody, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is looking at) => Everybody
What is kentucky best at?	morris ? career	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; what do he at kentucky ? => $x: ($x, do he at, kentucky) => $x: ($x, do at, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; what do good at kentucky ? => $x: ($x, do good at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career; what do best at kentucky ? => $x: ($x, do best at, kentucky) => $x: ($x, do, kentucky) => (r0.arg1: Morris ? career, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is done at) => Morris ? career
What is kentucky best at?	robert	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Robert, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Robert; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Robert, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Robert; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Robert, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Robert; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Robert, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was born at) => Robert
What is kentucky best at?	brooks	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Brooks; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Brooks; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Brooks; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: Brooks, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was hired at) => Brooks
What is kentucky best at?	two	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the two, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were students at) => the two; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the two, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were students at) => the two; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the two, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were students at) => the two; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: the two, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were students at) => the two
What is kentucky best at?	?my players	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?my players, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are here at) => ?my players; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?my players, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are here at) => ?my players; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?my players, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are here at) => ?my players; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: ?my players, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are here at) => ?my players
What is kentucky best at?	more information	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: More information, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available at) => More information; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: More information, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available at) => More information; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: More information, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available at) => More information; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: More information, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available at) => More information
What is kentucky best at?	good michael gilchrist	-50.106182313649214	what be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: good Michael Gilchrist, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be at) => good Michael Gilchrist; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: good Michael Gilchrist, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be at) => good Michael Gilchrist; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: good Michael Gilchrist, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be at) => good Michael Gilchrist; who be he at kentucky ? => $x: ($x, be he at, kentucky) => $x: ($x, be at, kentucky) => (r0.arg1: good Michael Gilchrist, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be at) => good Michael Gilchrist
What country is most famous for the dance hip hop?	toronto	-64.79350830455198	what city be famous for the dance hip hop ? => $x: ($x, "is an example of", city) ($x, be famous for, the dance hip hop) => $x: ($x, "is an example of", city) ($x, be, dance hip hop) => (r0.arg1: Toronto, r1.rel: are a perfect blend of, r0.namespace: openie4, r1.arg2: hip-hop , dance and r&b, r0.arg2: a city, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Toronto) => Toronto
What country is most famous for the dance hip hop?	csg	-65.29167553410126	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: CSG, r0.namespace: reverb, r0.arg2: the best hip hop dance group, r0.rel: was named) => CSG; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: CSG, r0.namespace: reverb, r0.arg2: the best hip hop dance group, r0.rel: was named) => CSG
What country is most famous for the dance hip hop?	g-n-c	-65.29815154546363	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: G-n-C, r0.namespace: reverb, r0.arg2: a hip hop dance crew, r0.rel: is) => G-n-C; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: G-n-C, r0.namespace: reverb, r0.arg2: a hip hop dance crew, r0.rel: is) => G-n-C
What country is most famous for the dance hip hop?	performer	-65.30333235455353	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: performer, r0.namespace: reverb, r0.arg2: Hip Hop Dance classes, r0.rel: will be teaching) => performer; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: performer, r0.namespace: reverb, r0.arg2: Hip Hop Dance classes, r0.rel: will be teaching) => performer
What country is most famous for the dance hip hop?	kuba	-65.30333235455353	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Kuba, r0.namespace: reverb, r0.arg2: hip hop and dance music, r0.rel: are playing) => Kuba; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Kuba, r0.namespace: reverb, r0.arg2: hip hop and dance music, r0.rel: are playing) => Kuba
What country is most famous for the dance hip hop?	sydney	-65.30757119835435	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: a Hip Hop dance and bboy comp, r0.rel: is) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: City, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: Olympic host city, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: Olympic bidding city, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: Top Architectural City, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what city be famous for the dance hip hop ? => $x: ($x, "is a", city) ($x, be famous for, the dance hip hop) => $x: ($x, "is a", city) ($x, be, dance hip hop) => (r0.arg1: SYDNEY, r1.rel: is, r0.namespace: nell, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: city, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sydney) => SYDNEY; what place be famous for the dance hip hop ? => $x: ($x, "type", place) ($x, be famous for, the dance hip hop) => $x: ($x, "type", place) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: freebase, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; what place be famous for the dance hip hop ? => $x: ($x, "is an example of", place) ($x, be famous for, the dance hip hop) => $x: ($x, "is an example of", place) ($x, be, dance hip hop) => (r0.arg1: Sydney, r1.rel: is, r0.namespace: reverb, r1.arg2: a Hip Hop dance and bboy comp, r0.arg2: a wonderful place, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Sydney) => Sydney; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: a Hip Hop dance and bboy comp, r0.rel: is) => Sydney
What country is most famous for the dance hip hop?	ballroom dancing	-65.32664599545808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: ballroom dancing, r0.namespace: reverb, r0.arg2: hip-hop dancing, r0.rel: is better than) => ballroom dancing; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: ballroom dancing, r0.namespace: reverb, r0.arg2: hip-hop dancing, r0.rel: is better than) => ballroom dancing
What country is most famous for the dance hip hop?	aerobics	-65.32664599545808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Aerobics, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: are mixed with) => Aerobics; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Aerobics, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: are mixed with) => Aerobics
What country is most famous for the dance hip hop?	wild wild west	-65.32664599545808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Wild Wild West, r0.namespace: reverb, r0.arg2: a funky hip-hop dance, r0.rel: is) => Wild Wild West; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Wild Wild West, r0.namespace: reverb, r0.arg2: a funky hip-hop dance, r0.rel: is) => Wild Wild West
What country is most famous for the dance hip hop?	ciphers	-65.3287654173585	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: ciphers, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: are key components of) => ciphers; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: ciphers, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: are key components of) => ciphers
What country is most famous for the dance hip hop?	krumping	-65.3305316022755	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Krumping, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: is an improvised variety of) => Krumping; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Krumping, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: is an improvised variety of) => Krumping
What country is most famous for the dance hip hop?	zumba	-65.33202606643604	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Zumba, r0.namespace: reverb, r0.arg2: latin & hip-hop dancing, r0.rel: is a mix of) => Zumba; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Zumba, r0.namespace: reverb, r0.arg2: latin & hip-hop dancing, r0.rel: is a mix of) => Zumba
What country is most famous for the dance hip hop?	pulse studios	-65.48292679546614	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Pulse Studios, r0.namespace: reverb, r0.arg2: the only Hip Hop dance studio, r0.rel: is) => Pulse Studios; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Pulse Studios, r0.namespace: reverb, r0.arg2: the only Hip Hop dance studio, r0.rel: is) => Pulse Studios
What country is most famous for the dance hip hop?	breakdancing	-65.48292679546614	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Breakdancing, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: is also known as) => Breakdancing; who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Breakdancing, r0.namespace: reverb, r0.arg2: the original Hip Hop dance style, r0.rel: is) => Breakdancing; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Breakdancing, r0.namespace: reverb, r0.arg2: hip-hop dance, r0.rel: is also known as) => Breakdancing; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Breakdancing, r0.namespace: reverb, r0.arg2: the original Hip Hop dance style, r0.rel: is) => Breakdancing
What country is most famous for the dance hip hop?	follow submit	-65.48940280682852	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Follow Submit, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: really is) => Follow Submit; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Follow Submit, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: really is) => Follow Submit
What country is most famous for the dance hip hop?	aljo	-65.48940280682852	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: aljo, r0.namespace: reverb, r0.arg2: the hip hop dancing ..it, r0.rel: was great at) => aljo; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: aljo, r0.namespace: reverb, r0.arg2: the hip hop dancing ..it, r0.rel: was great at) => aljo
What country is most famous for the dance hip hop?	first act	-65.48940280682852	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The first act, r0.namespace: reverb, r0.arg2: a hip hop dance, r0.rel: was) => The first act; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The first act, r0.namespace: reverb, r0.arg2: a hip hop dance, r0.rel: was) => The first act
What country is most famous for the dance hip hop?	country western look	-65.48940280682852	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Country western look, r0.namespace: reverb, r0.arg2: hip hop dance, r0.rel: would probably be odd for) => Country western look; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Country western look, r0.namespace: reverb, r0.arg2: hip hop dance, r0.rel: would probably be odd for) => Country western look
What country is most famous for the dance hip hop?	pulse	-65.48940280682852	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: PULSE, r0.namespace: reverb, r0.arg2: its hip hop dance performances, r0.rel: is known for) => PULSE; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: PULSE, r0.namespace: reverb, r0.arg2: its hip hop dance performances, r0.rel: is known for) => PULSE
What country is most famous for the dance hip hop?	wiggles	-65.49470136157954	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Wiggles, r0.namespace: reverb, r0.arg2: the Hip Hop dance, r0.rel: is real a pioneer of) => Wiggles; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Wiggles, r0.namespace: reverb, r0.arg2: the Hip Hop dance, r0.rel: is real a pioneer of) => Wiggles
What country is most famous for the dance hip hop?	carly	-65.49470136157954	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Carly, r0.namespace: reverb, r0.arg2: the Hip Hop Dance team, r0.rel: was very involved with) => Carly; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Carly, r0.namespace: reverb, r0.arg2: the Hip Hop Dance team, r0.rel: was very involved with) => Carly
What country is most famous for the dance hip hop?	breaking	-65.49470136157954	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Breaking, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is the most popular style of) => Breaking; who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Breaking, r0.namespace: reverb, r0.arg2: Hip Hop?s original dance forms, r0.rel: is one of) => Breaking; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Breaking, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is the most popular style of) => Breaking; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Breaking, r0.namespace: reverb, r0.arg2: Hip Hop?s original dance forms, r0.rel: is one of) => Breaking
What country is most famous for the dance hip hop?	change performing arts company	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: A Change Performing Arts Company, r0.namespace: reverb, r0.arg2: a Hip Hop Dance Company, r0.rel: is) => A Change Performing Arts Company; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: A Change Performing Arts Company, r0.namespace: reverb, r0.arg2: a Hip Hop Dance Company, r0.rel: is) => A Change Performing Arts Company
What country is most famous for the dance hip hop?	freeplay freeplay	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: FREEPLAY Freeplay, r0.namespace: reverb, r0.arg2: a hip hop dance group, r0.rel: is) => FREEPLAY Freeplay; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: FREEPLAY Freeplay, r0.namespace: reverb, r0.arg2: a hip hop dance group, r0.rel: is) => FREEPLAY Freeplay
What country is most famous for the dance hip hop?	freeplay dance crew freeplay	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: FREEPLAY DANCE CREW Freeplay, r0.namespace: reverb, r0.arg2: a hip hop dance group, r0.rel: is) => FREEPLAY DANCE CREW Freeplay; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: FREEPLAY DANCE CREW Freeplay, r0.namespace: reverb, r0.arg2: a hip hop dance group, r0.rel: is) => FREEPLAY DANCE CREW Freeplay
What country is most famous for the dance hip hop?	anjin precision	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Anjin Precision, r0.namespace: reverb, r0.arg2: a hip hop dance team, r0.rel: is) => Anjin Precision; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Anjin Precision, r0.namespace: reverb, r0.arg2: a hip hop dance team, r0.rel: is) => Anjin Precision
What country is most famous for the dance hip hop?	2012	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: Karate and Hip Hop dance, r0.rel: is) => 2012; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: Karate and Hip Hop dance, r0.rel: is) => 2012
What country is most famous for the dance hip hop?	weight fast	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Weight Fast, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is to do) => Weight Fast; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Weight Fast, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is to do) => Weight Fast
What country is most famous for the dance hip hop?	music	-65.49587881819089	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: music, r0.namespace: reverb, r0.arg2: hip hop dance and country, r0.rel: is) => music; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Music, r1.rel: is, r0.namespace: freebase, r1.arg2: hip hop dance and country, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: music) => Music; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: music, r0.namespace: reverb, r0.arg2: hip hop dance and country, r0.rel: is) => music
What country is most famous for the dance hip hop?	movement	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The Movement, r0.namespace: reverb, r0.arg2: a hip hop theatrical dance company, r0.rel: is) => The Movement; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The Movement, r0.namespace: reverb, r0.arg2: a hip hop theatrical dance company, r0.rel: is) => The Movement
What country is most famous for the dance hip hop?	2011 roo?ra	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: 2011 Roo?ra, r0.namespace: reverb, r0.arg2: a hip hop and dance group, r0.rel: is) => 2011 Roo?ra; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: 2011 Roo?ra, r0.namespace: reverb, r0.arg2: a hip hop and dance group, r0.rel: is) => 2011 Roo?ra
What country is most famous for the dance hip hop?	daughter	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: a daughter, r0.namespace: reverb, r0.arg2: a hip hop dance troupe, r0.rel: was in) => a daughter; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: a daughter, r0.namespace: reverb, r0.arg2: a hip hop dance troupe, r0.rel: was in) => a daughter
What country is most famous for the dance hip hop?	alicia	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Alicia, r0.namespace: reverb, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Alicia; who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Alicia, r0.namespace: openie4, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Alicia; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Alicia, r1.rel: is attending, r0.namespace: freebase, r1.arg2: a Hip Hop dance party, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Alicia) => Alicia; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Alicia, r1.rel: is attending, r0.namespace: freebase, r1.arg2: a Hip Hop dance party, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: openie4, r1.arg1: Alicia) => Alicia; what place be famous for the dance hip hop ? => $x: ($x, "type", place) ($x, be famous for, the dance hip hop) => $x: ($x, "type", place) ($x, be, dance hip hop) => (r0.arg1: Alicia, r1.rel: is attending, r0.namespace: freebase, r1.arg2: a Hip Hop dance party, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Alicia) => Alicia; what place be famous for the dance hip hop ? => $x: ($x, "type", place) ($x, be famous for, the dance hip hop) => $x: ($x, "type", place) ($x, be, dance hip hop) => (r0.arg1: Alicia, r1.rel: is attending, r0.namespace: freebase, r1.arg2: a Hip Hop dance party, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: Alicia) => Alicia; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Alicia, r0.namespace: reverb, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Alicia; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Alicia, r0.namespace: openie4, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Alicia
What country is most famous for the dance hip hop?	game description alicia	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Game Description Alicia, r0.namespace: reverb, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Game Description Alicia; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Game Description Alicia, r0.namespace: reverb, r0.arg2: a Hip Hop dance party, r0.rel: is attending) => Game Description Alicia
What country is most famous for the dance hip hop?	11	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: 11, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is a competitor in) => 11; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: 11, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is a competitor in) => 11
What country is most famous for the dance hip hop?	studio dance company	-65.5010596272808	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The Studio Dance Company, r0.namespace: reverb, r0.arg2: Hip Hop Dance, r0.rel: is number 1 in) => The Studio Dance Company; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The Studio Dance Company, r0.namespace: reverb, r0.arg2: Hip Hop Dance, r0.rel: is number 1 in) => The Studio Dance Company
What country is most famous for the dance hip hop?	large	-65.50285298427345	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Large, r0.namespace: reverb, r0.arg2: the Hip Hop dance world, r0.rel: Ever want to be part of) => Large; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Large, r1.rel: Ever want to be part of, r0.namespace: freebase, r1.arg2: the Hip Hop dance world, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Large) => Large; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Large, r0.namespace: reverb, r0.arg2: the Hip Hop dance world, r0.rel: Ever want to be part of) => Large
What country is most famous for the dance hip hop?	item	-65.50285298427345	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Item, r0.namespace: reverb, r0.arg2: the Hip Hop dance world, r0.rel: Ever want to be part of) => Item; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Item, r0.namespace: reverb, r0.arg2: the Hip Hop dance world, r0.rel: Ever want to be part of) => Item
What country is most famous for the dance hip hop?	hockessin pal	-65.50529847108162	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The Hockessin PAL, r0.namespace: reverb, r0.arg2: ballet and hip hop dance classes, r0.rel: is offering) => The Hockessin PAL; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The Hockessin PAL, r0.namespace: reverb, r0.arg2: ballet and hip hop dance classes, r0.rel: is offering) => The Hockessin PAL
What country is most famous for the dance hip hop?	fad	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: FAD OR, r0.namespace: reverb, r0.arg2: OUR FAD HIP HOP DANCE CREW, r0.rel: BE PART OF) => FAD OR; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: FAD OR, r0.namespace: reverb, r0.arg2: OUR FAD HIP HOP DANCE CREW, r0.rel: BE PART OF) => FAD OR
What country is most famous for the dance hip hop?	garments	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: the garments, r0.namespace: reverb, r0.arg2: HIP HOP DANCE PARTIES, r0.rel: would be perfect to wear to) => the garments; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: the garments, r0.namespace: reverb, r0.arg2: HIP HOP DANCE PARTIES, r0.rel: would be perfect to wear to) => the garments
What country is most famous for the dance hip hop?	few weeks	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: a few weeks, r0.namespace: reverb, r0.arg2: current hip hop & dance tracks, r0.rel: ago was mostly) => a few weeks; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: a few weeks, r0.namespace: reverb, r0.arg2: current hip hop & dance tracks, r0.rel: ago was mostly) => a few weeks
What country is most famous for the dance hip hop?	kerry	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Kerry, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is going to have a go at) => Kerry; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Kerry, r1.rel: is going to have a go at, r0.namespace: freebase, r1.arg2: hip hop dancing, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Kerry) => Kerry; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Kerry, r0.namespace: reverb, r0.arg2: hip hop dancing, r0.rel: is going to have a go at) => Kerry
What country is most famous for the dance hip hop?	feature	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: feature, r0.namespace: reverb, r0.arg2: rock , dance , electronica , techno , hip hop, r0.rel: here are) => feature; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: feature, r0.namespace: reverb, r0.arg2: rock , dance , electronica , techno , hip hop, r0.rel: here are) => feature
What country is most famous for the dance hip hop?	nano	-65.50883084091564	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Nano, r0.namespace: reverb, r0.arg2: his hip hop career and dance music, r0.rel: is pursuing) => Nano; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Nano, r0.namespace: reverb, r0.arg2: his hip hop career and dance music, r0.rel: is pursuing) => Nano
What country is most famous for the dance hip hop?	classes	-65.51181976923674	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The classes, r0.namespace: reverb, r0.arg2: jazz & hip hop dance, r0.rel: are a basic combination of) => The classes; who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: The classes, r0.namespace: reverb, r0.arg2: tap dance and hip-hop, r0.rel: are in) => The classes; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The classes, r0.namespace: reverb, r0.arg2: jazz & hip hop dance, r0.rel: are a basic combination of) => The classes; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: The classes, r0.namespace: reverb, r0.arg2: tap dance and hip-hop, r0.rel: are in) => The classes
What country is most famous for the dance hip hop?	mia?s only solace	-65.51589558058369	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Mia?s only solace, r0.namespace: reverb, r0.arg2: hip-hop dancing, r0.rel: is her private passion for) => Mia?s only solace; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Mia?s only solace, r0.namespace: reverb, r0.arg2: hip-hop dancing, r0.rel: is her private passion for) => Mia?s only solace
What country is most famous for the dance hip hop?	one highlight	-65.51589558058369	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: One highlight, r0.namespace: reverb, r0.arg2: the HipHop Dance Battle, r0.rel: had to be) => One highlight; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: One highlight, r0.namespace: reverb, r0.arg2: the HipHop Dance Battle, r0.rel: had to be) => One highlight
What country is most famous for the dance hip hop?	carli	-65.51589558058369	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: Carli, r0.namespace: reverb, r0.arg2: the hip-hop dance team, r0.rel: was captain of) => Carli; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: Carli, r0.namespace: reverb, r0.arg2: the hip-hop dance team, r0.rel: was captain of) => Carli
What country is most famous for the dance hip hop?	access	-65.5185448579592	who be famous for the dance hip hop ? => $x: ($x, be famous for, the dance hip hop) => $x: ($x, be, dance hip hop) => (r0.arg1: access, r0.namespace: reverb, r0.arg2: 'hip hop dance class, r0.rel: are named things like) => access; what city be famous for the dance hip hop ? => $x: ($x, "type", city) ($x, be famous for, the dance hip hop) => $x: ($x, "type", city) ($x, be, dance hip hop) => (r0.arg1: Access, r1.rel: are named things like, r0.namespace: freebase, r1.arg2: 'hip hop dance class, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: access) => Access; who be the most famous for hip hop dance ? => $x: ($x, be the most famous for, hip hop dance) => $x: ($x, be, hip hop dance) => (r0.arg1: access, r0.namespace: reverb, r0.arg2: 'hip hop dance class, r0.rel: are named things like) => access
What are some fun teen fashion websites?	teenwag.com	-58.884940945463725	what be some fun teen clothing website ? => $x: ($x, be, some fun teen clothing website) => $x: ($x, be, fun teen website) => (r0.arg1: Teenwag.com, r0.namespace: reverb, r0.arg2: the most fun teen WEBSITE EVER, r0.rel: is) => Teenwag.com; what be some fun website teen clothing ? => $x: ($x, be, some fun website teen clothing) => $x: ($x, be, fun website teen) => (r0.arg1: Teenwag.com, r0.namespace: reverb, r0.arg2: the most fun teen WEBSITE EVER, r0.rel: is) => Teenwag.com; what be some fun teen fasion website ? => $x: ($x, be, some fun teen fasion website) => $x: ($x, be, fun teen website) => (r0.arg1: Teenwag.com, r0.namespace: reverb, r0.arg2: the most fun teen WEBSITE EVER, r0.rel: is) => Teenwag.com; what be some fun teen this website ? => $x: ($x, be, some fun teen this website) => $x: ($x, be, fun teen website) => (r0.arg1: Teenwag.com, r0.namespace: reverb, r0.arg2: the most fun teen WEBSITE EVER, r0.rel: is) => Teenwag.com
What are the leading producers of WHEAT?	iran	2.3658246947857338	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: Mishra?s unsubstantiated assertion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => Iran; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: Mishra?s unsubstantiated assertion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => Iran; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran
What are the leading producers of WHEAT?	italy	2.3436212272575903	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy
What are the leading producers of WHEAT?	sonora	2.3436212272575903	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora
What are the leading producers of WHEAT?	china	2.1680974220584606	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; who be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; who be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the largest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: Northwest wheat producers, r0.rel: is an important market for) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the largest producer of wheat, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s biggest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s largest Wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's largest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's largest producer and consumer of wheat, r0.rel: is) => China; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: globalization?s benefits, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China
What are the leading producers of WHEAT?	state	2.151444821412354	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who have the lead producer of wheat ? => $x: ($x, have the lead producer of, wheat) => $x: ($x, lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state
What are the leading producers of WHEAT?	kansas	-35.607195313658536	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: the largest wheat producer, r0.rel: was) => Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas
What are the leading producers of WHEAT?	india	-35.62384791430463	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: the only top-five wheat producer, r0.rel: is) => India; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: the second largest producer of wheat in the world, r0.rel: is) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India
What are the leading producers of WHEAT?	australia	-35.62384791430463	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: a big wheat producer and exporter, r0.rel: is currently) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia
What are the leading producers of WHEAT?	alberta	-35.62384791430463	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta
What are the leading producers of WHEAT?	france	-35.62384791430463	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France
What are the leading producers of WHEAT?	morocco	-35.63633736478923	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco
What are the leading producers of WHEAT?	canada	-35.63633736478923	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading global exporter of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading global exporter of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading global exporter of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading global exporter of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: a big wheat producer, r0.rel: is) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the Ontario Wheat Producers, r0.rel: is working with) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: is one of) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the fifth largest wheat producer, r0.rel: is) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: a major spring-wheat producer, r0.rel: is) => Canada; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada
What are the leading producers of WHEAT?	north dakota	-35.64605138183278	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota
What are the leading producers of WHEAT?	puglia	-35.77555065456005	what be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; who be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia
What are the leading producers of WHEAT?	united states	-35.792029732486455	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States
What are the leading producers of WHEAT?	saskatchewan	-35.808682333132566	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan
What are the leading producers of WHEAT?	ukraine	-35.82157518703191	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who have the largest producer of wheat ? => $x: ($x, have the largest producer of, wheat) => $x: ($x, largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine
What are the leading producers of WHEAT?	arizona	-39.692903654559984	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona
What are the leading producers of WHEAT?	kazakhstan	-39.70400538832406	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan
What are the leading producers of WHEAT?	egypt	-39.71233168864711	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt
What are the leading producers of WHEAT?	algiers	-39.71233168864711	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers
What are the leading producers of WHEAT?	food	-39.71880770000949	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food
What are the leading producers of WHEAT?	california	-39.71880770000949	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California
What are the leading producers of WHEAT?	oklahoma	-39.71880770000949	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: the low-cost wheat producer, r0.rel: is) => Oklahoma; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma
What are the leading producers of WHEAT?	western madhya pradesh	-39.87218720650588	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: a major producer of wheat, r0.rel: is) => Western Madhya Pradesh; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh
What are the leading producers of WHEAT?	u.s	-39.88508006040523	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S
What are the leading producers of WHEAT?	washington	-39.88508006040523	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: the 4th largest wheat producer, r0.rel: is) => Washington; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington
What are the leading producers of WHEAT?	irrigated districts	-39.89063092728726	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts
What are the leading producers of WHEAT?	region	-39.89063092728726	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region
What are the leading producers of WHEAT?	?green springs	-39.90173266105133	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs
What are the leading producers of WHEAT?	today kansas	-39.90173266105133	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be the main producer of wheat ? => $x: ($x, be the main producer of, wheat) => $x: ($x, producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas
What are the leading producers of WHEAT?	eu	-45.142230536381106	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: the EU, r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: are) => the EU
What are the leading producers of WHEAT?	frustration	-45.142230536381106	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Frustration, r0.namespace: reverb, r0.arg2: the word wheat producers, r0.rel: is) => Frustration
What are the leading producers of WHEAT?	russia	-45.1577729636508	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Russia, r0.namespace: reverb, r0.arg2: the third largest wheat producer, r0.rel: is) => Russia
What are the leading producers of WHEAT?	pakistan	-45.1577729636508	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Pakistan, r0.namespace: reverb, r0.arg2: the 7th largest wheat producer, r0.rel: is) => Pakistan
What are the leading producers of WHEAT?	program	-45.17720099773793	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: wheat producers, r0.rel: was rejected by) => The program
What are the leading producers of WHEAT?	council	-45.18552729806099	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: The Council, r0.namespace: reverb, r0.arg2: wheat producers, r0.rel: is supported voluntarily by) => The Council
What are the leading producers of WHEAT?	colombia	-45.18552729806099	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Colombia, r0.namespace: reverb, r0.arg2: a major wheat producer, r0.rel: was once) => Colombia; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Colombia, r0.namespace: reverb, r0.arg2: U.S. wheat producers, r0.rel: has been a top export market for) => Colombia
What are the leading producers of WHEAT?	trial	-45.18552729806099	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: the trial, r0.namespace: reverb, r0.arg2: Michigan wheat producers, r0.rel: is to provide) => the trial
What are the leading producers of WHEAT?	illinois	-45.1888578181902	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Illinois, r0.namespace: reverb, r0.arg2: the top U.S. soft red winter wheat producers, r0.rel: is among) => Illinois
What are the leading producers of WHEAT?	shandong	-45.19177202330327	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Shandong, r0.namespace: reverb, r0.arg2: a essential wheat producer and accounts, r0.rel: is) => Shandong
What are the leading producers of WHEAT?	u.s.	-45.33995780910837	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: the U.S., r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: are) => the U.S.
What are the leading producers of WHEAT?	john linton	-45.33995780910837	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: John Linton, r0.namespace: reverb, r0.arg2: the champion wheat producer, r0.rel: is) => John Linton
What are the leading producers of WHEAT?	country	-45.33995780910837	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: The country, r0.namespace: reverb, r0.arg2: the second-largest wheat producer, r0.rel: is) => The country
What are the leading producers of WHEAT?	john thaemert	-45.36327145001293	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: John Thaemert, r0.namespace: reverb, r0.arg2: a wheat producer, r0.rel: is) => John Thaemert
What are the leading producers of WHEAT?	cyndi	-45.36327145001293	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: Cyndi, r0.namespace: reverb, r0.arg2: commercial wheat producers, r0.rel: are) => Cyndi
What are the leading producers of WHEAT?	market	-45.36327145001293	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: The market, r0.namespace: reverb, r0.arg2: wheat producers, r0.rel: is sending) => The market
What are the leading producers of WHEAT?	michigan wheat program	-45.374928270465205	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: the Michigan Wheat Program, r0.namespace: reverb, r0.arg2: wheat producers, r0.rel: was approved by) => the Michigan Wheat Program
What are the leading producers of WHEAT?	few	-45.374928270465205	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: few, r0.namespace: reverb, r0.arg2: active full-time wheat producers, r0.rel: are) => few
What are the leading producers of WHEAT?	protection	-45.374928270465205	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, wheat producer) => (r0.arg1: protection, r0.namespace: reverb, r0.arg2: wheat producers, r0.rel: was provided to) => protection
What is related to a common jellyfish?	jellyfish	-56.404788990918306	what be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be associate with a common jellyfish ? => $x: ($x, be associate with, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be associate with the common jellyfish ? => $x: ($x, be associate with, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be significant in a common jellyfish ? => $x: ($x, be significant in, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be realt to a common jellyfish ? => $x: ($x, be realt to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be realt to a common jellyfish ? => $x: ($x, be realt to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be realate to a common jellyfish ? => $x: ($x, be realate to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; who be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; who be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish; what be along with a common jellyfish ? => $x: ($x, be along with, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish
What is related to a common jellyfish?	35 cm	-56.587713951960154	what be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be associate with a common jellyfish ? => $x: ($x, be associate with, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be associate with the common jellyfish ? => $x: ($x, be associate with, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be significant in a common jellyfish ? => $x: ($x, be significant in, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be realt to a common jellyfish ? => $x: ($x, be realt to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be realt to a common jellyfish ? => $x: ($x, be realt to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be realate to a common jellyfish ? => $x: ($x, be realate to, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; who be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; who be realt to the common jellyfish ? => $x: ($x, be realt to, the common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm; what be along with a common jellyfish ? => $x: ($x, be along with, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm
What is related to a common jellyfish?	corals	-61.801666990923266	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are transparent animals related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are tiny animals related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfishes and sea anemones, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish and sea anemones, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are transparent animals related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are tiny animals related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfishes and sea anemones, r0.rel: are related to) => Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish and sea anemones, r0.rel: are related to) => Corals
What is related to a common jellyfish?	polyps	-61.801666990923266	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The polyps, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => The polyps; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The polyps, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => The polyps
What is related to a common jellyfish?	ctenophores	-61.827571036372774	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: ctenophores, r0.namespace: reverb, r0.arg2: the jellyfish and swim, r0.rel: are related to) => ctenophores; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: ctenophores, r0.namespace: reverb, r0.arg2: the jellyfish and swim, r0.rel: are related to) => ctenophores
What is related to a common jellyfish?	hydroids	-61.999394263650544	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydroids, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Hydroids; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydroids, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Hydroids
What is related to a common jellyfish?	coral corals	-62.01049599741461	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: coral Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are closely related to) => coral Corals; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: coral Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are closely related to) => coral Corals
What is related to a common jellyfish?	hydras	-62.01049599741461	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydras, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: are related to) => Hydras; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydras, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: are related to) => Hydras
What is related to a common jellyfish?	hydra	-62.01049599741461	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: openie4, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: openie4, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra
What is related to a common jellyfish?	sea anemone	-62.02529830910004	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: the sea anemone, r0.namespace: reverb, r0.arg2: coral and jellyfish, r0.rel: is closely related to) => the sea anemone; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: the sea anemone, r0.namespace: reverb, r0.arg2: coral and jellyfish, r0.rel: is closely related to) => the sea anemone
What is related to a common jellyfish?	anemones	-62.19348012728186	what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Anemones, r0.namespace: openie4, r0.arg2: jellyfish and corals, r0.rel: are closely related to) => Anemones; what be related to a comon jellyfish ? => $x: ($x, be related to, a comon jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Anemones, r0.namespace: openie4, r0.arg2: jellyfish and corals, r0.rel: are closely related to) => Anemones
Do hotels have room service?	interstate 94	-51.12445614546385	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Interstate 94, r0.namespace: reverb, r0.arg2: a 130 room full service hotel, r0.rel: is) => Interstate 94; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Interstate 94, r0.namespace: reverb, r0.arg2: a 130 room full service hotel, r0.rel: is) => Interstate 94
Do hotels have room service?	prices	-51.12445614546385	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: prices, r0.namespace: reverb, r0.arg2: services and hotel rooms, r0.rel: are fixed for) => prices; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: prices, r0.namespace: reverb, r0.arg2: services and hotel rooms, r0.rel: are fixed for) => prices
Do hotels have room service?	corner	-51.12445614546385	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: the corner, r0.namespace: reverb, r0.arg2: any hotel room service, r0.rel: is better than) => the corner; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: the corner, r0.namespace: reverb, r0.arg2: any hotel room service, r0.rel: is better than) => the corner
Do hotels have room service?	hospitals	-51.1374081681886	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Hospitals, r0.namespace: reverb, r0.arg2: a full service hotel ? rooms, r0.rel: are very much like) => Hospitals; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Hospitals, r0.namespace: reverb, r0.arg2: a full service hotel ? rooms, r0.rel: are very much like) => Hospitals
Do hotels have room service?	wi-fi	-51.1374081681886	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Wi-fi, r0.namespace: reverb, r0.arg2: the hotel and 24 hour room service, r0.rel: is free throughout) => Wi-fi; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Wi-fi, r0.namespace: reverb, r0.arg2: the hotel and 24 hour room service, r0.rel: is free throughout) => Wi-fi
Do hotels have room service?	camping	-51.286161952283294	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: camping, r0.namespace: openie4, r0.arg2: a hotel without room service, r0.rel: is) => camping; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: camping, r0.namespace: openie4, r0.arg2: a hotel without room service, r0.rel: is) => camping
Do hotels have room service?	wifi access	-51.31570740682875	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Wifi access, r0.namespace: reverb, r0.arg2: the hotel and 24hr room service, r0.rel: is available in) => Wifi access; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Wifi access, r0.namespace: reverb, r0.arg2: the hotel and 24hr room service, r0.rel: is available in) => Wifi access
Do hotels have room service?	food	-51.31570740682875	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The food, r0.namespace: reverb, r0.arg2: Hilton Hotel room service, r0.rel: was like) => The food; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The food, r0.namespace: reverb, r0.arg2: Hilton Hotel room service, r0.rel: was like) => The food
Do hotels have room service?	janesville	-51.322183418191116	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Janesville, r0.namespace: reverb, r0.arg2: a 189 room Full Service Hotel, r0.rel: is) => Janesville; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Janesville, r0.namespace: reverb, r0.arg2: a 189 room Full Service Hotel, r0.rel: is) => Janesville
Do hotels have room service?	edison hotel	-51.322183418191116	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Edison Hotel, r0.namespace: openie4, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel; thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Edison Hotel, r0.namespace: reverb, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Edison Hotel, r0.namespace: openie4, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Edison Hotel, r0.namespace: reverb, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel
Do hotels have room service?	comfort inn	-51.322183418191116	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Comfort Inn, r0.namespace: reverb, r0.arg2: a 120 room full service hotel, r0.rel: is) => The Comfort Inn; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Comfort Inn, r0.namespace: reverb, r0.arg2: a 120 room full service hotel, r0.rel: is) => The Comfort Inn
Do hotels have room service?	ramada plaza abbotsford	-51.322183418191116	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Ramada Plaza Abbotsford, r0.namespace: reverb, r0.arg2: a 116 room full service hotel, r0.rel: is) => The Ramada Plaza Abbotsford; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Ramada Plaza Abbotsford, r0.namespace: reverb, r0.arg2: a 116 room full service hotel, r0.rel: is) => The Ramada Plaza Abbotsford
Do hotels have room service?	dutch fried meatball	-51.322183418191116	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: a Dutch fried meatball, r0.namespace: reverb, r0.arg2: hotel room service menus, r0.rel: is offered on) => a Dutch fried meatball; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: a Dutch fried meatball, r0.namespace: reverb, r0.arg2: hotel room service menus, r0.rel: is offered on) => a Dutch fried meatball
Do hotels have room service?	gay couple	-51.32736422728102	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: a gay couple, r0.namespace: reverb, r0.arg2: a hotel room or service, r0.rel: could be refused) => a gay couple; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: a gay couple, r0.namespace: reverb, r0.arg2: a hotel room or service, r0.rel: could be refused) => a gay couple
Do hotels have room service?	ramada plaza jfk	-51.331603071081844	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Ramada Plaza Jfk, r0.namespace: reverb, r0.arg2: The Only 478 Room , Full Service Hotel, r0.rel: Is) => The Ramada Plaza Jfk; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Ramada Plaza Jfk, r0.namespace: reverb, r0.arg2: The Only 478 Room , Full Service Hotel, r0.rel: Is) => The Ramada Plaza Jfk
Do hotels have room service?	executive inn	-51.33513544091588	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Executive Inn, r0.namespace: reverb, r0.arg2: a 472 room full-service hotel, r0.rel: is) => The Executive Inn; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Executive Inn, r0.namespace: reverb, r0.arg2: a 472 room full-service hotel, r0.rel: is) => The Executive Inn
Do hotels have room service?	hotel selkirk	-51.3390210477333	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Hotel Selkirk, r0.namespace: reverb, r0.arg2: a full service 30-room boutique hotel, r0.rel: is) => The Hotel Selkirk; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Hotel Selkirk, r0.namespace: reverb, r0.arg2: a full service 30-room boutique hotel, r0.rel: is) => The Hotel Selkirk
Do hotels have room service?	jiao zhou road	-51.348087463640624	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Jiao Zhou Road, r0.namespace: reverb, r0.arg2: a 28-room full-service hotel, r0.rel: is) => Jiao Zhou Road; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Jiao Zhou Road, r0.namespace: reverb, r0.arg2: a 28-room full-service hotel, r0.rel: is) => Jiao Zhou Road
Do hotels have room service?	table	-51.35279729008599	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The table, r0.namespace: reverb, r0.arg2: a 150-room full-service hotel, r0.rel: is based on) => The table; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The table, r0.namespace: reverb, r0.arg2: a 150-room full-service hotel, r0.rel: is based on) => The table
Do hotels have room service?	w hotel	-51.35279729008599	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The W Hotel, r0.namespace: reverb, r0.arg2: an 11-story , 305-room full-service hotel, r0.rel: is) => The W Hotel; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The W Hotel, r0.namespace: reverb, r0.arg2: an 11-story , 305-room full-service hotel, r0.rel: is) => The W Hotel
Do hotels have room service?	jewel hotel	-51.35279729008599	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: The Jewel Hotel, r0.namespace: reverb, r0.arg2: a 139-room , full-service boutique hotel, r0.rel: is) => The Jewel Hotel; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Jewel Hotel, r0.namespace: reverb, r0.arg2: a 139-room , full-service boutique hotel, r0.rel: is) => The Jewel Hotel
Do hotels have room service?	avert express	-51.35279729008599	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Avert Express, r0.namespace: reverb, r0.arg2: our hotel.Room Service, r0.rel: are minutes away from) => Avert Express; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Avert Express, r0.namespace: reverb, r0.arg2: our hotel.Room Service, r0.rel: are minutes away from) => Avert Express
Do hotels have room service?	largest loan	-51.35456347500299	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: the largest loan, r0.namespace: reverb, r0.arg2: a 233-room , full-service hotel, r0.rel: is secured by) => the largest loan; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: the largest loan, r0.namespace: reverb, r0.arg2: a 233-room , full-service hotel, r0.rel: is secured by) => the largest loan
Do hotels have room service?	hotel room service	-54.95291385568292	thing in hotel room service ? => $x: ($x, be thing in, hotel room service) => $x: ($x, be, hotel room service) => (r0.arg1: Hotel Room Service, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Hotel%20Room%20Service, r0.rel: can be found on Wikipedia at) => Hotel Room Service; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Hotel Room Service, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Hotel%20Room%20Service, r0.rel: can be found on Wikipedia at) => Hotel Room Service
Do hotels have room service?	choices	-55.783021054559725	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: The choices, r0.namespace: openie4, r0.arg2: large hotels, r0.rel: are rooms in) => The choices; room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: The choices, r0.namespace: reverb, r0.arg2: large hotels, r0.rel: are rooms in) => The choices; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: The choices, r0.namespace: openie4, r0.arg2: large hotels, r0.rel: are rooms in) => The choices
Do hotels have room service?	saal maritim	-55.81256650910518	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: Saal Maritim, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: is the room in) => Saal Maritim
Do hotels have room service?	today firms	-55.823668242869246	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: Today firms, r0.namespace: reverb, r0.arg2: nearby hotels, r0.rel: are renting rooms in) => Today firms; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: Today firms, r0.namespace: reverb, r0.arg2: nearby hotels, r0.rel: are renting rooms in) => Today firms
Do hotels have room service?	body	-55.823668242869246	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: The body, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: is a room in) => The body; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: The body, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: is a room in) => The body
Do hotels have room service?	vive le france	-55.823668242869246	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: Vive le France, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: was our room in) => Vive le France; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: Vive le France, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: was our room in) => Vive le France
Do hotels have room service?	housing	-55.83199454319231	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: Housing, r0.namespace: reverb, r0.arg2: hotels, r0.rel: will either be shared rooms in) => Housing; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: Housing, r0.namespace: reverb, r0.arg2: hotels, r0.rel: will either be shared rooms in) => Housing
Do hotels have room service?	events	-55.838470554554675	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: such events, r0.namespace: reverb, r0.arg2: hotels, r0.rel: is difficult to find vacant rooms in) => such events; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: such events, r0.namespace: reverb, r0.arg2: hotels, r0.rel: is difficult to find vacant rooms in) => such events
Do hotels have room service?	70 ther	-55.99185006105107	room sevice in hotel ? => $x: ($x, be room sevice in, hotel) => $x: ($x, be room in, hotel) => (r0.arg1: 70 Ther, r0.namespace: openie4, r0.arg2: the hotel, r0.rel: are 39 rooms in) => 70 Ther; room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: 70 Ther, r0.namespace: openie4, r0.arg2: the hotel, r0.rel: are 39 rooms in) => 70 Ther
Do hotels have room service?	branch	-58.47192837014194	room service for hotel ? => $x: ($x, be room service for, hotel) => $x: ($x, be room, hotel) => (r0.arg1: Each branch, r0.namespace: reverb, r0.arg2: the hotel, r0.rel: is a room for) => Each branch
Do hotels have room service?	jock	-59.040980863653616	what have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Jock, r0.namespace: reverb, r0.arg2: 10 hotel rooms Service, r0.rel: has) => Jock; who have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Jock, r0.namespace: reverb, r0.arg2: 10 hotel rooms Service, r0.rel: has) => Jock
Do hotels have room service?	peppy	-59.08242733637282	what have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Peppy, r0.namespace: reverb, r0.arg2: hotel room service and bartending, r0.rel: has also worked in) => Peppy; who have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Peppy, r0.namespace: reverb, r0.arg2: hotel room service and bartending, r0.rel: has also worked in) => Peppy
What do scientists classify?	bacteria	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify of ? => $x: (scientist, classify of, $x) => $x: (scientist, classify of, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: have classified various types of) => bacteria; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria
What do scientists classify?	galaxies	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: openie4, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Astronomers, r0.namespace: openie4, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Help astronomers, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies
What do scientists classify?	butterflies	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies
What do scientists classify?	dinosaurs	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs
What do scientists classify?	birds	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds
What do scientists classify?	bats	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: bats, r0.rel: classify) => bats; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats
What do scientists classify?	insects	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects
What do scientists classify?	emr	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR
What do scientists classify?	volcanoes	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes
What do scientists classify?	hobbit	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit
What do scientists classify?	sound	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound
What do scientists classify?	plankton	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton
What do scientists classify?	dragonflies	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies
What do scientists classify?	glaucoma	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma
What do scientists classify?	dung beetles	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles
What do scientists classify?	species	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: reactions and biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: 's Opinion Biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: have been classifying) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the species, r0.rel: are yet to classify) => the species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species
What do scientists classify?	fruits	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits
What do scientists classify?	systems	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems
What do scientists classify?	organisms	2.3824772954318405	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: biologists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classified) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms
What do scientists classify?	soils	2.3436212272575903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils
What do scientists classify?	creatures	2.3436212272575903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures
What do scientists classify?	pinnipedia	2.3436212272575903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia
What do scientists classify?	tarsiers	2.3436212272575903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers
What do scientists classify?	system	2.2142954772500225	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system
What do scientists classify?	ngc 4945	2.2142954772500225	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945
What do scientists classify?	solar flares	2.2142954772500225	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares
What do scientists classify?	pluto	2.2142954772500225	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: trying to classify) => Pluto; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: the astronomers, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classifying) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: re-classified) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Some astronomers, r0.namespace: reverb, r0.arg2: Pluto, r0.rel: would classify) => Pluto; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto
What do scientists classify?	living organisms	2.2142954772500225	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: biologists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms
What do scientists classify?	variants	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants
What do scientists classify?	techniques	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques
What do scientists classify?	fruits vegetables	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: fruits and vegetables, r0.rel: classify) => fruits and vegetables
What do scientists classify?	cats	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats
What do scientists classify?	matter	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter
What do scientists classify?	landscape	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape
What do scientists classify?	human race	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race
What do scientists classify?	particular species	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: particular species, r0.rel: classify) => particular species
What do scientists classify?	different bacteria	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria
What do scientists classify?	hypersonic speeds	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds
What do scientists classify?	multicellular algae	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: multicellular algae, r0.rel: classify) => multicellular algae
What do scientists classify?	american robin	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin
What do scientists classify?	indians	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians
What do scientists classify?	nature	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature
What do scientists classify?	groups	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups
What do scientists classify?	animal characteristics	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics
What do scientists classify?	precipitation types	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types
What do scientists classify?	life	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: started to classify) => life; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life
What do scientists classify?	occupation	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation
What do scientists classify?	activity	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity
What do scientists classify?	living world	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world
What do scientists classify?	specimens	2.184750022704568	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens; what do scientist classify at ? => $x: (scientist, classify at, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: specimens, r0.rel: classify) => specimens
Does fires do any bad to a forest?	western montana	-80.76554551818964	what do any bad for forest fire ? => $x: ($x, do any bad for, forest fire) => $x: ($x, bad for, forest fire) => (r0.arg1: western Montana, r0.namespace: reverb, r0.arg2: forest fires, r0.rel: was a particularly bad year for) => western Montana
Who is the author of the graphic novel - Watchmen?	whitson?s subject	-84.92076396478843	who be the aurthor of the graphic novel watchman ? => $x: ($x, be the aurthor of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the aurthor of the graphic novel watchman ? => $x: ($x, be the aurthor of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel watchman ? => $x: ($x, be the author of, the graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel watchman ? => $x: ($x, be the author of, the graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the aurthor of graphic novel watchman ? => $x: ($x, be the aurthor of, graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the aurthor of graphic novel watchman ? => $x: ($x, be the aurthor of, graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman graphic novel ? => $x: ($x, be the author of, the watchman graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman graphic novel ? => $x: ($x, be the author of, the watchman graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the aurthor of a graphic novel watchman ? => $x: ($x, be the aurthor of, a graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the aurthor of a graphic novel watchman ? => $x: ($x, be the aurthor of, a graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of graphic novel watchman ? => $x: ($x, be the author of, graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of graphic novel watchman ? => $x: ($x, be the author of, graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of graphic novel watchman ? => $x: ($x, be the auther of, graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of graphic novel watchman ? => $x: ($x, be the auther of, graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of this graphic novel watchman ? => $x: ($x, be the author of, this graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of this graphic novel watchman ? => $x: ($x, be the author of, this graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of a graphic novel watchman ? => $x: ($x, be the author of, a graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of a graphic novel watchman ? => $x: ($x, be the author of, a graphic novel watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the autor of the graphic novel watchman ? => $x: ($x, be the autor of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the autor of the graphic novel watchman ? => $x: ($x, be the autor of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of the graphic novel watchman ? => $x: ($x, be the auther of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of the graphic novel watchman ? => $x: ($x, be the auther of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman a graphic novel ? => $x: ($x, be the author of, the watchman a graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman a graphic novel ? => $x: ($x, be the author of, the watchman a graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the originator of the graphic novel watchman ? => $x: ($x, be the originator of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the originator of the graphic novel watchman ? => $x: ($x, be the originator of, the graphic novel watchman) => $x: ($x, be of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel the watchman ? => $x: ($x, be the author of, the graphic novel the watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel the watchman ? => $x: ($x, be the author of, the graphic novel the watchman) => $x: ($x, be author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic watchman novel ? => $x: ($x, be the author of, the graphic watchman novel) => $x: ($x, be author of, graphic watchman novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic watchman novel ? => $x: ($x, be the author of, the graphic watchman novel) => $x: ($x, be author of, graphic watchman novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the autor of the watchman graphic novel ? => $x: ($x, be the autor of, the watchman graphic novel) => $x: ($x, be of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the autor of the watchman graphic novel ? => $x: ($x, be the autor of, the watchman graphic novel) => $x: ($x, be of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of the watchman graphic novel ? => $x: ($x, be the auther of, the watchman graphic novel) => $x: ($x, be of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the auther of the watchman graphic novel ? => $x: ($x, be the auther of, the watchman graphic novel) => $x: ($x, be of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman the graphic novel ? => $x: ($x, be the author of, the watchman the graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman the graphic novel ? => $x: ($x, be the author of, the watchman the graphic novel) => $x: ($x, be author of, watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject
Name the temperature measuring instrument?	thermometer	-57.14739018832378	what be temperature measure instrument ? => $x: ($x, be, temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer
What is the average cost of a denture reline?	dentures	-84.69228768693901	what be the average of a denture reline ? => $x: ($x, be the average of, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: Dentures, r0.namespace: reverb, r0.arg2: denture relines, r0.rel: there are) => Dentures; what be the average of a denture reline ? => $x: ($x, be the average of, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: Dentures, r0.namespace: reverb, r0.arg2: denture relines, r0.rel: there are) => Dentures
What is the average cost of a denture reline?	silent sleep	-84.90193670785611	what be the average of a denture reline ? => $x: ($x, be the average of, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: The Silent Sleep, r0.namespace: reverb, r0.arg2: GC denture reline material, r0.rel: is fit with) => The Silent Sleep; what be the average of a denture reline ? => $x: ($x, be the average of, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: The Silent Sleep, r0.namespace: reverb, r0.arg2: GC denture reline material, r0.rel: is fit with) => The Silent Sleep
What plants grow in the Northern Atlantic Ocean?	sea_weed	-57.416547456833214	what plant grow in both atlantic ocean ? => $x: ($x, "is a", plant) ($x, grow in, both atlantic ocean) => $x: ($x, "is a", plant) ($x, grow in, atlantic ocean) => (r0.arg1: sea_weed, r1.rel: grows wild in, r0.namespace: nell, r1.arg2: the Atlantic ocean, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: SEAWEED) => sea_weed; what plant grow in the northen atlantic ocean ? => $x: ($x, "is a", plant) ($x, grow in, the northen atlantic ocean) => $x: ($x, "is a", plant) ($x, grow in, atlantic ocean) => (r0.arg1: sea_weed, r1.rel: grows wild in, r0.namespace: nell, r1.arg2: the Atlantic ocean, r0.arg2: plant, r0.rel: is a, r1.namespace: reverb, r1.arg1: SEAWEED) => sea_weed
Where is mayans country?	tulum	-45.517131873879976	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the only Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: a Mayan City, r0.rel: was) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: openie4, r0.arg2: the only Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: a spectacular Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was once the port of) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the largest Mayan coastal city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the best preserved coastal Mayan cities, r0.rel: is one of) => Tulum
Where is mayans country?	yaxha	-45.53461710455838	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Yaxha, r0.namespace: reverb, r0.arg2: a large Mayan city, r0.rel: was) => Yaxha
Where is mayans country?	palenque	-45.53461710455838	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Palenque, r0.namespace: reverb, r0.arg2: an old Mayan city, r0.rel: is) => Palenque; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Palenque, r0.namespace: reverb, r0.arg2: the few Mayan cities, r0.rel: is one of) => Palenque
Where is mayans country?	satellite images	-45.53461710455838	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: satellite images, r0.namespace: reverb, r0.arg2: Mayan cities, r0.rel: are helping uncover) => satellite images
Where is mayans country?	streets	-45.53461710455838	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The streets, r0.namespace: reverb, r0.arg2: Mayan cities, r0.rel: are named after) => The streets
Where is mayans country?	chichen itza	-45.54627392501065	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The Chichen Itza, r0.namespace: reverb, r0.arg2: the largest Mayan City, r0.rel: is) => The Chichen Itza; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: the most famous Mayan city, r0.rel: is) => Chichen Itza; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: a sprawling ancient Mayan city, r0.rel: is) => Chichen Itza
Where is mayans country?	becan	-45.54627392501065	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Becan, r0.namespace: reverb, r0.arg2: the only Mayan city, r0.rel: is also) => Becan
Where is mayans country?	toledo	-45.54627392501065	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Toledo, r0.namespace: reverb, r0.arg2: the Mayan cities, r0.rel: were concentrated in) => Toledo
Where is mayans country?	playa del carmen	-45.54627392501065	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Playa Del Carmen, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was spent at) => Playa Del Carmen
Where is mayans country?	tikal	-45.554600225333715	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: all Mayan cities, r0.rel: was the grandest of) => Tikal; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: the largest Mayan cities, r0.rel: was once one of) => Tikal; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: an ancient Mayan city, r0.rel: is the site of) => Tikal
Where is mayans country?	comalcalco	-45.554600225333715	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Comalcalco, r0.namespace: reverb, r0.arg2: the first and only Mayan city, r0.rel: is) => Comalcalco
Where is mayans country?	coba	-45.554600225333715	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: reverb, r0.arg2: the largest Mayan Cities, r0.rel: is one of) => Coba; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: openie4, r0.arg2: the largest Mayan cities, r0.rel: was one of) => Coba; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: openie4, r0.arg2: one of the largest Mayan cities, r0.rel: was) => Coba
Where is mayans country?	yaxuna	-45.554600225333715	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Yaxuna, r0.namespace: reverb, r0.arg2: a minor Mayan world city, r0.rel: may be) => Yaxuna
Where is mayans country?	guatemala	-45.560844950576	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: this Mayan city, r0.rel: must have been like in) => Guatemala; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: an ancient Mayan king, r0.namespace: reverb, r0.arg2: Guatemala, r0.rel: has been discovered in) => Guatemala; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan & Catholic faiths, r0.namespace: reverb, r0.arg2: Guatemala, r0.rel: have merged in) => Guatemala; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala
Where is mayans country?	belize	-45.560844950576	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: openie4, r0.arg2: several Mayan city states, r0.rel: was the site of) => Belize; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: reverb, r0.arg2: several Mayan city states, r0.rel: was the site of) => Belize; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: openie4, r0.arg2: the site of several Mayan city states, r0.rel: was) => Belize
Where is mayans country?	lamanai	-45.560844950576	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Lamanai, r0.namespace: reverb, r0.arg2: the longest occupied Mayan cities, r0.rel: is one of) => Lamanai
Where is mayans country?	mouth	-45.71485914660724	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the mouth, r0.namespace: reverb, r0.arg2: a Mayan City, r0.rel: is) => the mouth
Where is mayans country?	merida	-45.71485914660724	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: openie4, r0.arg2: a Mayan city, r0.rel: is) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: reverb, r0.arg2: a Mayan city, r0.rel: is) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was built over) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: openie4, r0.arg2: the site of the Mayan city of Tihoo, r0.rel: was founded on) => Merida
Where is mayans country?	guatemala aguateca	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Guatemala Aguateca, r0.namespace: reverb, r0.arg2: a wonderful Mayan city, r0.rel: is) => Guatemala Aguateca
Where is mayans country?	copan	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Copan, r0.namespace: reverb, r0.arg2: the dominant Mayan city, r0.rel: was) => Copan; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Copan, r0.namespace: reverb, r0.arg2: the first Mayan city, r0.rel: was) => Copan
Where is mayans country?	cancun streets	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Cancun streets, r0.namespace: reverb, r0.arg2: Mayan cities, r0.rel: are named after) => Cancun streets
Where is mayans country?	xamanek	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: XamanEk, r0.namespace: reverb, r0.arg2: a hidden Mayan city, r0.rel: is) => XamanEk
Where is mayans country?	georgia	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Georgia, r0.namespace: reverb, r0.arg2: the fabled Mayan city, r0.rel: is) => Georgia
Where is mayans country?	design	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the Mayan cities, r0.rel: is from) => the design
Where is mayans country?	special interest	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: special interest, r0.namespace: reverb, r0.arg2: the great Mayan city, r0.rel: is) => special interest
Where is mayans country?	campeche calakmul	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Campeche Calakmul, r0.namespace: reverb, r0.arg2: an important Mayan city, r0.rel: was) => Campeche Calakmul
Where is mayans country?	maya	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the Maya, r0.namespace: reverb, r0.arg2: the dominant Mayan city, r0.rel: was) => the Maya
Where is mayans country?	sayaxche village	-45.732344377285656	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Sayaxche Village, r0.namespace: reverb, r0.arg2: the Ancient Mayan City, r0.rel: is) => Sayaxche Village
Where is mayans country?	jer?nimo	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Jer?nimo, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was taken to) => Jer?nimo
Where is mayans country?	site	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a large Mayan city, r0.rel: was once) => The site
Where is mayans country?	side trips	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Side trips, r0.namespace: reverb, r0.arg2: ancient Mayan cities, r0.rel: are available to) => Side trips; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Side trips, r0.namespace: openie4, r0.arg2: available to ancient Mayan cities, r0.rel: are) => Side trips
Where is mayans country?	jaguar	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the Jaguar, r0.namespace: reverb, r0.arg2: important Mayan cities, r0.rel: were introduced into) => the Jaguar
Where is mayans country?	spacious supple tulum bag	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The spacious and supple Tulum bag, r0.namespace: reverb, r0.arg2: a Mayan city, r0.rel: is named after) => The spacious and supple Tulum bag
Where is mayans country?	1200 ad	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: 1200 Ad, r0.namespace: reverb, r0.arg2: The Only Mayan City Built, r0.rel: Is) => 1200 Ad
Where is mayans country?	chac	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chac, r0.namespace: reverb, r0.arg2: several Mayan cities, r0.rel: is one of) => Chac; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chac, r0.namespace: openie4, r0.arg2: one of several Mayan cities in the northern Yucatan, r0.rel: is) => Chac
Where is mayans country?	mexico tulum	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Mexico Tulum, r0.namespace: reverb, r0.arg2: a Late Post-Classic Mayan city, r0.rel: is) => Mexico Tulum
Where is mayans country?	tulum bag	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum bag, r0.namespace: reverb, r0.arg2: a Mayan city, r0.rel: is named after) => Tulum bag
Where is mayans country?	spacious suppletulum bag	-45.74400119773793	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: spacious and suppleTulum bag, r0.namespace: reverb, r0.arg2: a Mayan city, r0.rel: is named after) => spacious and suppleTulum bag
Where is mayans country?	little wooden huts	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: little wooden huts, r0.namespace: reverb, r0.arg2: the Mayan cities, r0.rel: is also seen in) => little wooden huts
Where is mayans country?	kaminaljuy ?	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Kaminaljuy ?, r0.namespace: reverb, r0.arg2: the earlier Mayan cities, r0.rel: was on of) => Kaminaljuy ?
Where is mayans country?	slabs	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Such slabs, r0.namespace: reverb, r0.arg2: later Mayan cities, r0.rel: were quite common in) => Such slabs
Where is mayans country?	m?rida	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: M?rida, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was originally the site of) => M?rida
Where is mayans country?	3500 years	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: 3500 years, r0.namespace: reverb, r0.arg2: the largest Mayan Cities, r0.rel: was one of) => 3500 years
Where is mayans country?	3,500 years	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: 3,500 years, r0.namespace: reverb, r0.arg2: the largest Mayan Cities, r0.rel: was one of) => 3,500 years
Where is mayans country?	today?s tours	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: today?s tours, r0.namespace: reverb, r0.arg2: the Ancient Mayan city, r0.rel: is to visit) => today?s tours
Where is mayans country?	louis	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Louis, r0.namespace: reverb, r0.arg2: the striking Mayan city, r0.rel: is named after) => Louis; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Louis, r0.namespace: reverb, r0.arg2: the striking Mayan city, r0.rel: is named soon) => Louis
Where is mayans country?	freighter chich?n itz?	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The freighter Chich?n Itz?, r0.namespace: reverb, r0.arg2: the ancient Mayan city, r0.rel: is named for) => The freighter Chich?n Itz?
Where is mayans country?	monster pools	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Such monster pools, r0.namespace: reverb, r0.arg2: other Mayan cities, r0.rel: are also known from) => Such monster pools
Where is mayans country?	continent	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the continent, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: is right next to) => the continent
Where is mayans country?	cop?n	-45.75232749806098	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Cop?n, r0.namespace: reverb, r0.arg2: the largest Mayan cities, r0.rel: was one of) => Cop?n; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Cop?n, r0.namespace: reverb, r0.arg2: all Mayan cities, r0.rel: was the most artistic of) => Cop?n; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Cop?n, r0.namespace: reverb, r0.arg2: the most artistic Mayan city, r0.rel: is described as) => Cop?n
What color are wedding dresses?	white	4.070178997139225	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: The white, r1.rel: would make, r0.namespace: openie4, r1.arg2: a delightful wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: White, r1.rel: would make, r0.namespace: reverb, r1.arg2: a delightful wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "is a", color) ($x, have, wedding dress) => $x: ($x, "is a", color) ($x, have, wedding dress) => (r0.arg1: WHITE, r1.rel: has been used for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color have wedding dress ? => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color have wedding dress ? => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White
What color are wedding dresses?	black	4.0497795613477425	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Eye color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "type", color) ($x, make, wedding dress) => $x: ($x, "type", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "is a", color) ($x, make, wedding dress) => $x: ($x, "is a", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; what color be as a wedding dress ? => $x: ($x, "is a kind of", color) ($x, be as, a wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black
What color are wedding dresses?	ecru	3.3812310795265335	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru
What color are wedding dresses?	red	3.3673539123214447	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red
What color are wedding dresses?	pink	3.356946036917628	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; what color be as a wedding dress ? => $x: ($x, "type", color) ($x, be as, a wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink
What color are wedding dresses?	photo	1.4952341068022883	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo
What color are wedding dresses?	left	1.4816344829413008	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which side be wedding dress ? => $x: ($x, "is an example of", side) ($x, be, wedding dress) => $x: ($x, "is an example of", side) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: two common pictures side, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; which side be wedding dress ? => $x: ($x, "is an example of", side) ($x, be, wedding dress) => $x: ($x, "is an example of", side) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: two common pictures side, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what side be wedding dress ? => $x: ($x, "is an example of", side) ($x, be, wedding dress) => $x: ($x, "is an example of", side) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: two common pictures side, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what side be wedding dress ? => $x: ($x, "is an example of", side) ($x, be, wedding dress) => $x: ($x, "is an example of", side) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: two common pictures side, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left
What color are wedding dresses?	materials	1.4646349531150666	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; which color be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; which colour be wedding dress ? => $x: ($x, "is an example of", color) ($x, be, wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color be as a wedding dress ? => $x: ($x, "is an example of", color) ($x, be as, a wedding dress) => $x: ($x, "is an example of", color) ($x, be, wedding dress) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; what color have wedding dress ? => $x: ($x, "is an example of", color) ($x, have, wedding dress) => $x: ($x, "is an example of", color) ($x, have, wedding dress) => (r0.arg1: Materials, r1.rel: has always occupied, r0.namespace: reverb, r1.arg2: new style wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials
What color are wedding dresses?	envy	-46.59844608638562	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Envy, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wore) => Envy
What color are wedding dresses?	marie osmond	-46.62758813751631	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Marie Osmond, r0.namespace: reverb, r0.arg2: first wedding dress, r0.rel: wears) => Marie Osmond
What color are wedding dresses?	lavinia	-46.62758813751631	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => Lavinia; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: reverb, r0.arg2: a white wedding dress, r0.rel: wore) => Lavinia; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: wore) => Lavinia
What color are wedding dresses?	amaya	-46.64507336819473	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Amaya, r0.namespace: reverb, r0.arg2: her white wedding dress, r0.rel: wore) => Amaya
What color are wedding dresses?	hs	-46.64507336819473	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: HS, r0.namespace: reverb, r0.arg2: a pink wedding dress, r0.rel: wore) => HS
What color are wedding dresses?	jacqueline kennedy	-46.64507336819473	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Jacqueline Kennedy, r0.namespace: reverb, r0.arg2: his designer wedding dress, r0.rel: wore) => Jacqueline Kennedy
What color are wedding dresses?	beverly hills	-46.64507336819473	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Beverly Hills, r0.namespace: reverb, r0.arg2: a Blue Wedding Dress, r0.rel: Wears) => Beverly Hills
What color are wedding dresses?	apache	-46.795769955698134	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Apache, r0.namespace: openie4, r0.arg2: the wedding dress, r0.rel: wearing) => the Apache
What color are wedding dresses?	kristen	-46.795769955698134	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Kristen, r0.namespace: openie4, r0.arg2: the Wedding Dress, r0.rel: wearing) => Kristen
What color are wedding dresses?	princess	-46.795769955698134	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the princess, r0.namespace: openie4, r0.arg2: her wedding dress, r0.rel: wearing) => the princess
What color are wedding dresses?	2011	-46.7961733591129	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: 2011, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => 2011
What color are wedding dresses?	english bridesmaids	-46.7961733591129	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: English bridesmaids, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => English bridesmaids
What color are wedding dresses?	girls	-46.7961733591129	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The girls, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => The girls
What color are wedding dresses?	keeley	-46.7961733591129	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Keeley, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wears) => Keeley
What color are wedding dresses?	fashion evening	-46.7961733591129	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: fashion and evening, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wear) => fashion and evening
What color are wedding dresses?	queen victoria	-46.813255186376544	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Queen Victoria, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => Queen Victoria
What color are wedding dresses?	british queen victoria	-46.813255186376544	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the British Queen Victoria, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => the British Queen Victoria
What color are wedding dresses?	vietnam brides	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Vietnam brides, r0.namespace: reverb, r0.arg2: red wedding dresses, r0.rel: wear) => Vietnam brides
What color are wedding dresses?	karin	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Karin, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wear) => Karin
What color are wedding dresses?	reason women	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the reason women, r0.namespace: reverb, r0.arg2: white wedding dresses, r0.rel: wear) => the reason women
What color are wedding dresses?	jimmy choo female cat	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: a Jimmy Choo female cat, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: wear) => a Jimmy Choo female cat
What color are wedding dresses?	kisho	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Kisho, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wear) => Kisho
What color are wedding dresses?	sixth bride	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the sixth bride, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: wore) => the sixth bride
What color are wedding dresses?	xd agito	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: XD agito, r0.namespace: reverb, r0.arg2: that wedding dress, r0.rel: wore) => XD agito
What color are wedding dresses?	groomsmen	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: groomsmen, r0.namespace: reverb, r0.arg2: formal wedding dress, r0.rel: wear) => groomsmen
What color are wedding dresses?	strauss	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Strauss, r0.namespace: reverb, r0.arg2: two wedding dresses, r0.rel: wore) => Strauss
What color are wedding dresses?	ages	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: ages, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => ages
What color are wedding dresses?	one woman	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: One woman, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: wore) => One woman; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: One woman, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => One woman
What color are wedding dresses?	rachel	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Rachel, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: wore) => Rachel
What color are wedding dresses?	women	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Women, r0.namespace: reverb, r0.arg2: white wedding dresses, r0.rel: wear) => Women
What color are wedding dresses?	olympus	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Olympus, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => Olympus
What color are wedding dresses?	western brides	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Western brides, r0.namespace: reverb, r0.arg2: white Wedding Dresses, r0.rel: wear) => Western brides
What color are wedding dresses?	foreign brides	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The foreign brides, r0.namespace: reverb, r0.arg2: white wedding dresses, r0.rel: wear) => The foreign brides
What color are wedding dresses?	pandora diy jewelry female cat	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: a pandora diy jewelry female cat, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: wear) => a pandora diy jewelry female cat
What color are wedding dresses?	china brides	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: china brides, r0.namespace: reverb, r0.arg2: red wedding dresses, r0.rel: wear) => china brides
What color are wedding dresses?	bride	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The bride, r0.namespace: openie4, r0.arg2: her wedding dress, r0.rel: wears) => The bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Bride, r0.namespace: openie4, r0.arg2: the wedding dress, r0.rel: wearing) => the Bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The bride, r0.namespace: reverb, r0.arg2: a black wedding dress, r0.rel: wore) => The bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Bride, r0.namespace: reverb, r0.arg2: a destination wedding dress, r0.rel: wears) => the Bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a White wedding dress, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a red wedding dress, r0.rel: wore) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: a bride, r0.namespace: openie4, r0.arg2: her mothers  wedding dress, r0.rel: wearing) => a bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a black wedding dress, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a formal wedding dresses, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: 3 wedding dresses, r0.rel: wore) => the bride; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: was) => the bride
What color are wedding dresses?	wartime wedding look	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the wartime wedding look, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wear) => the wartime wedding look
What color are wedding dresses?	80 women	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: 80 women, r0.namespace: reverb, r0.arg2: their wedding dresses, r0.rel: wore) => 80 women
What color are wedding dresses?	brides	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: red wedding dresses, r0.rel: wore) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: bright colored wedding dresses, r0.rel: wear) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: colored wedding dresses, r0.rel: wearing) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: their wedding dress, r0.rel: wear) => brides; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides
What color are wedding dresses?	ruth	-46.82531541024359	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Ruth, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => Ruth
What color are wedding dresses?	coco	-46.84280064092199	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Coco, r0.namespace: reverb, r0.arg2: her dream wedding dress, r0.rel: wear) => Coco
What color are wedding dresses?	zhang jing	-46.84280064092199	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Zhang Jing, r0.namespace: reverb, r0.arg2: big Wholesale Wedding dresses, r0.rel: wears) => Zhang Jing
A base with eight equal sides?	exports	-73.84834102728168	a base with eight equal one ? => $x: ($x, be a base with, eight equal one) => $x: ($x, be base with, eight) => (r0.arg1: exports, r0.namespace: reverb, r0.arg2: eight, r0.rel: was relatively broadly based with) => exports
A base with eight equal sides?	increase	-74.0541633142119	a base with eight equal one ? => $x: ($x, be a base with, eight equal one) => $x: ($x, be base with, eight) => (r0.arg1: The increase, r0.namespace: reverb, r0.arg2: eight, r0.rel: was broad-based with) => The increase
A base with eight equal sides?	ttm	-74.05548795289967	a base with eight equal one ? => $x: ($x, be a base with, eight equal one) => $x: ($x, be base with, eight) => (r0.arg1: TTM, r0.namespace: reverb, r0.arg2: eight US factories, r0.rel: is a US-based company with) => TTM
A base with eight equal sides?	first dorsal fin	-74.05902032273369	a base with eight equal one ? => $x: ($x, be a base with, eight equal one) => $x: ($x, be base with, eight) => (r0.arg1: The first dorsal fin, r0.namespace: reverb, r0.arg2: eight spines, r0.rel: is shot-based with) => The first dorsal fin
A base with eight equal sides?	mba program	-74.07668217190381	a base with eight equal one ? => $x: ($x, be a base with, eight equal one) => $x: ($x, be base with, eight) => (r0.arg1: The MBA program, r0.namespace: reverb, r0.arg2: two eight-week terms, r0.rel: is semester-based with) => The MBA program
