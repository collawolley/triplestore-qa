What is a job for a lawyer?	criminal	0.9965944769516196	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a criminal, r0.namespace: reverb, r0.arg2: laws and lawyers, r0.rel: is a job for) => a criminal
What is a job for a lawyer?	maritime matter	0.9965944769516196	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter
What is a job for a lawyer?	municipal real estate	0.9924275724275723	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: municipal real estate, r0.namespace: reverb, r0.arg2: a lawyer....not, r0.rel: is a job for) => municipal real estate
What is a job for a lawyer?	absence	0.9887815309690308	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: absence, r0.namespace: reverb, r0.arg2: employment lawyers, r0.rel: can be a full-time job for) => absence
What is a job for a lawyer?	integreon pangea3	0.9840937633794775	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: Integreon and Pangea3, r0.namespace: reverb, r0.arg2: American lawyers, r0.rel: are creating jobs for) => Integreon and Pangea3
What is a job for a lawyer?	more lawsuits	0.9840937633794775	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: more lawsuits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are just job security for) => more lawsuits
What is a job for a lawyer?	low-cost countries	0.9840937633794775	What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries; What is a job for a lawyer? => $x: ($x, is a job for, a lawyer) => $x: ($x, is job for, lawyer) => (r0.arg1: low-cost countries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are now creating jobs for) => low-cost countries
What countries were involved in the Spanish war?	united states	2.2519923826173827	What countries were involved in the Spanish war? => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is a", countries) ($x, were involved in, Spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
What kind of music did the romans have?	language	1.9545490872763598	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language
What kind of music did the romans have?	champion	0.9897759059122694	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion
What kind of music did the romans have?	past	0.9812089833243678	What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past
What kind of music did the romans have?	mod	0.9749265734265733	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD
What kind of music did the romans have?	harvest festival	0.06790147352647335	What kind of music did the romans have? => $x: ($x, "is a", music) (the romans, have, $x) => $x: ($x, "is a", music) (romans, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival
What is the major cities of romania?	bucharest	1.3147762951334379	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest
What is the major cities of romania?	bucharest bucharest	1.0193217496788924	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest
What is the major cities of romania?	romania bucharest	0.9965944769516196	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest
What is the major cities of romania?	constanta	0.9840937633794775	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta
What is the major cities of romania?	rel=shortlink pite?ti	0.9840937633794775	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti
What is the major cities of romania?	pite?ti	0.9840937633794775	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti
What is the major cities of romania?	many	0.9715930498073354	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many
Who wins the WWE title?	edge	1.3397777222777218	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge
Who wins the WWE title?	rob van dam	1.3170504495504494	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam
Who wins the WWE title?	cm punk	1.3170504495504494	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk
Who wins the WWE title?	undertaker	1.3170504495504494	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker
Who wins the WWE title?	triple h	1.3170504495504494	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H
Who wins the WWE title?	mark henry	1.3170504495504494	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry
Who wins the WWE title?	tony atlas	1.2995494505494503	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas
Who wins the WWE title?	john cena	1.2995494505494503	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena
Who wins the WWE title?	eddie guerrero	1.2995494505494503	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero
Who wins the WWE title?	bob backlund	1.2995494505494503	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund
Who wins the WWE title?	beth phoenix	1.2995494505494503	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix
Who wins the WWE title?	monday	1.279548308834023	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday
Who wins the WWE title?	lex luger	1.273297952047952	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger
Who wins the WWE title?	christian	1.267047595261881	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian
Who wins the WWE title?	taker	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker
Who wins the WWE title?	eddie	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie
Who wins the WWE title?	jericho	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho
Who wins the WWE title?	cena	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena
Who wins the WWE title?	barrett	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett
Who wins the WWE title?	punk	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk
Who wins the WWE title?	miz	1.0443231768231764	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz
Who wins the WWE title?	orton	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton
Who wins the WWE title?	wade barrett	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett
Who wins the WWE title?	sheamus	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus
Who wins the WWE title?	batista	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista
Who wins the WWE title?	hhh	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH
Who wins the WWE title?	jeff	1.021595904095904	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff
Who wins the WWE title?	samoan bulldozer	1.0040949050949048	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer
Who wins the WWE title?	emotional big show	1.0040949050949048	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show
Who wins the WWE title?	jan 2011	0.9924275724275723	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011
Who was the first credit card issued to?	businesses	1.2976048951048949	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses
Who was the first credit card issued to?	new customers	1.0106577797202796	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers
When was Drake born?	august	2.2472767232767232	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August
When was Drake born?	february 12	2.2356093906093903	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12
When was Drake born?	1540	1.9920504495504492	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540
When was Drake born?	august 2008	1.9745494505494503	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008
When was Drake born?	1948	1.9693231768231765	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948
When was Drake born?	24 october 1986	1.9693231768231765	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986
When was Drake born?	22 mar 1901	1.9628821178821174	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901
When was Drake born?	oct. 20 , 1785	1.9518221778221776	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785
When was Drake born?	1961	1.9518221778221776	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961
When was Drake born?	1819	1.9518221778221776	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819
When was Drake born?	1811	1.9518221778221776	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811
When was Drake born?	march 29 , 1819	1.9518221778221776	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819
When was Drake born?	december 8 , 1923	1.9518221778221776	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923
When was Drake born?	feb 1889	1.940154845154845	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889
When was Drake born?	14 feb 1921	1.940154845154845	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921
When was Drake born?	october 24 , 1986	1.940154845154845	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986
When was Drake born?	mar 1921	1.940154845154845	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921
When was Drake born?	1 jul 1922	1.940154845154845	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922
When was Drake born?	june 19th	1.940154845154845	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th
When was Drake born?	may 1879	1.940154845154845	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879
When was Drake born?	toronto	1.3397777222777218	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto
When was Drake born?	tavistock	1.3397777222777218	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock
When was Drake born?	marathon county	1.2995494505494503	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county
When was Drake born?	scotland	1.2995494505494503	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland
When was Drake born?	birmingham	1.2995494505494503	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham
When was Drake born?	new york city	1.2878821178821176	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City
When was Drake born?	chicago	1.2878821178821176	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago
When was Drake born?	wilkes-barre	1.2878821178821176	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre
When was Drake born?	natchez	1.279548308834023	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez
When was Drake born?	maine	1.279548308834023	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine
When was Drake born?	devon	1.279548308834023	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon
When was Drake born?	socorro	1.273297952047952	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro
When was Drake born?	pownal	1.0093211788211787	When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Henry Milton Drake, r0.namespace: openie4, r0.arg2: Pownal, r0.rel: born in) => Pownal
When was Drake born?	english midlands town	1.0040949050949048	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town
When was Drake born?	seneca county	1.0040949050949048	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County
When was Drake born?	pitka?s point	1.0040949050949048	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point
When was Drake born?	rockaway	0.9924275724275723	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway
When was Drake born?	wayne	0.9924275724275723	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne
When was Drake born?	nearby town	0.9924275724275723	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town
When was Drake born?	cape breton	0.9840937633794775	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton
What are the leading producers of WHEAT?	iran	1.3272770087055799	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran
What are the leading producers of WHEAT?	sonora	1.2878821178821176	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora
What are the leading producers of WHEAT?	italy	1.2878821178821176	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy
What are the leading producers of WHEAT?	china	1.0090951905237617	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China
What are the leading producers of WHEAT?	state	0.9965944769516196	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state
What do scientists classify?	soils	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils
What do scientists classify?	organisms	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms
What do scientists classify?	pluto	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto
What do scientists classify?	species	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species
What do scientists classify?	solar flares	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares
What do scientists classify?	volcanoes	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes
What do scientists classify?	living organisms	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms
What do scientists classify?	insects	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects
What do scientists classify?	bacteria	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria
What do scientists classify?	fruits	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits
What do scientists classify?	system	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system
What do scientists classify?	ngc 4945	1.3397777222777218	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945
What do scientists classify?	hobbit	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit
What do scientists classify?	systems	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems
What do scientists classify?	emr	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR
What do scientists classify?	bats	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats
What do scientists classify?	butterflies	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies
What do scientists classify?	birds	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds
What do scientists classify?	dragonflies	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies
What do scientists classify?	dung beetles	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles
What do scientists classify?	glaucoma	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma
What do scientists classify?	galaxies	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies
What do scientists classify?	dinosaurs	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs
What do scientists classify?	plankton	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton
What do scientists classify?	sound	1.3170504495504494	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound
What do scientists classify?	photon	1.3106093906093903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon
What do scientists classify?	plant life	1.3106093906093903	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life
What do scientists classify?	creatures	1.2878821178821176	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures
What do scientists classify?	pinnipedia	1.2878821178821176	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia
What do scientists classify?	tarsiers	1.2878821178821176	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers
What do scientists classify?	life	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life
What do scientists classify?	matter	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: matter, r0.rel: classify) => matter; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: matter, r0.rel: classify) => matter
What do scientists classify?	animals	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: animals, r0.rel: classify) => animals; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: animals, r0.rel: classify) => animals; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the animals, r0.rel: classify) => the animals
What do scientists classify?	occupation	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: each occupation, r0.rel: classified) => each occupation; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each occupation, r0.rel: classified) => each occupation
What do scientists classify?	objects nature	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: objects in nature, r0.rel: classify) => objects in nature
What do scientists classify?	indians	1.0443231768231764	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians
What do scientists classify?	landscape	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the landscape, r0.rel: classify) => the landscape
What do scientists classify?	precipitation types	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types
What do scientists classify?	different bacteria	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: different bacteria, r0.rel: classify) => different bacteria
What do scientists classify?	variants	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the variants, r0.rel: classify) => the variants
What do scientists classify?	activity	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the activity, r0.rel: classify) => the activity
What do scientists classify?	animal characteristics	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: animal characteristics, r0.rel: classify) => animal characteristics
What do scientists classify?	living world	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the living world, r0.rel: classify) => the living world
What do scientists classify?	nature	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature
What do scientists classify?	crustaceans	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: such crustaceans, r0.rel: classify) => such crustaceans
What do scientists classify?	strong solar flares	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares
What do scientists classify?	cats	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: cats, r0.rel: classify) => cats
What do scientists classify?	techniques	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the techniques, r0.rel: classified) => the techniques
What do scientists classify?	horse fossils	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils
What do scientists classify?	groups	1.021595904095904	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups
What color are wedding dresses?	white	1.9674759615384614	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White
What color are wedding dresses?	black	1.9521625874125872	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: are making their way into, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: are making their way into, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: black) => black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: Black, r1.rel: is a bit much for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => Black; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: black, r1.rel: is a bit much for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the all black) => black
What color are wedding dresses?	photo	0.9953444055944054	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: was in, r0.namespace: reverb, r1.arg2: her wedding dress, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Photo, r1.rel: is one of, r0.namespace: reverb, r1.arg2: the wedding dresses, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The photo) => Photo
What color are wedding dresses?	left	0.9851354895104893	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is, r0.namespace: reverb, r1.arg2: an empire-style wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: the left, r1.rel: is a copy of, r0.namespace: reverb, r1.arg2: Audrey Hepburn?s first wedding dress, r0.arg2: a chocolate parti colored puppy, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the left) => the left
What color are wedding dresses?	materials	0.9723743444055943	What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: are preferable for, r0.namespace: reverb, r1.arg2: your beach wedding dress, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials; What color are wedding dresses? => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => $x: ($x, "is an example of", color) ($x, are, wedding dresses) => (r0.arg1: Materials, r1.rel: could be created into, r0.namespace: reverb, r1.arg2: ball gown wedding dresses, r0.arg2: a number and color coding system, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: materials) => Materials
What color are wedding dresses?	ecru	0.3433753746253745	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Ecru, r1.rel: can be, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: ecru) => Ecru
What color are wedding dresses?	red	0.33295811331525593	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red
What color are wedding dresses?	pink	0.3251451673326673	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Pink, r1.rel: is usually use in, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Pink) => Pink
