What is a job for a lawyer?	event	8.019139143069353	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The event, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event
What is a job for a lawyer?	law school	7.98019040610934	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => law school; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => law school; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: law school, r0.namespace: reverb, r0.arg2: young lawyers, r0.rel: there were more opportunities for) => law school
What is a job for a lawyer?	god	7.98019040610934	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: god, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => god; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: god, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => god
What is a job for a lawyer?	high school	7.928556702060863	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: high school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is now working as) => high school; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: high school, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is now working as) => high school
What is a job for a lawyer?	sentence	7.891675484883381	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: sentence, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is his legitimate work as) => sentence; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: sentence, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is his legitimate work as) => sentence
What is a job for a lawyer?	kfir	7.891675484883381	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Kfir, r0.namespace: reverb, r0.arg2: a patent office lawyer, r0.rel: is working as) => Kfir; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Kfir, r0.namespace: reverb, r0.arg2: a patent office lawyer, r0.rel: is working as) => Kfir
What is a job for a lawyer?	spousal support	7.825780862642709	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: Spousal Support, r0.namespace: reverb, r0.arg2: a Family Lawyer?s job, r0.rel: are Enforced Part of) => Spousal Support; what be a a lawyer job ? => $x: ($x, be, a a lawyer job) => $x: ($x, be, a a lawyer job) => (r0.arg1: Spousal Support, r0.namespace: reverb, r0.arg2: a Family Lawyer?s job, r0.rel: are Enforced Part of) => Spousal Support
What is a job for a lawyer?	public	7.825780862642709	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is often a necessary part of) => the public; what be a a lawyer job ? => $x: ($x, be, a a lawyer job) => $x: ($x, be, a a lawyer job) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is often a necessary part of) => the public
What is a job for a lawyer?	statistics	7.815454121833014	what be a lawyer job ? => $x: ($x, be, a lawyer job) => $x: ($x, be, a lawyer job) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is an increasingly important part of) => statistics; what be a a lawyer job ? => $x: ($x, be, a a lawyer job) => $x: ($x, be, a a lawyer job) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a lawyer?s job, r0.rel: is an increasingly important part of) => statistics
What is a job for a lawyer?	time	7.807296688523891	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is long for) => time; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is long for) => time
What is a job for a lawyer?	switzerland	7.807296688523891	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Switzerland, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is looking for) => Switzerland; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Switzerland, r0.namespace: reverb, r0.arg2: a Lawyer, r0.rel: is looking for) => Switzerland
What is a job for a lawyer?	clorox	7.807296688523891	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Clorox, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Clorox; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Clorox, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Clorox
What is a job for a lawyer?	robert e. lee	7.807296688523891	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Robert E. Lee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Robert E. Lee; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Robert E. Lee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is looking for) => Robert E. Lee
What is a job for a lawyer?	legal advice	7.807296688523891	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: legal advice, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => legal advice; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: legal advice, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are looking for) => legal advice
What is a job for a lawyer?	universities	7.765989725285111	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: universities, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are good for becoming) => universities; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: universities, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are good for becoming) => universities
What is a job for a lawyer?	natural resources	7.765989725285111	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: natural resources, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is urgently looking for) => natural resources; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: natural resources, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is urgently looking for) => natural resources
What is a job for a lawyer?	yorkshire	7.765989725285111	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Yorkshire, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are now looking for) => Yorkshire; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Yorkshire, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are now looking for) => Yorkshire
What is a job for a lawyer?	subpoenas	7.765989725285111	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Subpoenas, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are absurdly easy for) => Subpoenas; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Subpoenas, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: are absurdly easy for) => Subpoenas
What is a job for a lawyer?	business	7.765989725285111	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: business, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is so difficult for) => business; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: business, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is so difficult for) => business
What is a job for a lawyer?	sirius	7.749739935636629	what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what do a job as a lawyer ? => $x: ($x, do a job as, a lawyer) => $x: ($x, do a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what do a job as a lawyer ? => $x: ($x, do a job as, a lawyer) => $x: ($x, do a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; what be job as a lawyer ? => $x: ($x, be job as, a lawyer) => $x: ($x, be job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius; who be a job as a lawyer ? => $x: ($x, be a job as, a lawyer) => $x: ($x, be a job as, a lawyer) => (r0.arg1: Sirius, r0.namespace: reverb, r0.arg2: a defense lawyer, r0.rel: is doing a good job as) => Sirius
What is a job for a lawyer?	faith?s niece	7.360067974788143	what be a job with a lawyer ? => $x: ($x, be a job with, a lawyer) => $x: ($x, be a job with, a lawyer) => (r0.arg1: Faith?s niece, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was given a job with) => Faith?s niece; what be a job with a lawyer ? => $x: ($x, be a job with, a lawyer) => $x: ($x, be a job with, a lawyer) => (r0.arg1: Faith?s niece, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was given a job with) => Faith?s niece
What is a job for a lawyer?	client	7.320933052160255	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the client, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => the client; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: the client, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => the client
What is a job for a lawyer?	individual	7.320933052160255	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an individual, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => an individual; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: an individual, r0.namespace: openie4, r0.arg2: a lawyer, r0.rel: is looking for) => an individual
What is a job for a lawyer?	jackie	7.313465587927526	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Jackie, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working for) => Jackie; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: Jackie, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working for) => Jackie; what be work for a lawyer ? => $x: ($x, be work for, a lawyer) => $x: ($x, be work for, a lawyer) => (r0.arg1: Jackie, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working for) => Jackie; what be work for a lawyer ? => $x: ($x, be work for, a lawyer) => $x: ($x, be work for, a lawyer) => (r0.arg1: Jackie, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working for) => Jackie
What is a job for a lawyer?	?this conference	7.300957324887536	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: ?This conference, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => ?This conference
What is a job for a lawyer?	legal term oral argument	7.300957324887536	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; what be an opportunity for lawyer ? => $x: ($x, be an opportunity for, lawyer) => $x: ($x, be an opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Legal Term oral argument, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is An opportunity for) => Legal Term oral argument
What is a job for a lawyer?	parang	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Parang, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Parang; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Parang, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Parang
What is a job for a lawyer?	renee	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Renee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Renee; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Renee, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Renee
What is a job for a lawyer?	first time	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: the first time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => the first time; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: the first time, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => the first time
What is a job for a lawyer?	ms oliveira	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Ms Oliveira, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Ms Oliveira; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Ms Oliveira, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Ms Oliveira
What is a job for a lawyer?	lorne cousin	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Lorne Cousin, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Lorne Cousin; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Lorne Cousin, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Lorne Cousin
What is a job for a lawyer?	nisreen	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Nisreen, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Nisreen; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Nisreen, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was working as) => Nisreen
What is a job for a lawyer?	mr fitzroy	7.262008587927523	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Mr Fitzroy, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => Mr Fitzroy; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Mr Fitzroy, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is working as) => Mr Fitzroy
What is a job for a lawyer?	paralegal	7.261831883879049	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: A paralegal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be working for) => A paralegal; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, a lawyer) => (r0.arg1: A paralegal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be working for) => A paralegal; what be work for a lawyer ? => $x: ($x, be work for, a lawyer) => $x: ($x, be work for, a lawyer) => (r0.arg1: A paralegal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be working for) => A paralegal; what be work for a lawyer ? => $x: ($x, be work for, a lawyer) => $x: ($x, be work for, a lawyer) => (r0.arg1: A paralegal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: may be working for) => A paralegal
What is a job for a lawyer?	campaign	7.259650361648756	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: The Campaign, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a unique opportunity for) => The Campaign
What is a job for a lawyer?	medicaid boot camp	7.259650361648756	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Medicaid Boot Camp, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is a training opportunity for) => Medicaid Boot Camp
What is a job for a lawyer?	maritime matter	7.237799309132727	what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be the job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be the job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for a lawyer ? => $x: ($x, be job for, a lawyer) => $x: ($x, be job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be job for lawyer ? => $x: ($x, be job for, lawyer) => $x: ($x, be job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be the job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; what be the job for lawyer ? => $x: ($x, be the job for, lawyer) => $x: ($x, be the job for, lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be the job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter; who be the job for a lawyer ? => $x: ($x, be the job for, a lawyer) => $x: ($x, be the job for, a lawyer) => (r0.arg1: a maritime matter, r0.namespace: reverb, r0.arg2: a maritime lawyer, r0.rel: is the job for) => a maritime matter
What is a job for a lawyer?	divorce rates	7.230145387906768	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: divorce rates, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are opening much more opportunities for) => divorce rates
What is a job for a lawyer?	tall , lanky heir	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: a tall , lanky heir, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was then working as) => a tall , lanky heir; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: a tall , lanky heir, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: was then working as) => a tall , lanky heir
What is a job for a lawyer?	jesse?s goal	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Jesse?s goal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is to work as) => Jesse?s goal; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Jesse?s goal, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is to work as) => Jesse?s goal
What is a job for a lawyer?	relative	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: A relative, r0.namespace: reverb, r0.arg2: a Lawyers assistant, r0.rel: was working as) => A relative; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: A relative, r0.namespace: reverb, r0.arg2: a Lawyers assistant, r0.rel: was working as) => A relative
What is a job for a lawyer?	warsh	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Warsh, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: has been working as) => Warsh; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Warsh, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: has been working as) => Warsh
What is a job for a lawyer?	system	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is different Working as) => the system; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: the system, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is different Working as) => the system
What is a job for a lawyer?	nehal sanghavi	7.210374883879046	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Nehal Sanghavi, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: had been working as) => Nehal Sanghavi; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Nehal Sanghavi, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: had been working as) => Nehal Sanghavi
What is a job for a lawyer?	externships	7.208016657600279	what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; what be a opportunity for lawyer ? => $x: ($x, be a opportunity for, lawyer) => $x: ($x, be a opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships; who be opportunity for lawyer ? => $x: ($x, be opportunity for, lawyer) => $x: ($x, be opportunity for, lawyer) => (r0.arg1: Externships, r0.namespace: reverb, r0.arg2: pro bono lawyers, r0.rel: are a unique opportunity for) => Externships
What is a job for a lawyer?	cases	7.179634338424501	what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be the job of a lawyer ? => $x: ($x, be the job of, a lawyer) => $x: ($x, be the job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases; what be job of a lawyer ? => $x: ($x, be job of, a lawyer) => $x: ($x, be job of, a lawyer) => (r0.arg1: the cases, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is the job of) => the cases
What is a job for a lawyer?	3 6 years	7.173493666701564	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: 3 to 6 years, r0.namespace: reverb, r0.arg2: a Funds Lawyer, r0.rel: currently be working as) => 3 to 6 years; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: 3 to 6 years, r0.namespace: reverb, r0.arg2: a Funds Lawyer, r0.rel: currently be working as) => 3 to 6 years
What is a job for a lawyer?	john	7.173493666701564	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: John, r0.namespace: reverb, r0.arg2: a family lawyer, r0.rel: has been working as) => John; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: John, r0.namespace: reverb, r0.arg2: a family lawyer, r0.rel: has been working as) => John
What is a job for a lawyer?	valerie karasz	7.173493666701564	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Valerie Karasz, r0.namespace: reverb, r0.arg2: a bankruptcy lawyer, r0.rel: had been working as) => Valerie Karasz; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Valerie Karasz, r0.namespace: reverb, r0.arg2: a bankruptcy lawyer, r0.rel: had been working as) => Valerie Karasz
What is a job for a lawyer?	gaurav sood	7.173493666701564	what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Gaurav Sood, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is proud to work as) => Gaurav Sood; what be work as a lawyer ? => $x: ($x, be work as, a lawyer) => $x: ($x, be work as, a lawyer) => (r0.arg1: Gaurav Sood, r0.namespace: reverb, r0.arg2: a lawyer, r0.rel: is proud to work as) => Gaurav Sood
What is Capitol of lansing?	one kind	10.068287109112074	what be lanse capitol be ? => $x: (lanse capitol, be, $x) => $x: (lanse capitol, be, $x) => (r0.arg1: The 19 chandeliers in the Capitol in Lansing, r0.namespace: openie4, r0.arg2: one of a kind, r0.rel: are) => one of a kind
What is Capitol of lansing?	rental cars	9.943291470473097	what be capitol lanse ? => $x: ($x, be, capitol lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; who be capitol lanse ? => $x: ($x, be, capitol lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; who be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars
When did queen liliuokalani become queen?	september	12.354896566691238	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be on, $x) => $x: (queen liliuokalanus, be on, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: September, r0.rel: was born on) => September
When did queen liliuokalani become queen?	1893	11.729655415796678	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili`uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: his successor Queen Liliuokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was overthrown in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili`uokalani, r0.namespace: openie4, r0.arg2: 1893, r0.rel: was deposed in) => 1893; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: 1893, r0.rel: was deposed in) => 1893
When did queen liliuokalani become queen?	1868	11.636714748509421	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: 1868, r0.rel: were composed in) => 1868
When did queen liliuokalani become queen?	1972	11.636714748509421	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: The Queen Liliuokalani Canoe Race, r0.namespace: reverb, r0.arg2: 1972, r0.rel: was started in) => 1972
When did queen liliuokalani become queen?	england	9.771161315200304	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: England, r0.rel: was in) => England; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: openie4, r0.arg2: England, r0.rel: was in) => England
When did queen liliuokalani become queen?	verge	9.052979497018487	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be on, $x) => $x: (queen liliuokalanus, be on, $x) => (r0.arg1: Queen Liliuokalani, r0.namespace: reverb, r0.arg2: the verge, r0.rel: was on) => the verge
When did queen liliuokalani become queen?	coup	8.949712088921535	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lydia Liliuokalani, r0.namespace: reverb, r0.arg2: a coup, r0.rel: was deposed in) => a coup
When did queen liliuokalani become queen?	iolani palace	8.898078384873058	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: the Iolani Palace, r0.rel: was imprisoned in) => the Iolani Palace; when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: the Iolani Palace, r0.rel: was imprisoned in) => the Iolani Palace
When did queen liliuokalani become queen?	long line	8.875949654566568	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili'uokalani, r0.namespace: reverb, r0.arg2: a long line, r0.rel: were the last in) => a long line
When did queen liliuokalani become queen?	court	8.8593531068367	when do queen liliuokalanus be ? => $x: (queen liliuokalanus, be in, $x) => $x: (queen liliuokalanus, be in, $x) => (r0.arg1: Queen Lili?uokalani, r0.namespace: reverb, r0.arg2: the court, r0.rel: was still a princess in) => the court
What is one of italys famous landmarks?	mont saint-michel	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Mont Saint-Michel, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Mont Saint-Michel; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Mont Saint-Michel, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Mont Saint-Michel
What is one of italys famous landmarks?	eiffel tower	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Eiffel tower, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Eiffel tower; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Eiffel Tower, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Eiffel Tower; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Eiffel tower, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Eiffel tower; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Eiffel Tower, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Eiffel Tower
What is one of italys famous landmarks?	castle howard	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Castle Howard, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Castle Howard; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Castle Howard, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Castle Howard
What is one of italys famous landmarks?	cornwall	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Cornwall, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: are one of) => Cornwall; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Cornwall, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: are one of) => Cornwall
What is one of italys famous landmarks?	camelback mountain	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Camelback Mountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Camelback Mountain; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Camelback Mountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Camelback Mountain
What is one of italys famous landmarks?	pisa	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Pisa, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => Pisa; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Pisa, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Pisa; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Pisa, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => Pisa; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Pisa, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Pisa
What is one of italys famous landmarks?	tower bridge	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tower Bridge, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tower Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tower Bridge, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tower Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tower Bridge, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tower Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tower Bridge, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tower Bridge
What is one of italys famous landmarks?	table mountain	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Table Mountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Table Mountain; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Table Mountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Table Mountain
What is one of italys famous landmarks?	mont saint michel	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Mont Saint Michel, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Mont Saint Michel; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Mont Saint Michel, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Mont Saint Michel
What is one of italys famous landmarks?	las ramblas	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Las Ramblas, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => Las Ramblas; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Las Ramblas, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => Las Ramblas
What is one of italys famous landmarks?	church	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The church, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The church; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The church, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The church
What is one of italys famous landmarks?	tulum	8.847456945496388	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tulum; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Tulum
What is one of italys famous landmarks?	wrekin	8.814263850036655	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Wrekin, r0.namespace: reverb, r0.arg2: the most famous natural landmarks, r0.rel: is one of) => The Wrekin; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Wrekin, r0.namespace: reverb, r0.arg2: the most famous natural landmarks, r0.rel: is one of) => The Wrekin
What is one of italys famous landmarks?	athens	8.814263850036655	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Athens, r0.namespace: reverb, r0.arg2: the most famous architectural landmarks, r0.rel: is one of) => Athens; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Athens, r0.namespace: reverb, r0.arg2: the most famous architectural landmarks, r0.rel: is one of) => Athens
What is one of italys famous landmarks?	manchester	8.788446998012416	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Manchester, r0.namespace: reverb, r0.arg2: the most historic and famous landmarks, r0.rel: is one of) => Manchester; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Manchester, r0.namespace: reverb, r0.arg2: the most historic and famous landmarks, r0.rel: is one of) => Manchester
What is one of italys famous landmarks?	glastonbury tor	8.788446998012416	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Glastonbury tor, r0.namespace: reverb, r0.arg2: the most famous and sacred landmarks, r0.rel: is one of) => Glastonbury tor; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Glastonbury tor, r0.namespace: reverb, r0.arg2: the most famous and sacred landmarks, r0.rel: is one of) => Glastonbury tor
What is one of italys famous landmarks?	quebec bridge	8.361093309132752	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Quebec Bridge, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Quebec Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Quebec Bridge, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Quebec Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Quebec Bridge, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Quebec Bridge; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Quebec Bridge, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Quebec Bridge
What is one of italys famous landmarks?	trevi fountain	8.361093309132752	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Trevi Fountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Trevi Fountain; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Trevi Fountain, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Trevi Fountain; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Trevi Fountain, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Trevi Fountain; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Trevi Fountain, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Trevi Fountain
What is one of italys famous landmarks?	andrassy ut	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Andrassy Ut, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Andrassy Ut; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Andrassy Ut, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Andrassy Ut
What is one of italys famous landmarks?	skylon tower	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Skylon Tower, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Skylon Tower; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Skylon Tower, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Skylon Tower
What is one of italys famous landmarks?	acorn street	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Acorn Street, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Acorn Street; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Acorn Street, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Acorn Street
What is one of italys famous landmarks?	hollywood sign	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Hollywood Sign, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Hollywood Sign; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Hollywood Sign, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Hollywood Sign
What is one of italys famous landmarks?	legendary house	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the legendary house, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => the legendary house; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the legendary house, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => the legendary house
What is one of italys famous landmarks?	sydney town hall	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Sydney Town Hall, r0.namespace: reverb, r0.arg2: Sydney?s most famous landmarks, r0.rel: is one of) => The Sydney Town Hall; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Sydney Town Hall, r0.namespace: reverb, r0.arg2: Sydney?s most famous landmarks, r0.rel: is one of) => The Sydney Town Hall
What is one of italys famous landmarks?	boundaries	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the boundaries, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => the boundaries; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the boundaries, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => the boundaries
What is one of italys famous landmarks?	washington monument	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Washington Monument, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Washington Monument; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Washington Monument, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Washington Monument
What is one of italys famous landmarks?	least	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: least, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => least; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: least, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => least
What is one of italys famous landmarks?	duomo	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Duomo, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => the Duomo; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Duomo, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Duomo; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Duomo, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => the Duomo; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Duomo, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Duomo
What is one of italys famous landmarks?	?the hollywood sign	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: ?The Hollywood sign, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => ?The Hollywood sign; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: ?The Hollywood sign, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => ?The Hollywood sign
What is one of italys famous landmarks?	liberty	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Liberty, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Liberty; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Liberty, r0.namespace: reverb, r0.arg2: the USA?s most famous landmarks, r0.rel: is one of) => Liberty; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Liberty, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Liberty; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Liberty, r0.namespace: reverb, r0.arg2: the USA?s most famous landmarks, r0.rel: is one of) => Liberty
What is one of italys famous landmarks?	lubeck	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Lubeck, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Lubeck; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Lubeck, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => Lubeck
What is one of italys famous landmarks?	ruins	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the ruins, r0.namespace: reverb, r0.arg2: Macau?s most famous landmarks, r0.rel: are one of) => the ruins; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the ruins, r0.namespace: reverb, r0.arg2: Macau?s most famous landmarks, r0.rel: are one of) => the ruins
What is one of italys famous landmarks?	paraportiani	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Paraportiani, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Paraportiani; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Paraportiani, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Paraportiani
What is one of italys famous landmarks?	innocence casa kimberley	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: innocence Casa Kimberley, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => innocence Casa Kimberley; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: innocence Casa Kimberley, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => innocence Casa Kimberley; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: innocence Casa Kimberley, r0.namespace: openie4, r0.arg2: the most famous landmarks, r0.rel: is one of) => innocence Casa Kimberley; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: innocence Casa Kimberley, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => innocence Casa Kimberley
What is one of italys famous landmarks?	ne	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: NE, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: was one of) => NE; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: NE, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: was one of) => NE
What is one of italys famous landmarks?	hollywood bowl	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Hollywood Bowl, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Hollywood Bowl; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Hollywood Bowl, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: is one of) => The Hollywood Bowl
What is one of italys famous landmarks?	coliseum	8.129275127314571	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Coliseum, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => the Coliseum; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Coliseum, r0.namespace: reverb, r0.arg2: its most famous landmarks, r0.rel: is one of) => the Coliseum
What is one of italys famous landmarks?	sunnyside	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Sunnyside, r0.namespace: reverb, r0.arg2: the most famous historic landmarks, r0.rel: is one of) => Sunnyside; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Sunnyside, r0.namespace: reverb, r0.arg2: the most famous historic landmarks, r0.rel: is one of) => Sunnyside
What is one of italys famous landmarks?	redwoods state park	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Redwoods State Park, r0.namespace: reverb, r0.arg2: the area?s most famous landmarks, r0.rel: is one of) => Redwoods State Park; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Redwoods State Park, r0.namespace: reverb, r0.arg2: the area?s most famous landmarks, r0.rel: is one of) => Redwoods State Park
What is one of italys famous landmarks?	rawlins	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Rawlins, r0.namespace: reverb, r0.arg2: St Kitts most famous landmarks, r0.rel: is one of) => Rawlins; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: Rawlins, r0.namespace: reverb, r0.arg2: St Kitts most famous landmarks, r0.rel: is one of) => Rawlins
What is one of italys famous landmarks?	centre stage	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: centre stage, r0.namespace: reverb, r0.arg2: the most famous Victorian landmarks, r0.rel: is one of) => centre stage; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: centre stage, r0.namespace: reverb, r0.arg2: the most famous Victorian landmarks, r0.rel: is one of) => centre stage
What is one of italys famous landmarks?	gateway	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: India?s most famous landmarks, r0.rel: is now one of) => The Gateway; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Gateway, r0.namespace: reverb, r0.arg2: India?s most famous landmarks, r0.rel: is now one of) => The Gateway
What is one of italys famous landmarks?	mountain?	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Mountain?, r0.namespace: reverb, r0.arg2: the most famous natural landmarks, r0.rel: is one of) => the Mountain?; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: the Mountain?, r0.namespace: reverb, r0.arg2: the most famous natural landmarks, r0.rel: is one of) => the Mountain?
What is one of italys famous landmarks?	acropolis	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Acropolis, r0.namespace: reverb, r0.arg2: the world?s most famous landmarks, r0.rel: is one of) => The Acropolis; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Acropolis, r0.namespace: reverb, r0.arg2: the world?s most famous landmarks, r0.rel: is one of) => The Acropolis
What is one of italys famous landmarks?	cathedral clock	8.096082031854838	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Cathedral Clock, r0.namespace: reverb, r0.arg2: the most famous Bern landmarks, r0.rel: is one of) => The Cathedral Clock; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: The Cathedral Clock, r0.namespace: reverb, r0.arg2: the most famous Bern landmarks, r0.rel: is one of) => The Cathedral Clock
What is one of italys famous landmarks?	san francisco	8.0702651798306	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: San Francisco, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: has to be one of) => San Francisco; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: San Francisco, r0.namespace: reverb, r0.arg2: the most famous landmarks, r0.rel: has to be one of) => San Francisco
What is one of italys famous landmarks?	up	8.0702651798306	what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: Tokyo?s most famous historic landmarks, r0.rel: ahead is one of) => up; what be one of most famous landmark ? => $x: ($x, be one of, most famous landmark) => $x: ($x, be one of, most famous landmark) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: Tokyo?s most famous historic landmarks, r0.rel: ahead is one of) => up
Use of tin and tin alloy?	badge	12.42305641579676	what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: reverb, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Badge, r0.namespace: openie4, r0.arg2: high quality tin alloy, r0.rel: is made of) => Badge
Use of tin and tin alloy?	bronze	12.360364725285253	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, the tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper / tin alloy, r0.rel: is) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper-tin alloy, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: reverb, r0.arg2: a copper and tin alloy, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin and Copper, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze, r0.namespace: openie4, r0.arg2: an alloy of Copper and Tin, r0.rel: is) => Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is actually) => bronze; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: bronze, r0.namespace: reverb, r0.arg2: the tin-copper alloys, r0.rel: was the evolution of) => bronze
Use of tin and tin alloy?	weapons	12.330115748509503	what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: weapons, r0.namespace: reverb, r0.arg2: copper-tin alloy, r0.rel: were made of) => weapons
Use of tin and tin alloy?	libya	12.308731021236776	what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Libya, r0.namespace: reverb, r0.arg2: a tin and lead alloy, r0.rel: were coated with) => Libya
Use of tin and tin alloy?	surfaces	12.270005743200418	what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: surfaces, r0.namespace: reverb, r0.arg2: tin-lead and lead-free alloys, r0.rel: is compatible with) => surfaces
Use of tin and tin alloy?	pewter	11.870205951564007	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Pewter, r0.namespace: openie4, r0.arg2: a tin alloy, r0.rel: is) => Pewter; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Pewter, r0.namespace: reverb, r0.arg2: a tin-based alloy, r0.rel: is) => Pewter
Use of tin and tin alloy?	brass	11.844496115179629	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Brass, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Brass
Use of tin and tin alloy?	pewter pewter	11.844496115179629	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Pewter Pewter, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: was) => Pewter Pewter
Use of tin and tin alloy?	bronze bronze	11.844496115179629	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Bronze Bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is) => Bronze Bronze
Use of tin and tin alloy?	comparison bronze	11.82236738487314	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: comparison to bronze, r0.namespace: openie4, r0.arg2: an alloy of copper and tin, r0.rel: is principally) => comparison to bronze
Use of tin and tin alloy?	packaging	11.634062660634175	what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: packaging, r0.namespace: reverb, r0.arg2: lead and tin alloys, r0.rel: was made of) => packaging
Use of tin and tin alloy?	blade	11.611933930327686	what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: zinc/tin/lead alloy, r0.rel: is made of) => Blade
Use of tin and tin alloy?	previous soldering processes	11.589805200021196	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: Previous soldering processes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: were composed of) => Previous soldering processes
Use of tin and tin alloy?	rosin	11.16858201820298	what be the tin tin alloy ? => $x: ($x, be, the tin tin alloy) => $x: ($x, be, the tin tin alloy) => (r0.arg1: rosin, r0.namespace: reverb, r0.arg2: the tin-lead alloy, r0.rel: is added to) => rosin
Use of tin and tin alloy?	solder	11.126314296997812	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Solder, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: is) => Solder; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: a tin/lead alloy, r0.rel: is basically) => Solder; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: Solder, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: is) => Solder
Use of tin and tin alloy?	metal pipes	11.12557029396405	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be tin and tin alloy ? => $x: ($x, be, tin and tin alloy) => $x: ($x, be, tin and tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be tin tin and alloy ? => $x: ($x, be, tin tin and alloy) => $x: ($x, be, tin tin and alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be and tin tin alloy ? => $x: ($x, be, and tin tin alloy) => $x: ($x, be, and tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes; what be of tin tin alloy ? => $x: ($x, be of, tin tin alloy) => $x: ($x, be of, tin tin alloy) => (r0.arg1: The metal pipes, r0.namespace: openie4, r0.arg2: an alloy of tin and lead, r0.rel: are made of) => The metal pipes
Use of tin and tin alloy?	advanced circuits	11.048756725285237	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Advanced Circuits, r0.namespace: reverb, r0.arg2: a Tin Copper alloy, r0.rel: is using) => Advanced Circuits
Use of tin and tin alloy?	928	11.028103243665846	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: 928, r0.namespace: reverb, r0.arg2: a Tin/Antimony/Copper alloy, r0.rel: is) => 928
Use of tin and tin alloy?	speculum metal	11.028103243665846	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => Speculum metal
Use of tin and tin alloy?	copper ?speculum metal	11.028103243665846	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: copper ?speculum metal, r0.namespace: reverb, r0.arg2: a copper/tin alloy, r0.rel: is) => copper ?speculum metal
Use of tin and tin alloy?	k100	10.99712302123676	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: K100, r0.namespace: reverb, r0.arg2: a near-eutectic Tin/Copper alloy, r0.rel: is) => K100
Use of tin and tin alloy?	regular solder	10.99712302123676	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Regular solder, r0.namespace: reverb, r0.arg2: a 60/40 tin / lead alloy, r0.rel: is about) => Regular solder
Use of tin and tin alloy?	motherboard	10.97499429093027	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: the motherboard, r0.namespace: reverb, r0.arg2: a tin/silver/copper alloy, r0.rel: was replaced with) => the motherboard
Use of tin and tin alloy?	device	10.97499429093027	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: the device, r0.namespace: reverb, r0.arg2: a tin/lead alloy, r0.rel: are plated with) => the device
Use of tin and tin alloy?	pipes	10.97499429093027	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: the pipes, r0.namespace: reverb, r0.arg2: a tin-lead alloy, r0.rel: are made from) => the pipes
Use of tin and tin alloy?	curogan	10.966142798807674	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy, r0.rel: is) => Curogan; what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: Curogan, r0.namespace: reverb, r0.arg2: a copper-tin-alloy metal, r0.rel: is) => Curogan
Use of tin and tin alloy?	sheet copper	10.958397743200402	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: sheet copper, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => sheet copper
Use of tin and tin alloy?	copper cylinder	10.958397743200402	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: the copper cylinder, r0.namespace: reverb, r0.arg2: a 60-40 lead-tin alloy, r0.rel: was soldered with) => the copper cylinder
Use of tin and tin alloy?	sn100c	10.472034106836766	what be a tin tin alloy ? => $x: ($x, be, a tin tin alloy) => $x: ($x, be, a tin tin alloy) => (r0.arg1: SN100C, r0.namespace: openie4, r0.arg2: a patented nickel stabilized tin/copper alloy, r0.rel: is) => SN100C
Use of tin and tin alloy?	phosphor bronze	9.828292324887606	what be tin tin an alloy ? => $x: ($x, be, tin tin an alloy) => $x: ($x, be, tin tin an alloy) => (r0.arg1: Phosphor bronze, r0.namespace: openie4, r0.arg2: an alloy of Tin, r0.rel: is) => Phosphor bronze
What countries were involved in the Spanish war?	united states	6.22918785003663	What countries were involved in the Spanish war? => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, the spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, the spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
What is another word of sand hills?	nights	10.743144844727652	what be another name of the hill ? => $x: (the hill, have name of, $x) => $x: (the hill, have name of, $x) => (r0.arg1: The Calton Hill, r0.namespace: reverb, r0.arg2: nights, r0.rel: had an ill name of) => nights
What color al pacinos eyes?	godfather	9.566064018202932	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: The Godfather, r0.rel: had a bit part in) => The Godfather
What color al pacinos eyes?	cast action comedy	9.1792796682185	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: openie4, r0.arg2: the cast of the action comedy, r0.rel: has joined) => the cast of the action comedy
What color al pacinos eyes?	very strong movie character	9.024912042473034	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a very strong movie character, r0.rel: has) => a very strong movie character
What color al pacinos eyes?	bacon number	9.024912042473034	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a Bacon number, r0.rel: has) => a Bacon number
What color al pacinos eyes?	zero	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: zero, r0.rel: has scored) => zero
What color al pacinos eyes?	drawn-out fight	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a drawn-out fight, r0.rel: are having) => a drawn-out fight
What color al pacinos eyes?	difficult characters	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: difficult characters, r0.rel: has played) => difficult characters
What color al pacinos eyes?	full field house	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Speaker Al Pacino, r0.namespace: reverb, r0.arg2: a full field house, r0.rel: had) => a full field house
What color al pacinos eyes?	eight oscar nominations	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: eight Oscar nominations, r0.rel: has scored) => eight Oscar nominations
What color al pacinos eyes?	films	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: films, r0.rel: has developed) => films
What color al pacinos eyes?	less than discriminating	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: less than discriminating, r0.rel: have been) => less than discriminating
What color al pacinos eyes?	movie	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the movie, r0.rel: had on) => the movie; what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the movie, r0.rel: had a line in) => the movie
What color al pacinos eyes?	classiest most debonair	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the classiest and most debonair, r0.rel: has been) => the classiest and most debonair
What color al pacinos eyes?	film	8.94746148640032	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a film, r0.rel: has created) => a film
What color al pacinos eyes?	any problems	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: any problems, r0.rel: did n?t have) => any problems
What color al pacinos eyes?	custom size magic comfort mattress	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a custom size Magic Comfort mattress, r0.rel: has slept on) => a custom size Magic Comfort mattress
What color al pacinos eyes?	part	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a part, r0.rel: has stepped into) => a part
What color al pacinos eyes?	unlikely choice	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: an unlikely choice, r0.rel: has to be) => an unlikely choice
What color al pacinos eyes?	oscar	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: an Oscar, r0.rel: should have won) => an Oscar
What color al pacinos eyes?	west village restaurant da silvano	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: West Village Restaurant Da Silvano, r0.rel: had lunch at) => West Village Restaurant Da Silvano
What color al pacinos eyes?	two children	8.90099115275669	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: D'Angelo and Al Pacino, r0.namespace: reverb, r0.arg2: two children, r0.rel: have) => two children
What color al pacinos eyes?	film history	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino ? scenes, r0.namespace: reverb, r0.arg2: film history, r0.rel: have made) => film history
What color al pacinos eyes?	recent years	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: recent years, r0.rel: has been getting in) => recent years
What color al pacinos eyes?	comedy	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the comedy, r0.rel: has a cameo in) => the comedy
What color al pacinos eyes?	2009 remake	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a 2009 remake, r0.rel: has signed up for) => a 2009 remake
What color al pacinos eyes?	?ocean thirteen?	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: the phone Al Pacino, r0.namespace: reverb, r0.arg2: ?Ocean Thirteen?, r0.rel: had in) => ?Ocean Thirteen?
What color al pacinos eyes?	documentary film	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: a documentary film, r0.rel: had been working on) => a documentary film
What color al pacinos eyes?	heart-to heart	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino playing Michael Corleone, r0.namespace: reverb, r0.arg2: a heart-to heart, r0.rel: has) => a heart-to heart
What color al pacinos eyes?	hollywood	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: Hollywood, r0.rel: has remained one of) => Hollywood; what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: intense , al pacino, r0.namespace: reverb, r0.arg2: Hollywood, r0.rel: has remained one of) => Hollywood
What color al pacinos eyes?	outstanding movies	8.870010930327604	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: outstanding movies, r0.rel: has a number of) => outstanding movies
What color al pacinos eyes?	one success	8.847882200021115	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: His contemporary Al Pacino, r0.namespace: reverb, r0.arg2: one success, r0.rel: has moved from) => one success
What color al pacinos eyes?	action comedy	8.847882200021115	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the action comedy, r0.rel: has joined the cast of) => the action comedy
What color al pacinos eyes?	billie jo armstrong	8.847882200021115	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: Billie Jo Armstrong, r0.rel: had the manic energy of) => Billie Jo Armstrong
What color al pacinos eyes?	drunken driving charge	8.847882200021115	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: actor Al Pacino, r0.namespace: reverb, r0.arg2: a drunken driving charge, r0.rel: has been arrested on) => a drunken driving charge
What color al pacinos eyes?	legend	8.831285652291246	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: The 1983 Al Pacino gangster film, r0.namespace: reverb, r0.arg2: a legend, r0.rel: has become) => a legend
What color al pacinos eyes?	characters	8.831285652291246	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: characters, r0.rel: has created an unforgettable gallery of) => characters
What color al pacinos eyes?	villain	8.831285652291246	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: reverb, r0.arg2: the villain, r0.rel: has reportedly signed on to play) => the villain
What color al pacinos eyes?	tough , fearless group	8.818377226279127	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino?s police lieutenant, r0.namespace: reverb, r0.arg2: a tough , fearless group, r0.rel: has) => a tough , fearless group
What color al pacinos eyes?	photos	8.808050485469431	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino and Robert De Niro, r0.namespace: reverb, r0.arg2: photos, r0.rel: had been replaced by) => photos
What color al pacinos eyes?	flesh	8.808050485469431	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Venice ? ? Al Pacino, r0.namespace: reverb, r0.arg2: flesh, r0.rel: will have his pound of) => flesh
What color al pacinos eyes?	heady feat	8.766743522230652	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: The AlPacino?s, r0.namespace: reverb, r0.arg2: the heady feat, r0.rel: have achieved) => the heady feat
What color al pacinos eyes?	game	8.361518563657478	what do al pacino have ? => $x: (al pacino, have, $x) => $x: (al pacino, have, $x) => (r0.arg1: Al Pacino, r0.namespace: openie4, r0.arg2: the game, r0.rel: has lent his likeness to) => the game
What color al pacinos eyes?	photo	7.028779125682781	what color do al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what color be al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what color have al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo; what colour do al pacino have ? => $x: ($x, "is an example of", color) (al pacino, have, $x) => $x: ($x, "is an example of", color) (al pacino, have, $x) => (r0.arg1: Photo, r1.rel: had been replaced by, r0.namespace: reverb, r1.arg2: photos, r0.arg2: other colors, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Al Pacino and Robert De Niro) => Photo
What is new south wales slogan?	thredbo	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Thredbo, r0.rel: are) => Thredbo
What is new south wales slogan?	australia	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is in) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: Australia, r0.rel: is in) => Australia; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is located in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: Australia, r0.rel: is in) => Australia; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is located in) => Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia
What is new south wales slogan?	dams	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: dams, r0.rel: were) => dams
What is new south wales slogan?	grasslands	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: grasslands, r0.rel: are) => grasslands
What is new south wales slogan?	sound	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: sound, r0.rel: was) => sound
What is new south wales slogan?	sir joseph banks	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sir Joseph Banks, r0.rel: were) => Sir Joseph Banks
What is new south wales slogan?	place	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place
What is new south wales slogan?	tom baker	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Tom Baker, r0.rel: was) => Tom Baker
What is new south wales slogan?	chairman	10.454804315200326	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: chairman, r0.rel: is) => chairman
What is new south wales slogan?	car	10.223795842452292	what be new south wale say ? => $x: (new south wale, say, $x) => $x: (new south wale, say, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the car, r0.rel: said the pressure from) => the car
What is new south wales slogan?	drought	10.200860678836682	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: drought, r0.rel: is in) => drought; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: drought, r0.rel: is in) => drought
What is new south wales slogan?	need	10.200860678836682	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: need, r0.rel: is in) => need; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: need, r0.rel: is in) => need
What is new south wales slogan?	london	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: London, r0.rel: was born in) => London; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: London, r0.rel: was born in) => London
What is new south wales slogan?	sydney	10.149226974788204	what be new south wale find ? => $x: (new south wale, find, $x) => $x: (new south wale, find, $x) => (r0.arg1: New South Wales Specials, r0.namespace: reverb, r0.arg2: Sydney, r0.rel: found for) => Sydney; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sydney, r0.rel: was established in) => Sydney; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sydney, r0.rel: has been based in) => Sydney; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sydney, r0.rel: was established in) => Sydney; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Sydney, r0.rel: has been based in) => Sydney
What is new south wales slogan?	queensland	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Queensland, r0.rel: is based in) => Queensland; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Queensland, r0.rel: is based in) => Queensland
What is new south wales slogan?	service industries	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: service industries, r0.rel: are employed in) => service industries; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: service industries, r0.rel: are employed in) => service industries
What is new south wales slogan?	crown	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Crown, r0.rel: was vested in) => the Crown; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Crown, r0.rel: was vested in) => the Crown
What is new south wales slogan?	?schooners?	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?schooners?, r0.rel: is served in) => ?schooners?; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?schooners?, r0.rel: is served in) => ?schooners?
What is new south wales slogan?	honour	10.149226974788204	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: honour, r0.rel: was named in) => honour; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: honour, r0.rel: was named in) => honour
What is new south wales slogan?	kentucky	10.112345757610722	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently residing in) => Kentucky; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is currently residing in) => Kentucky
What is new south wales slogan?	bali	10.112345757610722	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bali, r0.rel: has been arrested in) => Bali; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bali, r0.rel: has been arrested in) => Bali
What is new south wales slogan?	western sydney	10.08468484472761	where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales Penrith, r0.namespace: reverb, r0.arg2: western Sydney, r0.rel: is a suburb in) => western Sydney; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales Penrith, r0.namespace: reverb, r0.arg2: western Sydney, r0.rel: is a suburb in) => western Sydney
What is new south wales slogan?	only state australia	9.96844067883669	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the only state in Australia, r0.rel: is) => the only state in Australia
What is new south wales slogan?	most populous state australia	9.96844067883669	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: the most populous state in Australia, r0.rel: is) => the most populous state in Australia
What is new south wales slogan?	exception	9.96844067883669	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: openie4, r0.arg2: an exception, r0.rel: is) => an exception
What is new south wales slogan?	largest state australia	9.906480233978517	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: the New South Wales, r0.namespace: openie4, r0.arg2: the largest state in Australia, r0.rel: is) => the largest state in Australia
What is new south wales slogan?	region	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a region, r0.rel: is) => a region
What is new south wales slogan?	fairly rural area	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a fairly rural area, r0.rel: is) => a fairly rural area
What is new south wales slogan?	timely significant point	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a timely and significant point, r0.rel: is) => a timely and significant point
What is new south wales slogan?	50 km/h	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 50 km/h, r0.rel: is) => 50 km/h
What is new south wales slogan?	australia?s most populated state	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Australia?s most populated state, r0.rel: is) => Australia?s most populated state
What is new south wales slogan?	bare island fort	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Bare Island Fort, r0.rel: is) => Bare Island Fort
What is new south wales slogan?	constitutional monarchy	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: State New South Wales, r0.namespace: reverb, r0.arg2: a Constitutional Monarchy, r0.rel: is) => a Constitutional Monarchy
What is new south wales slogan?	?28/7/6 ?24/0/11	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: ?28/7/6 and ?24/0/11, r0.rel: was) => ?28/7/6 and ?24/0/11
What is new south wales slogan?	victoria	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria; where do new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: there are in) => Victoria; where be new south wale be ? => $x: (new south wale, be in, $x) => $x: (new south wale, be in, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: there are in) => Victoria; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: Victoria, r0.rel: is) => Victoria
What is new south wales slogan?	20-30	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 20-30, r0.rel: was) => 20-30
What is new south wales slogan?	teaching research school	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a teaching and research school, r0.rel: is) => a teaching and research school
What is new south wales slogan?	444,000 dozen	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 444,000 dozen, r0.rel: was) => 444,000 dozen
What is new south wales slogan?	100 km/h	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 100 km/h, r0.rel: is) => 100 km/h
What is new south wales slogan?	hot , harsh horrible place	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a hot , harsh and horrible place, r0.rel: was) => a hot , harsh and horrible place
What is new south wales slogan?	10,000 pages	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 10,000 pages, r0.rel: is) => 10,000 pages
What is new south wales slogan?	309,500 square miles	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: 309,500 square miles, r0.rel: is) => 309,500 square miles
What is new south wales slogan?	registered research service provider	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a registered Research Service Provider, r0.rel: is) => a registered Research Service Provider
What is new south wales slogan?	scenic drive	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a scenic drive, r0.rel: is) => a scenic drive
What is new south wales slogan?	specialist superior court	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a specialist superior court, r0.rel: is) => a specialist superior court
What is new south wales slogan?	penal colony	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a penal colony, r0.rel: was) => a penal colony
What is new south wales slogan?	heritage act 1977	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Heritage Act 1977, r0.rel: is) => the Heritage Act 1977
What is new south wales slogan?	hour	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: an hour, r0.rel: is) => an hour
What is new south wales slogan?	upper house	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Upper House, r0.rel: is) => the Upper House
What is new south wales slogan?	historic town	9.736622497018509	what be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town; what do new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town; who be new south wale be ? => $x: (new south wale, be, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a historic town, r0.rel: is) => a historic town
What occurs in prokaryotic cells?	ribosomes	8.50633493336133	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes
What occurs in prokaryotic cells?	rna	8.50633493336133	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA
What occurs in prokaryotic cells?	cellular respiration	8.473375678836629	what take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; what take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who place in prokaryotic cell ? => $x: ($x, place in, prokaryotic cell) => $x: ($x, place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who place in prokaryotic cell ? => $x: ($x, place in, prokaryotic cell) => $x: ($x, place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration; who take place in prokaryotic cell ? => $x: ($x, take place in, prokaryotic cell) => $x: ($x, take place in, prokaryotic cell) => (r0.arg1: cellular respiration, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: take place in) => cellular respiration
What occurs in prokaryotic cells?	precrp	7.858965052160281	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP
What occurs in prokaryotic cells?	labor	7.858965052160281	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor
What occurs in prokaryotic cells?	transduction	7.829081698211203	what occur between prokaryotic cell ? => $x: ($x, occur between, prokaryotic cell) => $x: ($x, occur between, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur between prokaryotic cell ? => $x: ($x, occur between, prokaryotic cell) => $x: ($x, occur between, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction; what occur prokaryotic cell ? => $x: ($x, occur, prokaryotic cell) => $x: ($x, occur, prokaryotic cell) => (r0.arg1: Transduction, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: can occur between) => Transduction
What occurs in prokaryotic cells?	eukaryotic dna	7.817658088921501	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA
What occurs in prokaryotic cells?	polyribosomes	7.279660748509388	what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes
What celebrities have naked pictures?	david diehl	8.806249218223744	what celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => (r0.arg1: David Diehl, r1.rel: has had, r0.namespace: freebase, r1.arg2: a sexy pic celebs, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: David Diehl) => David Diehl; which celebrity have a sexy pic ? => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => $x: ($x, "type", celebrity) ($x, have, a sexy pic) => (r0.arg1: David Diehl, r1.rel: has had, r0.namespace: freebase, r1.arg2: a sexy pic celebs, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: David Diehl) => David Diehl
What celebrities have naked pictures?	paul pierce	6.9621061121457855	what celebrity have strip picture ? => $x: ($x, "type", celebrity) ($x, have, strip picture) => $x: ($x, "type", celebrity) ($x, have, strip picture) => (r0.arg1: Paul Pierce, r1.rel: had, r0.namespace: freebase, r1.arg2: a picture-perfect clean strip, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Paul Pierce) => Paul Pierce
What celebrities have naked pictures?	aaliyah	6.837643528646789	what celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Aaliyah, r1.rel: has pictures of, r0.namespace: freebase, r1.arg2: nude Aaliyah pic Adel, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aaliyah) => Aaliyah; which celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Aaliyah, r1.rel: has pictures of, r0.namespace: freebase, r1.arg2: nude Aaliyah pic Adel, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Aaliyah) => Aaliyah
What celebrities have naked pictures?	mariane pearl	6.806350374678016	what celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Mariane Pearl, r1.rel: has joined, r0.namespace: freebase, r1.arg2: the aid Halle Berry nude pics nges, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mariane Pearl) => Mariane Pearl; which celebrity have nude pic ? => $x: ($x, "type", celebrity) ($x, have, nude pic) => $x: ($x, "type", celebrity) ($x, have, nude pic) => (r0.arg1: Mariane Pearl, r1.rel: has joined, r0.namespace: freebase, r1.arg2: the aid Halle Berry nude pics nges, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mariane Pearl) => Mariane Pearl
What celebrities have naked pictures?	playgirl	6.5290308447275835	what celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: Playgirl, r1.rel: also claimed to have, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Playgirl) => Playgirl; which celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: Playgirl, r1.rel: also claimed to have, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Playgirl) => Playgirl
What celebrities have naked pictures?	george h. w. bush	6.5290308447275835	what celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: George H. W. Bush, r1.rel: is having trouble with, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: George W. Bush) => George H. W. Bush; which celebrity have nude photo ? => $x: ($x, "type", celebrity) ($x, have, nude photo) => $x: ($x, "type", celebrity) ($x, have, nude photo) => (r0.arg1: George H. W. Bush, r1.rel: is having trouble with, r0.namespace: freebase, r1.arg2: nude photos, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: George W. Bush) => George H. W. Bush
What celebrities have naked pictures?	scarlett johansson	6.1894189831922235	what celebrity have nude picture ? => $x: ($x, "type", celebrity) ($x, have, nude picture) => $x: ($x, "type", celebrity) ($x, have, nude picture) => (r0.arg1: Scarlett Johansson, r1.rel: has spoken about, r0.namespace: freebase, r1.arg2: the leaked nude pictures, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scarlett Johansson) => Scarlett Johansson; which celebrity have nude picture ? => $x: ($x, "type", celebrity) ($x, have, nude picture) => $x: ($x, "type", celebrity) ($x, have, nude picture) => (r0.arg1: Scarlett Johansson, r1.rel: has spoken about, r0.namespace: freebase, r1.arg2: the leaked nude pictures, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scarlett Johansson) => Scarlett Johansson
What celebrities have naked pictures?	brad pitt	5.964602121247041	what celebrity have naked pic ? => $x: ($x, "type", celebrity) ($x, have, naked pic) => $x: ($x, "type", celebrity) ($x, have, naked pic) => (r0.arg1: Brad Pitt, r1.rel: has been submitted, r0.namespace: freebase, r1.arg2: Naked Pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Brad Pitt) => Brad Pitt; which celebrity have naked pic ? => $x: ($x, "type", celebrity) ($x, have, naked pic) => $x: ($x, "type", celebrity) ($x, have, naked pic) => (r0.arg1: Brad Pitt, r1.rel: has been submitted, r0.namespace: freebase, r1.arg2: Naked Pics, r0.arg2: Celebrity, r0.rel: Type, r1.namespace: reverb, r1.arg1: Brad Pitt) => Brad Pitt
What kind of music did the romans have?	order	7.221396145988185	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: had, r0.namespace: reverb, r1.arg2: their orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman soldiers) => order; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: have recognized, r0.namespace: reverb, r1.arg2: orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman See) => order; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: has followed, r0.namespace: reverb, r1.arg2: his orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Soldier) => order; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: has followed, r0.namespace: reverb, r1.arg2: his orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Roman Soldier) => order; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: had to carry out, r0.namespace: reverb, r1.arg2: the orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman soldiers) => order; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: order, r1.rel: have, r0.namespace: reverb, r1.arg2: orders, r0.arg2: american-style fascism, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholic and Episcopal churches) => order
What kind of music did the romans have?	luxury	6.570338143069386	what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: Luxury, r1.rel: has also lived in, r0.namespace: reverb, r1.arg2: luxury, r0.arg2: style, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman false religion) => Luxury; what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: Luxury, r1.rel: has also lived in, r0.namespace: openie4, r1.arg2: luxury, r0.arg2: style, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman false religion) => Luxury; what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: Luxury, r1.rel: had, r0.namespace: reverb, r1.arg2: the luxury, r0.arg2: style, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => Luxury; what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: Luxury, r1.rel: had, r0.namespace: openie4, r1.arg2: the luxury, r0.arg2: style, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => Luxury
What kind of music did the romans have?	grace	6.367028520242717	what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Grace, r1.rel: had, r0.namespace: freebase, r1.arg2: grace, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Roman church) => Grace; what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Grace, r1.rel: has, r0.namespace: freebase, r1.arg2: a grace, r0.arg2: Style, r0.rel: Type, r1.namespace: openie4, r1.arg1: The Roman church) => Grace; what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Grace, r1.rel: has defined, r0.namespace: freebase, r1.arg2: grace, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Roman Catholic tradition) => Grace; what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Grace, r1.rel: has long regarded, r0.namespace: freebase, r1.arg2: grace, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => Grace; what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Grace, r1.rel: had made merchandise of, r0.namespace: freebase, r1.arg2: the grace, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Roman Church) => Grace
What kind of music did the romans have?	church	6.316441218674435	what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => The church; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had joined, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have seen, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have come to describe, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had come to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have been incorporated into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman baths) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been terribly corrupted by, r0.namespace: reverb, r1.arg2: the churches, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans 13) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has seemed a threat to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has always been its theology of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Empire) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has long been imposed on, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a Roman Catholic invention) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => The church; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The church, r1.rel: has been visibly divided from, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: the Beaux Arts style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: a non-Roman Catholic) => The church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had joined, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have seen, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have come to describe, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had come to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have been incorporated into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman baths) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has seemed a threat to, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had to be converted into, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has been terribly corrupted by, r0.namespace: reverb, r1.arg2: the churches, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 13) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has always been its theology of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Catholicism) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had Conquered, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Empire) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic West) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has now given, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Liturgy) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have the control of, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholics) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had its beginnings in, r0.namespace: reverb, r1.arg2: the church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic apostasy) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had already joined, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Empire) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has long held, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Pontiff) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has long been imposed on, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a Roman Catholic invention) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: had been made part of, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: have survived in, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman heroes) => the Church; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the Church, r1.rel: has been visibly divided from, r0.namespace: reverb, r1.arg2: the Church, r0.arg2: sacrament or sign and instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a non-Roman Catholic) => the Church
What kind of music did the romans have?	nathan	6.302486390182122	what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Nathan, r1.rel: has wished, r0.namespace: freebase, r1.arg2: Nathan, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => Nathan
What kind of music did the romans have?	ryan	6.28097234682859	what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Ryan, r1.rel: had supposedly ordained, r0.namespace: freebase, r1.arg2: Ryan, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Roman Catholic bishop) => Ryan
What kind of music did the romans have?	troy	6.263761112145764	what type of style do the roman have ? => $x: ($x, "type", style) (the roman, have, $x) => $x: ($x, "type", style) (the roman, have, $x) => (r0.arg1: Troy, r1.rel: were said to have come from, r0.namespace: freebase, r1.arg2: Troy, r0.arg2: Style, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Troy
What kind of music did the romans have?	language	6.217680344939132	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: reverb, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: openie4, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: reverb, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: openie4, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: reverb, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: has tried this before in, r0.namespace: openie4, r1.arg2: other languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: reverb, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Language, r1.rel: still have a right to preserve, r0.namespace: openie4, r1.arg2: their language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do thay have ? => $x: ($x, "is a kind of", music) (thay, have, $x) => $x: ($x, "is a kind of", music) (thay, have, $x) => (r0.arg1: Language, r1.rel: have to NEED, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Thay) => Language; what kind of music do thay have ? => $x: ($x, "is a kind of", music) (thay, have, $x) => $x: ($x, "is a kind of", music) (thay, have, $x) => (r0.arg1: Language, r1.rel: have to NEED, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Thay) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language
What kind of music did the romans have?	issue	5.873175309891178	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: issue, r1.rel: had taken, r0.namespace: reverb, r1.arg2: issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Roman Catholic Church) => issue; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: issue, r1.rel: has officially resolved, r0.namespace: reverb, r1.arg2: such issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has, r0.namespace: reverb, r1.arg2: issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has released, r0.namespace: reverb, r1.arg2: Issue 3, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: have thrust, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has spurred interest in, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has refused to address, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: is definitely having some influence of, r0.namespace: reverb, r1.arg2: these issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has been maintain a stoic silence on, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has done nothing to resolve, r0.namespace: reverb, r1.arg2: these issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has manipulated, r0.namespace: reverb, r1.arg2: the issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran?s Islamic regime) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has been, r0.namespace: reverb, r1.arg2: an issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a nuclear Iran) => issue; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: issue, r1.rel: has become, r0.namespace: reverb, r1.arg2: an issue for all, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The Iran issue) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has, r0.namespace: reverb, r1.arg2: issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Roman) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: had taken, r0.namespace: reverb, r1.arg2: issue, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Roman Catholic Church) => issue; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: issue, r1.rel: has officially resolved, r0.namespace: reverb, r1.arg2: such issues, r0.arg2: fine art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Roman Catholic Church) => issue
What kind of music did the romans have?	society	5.853996491401694	what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: society, r1.rel: has been an important characteristic of, r0.namespace: reverb, r1.arg2: society, r0.arg2: slow dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => society; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: society, r1.rel: has failed as, r0.namespace: reverb, r1.arg2: a society, r0.arg2: slow dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => society; what type of dance do roman have ? => $x: ($x, "is a kind of", dance) (roman, have, $x) => $x: ($x, "is a kind of", dance) (roman, have, $x) => (r0.arg1: society, r1.rel: do still have a place in, r0.namespace: reverb, r1.arg2: our society, r0.arg2: slow dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman numerals) => society
What kind of music did the romans have?	translation	5.843055649196235	what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has contributed, r0.namespace: reverb, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => Translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Translation, r1.rel: has addressed the theory of, r0.namespace: reverb, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => Translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has contributed, r0.namespace: openie4, r1.arg2: the Czech Translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman Brychta) => translation; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: translation, r1.rel: has addressed the theory of, r0.namespace: openie4, r1.arg2: translation, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: another Roman document) => translation
What kind of music did the romans have?	music	5.799245233639952	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: Music, r1.rel: had to record, r0.namespace: reverb, r1.arg2: their music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Music; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: Music, r1.rel: had to record, r0.namespace: openie4, r1.arg2: their music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has failed to provide, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Church) => Music; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Music, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: music, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Mass) => Music
What kind of music did the romans have?	football	5.7314541037416875	what kind of sport do rome have ? => $x: ($x, "is a kind of", sport) (rome, have, $x) => $x: ($x, "is a kind of", sport) (rome, have, $x) => (r0.arg1: Football, r1.rel: has been synonymous with, r0.namespace: openie4, r1.arg2: football, r0.arg2: sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => Football
What kind of music did the romans have?	diamond cuts	5.65999597478815	what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: Diamond Cuts, r1.rel: wore, r0.namespace: freebase, r1.arg2: diamonds, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Romans) => Diamond Cuts; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: Diamond Cuts, r1.rel: wore, r0.namespace: freebase, r1.arg2: diamonds, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: openie4, r1.arg1: The Romans) => Diamond Cuts; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: Diamond Cuts, r1.rel: wore, r0.namespace: freebase, r1.arg2: diamonds, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Romans) => Diamond Cuts; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: Diamond Cuts, r1.rel: wore, r0.namespace: freebase, r1.arg2: diamonds, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: openie4, r1.arg1: The Romans) => Diamond Cuts
What kind of music did the romans have?	war	5.6385199612512045	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the War, r1.rel: had begun, r0.namespace: reverb, r1.arg2: the war, r0.arg2: the Federalist style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => the War; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the War, r1.rel: have better success in, r0.namespace: reverb, r1.arg2: the war, r0.arg2: the Federalist style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => the War; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the War, r1.rel: had been in, r0.namespace: reverb, r1.arg2: the war, r0.arg2: the Federalist style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => the War; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the War, r1.rel: had been engaged in, r0.namespace: reverb, r1.arg2: the war, r0.arg2: the Federalist style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => the War; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the War, r1.rel: had decided to carry, r0.namespace: reverb, r1.arg2: the war, r0.arg2: the Federalist style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => the War
What kind of music did the romans have?	march	5.6385199612512045	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: March, r1.rel: had originally celebrated the New Year in, r0.namespace: reverb, r1.arg2: March, r0.arg2: the style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => March; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: March, r1.rel: had, r0.namespace: reverb, r1.arg2: March 1, r0.arg2: the style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the old Roman Calendar) => March
What kind of music did the romans have?	crucifixion	5.636303779432999	what type of art do roman have ? => $x: ($x, "type", art) (roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Series, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion; what type of art do roman have ? => $x: ($x, "type", art) (roman, have, $x) => $x: ($x, "type", art) (roman, have, $x) => (r0.arg1: Crucifixion, r1.rel: had, r0.namespace: freebase, r1.arg2: crucifixion, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Romans) => Crucifixion
What kind of music did the romans have?	body	5.628589688185431	what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the body, r1.rel: had stolen, r0.namespace: reverb, r1.arg2: the body, r0.arg2: vehicle or instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the body; what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: the body, r1.rel: would have deposited, r0.namespace: reverb, r1.arg2: the body, r0.arg2: vehicle or instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman authorities and Jews) => the body
What kind of music did the romans have?	minister	5.628589688185431	what kind of instrument do roman have ? => $x: ($x, "is a kind of", instrument) (roman, have, $x) => $x: ($x, "is a kind of", instrument) (roman, have, $x) => (r0.arg1: a minister, r1.rel: had been ordained as, r0.namespace: reverb, r1.arg2: a minister, r0.arg2: instrument, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman church) => a minister
What kind of music did the romans have?	sandals	5.623114757610668	what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => SANDALS; what type of clothes do the roman wear ? => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => $x: ($x, "is a kind of", clothes) (the roman, wear, $x) => (r0.arg1: SANDALS, r1.rel: wore, r0.namespace: nell, r1.arg2: sandals, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the Romans) => SANDALS; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Romans) => The Sandals; what kind of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Romans) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Romans) => The Sandals; what type of music do the roman wear ? => $x: ($x, "type", music) (the roman, wear, $x) => $x: ($x, "type", music) (the roman, wear, $x) => (r0.arg1: The Sandals, r1.rel: wore, r0.namespace: freebase, r1.arg2: sandals, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Romans) => The Sandals
What kind of music did the romans have?	asia	5.615988890393688	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: Asia, r1.rel: had escaped from, r0.namespace: reverb, r1.arg2: Asia, r0.arg2: a style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Romans) => Asia; what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: Asia, r1.rel: had crossed over to, r0.namespace: reverb, r1.arg2: Asia, r0.arg2: a style, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman generals) => Asia
What kind of music did the romans have?	method	5.615988890393688	what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: method, r1.rel: though had all kinds of, r0.namespace: reverb, r1.arg2: methods, r0.arg2: style sheet, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => method; what type of style do the roman have ? => $x: ($x, "is a kind of", style) (the roman, have, $x) => $x: ($x, "is a kind of", style) (the roman, have, $x) => (r0.arg1: method, r1.rel: may have learned, r0.namespace: reverb, r1.arg2: this method, r0.arg2: style sheet, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The Romans) => method
What kind of music did the romans have?	universe	5.605323557003914	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => universe; what kind of sport do the roman have ? => $x: ($x, "is a kind of", sport) (the roman, have, $x) => $x: ($x, "is a kind of", sport) (the roman, have, $x) => (r0.arg1: the Universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Universe; what kind of sport do roman have ? => $x: ($x, "is a kind of", sport) (roman, have, $x) => $x: ($x, "is a kind of", sport) (roman, have, $x) => (r0.arg1: the Universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => the Universe; what kind of sport do rome have ? => $x: ($x, "is a kind of", sport) (rome, have, $x) => $x: ($x, "is a kind of", sport) (rome, have, $x) => (r0.arg1: the Universe, r1.rel: have found evidence in, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: group sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Rome) => the Universe; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: universe, r1.rel: have known about, r0.namespace: reverb, r1.arg2: the universe, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => universe
What kind of music did the romans have?	house	5.597212998012425	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the house, r1.rel: had entered, r0.namespace: reverb, r1.arg2: the house, r0.arg2: Federal style architecture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman soldiers) => the house
What kind of music did the romans have?	popular culture	5.585608870003587	what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: Popular culture, r1.rel: had a part in shaping, r0.namespace: reverb, r1.arg2: popular culture, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman rule) => Popular culture
What kind of music did the romans have?	building	5.581325704459046	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: The building, r1.rel: had used in, r0.namespace: reverb, r1.arg2: the building, r0.arg2: Commercial style architecture, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman craftsmen) => The building
What kind of music did the romans have?	work	5.581168018202885	what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: The work, r1.rel: has its origins in, r0.namespace: reverb, r1.arg2: the work, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman invasion) => The work; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: The work, r1.rel: has long been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => The work; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: The work, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => The work; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: The work, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: A war on Iran) => The work; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: The work, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: War with Iran) => The work; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: The work, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the 'bomb Iran' campaign) => The work; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The work, r1.rel: have separated, r0.namespace: reverb, r1.arg2: the work, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholics) => The work; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The work, r1.rel: has been prominent in, r0.namespace: reverb, r1.arg2: the work, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Catholic) => The work; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The work, r1.rel: has its origins in, r0.namespace: reverb, r1.arg2: the work, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman invasion) => The work; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The work, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the works, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: This Roman Catholic church) => The work; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: The work, r1.rel: has been abolished by, r0.namespace: reverb, r1.arg2: the work, r0.arg2: the A.R.T.?s ongoing efforts, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: ? Romans 8:3 Sin) => The work
What kind of music did the romans have?	home	5.555906034773643	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: HOME, r1.rel: would have felt right at, r0.namespace: reverb, r1.arg2: home, r0.arg2: HOME STYLE ONLY, r0.rel: IS AN EXAMPLE OF, r1.namespace: reverb, r1.arg1: The Roman elites) => HOME
What kind of music did the romans have?	shore	5.536467463837746	what type of style do the roman have ? => $x: ($x, "is an example of", style) (the roman, have, $x) => $x: ($x, "is an example of", style) (the roman, have, $x) => (r0.arg1: the shore, r1.rel: has now ended on, r0.namespace: reverb, r1.arg2: the shores, r0.arg2: one way styles change, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Via Egnatia westwards) => the shore
What kind of music did the romans have?	stock	5.521234381839252	what type of art do the roman have ? => $x: ($x, "is a kind of", art) (the roman, have, $x) => $x: ($x, "is a kind of", art) (the roman, have, $x) => (r0.arg1: stock, r1.rel: cannon have come back in, r0.namespace: reverb, r1.arg2: stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman Memoirs) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: had underreported, r0.namespace: reverb, r1.arg2: its stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: may have also begun to exploit, r0.namespace: reverb, r1.arg2: stocks, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: stock, r1.rel: has been adding to, r0.namespace: reverb, r1.arg2: its stocks, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => stock; what type of art do roman have ? => $x: ($x, "is a kind of", art) (roman, have, $x) => $x: ($x, "is a kind of", art) (roman, have, $x) => (r0.arg1: stock, r1.rel: cannon have come back in, r0.namespace: reverb, r1.arg2: stock, r0.arg2: ART, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Graeco-Roman Memoirs) => stock
What kind of music did the romans have?	we world	5.519939026545734	what kind of music do roman empire ? => $x: ($x, "type", music) ($x, do, roman empire) => $x: ($x, "type", music) ($x, do, roman empire) => (r0.arg1: We Are the World, r1.rel: did magic prior to, r0.namespace: freebase, r1.arg2: the Roman Empire, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the world) => We Are the World; what type of music do roman empire ? => $x: ($x, "type", music) ($x, do, roman empire) => $x: ($x, "type", music) ($x, do, roman empire) => (r0.arg1: We Are the World, r1.rel: did magic prior to, r0.namespace: freebase, r1.arg2: the Roman Empire, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the world) => We Are the World; what kind of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: We Are the World, r1.rel: had on, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the impact Rome) => We Are the World; what kind of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: We Are the World, r1.rel: has divided, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Music video, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Club of Rome) => We Are the World; what type of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: We Are the World, r1.rel: had on, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the impact Rome) => We Are the World; what type of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: We Are the World, r1.rel: has divided, r0.namespace: freebase, r1.arg2: the world, r0.arg2: Music video, r0.rel: Type, r1.namespace: openie4, r1.arg1: the Club of Rome) => We Are the World
What kind of music did the romans have?	fashion	5.505836218982082	what kind of sport do iran have ? => $x: ($x, "is a kind of", sport) (iran, have, $x) => $x: ($x, "is a kind of", sport) (iran, have, $x) => (r0.arg1: fashion, r1.rel: has been, r0.namespace: reverb, r1.arg2: the fashion, r0.arg2: sport, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Bullying Iran) => fashion; what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: fashion, r1.rel: has been, r0.namespace: reverb, r1.arg2: the fashion, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Bullying Iran) => fashion
What kind of music did the romans have?	fire	5.498424983192202	what kind of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: Fire, r1.rel: has been burnt with, r0.namespace: freebase, r1.arg2: fire, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Rome) => Fire; what type of music do the rome have ? => $x: ($x, "type", music) (the rome, have, $x) => $x: ($x, "type", music) (the rome, have, $x) => (r0.arg1: Fire, r1.rel: has been burnt with, r0.namespace: freebase, r1.arg2: fire, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Rome) => Fire
What kind of music did the romans have?	women	5.441294088921487	what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Women, r1.rel: have been, r0.namespace: freebase, r1.arg2: women, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Women; what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Women, r1.rel: had given rights to, r0.namespace: freebase, r1.arg2: women, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Women; what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Women, r1.rel: has freed, r0.namespace: freebase, r1.arg2: a women, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Women; what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Women, r1.rel: could have advocated having, r0.namespace: freebase, r1.arg2: women, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: 19th Century Iran) => Women; what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Women, r1.rel: had very different effects on, r0.namespace: freebase, r1.arg2: women, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: China and Iran) => Women
What kind of music did the romans have?	disease	5.4117891151794995	what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Disease, r1.rel: have died of, r0.namespace: freebase, r1.arg2: the disease, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Disease
What kind of music did the romans have?	inspiration	5.38966038487301	what type of art do iran have ? => $x: ($x, "type", art) (iran, have, $x) => $x: ($x, "type", art) (iran, have, $x) => (r0.arg1: Inspiration, r1.rel: has been source of, r0.namespace: freebase, r1.arg2: inspiration, r0.arg2: Art Subject, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Inspiration
What kind of music did the romans have?	philosophy	5.38966038487301	what type of art do iran have ? => $x: ($x, "is a kind of", art) (iran, have, $x) => $x: ($x, "is a kind of", art) (iran, have, $x) => (r0.arg1: philosophy, r1.rel: has paid more attention to, r0.namespace: reverb, r1.arg2: philosophy, r0.arg2: art, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the later ages Iran) => philosophy
What kind of music did the romans have?	irish eyes music	5.371793725285122	what kind of music do thay have ? => $x: ($x, "type", music) (thay, have, $x) => $x: ($x, "type", music) (thay, have, $x) => (r0.arg1: Irish Eyes Music, r1.rel: have played, r0.namespace: freebase, r1.arg2: Irish music, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: thay) => Irish Eyes Music
What kind of music did the romans have?	eye	5.371793725285122	what kind of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what type of music do ancient roman have ? => $x: ($x, "type", music) (ancient roman, have, $x) => $x: ($x, "type", music) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what kind of thing do ancient roman have ? => $x: ($x, "type", thing) (ancient roman, have, $x) => $x: ($x, "type", thing) (ancient roman, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Eye; what kind of music do thay have ? => $x: ($x, "type", music) (thay, have, $x) => $x: ($x, "type", music) (thay, have, $x) => (r0.arg1: Eye, r1.rel: had, r0.namespace: freebase, r1.arg2: eyes, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: thay) => Eye
What kind of music did the romans have?	matilda	5.371793725285122	what kind of music do thay have ? => $x: ($x, "type", music) (thay, have, $x) => $x: ($x, "type", music) (thay, have, $x) => (r0.arg1: Matilda, r1.rel: had, r0.namespace: freebase, r1.arg2: Matilda, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Thay) => Matilda
What kind of music did the romans have?	europe	5.371024478815863	what kind of music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, the roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what type of music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, the roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what kind of music do roman ? => $x: ($x, "type", music) ($x, do, roman) => $x: ($x, "type", music) ($x, do, roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what type of music do roman ? => $x: ($x, "type", music) ($x, do, roman) => $x: ($x, "type", music) ($x, do, roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe
What kind of music did the romans have?	poetry	5.334336128072958	what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: reverb, r1.arg2: poetry, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: openie4, r1.arg2: poetry, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: reverb, r1.arg2: poetry, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: Poetry, r1.rel: can have, r0.namespace: openie4, r1.arg2: poetry, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => Poetry
What kind of music did the romans have?	peugeot	5.332188930327555	what kind of thing do iran have ? => $x: ($x, "type", thing) (iran, have, $x) => $x: ($x, "type", thing) (iran, have, $x) => (r0.arg1: Peugeot, r1.rel: already has agreed with, r0.namespace: freebase, r1.arg2: Peugeot, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran Khodro) => Peugeot
What kind of music did the romans have?	champion	5.257698324549055	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (the romans, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: a champion, r1.rel: has also emerged as, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => a champion; what kind of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do iran have ? => $x: ($x, "is a kind of", music) (iran, have, $x) => $x: ($x, "is a kind of", music) (iran, have, $x) => (r0.arg1: a champion, r1.rel: has also emerged as, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => a champion; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music have roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; which type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (the roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion
What kind of music did the romans have?	art	5.239349779432987	what kind of music do rome have ? => $x: ($x, "type", music) (rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of music do rome have ? => $x: ($x, "type", music) (rome, have, $x) => $x: ($x, "type", music) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Music video genre, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: had learned many of, r0.namespace: reverb, r1.arg2: the arts, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: must have known something of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: had become masters of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greeks and Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: had a profound impact on, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => art; what type of art do the roman have ? => $x: ($x, "is an example of", art) (the roman, have, $x) => $x: ($x, "is an example of", art) (the roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art; what type of art do ancient roman have ? => $x: ($x, "is an example of", art) (ancient roman, have, $x) => $x: ($x, "is an example of", art) (ancient roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do ancient roman have ? => $x: ($x, "is an example of", art) (ancient roman, have, $x) => $x: ($x, "is an example of", art) (ancient roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art; what kind of thing do rome have ? => $x: ($x, "type", thing) (rome, have, $x) => $x: ($x, "type", thing) (rome, have, $x) => (r0.arg1: Art, r1.rel: had, r0.namespace: freebase, r1.arg2: art, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rome) => Art; what type of art do iran have ? => $x: ($x, "is an example of", art) (iran, have, $x) => $x: ($x, "is an example of", art) (iran, have, $x) => (r0.arg1: art, r1.rel: has perfected, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: has a cheerfully cartoonish style of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: also has a few pieces of, r0.namespace: reverb, r1.arg2: art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman Vishniac) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had learned many of, r0.namespace: reverb, r1.arg2: the arts, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: have their origins in, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman art) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: must have known something of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had become masters of, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Greeks and Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: may have mastered, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Romans) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had a profound impact on, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => art; what type of art do roman have ? => $x: ($x, "is an example of", art) (roman, have, $x) => $x: ($x, "is an example of", art) (roman, have, $x) => (r0.arg1: art, r1.rel: had their formulae for, r0.namespace: reverb, r1.arg2: the art, r0.arg2: the art, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The ancient Greeks and Romans) => art
What kind of music did the romans have?	past	5.225779307500905	What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (the romans, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (the romans, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has had massive demonstrations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has responded in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has clearly cheated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had promised in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have expressed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has offered things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has said in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have made of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran ?) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has boasted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has amply demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has threatened in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have become prisoners of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has made in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has caused problems in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had concealed nuclear activities in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown a tendency in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been repeatedly discussed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown cooperative tendencies in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has used this tactic successfully in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done so many times in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had a nuclear weapons program in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done highly provocative things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been less hostile to us in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been provided such assurances in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has approved bills in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s parliament) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has also learned from, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s president) => the past; what kind of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: supposedly Iran) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what kind of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: had done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has clearly stated its position in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Rome) => the past; what type of music do rome have ? => $x: ($x, "is an example of", music) (rome, have, $x) => $x: ($x, "is an example of", music) (rome, have, $x) => (r0.arg1: the past, r1.rel: has one foot in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Modern Rome) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has had massive demonstrations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has responded in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has clearly cheated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had promised in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have expressed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has offered things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has said in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have made of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran ?) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has boasted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has amply demonstrated in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has threatened in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: have become prisoners of, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has made in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has caused problems in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had concealed nuclear activities in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted such operations in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown a tendency in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been repeatedly discussed in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has shown cooperative tendencies in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has used this tactic successfully in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done so many times in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: had a nuclear weapons program in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has done highly provocative things in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been less hostile to us in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has been provided such assurances in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has approved bills in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s parliament) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has also learned from, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran?s president) => the past; what type of music do iran have ? => $x: ($x, "is an example of", music) (iran, have, $x) => $x: ($x, "is an example of", music) (iran, have, $x) => (r0.arg1: the past, r1.rel: has conducted in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: supposedly Iran) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music have roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; which type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (the roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past
What kind of music did the romans have?	process	5.185859647913017	what type of dance do the roman have ? => $x: ($x, "is a kind of", dance) (the roman, have, $x) => $x: ($x, "is a kind of", dance) (the roman, have, $x) => (r0.arg1: The process, r1.rel: had a word for, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has started, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has insisted, r0.namespace: reverb, r1.arg2: the processes, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has reportedly begun, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has been involved in, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has embarked on, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has been manipulating, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has been in, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do iran have ? => $x: ($x, "is a kind of", dance) (iran, have, $x) => $x: ($x, "is a kind of", dance) (iran, have, $x) => (r0.arg1: The process, r1.rel: has to be a part of, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Iran) => The process; what type of dance do roman have ? => $x: ($x, "is a kind of", dance) (roman, have, $x) => $x: ($x, "is a kind of", dance) (roman, have, $x) => (r0.arg1: The process, r1.rel: had a word for, r0.namespace: reverb, r1.arg2: the process, r0.arg2: a dance, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Romans) => The process
What kind of music did the romans have?	pizza	5.1606700303379265	what kind of thing do ancient roman have ? => $x: ($x, "type", thing) (ancient roman, have, $x) => $x: ($x, "type", thing) (ancient roman, have, $x) => (r0.arg1: Pizza, r1.rel: have, r0.namespace: freebase, r1.arg2: pizza, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: the ancient Romans) => Pizza
What kind of music did the romans have?	part	5.143033208363906	what kind of music do roman empire ? => $x: ($x, "type", music) ($x, do, roman empire) => $x: ($x, "type", music) ($x, do, roman empire) => (r0.arg1: Part of Me, r1.rel: did, r0.namespace: freebase, r1.arg2: the Roman Empire Fall, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: part) => Part of Me; what type of music do roman empire ? => $x: ($x, "type", music) ($x, do, roman empire) => $x: ($x, "type", music) ($x, do, roman empire) => (r0.arg1: Part of Me, r1.rel: did, r0.namespace: freebase, r1.arg2: the Roman Empire Fall, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: part) => Part of Me
What kind of music did the romans have?	costume	5.129210725285115	what type of clothes do roman have ? => $x: ($x, "type", clothes) (roman, have, $x) => $x: ($x, "type", clothes) (roman, have, $x) => (r0.arg1: Costume, r1.rel: has used, r0.namespace: freebase, r1.arg2: this costume, r0.arg2: Clothing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Roman Catholic) => Costume
What responsibilities did john jay have?	research	7.571570839418533	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research; what function do john jay have ? => $x: ($x, "type", function) (john jay, have, $x) => $x: ($x, "type", function) (john jay, have, $x) => (r0.arg1: Research, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => Research
What responsibilities did john jay have?	college	7.571570839418533	what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: COLLEGE, r1.rel: had been his contemporary in, r0.namespace: nell, r1.arg2: college, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => COLLEGE; what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: College, r1.rel: had been his contemporary in, r0.namespace: freebase, r1.arg2: college, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => College; what function do john jay have ? => $x: ($x, "type", function) (john jay, have, $x) => $x: ($x, "type", function) (john jay, have, $x) => (r0.arg1: College, r1.rel: had been his contemporary in, r0.namespace: freebase, r1.arg2: college, r0.arg2: Building function, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => College
What responsibilities did john jay have?	london	7.504743566691258	what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: London, r1.rel: had been dispatched to, r0.namespace: freebase, r1.arg2: London, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: Chief Justice John Jay) => London; what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: London, r1.rel: had been dispatched to, r0.namespace: freebase, r1.arg2: London, r0.arg2: Delete Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: Chief Justice John Jay) => London
What responsibilities did john jay have?	english	7.462497808833413	what task do john jay have ? => $x: ($x, "type", task) (john jay, have, $x) => $x: ($x, "type", task) (john jay, have, $x) => (r0.arg1: English, r1.rel: has been translated to, r0.namespace: freebase, r1.arg2: English, r0.arg2: Task, r0.rel: Type, r1.namespace: reverb, r1.arg1: John C. Jay?s portion) => English
What responsibilities did john jay have?	united states secretary navy	7.066041792970011	what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Navy, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Navy
What responsibilities did john jay have?	united states secretary army	7.066041792970011	what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: United States Secretary of the Army, r1.rel: was, r0.namespace: freebase, r1.arg2: the United States Secretary, r0.arg2: Appointed Role, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => United States Secretary of the Army
What responsibilities did john jay have?	agresearch	6.862533475782148	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: AgResearch, r1.rel: have embarked on, r0.namespace: freebase, r1.arg2: research, r0.arg2: Type of thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: AHA and John Jay) => AgResearch
What responsibilities did john jay have?	spain	6.858359983192245	what state do john jay have ? => $x: ($x, "type", state) (john jay, have, $x) => $x: ($x, "type", state) (john jay, have, $x) => (r0.arg1: Spain, r1.rel: had little success in, r0.namespace: freebase, r1.arg2: Spain, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => Spain; what state do john jay have ? => $x: ($x, "type", state) (john jay, have, $x) => $x: ($x, "type", state) (john jay, have, $x) => (r0.arg1: Spain, r1.rel: had been appointed minister to, r0.namespace: freebase, r1.arg2: Spain, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Jay) => Spain; what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: SPAIN, r1.rel: had little success in, r0.namespace: nell, r1.arg2: Spain, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => SPAIN; what state do john jay have ? => $x: ($x, "is a", state) (john jay, have, $x) => $x: ($x, "is a", state) (john jay, have, $x) => (r0.arg1: SPAIN, r1.rel: had been appointed minister to, r0.namespace: nell, r1.arg2: Spain, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: John Jay) => SPAIN
What responsibilities did john jay have?	target	6.8029561249569825	what thing do john jay have ? => $x: ($x, "type", thing) (john jay, have, $x) => $x: ($x, "type", thing) (john jay, have, $x) => (r0.arg1: target, r1.rel: have been pretty much on, r0.namespace: freebase, r1.arg2: target, r0.arg2: Man-made Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Matt John Jay?s posts) => target
What responsibilities did john jay have?	co-chairman	6.5796781566063745	what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Co-Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Co-Chairman
What responsibilities did john jay have?	chairman	6.5796781566063745	what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: HOBY role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Collaborator role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Leadership Role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Project role, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman; what role do john jay be ? => $x: ($x, "type", role) (john jay, be, $x) => $x: ($x, "type", role) (john jay, be, $x) => (r0.arg1: Chairman, r1.rel: was, r0.namespace: freebase, r1.arg2: Chairman, r0.arg2: Role in Meeting, r0.rel: Type, r1.namespace: openie4, r1.arg1: John Jay) => Chairman
What responsibilities did john jay have?	volunteer	5.046919213673033	what job do john jay ? => $x: ($x, "is a", job) ($x, do, john jay) => $x: ($x, "is a", job) ($x, do, john jay) => (r0.arg1: VOLUNTEER, r1.rel: did, r0.namespace: nell, r1.arg2: John Jay shape, r0.arg2: job position, r0.rel: is a, r1.namespace: reverb, r1.arg1: Volunteers) => VOLUNTEER
What is the welsh word for gram?	annwfn	9.156863786553878	what be the welsh word for g ? => $x: ($x, be the welsh word for, g) => $x: ($x, be the welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be the welsh word for g ? => $x: ($x, be the welsh word for, g) => $x: ($x, be the welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be welsh word for g ? => $x: ($x, be welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn; what be welsh word for g ? => $x: ($x, be welsh word for, g) => $x: ($x, be welsh word for, g) => (r0.arg1: Annwfn, r0.namespace: reverb, r0.arg2: Tir Na N'0g, r0.rel: is the Welsh word for) => Annwfn
What is the welsh word for gram?	eira	8.574953133382087	what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be the welsh word for, snow) => (r0.arg1: Eira, r0.namespace: openie4, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be the welsh word for, snow) => (r0.arg1: Eira, r0.namespace: reverb, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be the welsh word for, snow) => (r0.arg1: Eira, r0.namespace: openie4, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira; what be the welsh word for snow ? => $x: ($x, be the welsh word for, snow) => $x: ($x, be the welsh word for, snow) => (r0.arg1: Eira, r0.namespace: reverb, r0.arg2: snow, r0.rel: is the Welsh word for) => Eira
Is star is a source of light?	windows	8.342899946254867	which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are also a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was The only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: a window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the most common sources of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Window) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are great sources of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are primary source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the best source of, r0.namespace: reverb, r1.arg2: natural lighting, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: are the main source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Windows) => Windows; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: Windows, r1.rel: were their only source of, r0.namespace: reverb, r1.arg2: natural light, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: these windows) => Windows; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, a light source) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: A window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: can be used as, r0.namespace: reverb, r1.arg2: a good light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Windows) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a secondary light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the window) => Windows; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: Windows, r1.rel: has been added as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The window) => Windows
Is star is a source of light?	object	8.31596032454912	what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, a light source) => (r0.arg1: An object, r1.rel: is illuminated by, r0.namespace: reverb, r1.arg2: a modulated light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, a light source) => (r0.arg1: An object, r1.rel: is placed between, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, a light source) => (r0.arg1: An object, r1.rel: is lit by, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, a light source) => (r0.arg1: An object, r1.rel: is placed in, r0.namespace: reverb, r1.arg2: front of a light source, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an object) => An object; what state be a light source ? => $x: ($x, "is a kind of", state) ($x, be, a light source) => $x: ($x, "is a kind of", state) ($x, be, a light source) => (r0.arg1: An object, r1.rel: is, r0.namespace: reverb, r1.arg2: twice the distance from a point source of light, r0.arg2: state machine, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an object) => An object
Is star is a source of light?	sun	8.312047072211925	which star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be a source of, light) => (r0.arg1: Sun, r1.rel: is a great source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sun) => Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be a source of, light) => (r0.arg1: Sun, r1.rel: is a great source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sun) => Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: The Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source of light ? => $x: ($x, "is an example of", star) ($x, be a source of, light) => $x: ($x, "is an example of", star) ($x, be a source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: The Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: The Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star have a source of light ? => $x: ($x, "is an example of", star) ($x, have a source of, light) => $x: ($x, "is an example of", star) ($x, have a source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a light source ? => $x: ($x, "is an example of", star) ($x, be, a light source) => $x: ($x, "is an example of", star) ($x, be, a light source) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: The Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is sole source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is your source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: IS the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the real source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an eternal source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light .., r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was The ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a steady source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the biggest source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is another main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an enormous source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the very source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The best source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was our primary source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the supreme source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: being the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: [is] the main source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the major source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our ultimate source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: was the only major source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a very strong source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is The most obvious source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the number one source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the earth?s source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: really is the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an extremely bright source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is an incredibly good source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: can really be a good source of, r0.namespace: reverb, r1.arg2: lighting, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural full-spectrum source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most ?en-light-ened ? source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is n?t the only source of, r0.namespace: reverb, r1.arg2: light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light examples, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: ultraviolet light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: IR light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all warmth and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: both heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our source of, r0.namespace: reverb, r1.arg2: light , energy and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all natural light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and growth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: life and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: all light and warmth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the source of, r0.namespace: reverb, r1.arg2: light and life generating energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the most powerful source of, r0.namespace: reverb, r1.arg2: the light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is my main source of, r0.namespace: reverb, r1.arg2: light xD, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our wondrous source of, r0.namespace: reverb, r1.arg2: energy and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the basic source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a powerful source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is our main source of, r0.namespace: reverb, r1.arg2: light and energy, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: full-spectrum light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the primary source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has been a source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: will be the source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the main source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a natural source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the ultimate source of, r0.namespace: reverb, r1.arg2: light and life, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is the great source of, r0.namespace: reverb, r1.arg2: light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is nature?s primary source of, r0.namespace: reverb, r1.arg2: rainbow creating light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: is a dependable incandescent source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be source of light ? => $x: ($x, "is an example of", star) ($x, be source of, light) => $x: ($x, "is an example of", star) ($x, be source of, light) => (r0.arg1: the Sun, r1.rel: has always been a source of, r0.namespace: reverb, r1.arg2: heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, a light source) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star have a light source ? => $x: ($x, "is an example of", star) ($x, have, a light source) => $x: ($x, "is an example of", star) ($x, have, a light source) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; which star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: The Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a main sequence star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => The Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a small light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a single light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a harsh light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a constant light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a dynamic light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a HUGE light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a huge light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: *cannot* be, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: can be worked into, r0.namespace: reverb, r1.arg2: a large light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is enabled as, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is treated as, r0.namespace: reverb, r1.arg2: a point light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: can be easily seen with, r0.namespace: reverb, r1.arg2: a light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a steady source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a great natural light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: such a powerful light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a natural source of light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: also is, r0.namespace: reverb, r1.arg2: a well defined light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: could be, r0.namespace: reverb, r1.arg2: a point light source right, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is n?t, r0.namespace: reverb, r1.arg2: a perfect white light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: the best light source for a photographer, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of light and heat, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a bright white directional light source, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: has been, r0.namespace: reverb, r1.arg2: a source of heat and light, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the sun) => the Sun; what star be a source light ? => $x: ($x, "is an example of", star) ($x, be, a source light) => $x: ($x, "is an example of", star) ($x, be, a source light) => (r0.arg1: the Sun, r1.rel: is, r0.namespace: reverb, r1.arg2: a source of heat and light for Earth, r0.arg2: a typical , ordinary star, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: the Sun) => the Sun
Is star is a source of light?	georgia	7.846761042473056	what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: US State, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Former Soviet Union States, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "type", state) ($x, be a source of, light) => $x: ($x, "type", state) ($x, be a source of, light) => (r0.arg1: Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => Georgia; what state be a source of light ? => $x: ($x, "is a", state) ($x, be a source of, light) => $x: ($x, "is a", state) ($x, be a source of, light) => (r0.arg1: GEORGIA, r1.rel: is a source of, r0.namespace: nell, r1.arg2: light, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: Georgia) => GEORGIA
Is star is a source of light?	links	7.364025115179582	what state be a light source ? => $x: ($x, "is an example of", state) ($x, be, a light source) => $x: ($x, "is an example of", state) ($x, be, a light source) => (r0.arg1: the links, r1.rel: should be, r0.namespace: reverb, r1.arg2: a large and bright light source, r0.arg2: the poor state, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the link) => the links
Is star is a source of light?	359 georgia	7.346539634376092	which star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be a source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; what star be a source of light ? => $x: ($x, "type", star) ($x, be a source of, light) => $x: ($x, "type", star) ($x, be a source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; which star be source of light ? => $x: ($x, "type", star) ($x, be source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia; what star be source of light ? => $x: ($x, "type", star) ($x, be source of, light) => $x: ($x, "type", star) ($x, be source of, light) => (r0.arg1: 359 Georgia, r1.rel: is a source of, r0.namespace: freebase, r1.arg2: light, r0.arg2: Star system body, r0.rel: Type, r1.namespace: reverb, r1.arg1: Georgia) => 359 Georgia
Who started the bear flag revolution?	glenn county	10.898902757610745	who be the bear flag rebellion ? => $x: ($x, be, the bear flag rebellion) => $x: ($x, be, the bear flag rebellion) => (r0.arg1: Glenn County, r0.namespace: reverb, r0.arg2: the Bear Flag Rebellion, r0.rel: was involved in) => Glenn County
Who started the bear flag revolution?	ide	9.62023529927305	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: Ide, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was a participant in) => Ide
Who started the bear flag revolution?	california	9.62023529927305	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: is a reference to) => California; who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: California, r0.namespace: openie4, r0.arg2: the Bear Flag Revolt, r0.rel: was first flown during) => California
Who started the bear flag revolution?	mexican authorities	8.966595611151828	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: Mexican authorities, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: is called) => Mexican authorities
Who started the bear flag revolution?	general vallejo	8.929714393974345	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: General Vallejo, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was imprisoned during) => General Vallejo
Who started the bear flag revolution?	fr?mont	8.929714393974345	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: Fr?mont, r0.namespace: reverb, r0.arg2: the Bear Flag Revolt, r0.rel: was involved in) => Fr?mont
Who started the bear flag revolution?	1851	8.929714393974345	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: 1851, r0.namespace: reverb, r0.arg2: The Bear Flag Revolt, r0.rel: was intended to) => 1851
Who started the bear flag revolution?	sonoma residents	8.902053481091233	who be the bear flag revolt ? => $x: ($x, be, the bear flag revolt) => $x: ($x, be, the bear flag revolt) => (r0.arg1: Sonoma residents, r0.namespace: reverb, r0.arg2: the Bear Flag revolt, r0.rel: are quite aware of) => Sonoma residents
What were the names of famous highwayman?	dublin	7.098876839418434	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dublin, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: is robbed by) => Dublin
What were the names of famous highwayman?	dick turpin	7.098876839418434	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Turpin, r0.namespace: reverb, r0.arg2: a famous 18th century highwayman, r0.rel: was) => Dick Turpin
What were the names of famous highwayman?	two riniers	6.535596133382047	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers
What were the names of famous highwayman?	gamaliel ratsey	6.458145577309331	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Gamaliel Ratsey, r0.namespace: reverb, r0.arg2: a famous highwayman, r0.rel: was) => Gamaliel Ratsey
What were the names of famous highwayman?	willie brennan	6.411675243665703	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Willie Brennan, r0.namespace: reverb, r0.arg2: a famous Irish highwayman, r0.rel: was) => Willie Brennan
What were the names of famous highwayman?	dick dunsdon	6.411675243665703	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Dick Dunsdon, r0.namespace: reverb, r0.arg2: famous 18th century highwaymen, r0.rel: were) => Dick Dunsdon
What were the names of famous highwayman?	lady katherine ferrers	6.411675243665703	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Lady Katherine Ferrers, r0.namespace: reverb, r0.arg2: a famous lady highwayman, r0.rel: was) => Lady Katherine Ferrers
What were the names of famous highwayman?	holloway	6.380695021236617	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: Holloway, r0.namespace: reverb, r0.arg2: the famous highwayman, r0.rel: were the haunt of) => Holloway
What were the names of famous highwayman?	services	6.380695021236617	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the services, r0.namespace: reverb, r0.arg2: a very famous highwayman, r0.rel: had been) => the services
What were the names of famous highwayman?	desk	6.3032444651639015	who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: the desk, r0.namespace: reverb, r0.arg2: the famous eighteenth century Highwayman?s chair, r0.rel: was) => the desk
What is a bicycle that rides two people?	test	9.056031757610775	what people ride a bicycle ? => $x: ($x, "type", people) ($x, ride, a bicycle) => $x: ($x, "type", people) ($x, ride, a bicycle) => (r0.arg1: test, r1.rel: is like riding, r0.namespace: freebase, r1.arg2: a bicycle, r0.arg2: People, r0.rel: Type, r1.namespace: reverb, r1.arg1: tests) => test
What is a bicycle that rides two people?	animals	7.16945776443674	what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: an animal) => Animals; what people ride a bicycle ? => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => $x: ($x, "is a kind of", people) ($x, ride, a bicycle) => (r0.arg1: Animals, r1.rel: to ride, r0.namespace: nell, r1.arg2: a bicycle, r0.arg2: PEOPLE, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the animals) => Animals
What bird is brown and has a crown?	cactus wren	8.680834486400368	what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird (Species), r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, a brown crown) => (r0.arg1: cactus wren, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird taxa, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Bird (Species), r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "type", bird) ($x, have, a brown crown) => $x: ($x, "type", bird) ($x, have, a brown crown) => (r0.arg1: Cactus Wren, r1.rel: has, r0.namespace: freebase, r1.arg2: a plain brown crown, r0.arg2: Checklist Bird, r0.rel: Type, r1.namespace: reverb, r1.arg1: Cactus Wren) => Cactus Wren; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, a brown crown) => (r0.arg1: cactus wren, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wren
What bird is brown and has a crown?	cactus wrens	7.264027581860103	what bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, a brown crown) => (r0.arg1: cactus wrens, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wrens; which bird have a brown crown ? => $x: ($x, "is a", bird) ($x, have, a brown crown) => $x: ($x, "is a", bird) ($x, have, a brown crown) => (r0.arg1: cactus wrens, r1.rel: has, r0.namespace: nell, r1.arg2: a plain brown crown, r0.arg2: bird, r0.rel: is a, r1.namespace: reverb, r1.arg1: Cactus Wren) => cactus wrens
What is the major cities of romania?	bucharest	6.948200611151746	what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest
What is the major cities of romania?	sibiu	6.911319393974262	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu
What is the major cities of romania?	cluj-napoca	6.88365848109115	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca
What is the major cities of romania?	romania bucharest	6.230018792969927	what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest
What is the major cities of romania?	1st century	6.230018792969927	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century
What is the major cities of romania?	constan?a	6.193137575792445	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a
What is the major cities of romania?	romania constan?a	6.193137575792445	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a
What is the major cities of romania?	cluj-napoca cluj-napoca	6.193137575792445	what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca
What is the major cities of romania?	population	6.193137575792445	what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the largest city in romanium ? => $x: ($x, be the largest city in, romanium) => $x: ($x, be the largest city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population
What is the major cities of romania?	bucharest bucharest	6.094359429333558	what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the city of romanium ? => $x: ($x, be the city of, romanium) => $x: ($x, be the city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest
What is the major cities of romania?	constanta	4.015476662909332	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA
What is the major cities of romania?	braila	4.015476662909332	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila
What is the major cities of romania?	buzau	4.015476662909332	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau
What is the major cities of romania?	resita	4.015476662909332	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita
What is the major cities of romania?	bacau	4.015476662909332	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau
What is the major cities of romania?	arad	3.9939626195558007	what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be the city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad
Where does a bullfrog reproduce?	common	8.624114880029385	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: do headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: lawyers and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: headmasters and bullfrogs, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common
Where does a bullfrog reproduce?	california	8.624114880029385	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: California, r0.rel: have become established in) => California
Where does a bullfrog reproduce?	williamsport	8.593134657600299	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: The Bullfrog Brewery, r0.namespace: reverb, r0.arg2: Williamsport, r0.rel: has been in) => Williamsport
Where does a bullfrog reproduce?	water	8.590284862642733	where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: openie4, r0.arg2: water, r0.rel: must live in) => water; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: North American bullfrogs, r0.namespace: reverb, r0.arg2: water, r0.rel: must live in) => water
Where does a bullfrog reproduce?	15 years	8.481744475782138	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: a bullfrog, r0.namespace: reverb, r0.arg2: 15 years, r0.rel: may live more than) => 15 years; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (a bullfrog, live, $x) => (r0.arg1: a bullfrog, r0.namespace: reverb, r0.arg2: 15 years, r0.rel: may live more than) => 15 years
Where does a bullfrog reproduce?	modest sized pond	8.459615745475649	where do a bullfrog live ? => $x: (a bullfrog, live in, $x) => $x: (a bullfrog, live in, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond; who do a bullfrog live ? => $x: (a bullfrog, live, $x) => $x: (a bullfrog, live, $x) => (r0.arg1: a very large green bullfrog, r0.namespace: reverb, r0.arg2: a modest sized pond, r0.rel: lived in) => a modest sized pond
Where does a bullfrog reproduce?	canada	8.308519556073033	where do bullfrog produce ? => $x: (bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog?s green natural gas, r0.namespace: reverb, r0.arg2: Canada, r0.rel: is produced in) => Canada; where do bullfrog produce ? => $x: (bullfrog, produce in, $x) => $x: (bullfrog, produce in, $x) => (r0.arg1: Bullfrog Power 's green natural gas, r0.namespace: openie4, r0.arg2: Canada, r0.rel: is produced in) => Canada
Where does a bullfrog reproduce?	pond	7.97537045255787	where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond; where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: a pond, r0.rel: have vanished in) => a pond; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: bullfrogs, r0.namespace: reverb, r0.arg2: the pond, r0.rel: live in) => the pond
Where does a bullfrog reproduce?	lakes	7.97537045255787	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: lakes, r0.rel: live near) => lakes
Where does a bullfrog reproduce?	roof	7.9524033954911975	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: the roof, r0.rel: have teeth in) => the roof
Where does a bullfrog reproduce?	state	7.923736748509393	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrog Jumped, r0.namespace: reverb, r0.arg2: the state, r0.rel: lived around) => the state
Where does a bullfrog reproduce?	u.s. , canada ,	7.905933061847568	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: the U.S. , Canada ,, r0.rel: has had tremendous growth in) => the U.S. , Canada ,
Where does a bullfrog reproduce?	declines	7.905933061847568	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: declines, r0.rel: have played in) => declines
Where does a bullfrog reproduce?	8-10 years	7.892756526080307	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrogs, r0.namespace: reverb, r0.arg2: 8-10 years, r0.rel: can live for around) => 8-10 years
Where does a bullfrog reproduce?	two three years	7.892756526080307	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: some bullfrog tadpoles, r0.namespace: reverb, r0.arg2: two or three years, r0.rel: may live) => two or three years
Where does a bullfrog reproduce?	africa rain forest	7.892756526080307	where do bullfrog live ? => $x: (bullfrog, live in, $x) => $x: (bullfrog, live in, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest; who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: 's African bullfrogs, r0.namespace: reverb, r0.arg2: the Africa Rain Forest, r0.rel: live in) => the Africa Rain Forest
Where does a bullfrog reproduce?	master time	7.874952839418482	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Bullfrog, r0.namespace: reverb, r0.arg2: Master Time, r0.rel: had a run in with) => Master Time
Where does a bullfrog reproduce?	permanent ponds	7.874952839418482	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: the bullfrog tadpoles, r0.namespace: reverb, r0.arg2: permanent ponds, r0.rel: have advantages in) => permanent ponds
Where does a bullfrog reproduce?	western us	7.874952839418482	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: American bullfrogs, r0.namespace: reverb, r0.arg2: western US, r0.rel: have become invasive in) => western US
Where does a bullfrog reproduce?	website	7.872103044460916	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Bullfrog Power, r0.namespace: reverb, r0.arg2: the website, r0.rel: is now live on) => the website
Where does a bullfrog reproduce?	usa	7.872103044460916	who do bullfrog live ? => $x: (bullfrog, live, $x) => $x: (bullfrog, live, $x) => (r0.arg1: Many bullfrogs, r0.namespace: reverb, r0.arg2: the USA, r0.rel: are shipped live to) => the USA
Where does a bullfrog reproduce?	gardens	7.836227561382124	where do bullfrog have ? => $x: (bullfrog, have in, $x) => $x: (bullfrog, have in, $x) => (r0.arg1: Foreign bullfrogs, r0.namespace: reverb, r0.arg2: the gardens, r0.rel: have found a convivial nest in) => the gardens
Who wins the WWE title?	edge	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: wins) => Edge; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Edge; who win the wwe champion ? => $x: ($x, win, the wwe champion) => $x: ($x, win, the wwe champion) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: had stolen) => Edge; who win wwe champion ? => $x: ($x, win, wwe champion) => $x: ($x, win, wwe champion) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the wwe champion, r0.rel: win) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge
Who wins the WWE title?	undertaker	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Undertaker; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker
Who wins the WWE title?	mark henry	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry
Who wins the WWE title?	cm punk	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => CM Punk; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk
Who wins the WWE title?	rob van dam	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Rob Van Dam; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam
Who wins the WWE title?	triple h	8.349076951563898	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has held) => Triple H; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Triple H; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H
Who wins the WWE title?	beth phoenix	8.287116506705726	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix
Who wins the WWE title?	tony atlas	8.287116506705726	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas
Who wins the WWE title?	bob backlund	8.287116506705726	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund
Who wins the WWE title?	john cena	8.287116506705726	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => John Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship match, r0.rel: won) => John Cena; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has fought in) => John Cena; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, a wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena
Who wins the WWE title?	eddie guerrero	8.287116506705726	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero
Who wins the WWE title?	monday	8.216304569724958	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday
Who wins the WWE title?	lex luger	8.194175839418468	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger
Who wins the WWE title?	angle	7.736585725285112	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: his third WWE Championship, r0.rel: won) => Angle; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Angle, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => Angle
Who wins the WWE title?	miz	7.736585725285112	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Miz; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => The Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz
Who wins the WWE title?	big show	7.707080751543124	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: The Big Show, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: has won) => The Big Show
Who wins the WWE title?	eddie	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: won) => Eddie; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: went on to win) => Eddie; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie
Who wins the WWE title?	wade barrett	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett
Who wins the WWE title?	sheamus	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus
Who wins the WWE title?	hhh	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH
Who wins the WWE title?	cena	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: his first WWE Championship, r0.rel: won) => Cena; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Cena; who win at wwe title ? => $x: ($x, win at, wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at wwe title ? => $x: ($x, win at, wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena
Who wins the WWE title?	batista	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE championship, r0.rel: wins) => Batista; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has held) => Batista; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista
Who wins the WWE title?	jeff	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff
Who wins the WWE title?	orton	7.630895133382081	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: had) => Orton; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has held) => Orton; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton
Who wins the WWE title?	emotional big show	7.568934688523909	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show
Who wins the WWE title?	samoan bulldozer	7.568934688523909	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer
Who wins the WWE title?	jan 2011	7.527627725285129	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011
Who wins the WWE title?	christian	7.256765907103279	who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win a wwe title ? => $x: ($x, win, a wwe title) => $x: ($x, win, a wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian
Who wins the WWE title?	barrett	7.144531497018445	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett
Who wins the WWE title?	jericho	7.144531497018445	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Jericho, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => Jericho; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho
Who wins the WWE title?	punk	7.144531497018445	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has hoisted up) => Punk; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: won) => Punk; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk
Who wins the WWE title?	taker	7.144531497018445	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, the WWE title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, the wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe title ? => $x: ($x, win, wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win wwe title the ? => $x: ($x, win, wwe title the) => $x: ($x, win, wwe title the) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who won the wwe title ? => $x: ($x, won, the wwe title) => $x: ($x, won, the wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker
Who wins the WWE title?	duo	7.018403907103295	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => the duo; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: would win) => the duo; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => the duo; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: would win) => the duo; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: won) => the duo; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: the duo, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: would win) => the duo
Who wins the WWE title?	team	7.018403907103295	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: the team, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championships, r0.rel: won) => the team; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the team, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championships, r0.rel: won) => the team; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: the team, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championships, r0.rel: won) => the team
Who wins the WWE title?	pair	6.988898933361307	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: the pair, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => the pair; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: the pair, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => the pair; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: the pair, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => the pair
Who wins the WWE title?	cody	6.988898933361307	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Cody, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => Cody; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Cody, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => Cody; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Cody, r0.namespace: reverb, r0.arg2: the Unified WWE Tag Team Championship, r0.rel: won) => Cody
Who wins the WWE title?	mercury	6.949558968371992	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: went on to win) => Mercury; who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship 3 times, r0.rel: went on to win) => Mercury; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: went on to win) => Mercury; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship 3 times, r0.rel: went on to win) => Mercury; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship, r0.rel: went on to win) => Mercury; who win the wwe tag ? => $x: ($x, win, the wwe tag) => $x: ($x, win, the wwe tag) => (r0.arg1: Mercury, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championship 3 times, r0.rel: went on to win) => Mercury
Who wins the WWE title?	tna impact wrestling hits james storm	6.469437133382046	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: TNA Impact Wrestling Hits James Storm, r0.namespace: reverb, r0.arg2: the TNA Title, r0.rel: wins) => TNA Impact Wrestling Hits James Storm
Who wins the WWE title?	philadelphia street fight	6.407476688523873	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: a Philadelphia Street Fight, r0.namespace: reverb, r0.arg2: the TNA Tag Titles, r0.rel: win) => a Philadelphia Street Fight
Who wins the WWE title?	bobby	6.407476688523873	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: Bobby, r0.namespace: reverb, r0.arg2: the TNA title, r0.rel: can win) => Bobby
Who wins the WWE title?	ink inc.	6.407476688523873	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: Ink Inc., r0.namespace: reverb, r0.arg2: the TNA Tag Titles, r0.rel: wins) => Ink Inc.
Who wins the WWE title?	british invasion	6.407476688523873	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: The British Invasion, r0.namespace: reverb, r0.arg2: the TNA Tag Titles, r0.rel: win) => The British Invasion
Who wins the WWE title?	samoa joe magnus	6.407476688523873	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: Samoa Joe and Magnus, r0.namespace: reverb, r0.arg2: the TNA Tag Titles, r0.rel: win) => Samoa Joe and Magnus
Who wins the WWE title?	face	6.366169725285092	who win the tna title ? => $x: ($x, win, the tna title) => $x: ($x, win, the tna title) => (r0.arg1: face, r0.namespace: reverb, r0.arg2: the TNA World title, r0.rel: then wins) => face
Who wins the WWE title?	wwe	6.3352178161941595	who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: WWE, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: still could have) => WWE
Who wins the WWE title?	? big	5.939458317188128	who win wwe champion ? => $x: ($x, win, wwe champion) => $x: ($x, win, wwe champion) => (r0.arg1: ? Big, r0.namespace: reverb, r0.arg2: WWE Tag Team Champions Primo & Epico, r0.rel: win for) => ? Big
Who wins the WWE title?	jbl	5.720303406109295	who win the wwe championship ? => $x: ($x, win, the wwe championship) => $x: ($x, win, the wwe championship) => (r0.arg1: JBL, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => JBL; who win wwe championship ? => $x: ($x, win, wwe championship) => $x: ($x, win, wwe championship) => (r0.arg1: JBL, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: win) => JBL; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: JBL, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: had) => JBL
Who wins the WWE title?	business	5.6583429612511225	who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, the wwe title) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship title, r0.rel: have held) => the business; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: have held) => the business; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: the business, r0.namespace: reverb, r0.arg2: the WWE Championship title, r0.rel: have held) => the business
Who wins the WWE title?	bashams	5.617035998012341	who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: the Bashams, r0.namespace: reverb, r0.arg2: the WWE Tag Team Championships, r0.rel: had) => the Bashams
Who wins the WWE title?	kane	5.617035998012341	who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: Kane, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has n?t recaptured) => Kane; who have the wwe championship ? => $x: ($x, have, the wwe championship) => $x: ($x, have, the wwe championship) => (r0.arg1: Kane, r0.namespace: reverb, r0.arg2: the WWE Championship, r0.rel: has n?t recaptured) => Kane
Who was the first credit card issued to?	businesses	11.070270649196317	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (the first credit card, was issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (the first credit card, issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; who be the first credit card be issue to ? => $x: (the first credit card, be issue to, $x) => $x: (the first credit card, be issue to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses
Who was the first credit card issued to?	new customers	10.382208491709445	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (the first credit card, was issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (the first credit card, issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; who be the first credit card be issue to ? => $x: (the first credit card, be issue to, $x) => $x: (the first credit card, be issue to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers
Who was the first credit card issued to?	sistec holding ad	10.047734666701654	who be the first credit card issue ? => $x: ($x, be, the first credit card issue) => $x: ($x, be, the first credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be the first issue credit card ? => $x: ($x, be, the first issue credit card) => $x: ($x, be, the first issue credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be issue the first credit card ? => $x: ($x, be, issue the first credit card) => $x: ($x, be, issue the first credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be first credit card issue ? => $x: ($x, be, first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD; who be first issue credit card ? => $x: ($x, be, first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: SISTEC Holding AD, r0.namespace: reverb, r0.arg2: the first to issue credit cards, r0.rel: was) => SISTEC Holding AD
Who was the first credit card issued to?	bank	9.494984839418548	who be the first credit card issue ? => $x: ($x, be, the first credit card issue) => $x: ($x, be, the first credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be the first issue credit card ? => $x: ($x, be, the first issue credit card) => $x: ($x, be, the first issue credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be issue the first credit card ? => $x: ($x, be, issue the first credit card) => $x: ($x, be, issue the first credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be first credit card issue ? => $x: ($x, be, first credit card issue) => $x: ($x, be, first credit card issue) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank; who be first issue credit card ? => $x: ($x, be, first issue credit card) => $x: ($x, be, first issue credit card) => (r0.arg1: The Bank, r0.namespace: openie4, r0.arg2: the first to issue a national brand credit card, r0.rel: was) => The Bank
What do fairy tales have in common?	hero?s journey plot	9.455947951563955	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the hero?s journey plot, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is common in) => the hero?s journey plot; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the hero?s journey plot, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is common in) => the hero?s journey plot
What do fairy tales have in common?	anthropomorphic motifs	9.404314247515478	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: openie4, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Anthropomorphic motifs, r0.namespace: openie4, r0.arg2: fairy tales, r0.rel: have been common in) => Anthropomorphic motifs
What do fairy tales have in common?	prince	9.404314247515478	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: a prince, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: might be common in) => a prince; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: a prince, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: might be common in) => a prince
What do fairy tales have in common?	complete silence	9.367433030337995	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Complete Silence, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Complete Silence; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Complete Silence, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Complete Silence
What do fairy tales have in common?	light	9.367433030337995	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the light, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => the light; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the light, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => the light
What do fairy tales have in common?	melanie zimmer transformation	9.367433030337995	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Melanie Zimmer Transformation, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Melanie Zimmer Transformation; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Melanie Zimmer Transformation, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => Melanie Zimmer Transformation
What do fairy tales have in common?	impossible task	9.367433030337995	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: The impossible task, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => The impossible task; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: The impossible task, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is a common theme in) => The impossible task
What do fairy tales have in common?	deathless	9.339772117454883	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the Deathless, r0.namespace: reverb, r0.arg2: Russian fairy tales, r0.rel: is a common character in) => the Deathless; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: the Deathless, r0.namespace: reverb, r0.arg2: Russian fairy tales, r0.rel: is a common character in) => the Deathless
What do fairy tales have in common?	born station	9.339772117454883	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: born station, r0.namespace: reverb, r0.arg2: many fairy tales, r0.rel: is a common theme in) => born station; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: born station, r0.namespace: reverb, r0.arg2: many fairy tales, r0.rel: is a common theme in) => born station
What do fairy tales have in common?	magic	9.318258074101351	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: magic, r0.namespace: reverb, r0.arg2: fairy tales and fantasy, r0.rel: is a common feature in) => magic; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: magic, r0.namespace: reverb, r0.arg2: fairy tales and fantasy, r0.rel: is a common feature in) => magic
What do fairy tales have in common?	jack	9.318258074101351	what be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Jack, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is the most common name in) => Jack; who be common in fairy tale ? => $x: ($x, be common in, fairy tale) => $x: ($x, be common in, fairy tale) => (r0.arg1: Jack, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is the most common name in) => Jack
What kind of experiments did pavlov do?	life	6.343496930327608	what kind of experiment do pavlov be ? => $x: ($x, "is a kind of", experiment) (pavlov, be, $x) => $x: ($x, "is a kind of", experiment) (pavlov, be, $x) => (r0.arg1: life, r1.rel: are brought to, r0.namespace: reverb, r1.arg2: life, r0.arg2: experiment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Pavlov?s investigations) => life
What branch of government regulates post office?	u.s. national park service	7.503299930327665	what type of government govern post office ? => $x: ($x, "type", government) ($x, govern, post office) => $x: ($x, "type", government) ($x, govern, post office) => (r0.arg1: U.S. National Park Service, r1.rel: Protected Sites Governed, r0.namespace: freebase, r1.arg2: Old Post Office Tower, r0.arg2: Government Agency, r0.rel: Type, r1.namespace: freebase, r1.arg1: U.S. National Park Service) => U.S. National Park Service
When was Drake born?	october 25	9.82791770789844	who be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; who be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25
When was Drake born?	new jersey	7.174426197745717	who be drake bear ? => $x: ($x, be, drake bear) => $x: ($x, be, drake bear) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey; who be drake born ? => $x: ($x, be, drake born) => $x: ($x, be, drake born) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey
When was Drake born?	yesterday	7.069245648498965	who be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday; who be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: Yesterday, r0.namespace: reverb, r0.arg2: Little Drake?s seventh birthday, r0.rel: was) => Yesterday
When was Drake born?	august	2.4319326885235957	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: reverb, r0.arg2: August, r0.rel: was born in) => August
When was Drake born?	february 12	2.390625725284815	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Garrett Drake Caldwell-Young, r0.namespace: reverb, r0.arg2: February 12, r0.rel: was born on) => February 12
When was Drake born?	1540	1.7757113151999495	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540
When was Drake born?	1948	1.7757113151999495	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1948, r0.rel: was born in) => 1948
When was Drake born?	24 october 1986	1.7757113151999495	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 24 October 1986, r0.rel: was born on) => 24 October 1986
When was Drake born?	oct. 20 , 1785	1.7137508703417779	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Daniel Drake, r0.namespace: reverb, r0.arg2: Oct. 20 , 1785, r0.rel: was born on) => Oct. 20 , 1785
When was Drake born?	1961	1.7137508703417779	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961
When was Drake born?	1819	1.7137508703417779	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819
When was Drake born?	1811	1.7137508703417779	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811
When was Drake born?	march 29 , 1819	1.7137508703417779	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: March 29 , 1819, r0.rel: was born on) => March 29 , 1819
When was Drake born?	december 8 , 1923	1.7137508703417779	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Guy Drake, r0.namespace: reverb, r0.arg2: December 8 , 1923, r0.rel: was born on) => December 8 , 1923
When was Drake born?	feb 1889	1.672443907102997	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Lyman Houlton Drake, r0.namespace: reverb, r0.arg2: Feb 1889, r0.rel: was born in) => Feb 1889
When was Drake born?	14 feb 1921	1.672443907102997	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: George Woodrow Drake, r0.namespace: reverb, r0.arg2: 14 Feb 1921, r0.rel: was born on) => 14 Feb 1921
When was Drake born?	october 24 , 1986	1.672443907102997	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: life Aubrey Drake Graham, r0.namespace: reverb, r0.arg2: October 24 , 1986, r0.rel: was born on) => October 24 , 1986
When was Drake born?	mar 1921	1.672443907102997	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Georgia L. DRAKE, r0.namespace: reverb, r0.arg2: Mar 1921, r0.rel: was born in) => Mar 1921
When was Drake born?	1 jul 1922	1.672443907102997	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Jean Lois Drake, r0.namespace: reverb, r0.arg2: 1 Jul 1922, r0.rel: was born on) => 1 Jul 1922
When was Drake born?	june 19th	1.672443907102997	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nicholas Rodney Drake, r0.namespace: reverb, r0.arg2: June 19th, r0.rel: was born in) => June 19th
When was Drake born?	may 1879	1.672443907102997	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Fred H Drake, r0.namespace: reverb, r0.arg2: May 1879, r0.rel: was born in) => May 1879
When was Drake born?	august 2008	1.2273872339781415	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Fisher, r0.namespace: openie4, r0.arg2: August of 2008, r0.rel: was born in) => August of 2008
When was Drake born?	22 mar 1901	1.1860802707393603	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: Richard Howard Drake, r0.namespace: openie4, r0.arg2: 22 Mar 1901, r0.rel: was born on) => 22 Mar 1901
When was Drake born?	toronto	-0.2447432302545951	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake Gram, r0.namespace: reverb, r0.arg2: Toronto, r0.rel: was born in) => Toronto
When was Drake born?	tavistock	-0.2447432302545951	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Contents Francis Drake, r0.namespace: reverb, r0.arg2: Tavistock, r0.rel: was born in) => Tavistock
When was Drake born?	marathon county	-0.3067036751127672	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Mr. Drake, r0.namespace: reverb, r0.arg2: Marathon county, r0.rel: was born in) => Marathon county
When was Drake born?	scotland	-0.3067036751127672	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Samuel Drake, r0.namespace: reverb, r0.arg2: Scotland, r0.rel: was born in) => Scotland
When was Drake born?	birmingham	-0.3067036751127672	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: John Drake, r0.namespace: reverb, r0.arg2: Birmingham, r0.rel: was born in) => Birmingham
When was Drake born?	new york city	-0.34801063835154844	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Joseph Rodman Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: was born in) => New York City; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: October 07 , 1914 Alfred Drake, r0.namespace: reverb, r0.arg2: New York City, r0.rel: is born in) => New York City
When was Drake born?	chicago	-0.34801063835154844	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Frank D. Drake, r0.namespace: reverb, r0.arg2: Chicago, r0.rel: was born in) => Chicago
When was Drake born?	wilkes-barre	-0.34801063835154844	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Benjamin Drake Wright, r0.namespace: reverb, r0.arg2: Wilkes-Barre, r0.rel: was born in) => Wilkes-Barre
When was Drake born?	natchez	-0.37751561209353524	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Historian W. Magruder Drake, r0.namespace: reverb, r0.arg2: Natchez, r0.rel: was born in) => Natchez
When was Drake born?	maine	-0.37751561209353524	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jennie F. Drake White, r0.namespace: reverb, r0.arg2: Maine, r0.rel: was born in) => Maine
When was Drake born?	devon	-0.37751561209353524	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Devon, r0.rel: were both born in) => Devon
When was Drake born?	socorro	-0.39964434240002467	When was Drake born? => $x: (Drake, was born on, $x) => $x: (Drake, was born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro; When was Drake born? => $x: (Drake, born on, $x) => $x: (Drake, born on, $x) => (r0.arg1: The young smuggler Drake Paulsen, r0.namespace: reverb, r0.arg2: Socorro, r0.rel: was born on) => Socorro
When was Drake born?	english midlands town	-1.0248854932945852	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: the English Midlands town, r0.rel: was likely born in) => the English Midlands town
When was Drake born?	seneca county	-1.0248854932945852	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: James Drake, r0.namespace: reverb, r0.arg2: Seneca County, r0.rel: was born in) => Seneca County
When was Drake born?	pitka?s point	-1.0248854932945852	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Ms. Drake, r0.namespace: reverb, r0.arg2: Pitka?s Point, r0.rel: was born in) => Pitka?s Point
When was Drake born?	rockaway	-1.0661924565333665	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edmund Drake Halsey, r0.namespace: reverb, r0.arg2: Rockaway, r0.rel: was born in) => Rockaway
When was Drake born?	wayne	-1.0661924565333665	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: Wayne, r0.rel: was born in) => Wayne
When was Drake born?	nearby town	-1.0661924565333665	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Sir Francis Drake, r0.namespace: reverb, r0.arg2: the nearby town, r0.rel: was born in) => the nearby town
When was Drake born?	cape breton	-1.095697430275353	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Jamie Hubley Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: The Ottawa Citizen Drake Jensen, r0.namespace: reverb, r0.arg2: Cape Breton, r0.rel: was born in) => Cape Breton
When was Drake born?	pownal	-1.5732095745163936	When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Henry Milton Drake, r0.namespace: openie4, r0.arg2: Pownal, r0.rel: born in) => Pownal
Does the US consist of 50 states?	usa	9.668037376469055	what state consist of 50 state ? => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => (r0.arg1: The USA, r1.rel: consists of, r0.namespace: openie4, r1.arg2: 50 states, r0.arg2: a secular state, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The USA) => The USA; what state consist of 50 state ? => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => $x: ($x, "is an example of", state) ($x, consist of, 50 state) => (r0.arg1: The USA, r1.rel: consists of, r0.namespace: openie4, r1.arg2: 50 states, r0.arg2: a secular state, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The USA) => The USA
Does the US consist of 50 states?	america	8.048157037164	what state consist of 50 state ? => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => (r0.arg1: America, r1.rel: consists of, r0.namespace: reverb, r1.arg2: 50 states, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: America) => America; what state consist of 50 state ? => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => $x: ($x, "is a kind of", state) ($x, consist of, 50 state) => (r0.arg1: America, r1.rel: is a country consisting of, r0.namespace: reverb, r1.arg2: 50 states, r0.arg2: fascist state, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: America) => America
What is kentucky best at?	manual	9.239430115179536	what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is undoubtedly the best school in) => Manual; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best high school in) => Manual; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is undoubtedly the best school in) => Manual; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best high school in) => Manual; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is undoubtedly the best school in) => Manual; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best high school in) => Manual; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is undoubtedly the best school in) => Manual; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Manual, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best high school in) => Manual
What is kentucky best at?	pyro	9.16566768082457	what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Pyro, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: will be the best-prepared horse in) => Pyro; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Pyro, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: will be the best-prepared horse in) => Pyro; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Pyro, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: will be the best-prepared horse in) => Pyro; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Pyro, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: will be the best-prepared horse in) => Pyro
What is kentucky best at?	duke ellington	8.752234324887558	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Duke Ellington, r0.namespace: reverb, r0.arg2: the Kentucky Club, r0.rel: was at) => Duke Ellington; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Duke Ellington, r0.namespace: reverb, r0.arg2: the Kentucky Club, r0.rel: was at) => Duke Ellington
What is kentucky best at?	records	8.710927361648778	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the records, r0.namespace: reverb, r0.arg2: the Kentucky Department, r0.rel: are housed at) => the records; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the records, r0.namespace: reverb, r0.arg2: the Kentucky Department, r0.rel: are housed at) => the records
What is kentucky best at?	steve earle	8.710927361648778	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Steve Earle, r0.namespace: reverb, r0.arg2: the Kentucky Theatre, r0.rel: was performing at) => Steve Earle; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Steve Earle, r0.namespace: reverb, r0.arg2: the Kentucky Theatre, r0.rel: was performing at) => Steve Earle
What is kentucky best at?	event	8.710927361648778	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: will be held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: was held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the event, r0.namespace: openie4, r0.arg2: the Kentucky Exposition Center, r0.rel: was held at) => the event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Theatre, r0.rel: was held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: will be held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: was held at) => The event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the event, r0.namespace: openie4, r0.arg2: the Kentucky Exposition Center, r0.rel: was held at) => the event; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: the Kentucky Theatre, r0.rel: was held at) => The event
What is kentucky best at?	gap analysis	8.68142238790679	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Gap Analysis, r0.namespace: reverb, r0.arg2: the Kentucky GIS conference, r0.rel: was given at) => Gap Analysis; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Gap Analysis, r0.namespace: reverb, r0.arg2: the Kentucky GIS conference, r0.rel: was given at) => Gap Analysis
What is kentucky best at?	jumping	8.68142238790679	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: jumping, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was commencing at) => jumping; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: jumping, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was commencing at) => jumping
What is kentucky best at?	military police	8.68142238790679	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Military police, r0.namespace: reverb, r0.arg2: the 2009 Kentucky Derby, r0.rel: were positioned at) => Military police; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Military police, r0.namespace: reverb, r0.arg2: the 2009 Kentucky Derby, r0.rel: were positioned at) => Military police
What is kentucky best at?	november 18	8.68142238790679	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: November 18, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is held at) => November 18; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: November 18, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is held at) => November 18
What is kentucky best at?	dogs	8.68142238790679	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Dogs, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: are permitted at) => Dogs; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Dogs, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: are permitted at) => Dogs
What is kentucky best at?	week	8.659293657600301	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the week, r0.namespace: reverb, r0.arg2: the Kentucky Court Report, r0.rel: are also available at) => the week; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the week, r0.namespace: reverb, r0.arg2: the Kentucky Court Report, r0.rel: are also available at) => the week
What is kentucky best at?	meetings	8.659293657600301	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Meetings, r0.namespace: reverb, r0.arg2: the Northern Kentucky Pub, r0.rel: are held monthly at) => Meetings; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Meetings, r0.namespace: reverb, r0.arg2: the Northern Kentucky Pub, r0.rel: are held monthly at) => Meetings
What is kentucky best at?	horseback riding	8.659293657600301	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Horseback riding, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is also available at) => Horseback riding; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Horseback riding, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is also available at) => Horseback riding
What is kentucky best at?	kentucky	8.659293657600301	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Kentucky, r0.namespace: reverb, r0.arg2: the Kentucky Clinic Pharmacy, r0.rel: has been practicing at) => Kentucky; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Kentucky, r0.namespace: reverb, r0.arg2: the Kentucky Clinic Pharmacy, r0.rel: has been practicing at) => Kentucky
What is kentucky best at?	local teams	8.592060233978486	what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: local teams, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were the best in) => local teams; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: local teams, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were the best in) => local teams; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: local teams, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were the best in) => local teams; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: local teams, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: were the best in) => local teams
What is kentucky best at?	hager	8.521248296997719	what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Hager, r0.namespace: reverb, r0.arg2: Central Kentucky, r0.rel: may be best known in) => Hager; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Hager, r0.namespace: reverb, r0.arg2: Central Kentucky, r0.rel: may be best known in) => Hager; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Hager, r0.namespace: reverb, r0.arg2: Central Kentucky, r0.rel: may be best known in) => Hager; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Hager, r0.namespace: reverb, r0.arg2: Central Kentucky, r0.rel: may be best known in) => Hager
What is kentucky best at?	linda toy	8.460394288654872	what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Linda Toy, r0.namespace: reverb, r0.arg2: Kentucky?again, r0.rel: have been named the Best in) => Linda Toy; what be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Linda Toy, r0.namespace: reverb, r0.arg2: Kentucky?again, r0.rel: have been named the Best in) => Linda Toy; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Linda Toy, r0.namespace: reverb, r0.arg2: Kentucky?again, r0.rel: have been named the Best in) => Linda Toy; who be best in kentucky ? => $x: ($x, be best in, kentucky) => $x: ($x, be best in, kentucky) => (r0.arg1: Linda Toy, r0.namespace: reverb, r0.arg2: Kentucky?again, r0.rel: have been named the Best in) => Linda Toy
What is kentucky best at?	rand paul	8.269199088921491	what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Rand Paul, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best choice for) => Rand Paul; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Rand Paul, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is the best choice for) => Rand Paul; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Rand Paul, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the best choice for) => Rand Paul; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Rand Paul, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is the best choice for) => Rand Paul
What is kentucky best at?	louisville	8.217565384873014	what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the famed Kentucky Derby, r0.rel: is best known for) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is best known for hosting) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the famed Kentucky Derby, r0.rel: is best known for) => Louisville; what be best for kentucky ? => $x: ($x, be best for, kentucky) => $x: ($x, be best for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is best known for hosting) => Louisville
What is kentucky best at?	initiative	8.195058751543154	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the initiative, r0.namespace: openie4, r0.arg2: the University of Kentucky, r0.rel: is based at) => the initiative; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the initiative, r0.namespace: openie4, r0.arg2: the University of Kentucky, r0.rel: is based at) => the initiative
What is kentucky best at?	research	8.195058751543154	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Research, r0.namespace: openie4, r0.arg2: the University of Kentucky, r0.rel: was conducted at) => Research; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Research, r0.namespace: openie4, r0.arg2: the University of Kentucky, r0.rel: was conducted at) => Research
What is kentucky best at?	gillispie	8.138328024270434	what be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was n?t a good fit at) => Gillispie; who be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: Gillispie, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was n?t a good fit at) => Gillispie
What is kentucky best at?	card	8.138328024270434	what be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: The card, r0.namespace: reverb, r0.arg2: all Kentucky State Parks, r0.rel: is good at) => The card; who be good at kentucky ? => $x: ($x, be good at, kentucky) => $x: ($x, be good at, kentucky) => (r0.arg1: The card, r0.namespace: reverb, r0.arg2: all Kentucky State Parks, r0.rel: is good at) => The card
What is kentucky best at?	? name	8.034052506705741	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: ? name, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was at) => ? name; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: ? name, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was at) => ? name
What is kentucky best at?	race	8.034052506705741	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The race, r0.namespace: reverb, r0.arg2: the Kentucky Speedway, r0.rel: is at) => The race; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The race, r0.namespace: reverb, r0.arg2: the Kentucky Speedway, r0.rel: is at) => The race
What is kentucky best at?	data	8.034052506705741	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the data, r0.namespace: reverb, r0.arg2: the Kentucky Center, r0.rel: is at) => the data; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the data, r0.namespace: reverb, r0.arg2: the Kentucky Center, r0.rel: is at) => the data
What is kentucky best at?	more than 80,000 mint juleps	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: More than 80,000 mint juleps, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: are sold at) => More than 80,000 mint juleps; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: More than 80,000 mint juleps, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: are sold at) => More than 80,000 mint juleps
What is kentucky best at?	beth harris michael matz	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: BETH HARRIS Michael Matz, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is back at) => BETH HARRIS Michael Matz; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: BETH HARRIS Michael Matz, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: is back at) => BETH HARRIS Michael Matz
What is kentucky best at?	hasseltine	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Hasseltine, r0.namespace: reverb, r0.arg2: the Kentucky Sports Authority, r0.rel: was at) => Hasseltine; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Hasseltine, r0.namespace: reverb, r0.arg2: the Kentucky Sports Authority, r0.rel: was at) => Hasseltine
What is kentucky best at?	may 2008 , eight bells	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: May 2008 , Eight Bells, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was euthanized at) => May 2008 , Eight Bells; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: May 2008 , Eight Bells, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was euthanized at) => May 2008 , Eight Bells
What is kentucky best at?	kathy parrish	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Kathy Parrish, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was at) => Kathy Parrish; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Kathy Parrish, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was at) => Kathy Parrish
What is kentucky best at?	nsra nats	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the NSRA Nats, r0.namespace: reverb, r0.arg2: the Kentucky Fairgrounds, r0.rel: is held at) => the NSRA Nats; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the NSRA Nats, r0.namespace: reverb, r0.arg2: the Kentucky Fairgrounds, r0.rel: is held at) => the NSRA Nats
What is kentucky best at?	victory	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: victory, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was the largest at) => victory; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: victory, r0.namespace: reverb, r0.arg2: the Kentucky Derby, r0.rel: was the largest at) => victory
What is kentucky best at?	mcconnell springs	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: McConnell Springs, r0.namespace: reverb, r0.arg2: the Kentucky Theater, r0.rel: was shown at) => McConnell Springs; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: McConnell Springs, r0.namespace: reverb, r0.arg2: the Kentucky Theater, r0.rel: was shown at) => McConnell Springs
What is kentucky best at?	day today	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: a day today, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was at) => a day today; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: a day today, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was at) => a day today
What is kentucky best at?	nerve agent	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the nerve agent, r0.namespace: reverb, r0.arg2: the Kentucky site, r0.rel: is stored at) => the nerve agent; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: the nerve agent, r0.namespace: reverb, r0.arg2: the Kentucky site, r0.rel: is stored at) => the nerve agent
What is kentucky best at?	tennis clinic	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: A tennis clinic, r0.namespace: reverb, r0.arg2: the Kentucky School, r0.rel: was held at) => A tennis clinic; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: A tennis clinic, r0.namespace: reverb, r0.arg2: the Kentucky School, r0.rel: was held at) => A tennis clinic
What is kentucky best at?	several projects	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: several projects, r0.namespace: reverb, r0.arg2: the Kentucky fort, r0.rel: was being done at) => several projects; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: several projects, r0.namespace: reverb, r0.arg2: the Kentucky fort, r0.rel: was being done at) => several projects
What is kentucky best at?	barney	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Barney, r0.namespace: reverb, r0.arg2: the Kentucky Club, r0.rel: was the greeter at) => Barney; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Barney, r0.namespace: reverb, r0.arg2: the Kentucky Club, r0.rel: was the greeter at) => Barney
What is kentucky best at?	hunters	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The hunters, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: were at) => The hunters; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The hunters, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: were at) => The hunters
What is kentucky best at?	commission meetings	7.992745543466961	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Commission Meetings, r0.namespace: reverb, r0.arg2: the Kentucky Commission, r0.rel: are held at) => Commission Meetings; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Commission Meetings, r0.namespace: reverb, r0.arg2: the Kentucky Commission, r0.rel: are held at) => Commission Meetings
What is kentucky best at?	two performances	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: two performances, r0.namespace: reverb, r0.arg2: the Kentucky Center, r0.rel: will be given at) => two performances; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: two performances, r0.namespace: reverb, r0.arg2: the Kentucky Center, r0.rel: will be given at) => two performances
What is kentucky best at?	award	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The award, r0.namespace: reverb, r0.arg2: the Kentucky Coal Association, r0.rel: was presented at) => The award; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The award, r0.namespace: reverb, r0.arg2: the Kentucky Coal Association, r0.rel: was presented at) => The award
What is kentucky best at?	tickets	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Tickets, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: may be purchased at) => Tickets; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Tickets, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: are available at) => Tickets; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Tickets, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: may be purchased at) => Tickets; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Tickets, r0.namespace: reverb, r0.arg2: the Kentucky Exposition Center, r0.rel: are available at) => Tickets
What is kentucky best at?	fame	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is located at) => Fame; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: is located at) => Fame
What is kentucky best at?	meeting	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The meeting, r0.namespace: reverb, r0.arg2: the Kentucky Department, r0.rel: will be held at) => The meeting; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The meeting, r0.namespace: reverb, r0.arg2: the Kentucky Department, r0.rel: will be held at) => The meeting
What is kentucky best at?	games	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The Games, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: will be at) => The Games; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: The Games, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: will be at) => The Games
What is kentucky best at?	work	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Work, r0.namespace: reverb, r0.arg2: the Kentucky Derby museum, r0.rel: is continuing at) => Work; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: Work, r0.namespace: reverb, r0.arg2: the Kentucky Derby museum, r0.rel: is continuing at) => Work
What is kentucky best at?	2010 history	7.963240569724974	what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: 2010 History, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was made at) => 2010 History; what be at the kentucky ? => $x: ($x, be at, the kentucky) => $x: ($x, be at, the kentucky) => (r0.arg1: 2010 History, r0.namespace: reverb, r0.arg2: the Kentucky Horse Park, r0.rel: was made at) => 2010 History
What are the leading producers of WHEAT?	arizona	7.862574406109337	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Arizona, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => Arizona
What are the leading producers of WHEAT?	kazakhstan	7.81094070206086	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Kazakhstan, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Kazakhstan
What are the leading producers of WHEAT?	alberta	7.81094070206086	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest national producer of) => Alberta; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Alberta, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => Alberta
What are the leading producers of WHEAT?	egypt	7.774059484883377	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Egypt, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is also a substantial producer of) => Egypt
What are the leading producers of WHEAT?	algiers	7.774059484883377	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Algiers, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was then a major producer of) => Algiers
What are the leading producers of WHEAT?	puglia	7.774059484883377	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: a leading wheat producer, r0.rel: is) => Puglia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Puglia, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is a big producer of) => Puglia
What are the leading producers of WHEAT?	oklahoma	7.746398572000265	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: the low-cost wheat producer, r0.rel: is) => Oklahoma; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Oklahoma, r0.namespace: reverb, r0.arg2: corn and wheat, r0.rel: is a major producer of) => Oklahoma
What are the leading producers of WHEAT?	california	7.746398572000265	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: California, r0.namespace: reverb, r0.arg2: corn , wheat, r0.rel: is a major producer of) => California
What are the leading producers of WHEAT?	food	7.746398572000265	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: food, r0.namespace: reverb, r0.arg2: all wheat, r0.rel: is also a top producer of) => food
What are the leading producers of WHEAT?	italy	7.724884528646733	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: this hard wheat, r0.rel: is still a major producer of) => Italy
What are the leading producers of WHEAT?	western madhya pradesh	7.324577065697223	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: Western Madhya Pradesh, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is a major producer of) => Western Madhya Pradesh
What are the leading producers of WHEAT?	region	7.14439258792752	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The region, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a producer of) => The region
What are the leading producers of WHEAT?	state	7.092758883879043	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be a lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a lead producer of wheat ? => $x: ($x, be a lead producer of, wheat) => $x: ($x, be a lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is also a major producer of) => The state; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is a major producer of) => The state
What are the leading producers of WHEAT?	today kansas	7.092758883879043	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: today Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a top producer of) => today Kansas
What are the leading producers of WHEAT?	?green springs	7.092758883879043	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs; what be a producer of wheat ? => $x: ($x, be a producer of, wheat) => $x: ($x, be a producer of, wheat) => (r0.arg1: ?Green Springs, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was a great producer of) => ?Green Springs
What are the leading producers of WHEAT?	eu	7.074201506705688	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: the EU, r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: are) => the EU
What are the leading producers of WHEAT?	frustration	7.074201506705688	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Frustration, r0.namespace: reverb, r0.arg2: the word wheat producers, r0.rel: is) => Frustration
What are the leading producers of WHEAT?	kansas	7.074201506705688	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => Kansas; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Kansas, r0.namespace: reverb, r0.arg2: the largest wheat producer, r0.rel: was) => Kansas
What are the leading producers of WHEAT?	india	7.032894543466908	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the major producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: wheat and rice, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: rice and wheat, r0.rel: is the second largest producer of) => India; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: India, r0.namespace: reverb, r0.arg2: the only top-five wheat producer, r0.rel: is) => India; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: India, r0.namespace: openie4, r0.arg2: the second largest producer of wheat in the world, r0.rel: is) => India
What are the leading producers of WHEAT?	russia	7.032894543466908	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Russia, r0.namespace: reverb, r0.arg2: the third largest wheat producer, r0.rel: is) => Russia
What are the leading producers of WHEAT?	canada	7.032894543466908	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be the lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; what be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be the lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be the lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who be the lead exporter of wheat ? => $x: ($x, be the lead exporter of, wheat) => $x: ($x, be the lead exporter of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: spring wheat, r0.rel: is the leading exporter of) => Canada; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: wheat worldwide, r0.rel: is the sixth largest producer of) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the Ontario Wheat Producers, r0.rel: is working with) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: is one of) => Canada; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: the fifth largest wheat producer, r0.rel: is) => Canada
What are the leading producers of WHEAT?	pakistan	7.032894543466908	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Pakistan, r0.namespace: reverb, r0.arg2: the 7th largest wheat producer, r0.rel: is) => Pakistan
What are the leading producers of WHEAT?	australia	6.990843848519718	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the seventh largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: was once the second largest producer of) => Australia; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 5th largest producer of) => Australia
What are the leading producers of WHEAT?	iran	6.990843848519718	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: Mishra?s unsubstantiated assertion, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Iran) => Iran; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: Mishra?s unsubstantiated assertion, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Iran) => Iran
What are the leading producers of WHEAT?	france	6.990843848519718	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: France, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the fourth largest producer of) => France
What are the leading producers of WHEAT?	morocco	6.963182935636606	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Morocco, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the second largest producer of) => Morocco
What are the leading producers of WHEAT?	illinois	6.950280616989344	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Illinois, r0.namespace: reverb, r0.arg2: the top U.S. soft red winter wheat producers, r0.rel: is among) => Illinois
What are the leading producers of WHEAT?	north dakota	6.941668892283074	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: North Dakota, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the largest producer of) => North Dakota
What are the leading producers of WHEAT?	sonora	6.941668892283074	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora
What are the leading producers of WHEAT?	united states	6.504480212156082	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The United States, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the third largest producer of) => The United States
What are the leading producers of WHEAT?	u.s.	6.356019688523871	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: the U.S., r0.namespace: reverb, r0.arg2: the largest wheat producers, r0.rel: are) => the U.S.
What are the leading producers of WHEAT?	china	6.356019688523871	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are the leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be the lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, the lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, the lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; who be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, the lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; who be the lead wheat producer ? => $x: ($x, be, the lead wheat producer) => $x: ($x, be, the lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; who be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be lead wheat producer ? => $x: ($x, be, lead wheat producer) => $x: ($x, be, lead wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the top producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the largest producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: rice and wheat, r0.rel: is the world 's largest producer of) => China; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the world lead producer of wheat ? => $x: ($x, be the world lead producer of, wheat) => $x: ($x, be the world lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the largest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the largest producer of wheat, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s biggest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s largest Wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's largest wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's leading wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: the world?s leading wheat producer, r0.rel: is) => China; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: China, r0.namespace: openie4, r0.arg2: the world 's largest producer and consumer of wheat, r0.rel: is) => China; what s lead producer of wheat ? => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => $x: ($x, "is an example of", s) ($x, lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: globalization?s benefits, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China
What are the leading producers of WHEAT?	country	6.356019688523871	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: The country, r0.namespace: reverb, r0.arg2: the second-largest wheat producer, r0.rel: is) => The country
What are the leading producers of WHEAT?	john linton	6.356019688523871	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: John Linton, r0.namespace: reverb, r0.arg2: the champion wheat producer, r0.rel: is) => John Linton
What are the leading producers of WHEAT?	washington	6.314712725285089	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: wheat products, r0.rel: is the fifth-highest producer of) => Washington; what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Washington, r0.namespace: reverb, r0.arg2: the 4th largest wheat producer, r0.rel: is) => Washington
What are the leading producers of WHEAT?	u.s	6.2726620303379015	what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The U.S, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the number one producer of) => The U.S
What are the leading producers of WHEAT?	ukraine	6.2726620303379015	what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the largest producer of wheat ? => $x: ($x, be the largest producer of, wheat) => $x: ($x, be the largest producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine; who be the producer of wheat ? => $x: ($x, be the producer of, wheat) => $x: ($x, be the producer of, wheat) => (r0.arg1: The Ukraine, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the sixth largest producer of) => The Ukraine
What are the leading producers of WHEAT?	ojsc pava	6.263079021236614	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: OJSC PAVA, r0.namespace: reverb, r0.arg2: the major wheat flour producers, r0.rel: is one of) => OJSC PAVA
What are the leading producers of WHEAT?	research	6.263079021236614	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: the research, r0.namespace: reverb, r0.arg2: the Texas Wheat Producers Board, r0.rel: is supported by) => the research
What are the leading producers of WHEAT?	2010	6.245867786553788	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: 2010, r0.namespace: reverb, r0.arg2: the state?s wheat producers, r0.rel: was a strong year for) => 2010
What are the leading producers of WHEAT?	erdinger	6.224353743200256	what be the wheat producer ? => $x: ($x, be, the wheat producer) => $x: ($x, be, the wheat producer) => (r0.arg1: Erdinger, r0.namespace: reverb, r0.arg2: the biggest wheat-beer producer, r0.rel: is by far) => Erdinger
What are the leading producers of WHEAT?	saskatchewan	6.000552088921436	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: Saskatchewan, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is Canada?s largest producer of) => Saskatchewan
What are the leading producers of WHEAT?	irrigated districts	5.810040870342036	what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts; what be producer of wheat ? => $x: ($x, be producer of, wheat) => $x: ($x, be producer of, wheat) => (r0.arg1: irrigated districts, r0.namespace: reverb, r0.arg2: wheat, r0.rel: are major producers of) => irrigated districts
Do hotels have room service?	jock	9.283054233978506	what have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Jock, r0.namespace: reverb, r0.arg2: 10 hotel rooms Service, r0.rel: has) => Jock; who have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Jock, r0.namespace: reverb, r0.arg2: 10 hotel rooms Service, r0.rel: has) => Jock
Do hotels have room service?	peppy	9.172902332008423	what have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Peppy, r0.namespace: reverb, r0.arg2: hotel room service and bartending, r0.rel: has also worked in) => Peppy; who have hotel room service ? => $x: ($x, have, hotel room service) => $x: ($x, have, hotel room service) => (r0.arg1: Peppy, r0.namespace: reverb, r0.arg2: hotel room service and bartending, r0.rel: has also worked in) => Peppy
Do hotels have room service?	corner	8.257737478815868	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: the corner, r0.namespace: reverb, r0.arg2: any hotel room service, r0.rel: is better than) => the corner
Do hotels have room service?	interstate 94	8.257737478815868	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Interstate 94, r0.namespace: reverb, r0.arg2: a 130 room full service hotel, r0.rel: is) => Interstate 94
Do hotels have room service?	prices	8.257737478815868	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: prices, r0.namespace: reverb, r0.arg2: services and hotel rooms, r0.rel: are fixed for) => prices
Do hotels have room service?	wi-fi	8.204628526080292	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Wi-fi, r0.namespace: reverb, r0.arg2: the hotel and 24 hour room service, r0.rel: is free throughout) => Wi-fi
Do hotels have room service?	hospitals	8.204628526080292	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Hospitals, r0.namespace: reverb, r0.arg2: a full service hotel ? rooms, r0.rel: are very much like) => Hospitals
Do hotels have room service?	camping	7.800878816194219	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: camping, r0.namespace: openie4, r0.arg2: a hotel without room service, r0.rel: is) => camping
Do hotels have room service?	food	7.569060634376038	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The food, r0.namespace: reverb, r0.arg2: Hilton Hotel room service, r0.rel: was like) => The food
Do hotels have room service?	edison hotel	7.539555660634051	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Edison Hotel, r0.namespace: openie4, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel; what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Edison Hotel, r0.namespace: reverb, r0.arg2: a 184 room full service hotel, r0.rel: is) => The Edison Hotel
Do hotels have room service?	ramada plaza abbotsford	7.539555660634051	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Ramada Plaza Abbotsford, r0.namespace: reverb, r0.arg2: a 116 room full service hotel, r0.rel: is) => The Ramada Plaza Abbotsford
Do hotels have room service?	comfort inn	7.539555660634051	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Comfort Inn, r0.namespace: reverb, r0.arg2: a 120 room full service hotel, r0.rel: is) => The Comfort Inn
Do hotels have room service?	janesville	7.539555660634051	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Janesville, r0.namespace: reverb, r0.arg2: a 189 room Full Service Hotel, r0.rel: is) => Janesville
Do hotels have room service?	dutch fried meatball	7.539555660634051	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: a Dutch fried meatball, r0.namespace: reverb, r0.arg2: hotel room service menus, r0.rel: is offered on) => a Dutch fried meatball
Do hotels have room service?	gay couple	7.517426930327561	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: a gay couple, r0.namespace: reverb, r0.arg2: a hotel room or service, r0.rel: could be refused) => a gay couple
Do hotels have room service?	ramada plaza jfk	7.5002156956447354	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Ramada Plaza Jfk, r0.namespace: reverb, r0.arg2: The Only 478 Room , Full Service Hotel, r0.rel: Is) => The Ramada Plaza Jfk
Do hotels have room service?	wifi access	7.5002156956447354	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Wifi access, r0.namespace: reverb, r0.arg2: the hotel and 24hr room service, r0.rel: is available in) => Wifi access
Do hotels have room service?	executive inn	7.495298200021072	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Executive Inn, r0.namespace: reverb, r0.arg2: a 472 room full-service hotel, r0.rel: is) => The Executive Inn
Do hotels have room service?	hotel selkirk	7.478701652291203	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Hotel Selkirk, r0.namespace: reverb, r0.arg2: a full service 30-room boutique hotel, r0.rel: is) => The Hotel Selkirk
Do hotels have room service?	jiao zhou road	7.451040739408091	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Jiao Zhou Road, r0.namespace: reverb, r0.arg2: a 28-room full-service hotel, r0.rel: is) => Jiao Zhou Road
Do hotels have room service?	avert express	7.431370756913434	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Avert Express, r0.namespace: reverb, r0.arg2: our hotel.Room Service, r0.rel: are minutes away from) => Avert Express
Do hotels have room service?	jewel hotel	7.431370756913434	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The Jewel Hotel, r0.namespace: reverb, r0.arg2: a 139-room , full-service boutique hotel, r0.rel: is) => The Jewel Hotel
Do hotels have room service?	w hotel	7.431370756913434	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The W Hotel, r0.namespace: reverb, r0.arg2: an 11-story , 305-room full-service hotel, r0.rel: is) => The W Hotel
Do hotels have room service?	table	7.431370756913434	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: The table, r0.namespace: reverb, r0.arg2: a 150-room full-service hotel, r0.rel: is based on) => The table
Do hotels have room service?	largest loan	7.424486263040304	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: the largest loan, r0.namespace: reverb, r0.arg2: a 233-room , full-service hotel, r0.rel: is secured by) => the largest loan
Do hotels have room service?	hotel room service	5.2435060406112175	what be room hotel service ? => $x: ($x, be, room hotel service) => $x: ($x, be, room hotel service) => (r0.arg1: Hotel Room Service, r0.namespace: nell, r0.arg2: http://en.wikipedia.org/wiki/Hotel%20Room%20Service, r0.rel: can be found on Wikipedia at) => Hotel Room Service
What do scientists classify?	galaxies	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: openie4, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Astronomers, r0.namespace: openie4, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Help astronomers, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies
What do scientists classify?	plankton	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton
What do scientists classify?	organisms	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: biologists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classified) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms
What do scientists classify?	bats	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: bats, r0.rel: classify) => bats; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats
What do scientists classify?	insects	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects
What do scientists classify?	species	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: reactions and biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: 's Opinion Biologists, r0.namespace: reverb, r0.arg2: species, r0.rel: have been classifying) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the species, r0.rel: are yet to classify) => the species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species
What do scientists classify?	dragonflies	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies
What do scientists classify?	emr	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR
What do scientists classify?	volcanoes	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes
What do scientists classify?	birds	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds
What do scientists classify?	dung beetles	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles
What do scientists classify?	hobbit	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit
What do scientists classify?	sound	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound
What do scientists classify?	systems	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems
What do scientists classify?	bacteria	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify of ? => $x: (scientist, classify of, $x) => $x: (scientist, classify of, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: have classified various types of) => bacteria
What do scientists classify?	dinosaurs	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs
What do scientists classify?	fruits	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits
What do scientists classify?	butterflies	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies
What do scientists classify?	glaucoma	7.039930678836585	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma
What do scientists classify?	sediments	7.025606516392973	what do scientist classify of ? => $x: (scientist, classify of, $x) => $x: (scientist, classify of, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: sediments, r0.rel: classify different types of) => sediments
What do scientists classify?	vegetation	7.025606516392973	what do scientist classify of ? => $x: (scientist, classify of, $x) => $x: (scientist, classify of, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: vegetation, r0.rel: classify different types of) => vegetation
What do scientists classify?	color	6.987805406109313	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: color, r0.rel: classify) => color
What do scientists classify?	2002 aa29	6.987805406109313	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: 2002 AA29, r0.rel: classify) => 2002 AA29
What do scientists classify?	celestial objects	6.987805406109313	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: celestial objects, r0.rel: classify) => celestial objects
What do scientists classify?	creatures	6.936663270739633	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures
What do scientists classify?	soils	6.936663270739633	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils
What do scientists classify?	tarsiers	6.936663270739633	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers
What do scientists classify?	pinnipedia	6.936663270739633	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia
What do scientists classify?	white dwarfs	6.884537998012359	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Astronomers, r0.namespace: reverb, r0.arg2: white dwarfs, r0.rel: classify as) => white dwarfs
What do scientists classify?	asteroids	6.884537998012359	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers group, r0.namespace: reverb, r0.arg2: Asteroids, r0.rel: classify) => Asteroids; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: planetary astronomers, r0.namespace: reverb, r0.arg2: asteroids, r0.rel: have classified) => asteroids
What do scientists classify?	ceres	6.884537998012359	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: reverb, r0.arg2: Ceres, r0.rel: also classified) => Ceres
What do scientists classify?	chiron	6.884537998012359	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Astronomers, r0.namespace: reverb, r0.arg2: Chiron, r0.rel: originally classified) => Chiron; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: some astronomers, r0.namespace: reverb, r0.arg2: Chiron, r0.rel: wanted to classify) => Chiron
What do scientists classify?	vesta	6.884537998012359	what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Some astronomers, r0.namespace: reverb, r0.arg2: Vesta, r0.rel: classify) => Vesta
What do scientists classify?	least 200 years	6.844338133382056	what do scientist classify for ? => $x: (scientist, classify for, $x) => $x: (scientist, classify for, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: at least 200 years, r0.rel: classify for) => at least 200 years
What do scientists classify?	pluto	6.8329042939638835	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: the scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: trying to classify) => Pluto; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: the astronomers, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classifying) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: astronomers, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: re-classified) => Pluto; what do astronomer classify ? => $x: (astronomer, classify, $x) => $x: (astronomer, classify, $x) => (r0.arg1: Some astronomers, r0.namespace: reverb, r0.arg2: Pluto, r0.rel: would classify) => Pluto; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Pluto, r0.rel: classify) => Pluto
What do scientists classify?	ngc 4945	6.553567042472949	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945
What do scientists classify?	system	6.553567042472949	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a system, r0.rel: classify) => a system; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: a system, r0.rel: classify) => a system
What do scientists classify?	living organisms	6.553567042472949	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: biologists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: living organisms, r0.rel: classify) => living organisms
What do scientists classify?	solar flares	6.553567042472949	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: solar flares, r0.rel: classify) => solar flares
What do scientists classify?	clouds	6.490610497018389	what do meteorologist classify ? => $x: (meteorologist, classify, $x) => $x: (meteorologist, classify, $x) => (r0.arg1: Meteorologists, r0.namespace: reverb, r0.arg2: clouds, r0.rel: classify) => clouds; what do meteorologist classify ? => $x: (meteorologist, classify, $x) => $x: (meteorologist, classify, $x) => (r0.arg1: Meteorologists, r0.namespace: openie4, r0.arg2: clouds, r0.rel: classify) => clouds; what do meteorologist classify ? => $x: (meteorologist, classify, $x) => $x: (meteorologist, classify, $x) => (r0.arg1: meteorologists, r0.namespace: reverb, r0.arg2: clouds, r0.rel: classify) => clouds
What do scientists classify?	photon	6.450299634375996	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: openie4, r0.arg2: a photon, r0.rel: classifies) => a photon; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: the scientist, r0.namespace: reverb, r0.arg2: a photon, r0.rel: classifies) => a photon
What do scientists classify?	plant life	6.450299634375996	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: The scientists, r0.namespace: openie4, r0.arg2: plant life, r0.rel: classify) => plant life
What do scientists classify?	island	6.387343088921435	what do meteorologist classify ? => $x: (meteorologist, classify, $x) => $x: (meteorologist, classify, $x) => (r0.arg1: Meteorologists, r0.namespace: reverb, r0.arg2: the island, r0.rel: officially classify) => the island
What do scientists classify?	life	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do biologist classify ? => $x: (biologist, classify, $x) => $x: (biologist, classify, $x) => (r0.arg1: Biologists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do scientist classify to ? => $x: (scientist, classify to, $x) => $x: (scientist, classify to, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: started to classify) => life; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life
What do scientists classify?	strong solar flares	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: strong solar flares, r0.rel: classify) => strong solar flares
What do scientists classify?	hypersonic speeds	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds
What do scientists classify?	meteor storm	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: a meteor storm, r0.rel: classify) => a meteor storm
What do scientists classify?	indians	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: Indians, r0.rel: classified) => Indians; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: Indians, r0.rel: classified) => Indians
What do scientists classify?	precipitation types	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: precipitation types, r0.rel: classify) => precipitation types
What do scientists classify?	horse fossils	6.321748860654768	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils; what do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils; who do scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils; what be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils; what have scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils; who be scientist classify ? => $x: (scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: horse fossils, r0.rel: classify) => horse fossils
Who is the author of the graphic novel - Watchmen?	whitson?s subject	16.315099224291437	who be the author of the graphic novel watchman ? => $x: ($x, be the author of, the graphic novel watchman) => $x: ($x, be the author of, the graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel watchman ? => $x: ($x, be the author of, the graphic novel watchman) => $x: ($x, be the author of, the graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman graphic novel ? => $x: ($x, be the author of, the watchman graphic novel) => $x: ($x, be the author of, the watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman graphic novel ? => $x: ($x, be the author of, the watchman graphic novel) => $x: ($x, be the author of, the watchman graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of graphic novel watchman ? => $x: ($x, be the author of, graphic novel watchman) => $x: ($x, be the author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of graphic novel watchman ? => $x: ($x, be the author of, graphic novel watchman) => $x: ($x, be the author of, graphic novel watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel the watchman ? => $x: ($x, be the author of, the graphic novel the watchman) => $x: ($x, be the author of, the graphic novel the watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic novel the watchman ? => $x: ($x, be the author of, the graphic novel the watchman) => $x: ($x, be the author of, the graphic novel the watchman) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic watchman novel ? => $x: ($x, be the author of, the graphic watchman novel) => $x: ($x, be the author of, the graphic watchman novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the graphic watchman novel ? => $x: ($x, be the author of, the graphic watchman novel) => $x: ($x, be the author of, the graphic watchman novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman the graphic novel ? => $x: ($x, be the author of, the watchman the graphic novel) => $x: ($x, be the author of, the watchman the graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject; who be the author of the watchman the graphic novel ? => $x: ($x, be the author of, the watchman the graphic novel) => $x: ($x, be the author of, the watchman the graphic novel) => (r0.arg1: Whitson?s subject, r0.namespace: reverb, r0.arg2: the Watchmen graphic novel, r0.rel: is the author of) => Whitson?s subject
Name the temperature measuring instrument?	thermometer	8.954884842452268	what be temperature measure instrument ? => $x: ($x, be, temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer
Where is mayans country?	mexico	8.073080315200254	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan civilization, r0.namespace: reverb, r0.arg2: Mexico, r0.rel: had developed cities in) => Mexico; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan country, r0.rel: is) => Mexico
Where is mayans country?	guatemala	7.949159425483911	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: this Mayan city, r0.rel: must have been like in) => Guatemala; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: an ancient Mayan king, r0.namespace: reverb, r0.arg2: Guatemala, r0.rel: has been discovered in) => Guatemala; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan & Catholic faiths, r0.namespace: reverb, r0.arg2: Guatemala, r0.rel: have merged in) => Guatemala; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala
Where is mayans country?	common	7.285186769745684	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayans, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan account, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan calendar, r0.namespace: reverb, r0.arg2: common, r0.rel: have in) => common
Where is mayans country?	mind	7.20773621367297	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: openie4, r0.arg2: mind, r0.rel: had in) => mind; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: mind, r0.rel: had in) => mind; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: mind, r0.rel: have something else in) => mind
Where is mayans country?	honduras	7.16126588002934	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan history, r0.namespace: reverb, r0.arg2: Honduras, r0.rel: has created in) => Honduras
Where is mayans country?	anthropology	7.16126588002934	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan, r0.namespace: reverb, r0.arg2: anthropology, r0.rel: has a degree in) => anthropology
Where is mayans country?	tulum	7.13489448640024	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the only Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: a Mayan City, r0.rel: was) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: openie4, r0.arg2: the only Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: a spectacular Mayan city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was once the port of) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the largest Mayan coastal city, r0.rel: is) => Tulum; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tulum, r0.namespace: reverb, r0.arg2: the best preserved coastal Mayan cities, r0.rel: is one of) => Tulum
Where is mayans country?	harmony	7.130285657600254	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: harmony, r0.rel: have always lived in) => harmony
Where is mayans country?	prominence	7.130285657600254	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: prominence, r0.rel: have been lifted in) => prominence
Where is mayans country?	creation	7.108156927293765	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan work force, r0.namespace: reverb, r0.arg2: the creation, r0.rel: has participated in) => the creation
Where is mayans country?	acts	7.108156927293765	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan population, r0.namespace: reverb, r0.arg2: acts, r0.rel: has become manifest in) => acts
Where is mayans country?	yaxha	7.088424152756611	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Yaxha, r0.namespace: reverb, r0.arg2: a large Mayan city, r0.rel: was) => Yaxha
Where is mayans country?	palenque	7.088424152756611	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Palenque, r0.namespace: reverb, r0.arg2: an old Mayan city, r0.rel: is) => Palenque; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Palenque, r0.namespace: reverb, r0.arg2: the few Mayan cities, r0.rel: is one of) => Palenque
Where is mayans country?	satellite images	7.088424152756611	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: satellite images, r0.namespace: reverb, r0.arg2: Mayan cities, r0.rel: are helping uncover) => satellite images
Where is mayans country?	streets	7.088424152756611	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The streets, r0.namespace: reverb, r0.arg2: Mayan cities, r0.rel: are named after) => The streets
Where is mayans country?	chichen itza	7.0574439303275245	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: The Chichen Itza, r0.namespace: reverb, r0.arg2: the largest Mayan City, r0.rel: is) => The Chichen Itza; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: the most famous Mayan city, r0.rel: is) => Chichen Itza; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: a sprawling ancient Mayan city, r0.rel: is) => Chichen Itza
Where is mayans country?	becan	7.0574439303275245	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Becan, r0.namespace: reverb, r0.arg2: the only Mayan city, r0.rel: is also) => Becan
Where is mayans country?	toledo	7.0574439303275245	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Toledo, r0.namespace: reverb, r0.arg2: the Mayan cities, r0.rel: were concentrated in) => Toledo
Where is mayans country?	playa del carmen	7.0574439303275245	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Playa Del Carmen, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was spent at) => Playa Del Carmen
Where is mayans country?	tikal	7.035315200021035	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: all Mayan cities, r0.rel: was the grandest of) => Tikal; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: the largest Mayan cities, r0.rel: was once one of) => Tikal; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Tikal, r0.namespace: reverb, r0.arg2: an ancient Mayan city, r0.rel: is the site of) => Tikal
Where is mayans country?	comalcalco	7.035315200021035	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Comalcalco, r0.namespace: reverb, r0.arg2: the first and only Mayan city, r0.rel: is) => Comalcalco
Where is mayans country?	coba	7.035315200021035	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: reverb, r0.arg2: the largest Mayan Cities, r0.rel: is one of) => Coba; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: openie4, r0.arg2: the largest Mayan cities, r0.rel: was one of) => Coba; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Coba, r0.namespace: openie4, r0.arg2: one of the largest Mayan cities, r0.rel: was) => Coba
Where is mayans country?	yaxuna	7.035315200021035	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Yaxuna, r0.namespace: reverb, r0.arg2: a minor Mayan world city, r0.rel: may be) => Yaxuna
Where is mayans country?	belize	7.018718652291167	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: openie4, r0.arg2: several Mayan city states, r0.rel: was the site of) => Belize; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: reverb, r0.arg2: several Mayan city states, r0.rel: was the site of) => Belize; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Belize, r0.namespace: openie4, r0.arg2: the site of several Mayan city states, r0.rel: was) => Belize
Where is mayans country?	lamanai	7.018718652291167	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Lamanai, r0.namespace: reverb, r0.arg2: the longest occupied Mayan cities, r0.rel: is one of) => Lamanai
Where is mayans country?	central america	6.60519674320026	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan ball game, r0.namespace: openie4, r0.arg2: the Central America, r0.rel: had been played in) => the Central America; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan ball game, r0.namespace: reverb, r0.arg2: the Central America, r0.rel: had been played in) => the Central America
Where is mayans country?	recent years	6.489554395491151	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayans, r0.namespace: reverb, r0.arg2: recent years, r0.rel: has skyrocketed in) => recent years; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan calendar, r0.namespace: reverb, r0.arg2: recent years, r0.rel: has surged in) => recent years
Where is mayans country?	last day	6.443084061847523	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: mayan calendar, r0.namespace: reverb, r0.arg2: the last day, r0.rel: have jumped in) => the last day
Where is mayans country?	rainforest	6.443084061847523	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan descent, r0.namespace: reverb, r0.arg2: the rainforest, r0.rel: have lived in) => the rainforest
Where is mayans country?	headlines	6.443084061847523	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: The Mayans, r0.namespace: reverb, r0.arg2: the headlines, r0.rel: have been in) => the headlines
Where is mayans country?	constant war	6.443084061847523	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan cities, r0.namespace: reverb, r0.arg2: constant war, r0.rel: have been in) => constant war; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan city-states, r0.namespace: reverb, r0.arg2: constant war, r0.rel: had been in) => constant war
Where is mayans country?	mouth	6.4167126682184215	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: the mouth, r0.namespace: reverb, r0.arg2: a Mayan City, r0.rel: is) => the mouth
Where is mayans country?	merida	6.4167126682184215	who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: openie4, r0.arg2: a Mayan city, r0.rel: is) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: reverb, r0.arg2: a Mayan city, r0.rel: is) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: reverb, r0.arg2: the Mayan city, r0.rel: was built over) => Merida; who be mayan city ? => $x: ($x, be, mayan city) => $x: ($x, be, mayan city) => (r0.arg1: Merida, r0.namespace: openie4, r0.arg2: the site of the Mayan city of Tihoo, r0.rel: was founded on) => Merida
Where is mayans country?	valleys	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan settlement, r0.namespace: reverb, r0.arg2: the valleys, r0.rel: have been found in) => the valleys
Where is mayans country?	rebellion	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: rebellion, r0.rel: have risen up in) => rebellion
Where is mayans country?	place	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans, r0.namespace: reverb, r0.arg2: place, r0.rel: already had a system in) => place; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Guatemalan Mayan immigrants, r0.namespace: reverb, r0.arg2: a place, r0.rel: have settled in) => a place; where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan and Western calendars, r0.namespace: reverb, r0.arg2: place, r0.rel: has been in) => place
Where is mayans country?	neck	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan Herman, r0.namespace: reverb, r0.arg2: the neck, r0.rel: have chronic pain in) => the neck
Where is mayans country?	store	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan doomsday, r0.namespace: reverb, r0.arg2: store, r0.rel: might have in) => store
Where is mayans country?	el cedral	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan farmers, r0.namespace: reverb, r0.arg2: El Cedral, r0.rel: had settled in) => El Cedral
Where is mayans country?	past	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: The Mayans, r0.namespace: reverb, r0.arg2: the past, r0.rel: have been accurate in) => the past
Where is mayans country?	refrigerator	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan chocolate, r0.namespace: reverb, r0.arg2: the refrigerator, r0.rel: has hardened in) => the refrigerator
Where is mayans country?	cyclical time flow	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: The Mayans, r0.namespace: reverb, r0.arg2: a cyclical time flow, r0.rel: had a belief in) => a cyclical time flow
Where is mayans country?	endings	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayans didnt, r0.namespace: reverb, r0.arg2: endings, r0.rel: have faith in) => endings
Where is mayans country?	espinosa?s birthplace	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan culture, r0.namespace: reverb, r0.arg2: Espinosa?s birthplace, r0.rel: has its origins in) => Espinosa?s birthplace
Where is mayans country?	small florida town	6.412103839418437	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan families, r0.namespace: reverb, r0.arg2: a small Florida town, r0.rel: have taken refuge in) => a small Florida town
Where is mayans country?	basement	6.389975109111946	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan culture objects, r0.namespace: reverb, r0.arg2: the basement, r0.rel: have spent decades in) => the basement
Where is mayans country?	yucatan	6.389975109111946	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan priesthood, r0.namespace: reverb, r0.arg2: Yucatan, r0.rel: may have done in) => Yucatan
Where is mayans country?	san lucas	6.389975109111946	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: the Mayan temples, r0.namespace: reverb, r0.arg2: San Lucas, r0.rel: has been found in) => San Lucas
Where is mayans country?	ruins	6.389975109111946	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: Mayan temples, r0.namespace: reverb, r0.arg2: the ruins, r0.rel: have been found intact in) => the ruins
Where is mayans country?	third place	6.389975109111946	where do mayan have ? => $x: (mayan, have in, $x) => $x: (mayan, have in, $x) => (r0.arg1: The Mayan system, r0.namespace: reverb, r0.arg2: the third place, r0.rel: had an irregularity in) => the third place
What color are wedding dresses?	company	8.376615042473006	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: a company, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: producing) => a company
What color are wedding dresses?	vertical force	8.067346304582111	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: the vertical force, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: will produce) => the vertical force
What color are wedding dresses?	more high street stores	8.067346304582111	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: more high street stores, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are producing) => more high street stores
What color are wedding dresses?	gold	8.067346304582111	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: the gold, r0.namespace: reverb, r0.arg2: your wedding dresses, r0.rel: produce) => the gold
What color are wedding dresses?	reddish	8.01325063437603	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish
What color are wedding dresses?	firm	7.9898957485093955	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: a firm, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is specialised in producing) => a firm
What color are wedding dresses?	envy	7.441562587927507	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Envy, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wore) => Envy
What color are wedding dresses?	marie osmond	7.364112031854793	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Marie Osmond, r0.namespace: reverb, r0.arg2: first wedding dress, r0.rel: wears) => Marie Osmond
What color are wedding dresses?	lavinia	7.364112031854793	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => Lavinia; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: reverb, r0.arg2: a white wedding dress, r0.rel: wore) => Lavinia; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Lavinia, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: wore) => Lavinia
What color are wedding dresses?	modern brides	7.336375779432993	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: modern brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are choosing) => modern brides; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: modern brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are picking out) => modern brides
What color are wedding dresses?	nadine schiff	7.320875970938481	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: Nadine Schiff, r0.namespace: freebase, r0.arg2: The Wedding Dress, r0.rel: Films Produced) => Nadine Schiff
What color are wedding dresses?	sarah black	7.320875970938481	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: Sarah Black, r0.namespace: freebase, r0.arg2: The Wedding Dress, r0.rel: Films Produced) => Sarah Black
What color are wedding dresses?	amaya	7.317641698211164	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Amaya, r0.namespace: reverb, r0.arg2: her white wedding dress, r0.rel: wore) => Amaya
What color are wedding dresses?	hs	7.317641698211164	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: HS, r0.namespace: reverb, r0.arg2: a pink wedding dress, r0.rel: wore) => HS
What color are wedding dresses?	jacqueline kennedy	7.317641698211164	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Jacqueline Kennedy, r0.namespace: reverb, r0.arg2: his designer wedding dress, r0.rel: wore) => Jacqueline Kennedy
What color are wedding dresses?	beverly hills	7.317641698211164	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Beverly Hills, r0.namespace: reverb, r0.arg2: a Blue Wedding Dress, r0.rel: Wears) => Beverly Hills
What color are wedding dresses?	red	7.295068816194213	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red
What color are wedding dresses?	most striking	7.295068816194213	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: the most striking, r0.namespace: reverb, r0.arg2: deep beach wedding dresses colors, r0.rel: are) => the most striking
What color are wedding dresses?	white ivory	7.295068816194213	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white or ivory, r0.namespace: reverb, r0.arg2: all acceptable wedding dress colors, r0.rel: are) => white or ivory
What color are wedding dresses?	wedding dress	7.295068816194213	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress
What color are wedding dresses?	22 juin 2011 ? 04 :07	7.295068816194213	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: 22 Juin 2011 ? 04 :07, r0.namespace: reverb, r0.arg2: some great wedding dress colors, r0.rel: are) => 22 Juin 2011 ? 04 :07
What color are wedding dresses?	flat flower decoration	7.295068816194213	what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: flat flower decoration, r0.namespace: reverb, r0.arg2: Colored Wedding Dresses, r0.rel: tended to be) => flat flower decoration
What color are wedding dresses?	bride	7.295068816194213	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The bride, r0.namespace: openie4, r0.arg2: her wedding dress, r0.rel: wears) => The bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Bride, r0.namespace: openie4, r0.arg2: the wedding dress, r0.rel: wearing) => the Bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The bride, r0.namespace: reverb, r0.arg2: a black wedding dress, r0.rel: wore) => The bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Bride, r0.namespace: reverb, r0.arg2: a destination wedding dress, r0.rel: wears) => the Bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a White wedding dress, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a red wedding dress, r0.rel: wore) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: a bride, r0.namespace: openie4, r0.arg2: her mothers  wedding dress, r0.rel: wearing) => a bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a black wedding dress, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: openie4, r0.arg2: a formal wedding dresses, r0.rel: wears) => the bride; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: 3 wedding dresses, r0.rel: wore) => the bride; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: the bride, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: was) => the bride
What color are wedding dresses?	white	7.295068816194213	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: The white, r1.rel: would make, r0.namespace: openie4, r1.arg2: a delightful wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color make wedding dress ? => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => $x: ($x, "is a kind of", color) ($x, make, wedding dress) => (r0.arg1: White, r1.rel: would make, r0.namespace: reverb, r1.arg2: a delightful wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "type", color) ($x, have, wedding dress) => $x: ($x, "type", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color have wedding dress ? => $x: ($x, "is a", color) ($x, have, wedding dress) => $x: ($x, "is a", color) ($x, have, wedding dress) => (r0.arg1: WHITE, r1.rel: has been used for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color have wedding dress ? => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color have wedding dress ? => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => $x: ($x, "is a kind of", color) ($x, have, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White
What color are wedding dresses?	brides	7.295068816194213	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: red wedding dresses, r0.rel: wore) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: bright colored wedding dresses, r0.rel: wear) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: colored wedding dresses, r0.rel: wearing) => brides; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: brides, r0.namespace: openie4, r0.arg2: their wedding dress, r0.rel: wear) => brides; what be color wedding dress ? => $x: ($x, be, color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides
What color are wedding dresses?	david manson	7.2898957485093945	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: David Manson, r0.namespace: freebase, r0.arg2: The Wedding Dress, r0.rel: Films Executive Produced) => David Manson
What color are wedding dresses?	arla sorkin manson	7.2898957485093945	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: Arla Sorkin Manson, r0.namespace: freebase, r0.arg2: The Wedding Dress, r0.rel: Films Executive Produced) => Arla Sorkin Manson
What color are wedding dresses?	frank zappa	7.251170470473037	what produced wedding dress ? => $x: ($x, produced, wedding dress) => $x: ($x, produced, wedding dress) => (r0.arg1: Frank Zappa, r0.namespace: freebase, r0.arg2: Wedding Dress Song/The Handsome Cabin Boy, r0.rel: Tracks produced) => Frank Zappa
What color are wedding dresses?	apache	6.877748395491157	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the Apache, r0.namespace: openie4, r0.arg2: the wedding dress, r0.rel: wearing) => the Apache
What color are wedding dresses?	kristen	6.877748395491157	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Kristen, r0.namespace: openie4, r0.arg2: the Wedding Dress, r0.rel: wearing) => Kristen
What color are wedding dresses?	princess	6.877748395491157	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the princess, r0.namespace: openie4, r0.arg2: her wedding dress, r0.rel: wearing) => the princess
What color are wedding dresses?	queen victoria	6.831278061847527	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Queen Victoria, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => Queen Victoria
What color are wedding dresses?	british queen victoria	6.831278061847527	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the British Queen Victoria, r0.namespace: openie4, r0.arg2: a white wedding dress, r0.rel: wore) => the British Queen Victoria
What color are wedding dresses?	2011	6.72338076974569	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: 2011, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => 2011
What color are wedding dresses?	english bridesmaids	6.72338076974569	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: English bridesmaids, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => English bridesmaids
What color are wedding dresses?	girls	6.72338076974569	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: The girls, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: wear) => The girls
What color are wedding dresses?	keeley	6.72338076974569	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Keeley, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wears) => Keeley
What color are wedding dresses?	fashion evening	6.72338076974569	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: fashion and evening, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: wear) => fashion and evening
What color are wedding dresses?	vietnam brides	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Vietnam brides, r0.namespace: reverb, r0.arg2: red wedding dresses, r0.rel: wear) => Vietnam brides
What color are wedding dresses?	karin	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Karin, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wear) => Karin
What color are wedding dresses?	reason women	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the reason women, r0.namespace: reverb, r0.arg2: white wedding dresses, r0.rel: wear) => the reason women
What color are wedding dresses?	jimmy choo female cat	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: a Jimmy Choo female cat, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: wear) => a Jimmy Choo female cat
What color are wedding dresses?	kisho	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Kisho, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wear) => Kisho
What color are wedding dresses?	sixth bride	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: the sixth bride, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: wore) => the sixth bride
What color are wedding dresses?	xd agito	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: XD agito, r0.namespace: reverb, r0.arg2: that wedding dress, r0.rel: wore) => XD agito
What color are wedding dresses?	groomsmen	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: groomsmen, r0.namespace: reverb, r0.arg2: formal wedding dress, r0.rel: wear) => groomsmen
What color are wedding dresses?	strauss	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Strauss, r0.namespace: reverb, r0.arg2: two wedding dresses, r0.rel: wore) => Strauss
What color are wedding dresses?	ages	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: ages, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => ages
What color are wedding dresses?	one woman	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: One woman, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: wore) => One woman; who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: One woman, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: wore) => One woman
What color are wedding dresses?	rachel	6.645930213672974	who wear wedding dress ? => $x: ($x, wear, wedding dress) => $x: ($x, wear, wedding dress) => (r0.arg1: Rachel, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: wore) => Rachel
